{"version":3,"sources":["views/Nft/market/hooks/useAllPancakeBunnyNfts.ts","views/Nft/market/Collection/Items/CollectionNfts.tsx","views/Nft/market/Collection/Items/index.tsx","../node_modules/lodash/times.js","../node_modules/lodash/toInteger.js","../node_modules/lodash/_castFunction.js","components/AddressInputSelect/index.tsx","views/Nft/market/components/MarketPageHeader.tsx","views/Nft/market/components/StatBox.tsx","views/Nft/market/components/GridPlaceholder.tsx","views/Nft/market/components/BannerHeader/AvatarImage.tsx","views/Nft/market/components/SearchBar.tsx","views/Nft/market/components/MarketPageTitle.tsx","views/Nft/market/components/BaseSubMenu.tsx","views/Nft/market/components/BannerHeader/BannerImage.tsx","views/Nft/market/components/BannerHeader/index.tsx","views/Nft/market/Collection/TopBar.tsx","views/Nft/market/Collection/LowestPriceStatBoxItem.tsx","views/Nft/market/Collection/Header.tsx"],"names":["useAllPancakeBunnyNfts","collectionAddress","useState","allPancakeBunnyNfts","setAllPancakeBunnyNfts","isPBCollection","pancakeBunniesAddress","useEffect","a","getNftsFromCollectionApi","data","bunnyIds","Object","keys","getAllPancakeBunniesLowestPrice","lowestPrices","getAllPancakeBunniesRecentUpdatedAt","latestUpdates","allBunnies","map","bunnyId","tokenId","name","description","collectionName","collection","image","attributes","traitType","value","displayType","meta","currentAskPrice","updatedAt","fetchPancakeBunnies","CollectionNfts","sortBy","address","checksummedAddress","getAddress","dispatch","useAppDispatch","fetchNftsFromCollections","nfts","useNftsFromCollection","currentNfts","filter","nft","marketData","isTradable","GridPlaceholder","nftsToShow","orderBy","Number","gridGap","gridTemplateColumns","alignItems","Items","useParams","setSortBy","t","useTranslation","useGetCollection","sortByItems","label","fetchCollection","Header","Page","justifyContent","mb","minWidth","fontSize","textTransform","color","fontWeight","Select","options","onOptionChange","newOption","baseTimes","require","castFunction","toInteger","MAX_ARRAY_LENGTH","nativeMin","Math","min","module","exports","n","iteratee","index","length","result","toFinite","remainder","identity","ResultStatus","SubMenu","styled","div","theme","colors","input","inputSecondary","radii","default","isOpen","AddressLink","Text","initialState","isFetching","resultFound","NOT_VALID","defaultValidAddressHandler","Promise","resolve","AddressInputSelect","onValidAddress","onAddressClick","props","state","setState","isAddress","prevState","hasResults","FOUND","NOT_FOUND","validAddressHandler","position","placeholder","subject","toLowerCase","onChange","evt","newValue","target","style","zIndex","paddingRight","top","right","onClick","px","MarketPageHeader","background","useTheme","isDark","StatBoxItem","title","stat","textAlign","height","width","mx","StatBox","Flex","invertedContrast","cardBorder","card","GridPlaceholderItem","numItems","times","itemKey","AvatarImage","attrs","alt","src","borderColor","SearchBar","history","useHistory","push","nftsBaseUrl","MarketPageTitle","children","as","scale","BaseSubMenu","SubMenuItems","StyledBannerImage","mediaQueries","sm","md","BannerHeader","bannerImage","bannerAlt","avatar","flexDirection","pb","BannerImage","bottom","left","BackLink","RouterLink","primary","TopBar","to","LowestPriceStatBoxItem","lowestPrice","setLowestPrice","getLowestPriceInCollection","lowestCollectionPrice","fetchLowestPrice","formattedLowestPrice","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","symbol","totalSupply","numberTokensListed","totalVolumeBNB","banner","useLocation","pathname","hash","volume","parseFloat","itemsConfig","href","large","formatNumber","Container","items","activeItem","mt"],"mappings":"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","file":"static/js/12.dd6fafac.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\nimport {\n  getAllPancakeBunniesLowestPrice,\n  getAllPancakeBunniesRecentUpdatedAt,\n  getNftsFromCollectionApi,\n} from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from '../constants'\n\n// If collection is PancakeBunnies - gets all available bunnies, otherwise - null\nconst useAllPancakeBunnyNfts = (collectionAddress: string) => {\n  const [allPancakeBunnyNfts, setAllPancakeBunnyNfts] = useState<NftToken[]>(null)\n\n  const isPBCollection = collectionAddress === pancakeBunniesAddress\n\n  useEffect(() => {\n    const fetchPancakeBunnies = async () => {\n      // In order to not define special TS type just for PancakeBunnies display we're hacking a little bit into NftToken type.\n      // On this page we just want to display all bunnies with their lowest prices and updates on the market\n      // Since some bunnies might not be on the market at all, we don't refer to the redux nfts state (which stores NftToken with actual token ids)\n      // We merely request from API all available bunny ids with their metadata and query subgraph for lowest price and latest updates.\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      const bunnyIds = Object.keys(data)\n      const lowestPrices = await getAllPancakeBunniesLowestPrice(bunnyIds)\n      const latestUpdates = await getAllPancakeBunniesRecentUpdatedAt(bunnyIds)\n      const allBunnies: NftToken[] = bunnyIds.map((bunnyId) => {\n        return {\n          // tokenId here is just a dummy one to satisfy TS. TokenID does not play any role in gird display below\n          tokenId: data[bunnyId].name,\n          name: data[bunnyId].name,\n          description: data[bunnyId].description,\n          collectionAddress: pancakeBunniesAddress,\n          collectionName: data[bunnyId].collection.name,\n          image: data[bunnyId].image,\n          attributes: [\n            {\n              traitType: 'bunnyId',\n              value: bunnyId,\n              displayType: null,\n            },\n          ],\n          meta: {\n            currentAskPrice: lowestPrices[bunnyId],\n            updatedAt: latestUpdates[bunnyId],\n          },\n        }\n      })\n      setAllPancakeBunnyNfts(allBunnies)\n    }\n    if (isPBCollection && !allPancakeBunnyNfts) {\n      fetchPancakeBunnies()\n    }\n  }, [isPBCollection, allPancakeBunnyNfts])\n\n  return allPancakeBunnyNfts\n}\n\nexport default useAllPancakeBunnyNfts\n","import React, { useEffect } from 'react'\nimport { Grid } from '@pancakeswap/uikit'\nimport { getAddress } from '@ethersproject/address'\nimport orderBy from 'lodash/orderBy'\nimport { useAppDispatch } from 'state'\nimport { useNftsFromCollection } from 'state/nftMarket/hooks'\nimport { Collection } from 'state/nftMarket/types'\nimport { fetchNftsFromCollections } from 'state/nftMarket/reducer'\nimport GridPlaceholder from '../../components/GridPlaceholder'\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\nimport { pancakeBunniesAddress } from '../../constants'\nimport useAllPancakeBunnyNfts from '../../hooks/useAllPancakeBunnyNfts'\n\ninterface CollectionNftsProps {\n  collection: Collection\n  sortBy?: string\n}\n\nconst CollectionNfts: React.FC<CollectionNftsProps> = ({ collection, sortBy = 'updatedAt' }) => {\n  const { address } = collection\n  const checksummedAddress = getAddress(address)\n  const dispatch = useAppDispatch()\n\n  const isPBCollection = address === pancakeBunniesAddress\n\n  useEffect(() => {\n    dispatch(fetchNftsFromCollections(checksummedAddress))\n  }, [checksummedAddress, dispatch])\n\n  const nfts = useNftsFromCollection(checksummedAddress)\n  const allPancakeBunnyNfts = useAllPancakeBunnyNfts(address)\n\n  const currentNfts = isPBCollection ? allPancakeBunnyNfts : nfts?.filter((nft) => nft.marketData.isTradable)\n\n  if (!currentNfts) {\n    return <GridPlaceholder />\n  }\n\n  const nftsToShow = orderBy(\n    currentNfts,\n    (nft) => (isPBCollection ? nft.meta[sortBy] : Number(nft.marketData[sortBy])),\n    [sortBy === 'currentAskPrice' ? 'asc' : 'desc'],\n  )\n\n  return (\n    <Grid\n      gridGap=\"16px\"\n      gridTemplateColumns={['1fr', null, 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n      alignItems=\"start\"\n    >\n      {nftsToShow.map((nft) => {\n        return <CollectibleLinkCard key={`${nft.tokenId}-${nft.collectionName}`} nft={nft} />\n      })}\n    </Grid>\n  )\n}\n\nexport default CollectionNfts\n","import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router'\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\nimport { useAppDispatch } from 'state'\nimport { fetchCollection } from 'state/nftMarket/reducer'\nimport { useGetCollection } from 'state/nftMarket/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Page from 'components/Layout/Page'\nimport CollectionNfts from './CollectionNfts'\nimport Header from '../Header'\n\nconst Items = () => {\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\n  const [sortBy, setSortBy] = useState('updatedAt')\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const collection = useGetCollection(collectionAddress)\n  const { address } = collection || {}\n\n  const sortByItems = [\n    { label: t('Recently listed'), value: 'updatedAt' },\n    { label: t('Lowest price'), value: 'currentAskPrice' },\n  ]\n\n  const handleChange = (newOption: OptionProps) => {\n    setSortBy(newOption.value)\n  }\n\n  useEffect(() => {\n    if (address) {\n      dispatch(fetchCollection(address))\n    }\n  }, [address, dispatch])\n\n  return (\n    <>\n      <Header collection={collection} />\n      <Page>\n        <Flex alignItems=\"center\" justifyContent={['flex-start', null, null, 'flex-end']} mb=\"24px\">\n          <Box minWidth=\"165px\">\n            <Text fontSize=\"12px\" textTransform=\"uppercase\" color=\"textSubtle\" fontWeight={600} mb=\"4px\">\n              {t('Sort By')}\n            </Text>\n            <Select options={sortByItems} onOptionChange={handleChange} />\n          </Box>\n        </Flex>\n        <CollectionNfts collection={collection} sortBy={sortBy} />\n      </Page>\n    </>\n  )\n}\n\nexport default Items\n","var baseTimes = require('./_baseTimes'),\n    castFunction = require('./_castFunction'),\n    toInteger = require('./toInteger');\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMin = Math.min;\n\n/**\n * Invokes the iteratee `n` times, returning an array of the results of\n * each invocation. The iteratee is invoked with one argument; (index).\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n * @example\n *\n * _.times(3, String);\n * // => ['0', '1', '2']\n *\n *  _.times(4, _.constant(0));\n * // => [0, 0, 0, 0]\n */\nfunction times(n, iteratee) {\n  n = toInteger(n);\n  if (n < 1 || n > MAX_SAFE_INTEGER) {\n    return [];\n  }\n  var index = MAX_ARRAY_LENGTH,\n      length = nativeMin(n, MAX_ARRAY_LENGTH);\n\n  iteratee = castFunction(iteratee);\n  n -= MAX_ARRAY_LENGTH;\n\n  var result = baseTimes(length, iteratee);\n  while (++index < n) {\n    iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = times;\n","var toFinite = require('./toFinite');\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nmodule.exports = toInteger;\n","var identity = require('./identity');\n\n/**\n * Casts `value` to `identity` if it's not a function.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Function} Returns cast function.\n */\nfunction castFunction(value) {\n  return typeof value == 'function' ? value : identity;\n}\n\nmodule.exports = castFunction;\n","import React, { ChangeEvent, useState, useEffect } from 'react'\nimport { Box, BoxProps, Text, Input } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { isAddress } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport CircleLoader from 'components/Loader/CircleLoader'\n\nenum ResultStatus {\n  NOT_VALID,\n  FOUND,\n  NOT_FOUND,\n}\n\ninterface AddressInputSelectProps extends BoxProps {\n  onValidAddress?: (value: string) => Promise<boolean>\n  onAddressClick: (value: string) => void\n}\n\nconst SubMenu = styled.div<{ isOpen: boolean }>`\n  align-items: center;\n  background: ${({ theme }) => theme.colors.input};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 0 0 ${({ theme }) => theme.radii.default} ${({ theme }) => theme.radii.default};\n  left: 0;\n  padding-bottom: 8px;\n  padding-top: 16px;\n  position: absolute;\n  top: calc(100% - 12px);\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  width: 100%;\n  z-index: 15;\n\n  ${({ isOpen }) =>\n    isOpen &&\n    `\n    height: auto;\n    opacity: 1;\n    transform: scaleY(1);\n  `}\n`\n\nconst AddressLink = styled(Text)`\n  cursor: pointer;\n  overflow-wrap: break-word;\n  font-weight: bold;\n  padding-left: 16px;\n  padding-right: 16px;\n`\n\nconst initialState = {\n  isFetching: false,\n  resultFound: ResultStatus.NOT_VALID,\n  value: '',\n}\n\nconst defaultValidAddressHandler = () => Promise.resolve(true)\n\nconst AddressInputSelect: React.FC<AddressInputSelectProps> = ({\n  onValidAddress = defaultValidAddressHandler,\n  onAddressClick,\n  ...props\n}) => {\n  const [state, setState] = useState(initialState)\n  const { t } = useTranslation()\n  const { isFetching, resultFound, value } = state\n\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    const { value: newValue } = evt.target\n    setState((prevState) => ({\n      ...prevState,\n      value: newValue,\n    }))\n  }\n\n  const handleClick = () => {\n    setState(initialState)\n    onAddressClick(state.value)\n  }\n\n  // When we have a valid address fetch the data\n  useEffect(() => {\n    const isValidAddress = isAddress(value) !== false\n\n    const validAddressHandler = async () => {\n      try {\n        setState((prevState) => ({ ...prevState, isFetching: true }))\n        const hasResults = await onValidAddress(value)\n\n        setState((prevState) => ({\n          ...prevState,\n          isFetching: false,\n          resultFound: hasResults ? ResultStatus.FOUND : ResultStatus.NOT_FOUND,\n        }))\n      } catch {\n        setState((prevState) => ({ ...prevState, isFetching: false }))\n      }\n    }\n\n    if (isValidAddress) {\n      validAddressHandler()\n    } else {\n      setState((prevState) => ({ ...prevState, resultFound: ResultStatus.NOT_VALID }))\n    }\n  }, [value, onValidAddress, setState])\n\n  return (\n    <Box position=\"relative\" {...props}>\n      <Input\n        placeholder={t('Search %subject%', { subject: t('Address').toLowerCase() })}\n        value={state.value}\n        onChange={handleChange}\n        style={{ position: 'relative', zIndex: 16, paddingRight: '40px' }}\n      />\n      {isFetching && (\n        <Box position=\"absolute\" top=\"12px\" right=\"16px\" style={{ zIndex: 17 }}>\n          <CircleLoader />\n        </Box>\n      )}\n      <SubMenu isOpen={resultFound !== ResultStatus.NOT_VALID}>\n        {resultFound === ResultStatus.FOUND ? (\n          <AddressLink onClick={handleClick}>{state.value}</AddressLink>\n        ) : (\n          <Text px=\"16px\" fontWeight=\"bold\">\n            {t('No results found.')}\n          </Text>\n        )}\n      </SubMenu>\n    </Box>\n  )\n}\n\nexport default AddressInputSelect\n","import React from 'react'\nimport PageHeader, { PageHeaderProps } from 'components/PageHeader'\nimport useTheme from 'hooks/useTheme'\n\nconst MarketPageHeader: React.FC<PageHeaderProps> = (props) => {\n  const { theme } = useTheme()\n  const background = theme.isDark\n    ? 'linear-gradient(166.77deg, #3B4155 0%, #3A3045 100%)'\n    : 'linear-gradient(111.68deg, #f2ecf2 0%, #e8f2f6 100%)'\n  return <PageHeader background={background} {...props} />\n}\n\nexport default MarketPageHeader\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\n\nexport interface StatBoxItemProps extends BoxProps {\n  title: string\n  stat: string\n}\n\nexport const StatBoxItem: React.FC<StatBoxItemProps> = ({ title, stat, ...props }) => (\n  <Box {...props}>\n    <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\n      {title}\n    </Text>\n    {stat === null ? (\n      <Skeleton height=\"24px\" width=\"50%\" mx=\"auto\" />\n    ) : (\n      <Text fontWeight=\"600\" textAlign=\"center\">\n        {stat}\n      </Text>\n    )}\n  </Box>\n)\n\nconst StatBox = styled(Flex)`\n  align-items: center;\n  background: ${({ theme }) => theme.colors.invertedContrast};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.card};\n  justify-content: space-around;\n  padding: 8px;\n  width: 100%;\n`\n\nexport default StatBox\n","import React from 'react'\nimport { Box, BoxProps, Grid, GridProps, Skeleton } from '@pancakeswap/uikit'\nimport times from 'lodash/times'\n\ninterface GridPlaceholderProps extends GridProps {\n  numItems?: number\n}\n\nexport const GridPlaceholderItem: React.FC<BoxProps> = (props) => (\n  <Box {...props}>\n    <Skeleton height=\"252px\" mb=\"8px\" />\n    <Skeleton width=\"30%\" mb=\"4px\" />\n    <Skeleton width=\"45%\" mb=\"16px\" />\n    <Skeleton />\n  </Box>\n)\n\nconst GridPlaceholder: React.FC<GridPlaceholderProps> = ({ numItems = 12, ...props }) => (\n  <Grid gridGap=\"16px\" gridTemplateColumns={['1fr', null, null, 'repeat(4, 1fr)']} {...props}>\n    {times(numItems).map((itemKey) => (\n      <GridPlaceholderItem key={itemKey} />\n    ))}\n  </Grid>\n)\n\nexport default GridPlaceholder\n","import styled from 'styled-components'\n\ninterface AvatarImageProps {\n  src: string\n  borderColor?: string\n  alt?: string\n}\n\nconst AvatarImage = styled.div.attrs<AvatarImageProps>(({ alt }) => ({\n  alt,\n}))<AvatarImageProps>`\n  background: url('${({ src }) => src}');\n  background-repeat: no-repeat;\n  background-size: cover;\n  border-radius: 50%;\n  position: relative;\n  width: 96px;\n  height: 96px;\n  border: 4px ${({ borderColor }) => borderColor || '#f2ecf2'} solid;\n\n  & > img {\n    border-radius: 50%;\n  }\n`\n\nexport default AvatarImage\n","import React from 'react'\nimport { useHistory } from 'react-router-dom'\nimport AddressInputSelect from 'components/AddressInputSelect'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\n\nconst SearchBar: React.FC = (props) => {\n  const history = useHistory()\n\n  const handleAddressClick = (value: string) => {\n    history.push(`${nftsBaseUrl}/profile/${value}`)\n  }\n\n  return <AddressInputSelect onAddressClick={handleAddressClick} {...props} />\n}\n\nexport default SearchBar\n","import React, { ReactNode } from 'react'\nimport { Box, Grid, GridProps, Heading } from '@pancakeswap/uikit'\n\ninterface MarketPageTitleProps extends GridProps {\n  title: string\n  description?: ReactNode\n}\n\nconst MarketPageTitle: React.FC<MarketPageTitleProps> = ({ title, description, children, ...props }) => (\n  <Grid gridGap=\"16px\" alignItems=\"center\" gridTemplateColumns={['1fr', null, null, null, 'repeat(2, 1fr)']} {...props}>\n    <Box>\n      <Heading as=\"h1\" scale=\"xl\" color=\"secondary\" mb=\"16px\">\n        {title}\n      </Heading>\n      {description}\n    </Box>\n    <Box>{children}</Box>\n  </Grid>\n)\n\nexport default MarketPageTitle\n","import { SubMenuItems } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\n\nconst BaseSubMenu = styled(SubMenuItems)`\n  background-color: transparent;\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\n`\n\nexport default BaseSubMenu\n","import styled from 'styled-components'\n\ninterface StyledBannerImageProps {\n  src: string\n  alt?: string\n}\n\nconst StyledBannerImage = styled.div.attrs<StyledBannerImageProps>(({ alt }) => ({\n  alt,\n}))<StyledBannerImageProps>`\n  ${({ src, theme }) => (src ? `background-image: url('${src}')` : `background-color: ${theme.colors.cardBorder}`)};\n  background-image: url('${({ src }) => src}');\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n  flex: none;\n  width: 100%;\n  border-radius: 32px;\n  height: 123px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    height: 192px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    height: 256px;\n  }\n`\n\nexport default StyledBannerImage\n","import React, { ReactNode } from 'react'\nimport { Flex, Box, FlexProps } from '@pancakeswap/uikit'\nimport BannerImage from './BannerImage'\n\ninterface BannerHeaderProps extends FlexProps {\n  bannerImage: string\n  bannerAlt?: string\n  avatar?: ReactNode\n}\n\nconst BannerHeader: React.FC<BannerHeaderProps> = ({ bannerImage, bannerAlt, avatar, children, ...props }) => {\n  return (\n    <Flex flexDirection=\"column\" mb=\"24px\" {...props}>\n      <Box position=\"relative\" pb=\"56px\">\n        <BannerImage src={bannerImage} alt={bannerAlt} />\n        <Box position=\"absolute\" bottom={0} left={-4}>\n          <Flex alignItems=\"flex-end\">\n            {avatar}\n            {children}\n          </Flex>\n        </Box>\n      </Box>\n    </Flex>\n  )\n}\n\nexport default BannerHeader\n","import React from 'react'\nimport { Box, ChevronLeftIcon, Flex } from '@pancakeswap/uikit'\nimport { Link as RouterLink } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport SearchBar from '../components/SearchBar'\n\nconst BackLink = styled(RouterLink)`\n  align-items: center;\n  color: ${({ theme }) => theme.colors.primary};\n  display: inline-flex;\n  font-weight: 600;\n`\n\nconst TopBar: React.FC = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\n      <BackLink to={nftsBaseUrl}>\n        <ChevronLeftIcon color=\"primary\" width=\"24px\" />\n        {t('All Collections')}\n      </BackLink>\n      <Box>\n        <SearchBar />\n      </Box>\n    </Flex>\n  )\n}\n\nexport default TopBar\n","import React, { useEffect, useState } from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport { getLowestPriceInCollection } from 'state/nftMarket/helpers'\nimport { StatBoxItem, StatBoxItemProps } from '../components/StatBox'\n\ninterface LowestPriceStatBoxItemProps extends Omit<StatBoxItemProps, 'title' | 'stat'> {\n  collectionAddress: string\n}\n\nconst LowestPriceStatBoxItem: React.FC<LowestPriceStatBoxItemProps> = ({ collectionAddress, ...props }) => {\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\n  const { t } = useTranslation()\n\n  useEffect(() => {\n    const fetchLowestPrice = async () => {\n      const lowestCollectionPrice = await getLowestPriceInCollection(collectionAddress)\n      setLowestPrice(lowestCollectionPrice)\n    }\n\n    fetchLowestPrice()\n  }, [collectionAddress, setLowestPrice])\n\n  const formattedLowestPrice =\n    lowestPrice === null\n      ? null\n      : lowestPrice.toLocaleString(undefined, {\n          minimumFractionDigits: 3,\n          maximumFractionDigits: 3,\n        })\n\n  return <StatBoxItem title={t('Lowest (%symbol%)', { symbol: 'BNB' })} stat={formattedLowestPrice} {...props} />\n}\n\nexport default LowestPriceStatBoxItem\n","import React from 'react'\nimport { useLocation, useParams } from 'react-router'\nimport { Text } from '@pancakeswap/uikit'\nimport { Collection } from 'state/nftMarket/types'\nimport { formatNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport Container from 'components/Layout/Container'\nimport MarketPageHeader from '../components/MarketPageHeader'\nimport MarketPageTitle from '../components/MarketPageTitle'\nimport StatBox, { StatBoxItem } from '../components/StatBox'\nimport BannerHeader from '../components/BannerHeader'\nimport AvatarImage from '../components/BannerHeader/AvatarImage'\nimport BaseSubMenu from '../components/BaseSubMenu'\nimport { nftsBaseUrl } from '../constants'\nimport TopBar from './TopBar'\nimport LowestPriceStatBoxItem from './LowestPriceStatBoxItem'\n\ninterface HeaderProps {\n  collection: Collection\n}\n\nconst DEFAULT_TABS = '#items'\n\nconst Header: React.FC<HeaderProps> = ({ collection }) => {\n  const { collectionAddress } = useParams<{ collectionAddress: string }>()\n  const { totalSupply, numberTokensListed, totalVolumeBNB, banner, avatar } = collection\n  const { t } = useTranslation()\n  const { pathname, hash } = useLocation()\n\n  const volume = parseFloat(totalVolumeBNB).toLocaleString(undefined, {\n    minimumFractionDigits: 3,\n    maximumFractionDigits: 3,\n  })\n\n  const itemsConfig = [\n    {\n      label: t('Items'),\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#items`,\n    },\n    {\n      label: t('Traits'),\n      href: `${nftsBaseUrl}/collections/${collectionAddress}#traits`,\n    },\n  ]\n\n  return (\n    <>\n      <MarketPageHeader>\n        <TopBar />\n        <BannerHeader bannerImage={banner.large} avatar={<AvatarImage src={avatar} />} />\n        <MarketPageTitle\n          title={collection.name}\n          description={collection.description ? <Text color=\"textSubtle\">{t(collection.description)}</Text> : null}\n        >\n          <StatBox>\n            <StatBoxItem title={t('Items')} stat={formatNumber(Number(totalSupply), 0, 0)} />\n            <StatBoxItem title={t('Items listed')} stat={formatNumber(Number(numberTokensListed), 0, 0)} />\n            <LowestPriceStatBoxItem collectionAddress={collection.address} />\n            <StatBoxItem title={t('Vol. (%symbol%)', { symbol: 'BNB' })} stat={volume} />\n          </StatBox>\n        </MarketPageTitle>\n      </MarketPageHeader>\n      <Container>\n        <BaseSubMenu items={itemsConfig} activeItem={`${pathname}${hash || DEFAULT_TABS}`} mt=\"24px\" mb=\"8px\" />\n      </Container>\n    </>\n  )\n}\n\nexport default Header\n"],"sourceRoot":""}