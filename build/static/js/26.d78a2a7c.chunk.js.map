{"version":3,"sources":["views/Nft/market/components/BuySellModals/BuyModal/types.ts","views/Nft/market/components/BuySellModals/BuyModal/styles.tsx","views/Nft/market/components/BuySellModals/BuyModal/ReviewStage.tsx","views/Nft/market/components/BuySellModals/BuyModal/index.tsx","views/Nft/market/Collection/IndividualNFTPage/MainNFTCard.tsx","views/Nft/market/Collection/IndividualNFTPage/ExpandableCard.tsx","views/Nft/market/Collection/IndividualNFTPage/ManageCard.tsx","views/Nft/market/Collection/IndividualNFTPage/PropertiesCard.tsx","views/Nft/market/Collection/IndividualNFTPage/DetailsCard.tsx","views/Nft/market/Collection/IndividualNFTPage/MoreFromThisCollection.tsx","views/Nft/market/Collection/IndividualNFTPage/ForSaleTableCard/ForSaleTableRows.tsx","views/Nft/market/Collection/IndividualNFTPage/ForSaleTableCard/styles.ts","views/Nft/market/Collection/IndividualNFTPage/ForSaleTableCard/index.tsx","views/Nft/market/Collection/IndividualNFTPage/index.tsx","views/Nft/market/Collection/IndividualNFTPage/ForSaleTableCard/utils.ts"],"names":["PaymentCurrency","BuyingStage","StyledModal","styled","Modal","stage","theme","APPROVE_AND_CONFIRM","CONFIRM","colors","textSubtle","BorderedBox","Grid","background","cardBorder","radii","default","BnbAmountCell","bnbAmount","isLoading","isInsufficient","bnbBusdPrice","useBNBBusdPrice","flexDirection","justifySelf","width","height","mb","usdAmount","multiplyPriceByAmount","justifyContent","mr","bold","color","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","small","textAlign","ReviewStage","nftToBuy","paymentCurrency","setPaymentCurrency","nftPrice","walletBalance","walletFetchStatus","notEnoughBnbForPurchase","continueToNextStage","t","useTranslation","px","pt","src","image","thumbnail","fontSize","collectionName","name","alignItems","p","as","Link","scale","external","variant","href","getBscScanLinkForNft","collectionAddress","tokenId","activeIndex","onItemClick","index","symbol","BNB","FetchStatus","SUCCESS","my","BASE_URL","pb","onClick","disabled","style","symbol1","symbol2","modalTitles","REVIEW","TX_CONFIRMED","BuyModal","onDismiss","useState","setStage","confirmedTxHash","setConfirmedTxHash","useTheme","callWithGasPrice","useCallWithGasPrice","account","useWeb3React","wbnbContract","useERC20","tokens","wbnb","address","nftMarketContract","useNftMarketContract","toastSuccess","useToast","dispatch","useAppDispatch","nftPriceWei","parseUnits","marketData","currentAskPrice","parseFloat","useGetBnbBalance","bnbBalance","balance","bnbFetchStatus","fetchStatus","formattedBnbBalance","formatEther","useTokenBalance","wbnbBalance","wbnbFetchStatus","formattedWbnbBalance","getBalanceNumber","lt","ethersToBigNumber","useApproveConfirmTransaction","onRequiresApproval","a","allowance","currentAllowance","gt","onApprove","ethers","constants","MaxUint256","onApproveSuccess","receipt","Toast","txHash","transactionHash","onConfirm","payAmount","Number","isNaN","BigNumber","from","value","onSuccess","addUserNft","nftLocation","NftLocation","WALLET","isApproving","isApproved","isConfirming","handleApprove","handleConfirm","showBackButton","title","onBack","headerBackground","gradients","cardHeader","WBNB","ApproveAndConfirmStage","ConfirmStage","TransactionConfirmed","RoundedImage","Image","Container","Flex","CollectionLink","primary","mediaQueries","lg","MainNFTCard","cheapestNft","cheapestNftFromOtherSellers","nothingForSaleBunny","nftToDisplay","onlyOwnNftsOnSale","hasListings","priceInUsd","useModal","onPresentBuyModal","SellModal","nftToSell","onPresentAdjustPriceModal","actionButton","minWidth","mt","flex","to","nftsBaseUrl","description","expandAnimation","keyframes","collapseAnimation","ExpandableCardBody","Box","expanded","css","FullWidthCard","Card","ExpandableCard","icon","content","setExpanded","gridTemplateColumns","borderBottom","prev","maxWidth","ScrollableContainer","Divider","div","CollectibleRowContainer","LocationColors","FORSALE","PROFILE","LocationIcons","SellIcon","WalletFilledIcon","CameraIcon","CollectibleRow","nft","lowestPrice","modalVariant","location","ProfileNftModal","onPresentProfileNftModal","onPresentModal","mx","CollectiblesByLocation","nfts","IconComponent","display","map","ManageCard","bunnyId","useUserNfts","userNftsInitializationState","userNfts","useFetchUserNfts","bunniesInWallet","filter","attributes","bunniesForSale","profilePicBunny","loading","UserNftInitializationState","INITIALIZED","useHasNoBunnies","length","KNOWN_TRAITS_TEXT","SingleProperty","rarity","textTransform","PropertiesCard","properties","property","traitType","LongTextContainer","Text","DetailsCard","contractAddress","ipfsJson","chainId","useActiveWeb3React","getBscScanLink","SwiperCircle","isActive","secondary","textDisabled","StyledSwiper","md","MoreFromThisCollection","currentTokenName","swiperRef","setSwiperRef","setActiveIndex","useMatchBreakpoints","isMobile","isMd","isLg","nftList","useNftsFromCollection","slidesPerView","maxPageIndex","nftsToShow","isTradable","isAddress","pancakeBunniesAddress","reduce","nftArray","current","find","push","slice","spaceBetween","onSwiper","onActiveIndexChange","newActiveIndex","Math","ceil","slidesPerGroup","initialSlide","slidePrev","Array","keys","slideTo","goToSlide","slideNext","OwnersTableRow","ButtonContainer","Row","ownNft","currentSeller","toLowerCase","pl","formatNumber","ProfileCell","accountAddress","ForSaleTableRow","nftsForSale","StyledSortButton","button","StyledCard","hasManyPages","TableHeading","PageButtons","Arrow","ForSaleTableCard","totalForSale","loadMore","isFetchingMoreNfts","priceSort","togglePriceSort","page","setPage","itemsPerPage","useEffect","needsExtraPage","maxPage","floor","nftsOnCurrentPage","switchPage","pageNumber","loadMoreButton","size","ml","num","py","type","ForSaleTableRows","TwoColumnsContainer","IndividualNFTPage","useParams","attributesDistribution","setAttributesDistribution","setNothingForSaleBunny","allBunnies","useGetAllBunniesByBunnyId","setPriceSort","previousPriceSort","usePreviousValue","useFetchByBunnyId","latestFetchAt","fetchMorePancakeBunnies","fastRefresh","useRefresh","bunniesSortedByPrice","orderBy","allBunniesFromOtherSellers","bunny","cheapestBunny","cheapestBunnyFromOtherSellers","isPBCollection","Date","now","getNftsFromCollectionApi","apiResponse","fetchTokens","data","collection","displayType","fetchBasicBunnyData","sortedNfts","useMemo","sort","nftA","nftB","nftPriceA","nftPriceB","sortNFTsByPriceBuilder","PageLoader","propertyRarity","total","Object","values","acc","cur","toFixed","getBunnyIdRarity","Page","metadataUrl","currentValue"],"mappings":"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","file":"static/js/26.d78a2a7c.chunk.js","sourcesContent":["import { TokenMarketData, Image } from 'state/nftMarket/types'\n\nexport enum PaymentCurrency {\n  BNB,\n  WBNB,\n}\n\nexport enum BuyingStage {\n  REVIEW,\n  APPROVE_AND_CONFIRM,\n  CONFIRM,\n  TX_CONFIRMED,\n}\n\nexport interface BuyNFT {\n  collection: {\n    address: string\n    name: string\n  }\n  token: TokenMarketData\n  name: string\n  image: Image\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Modal, Grid, Flex, Text, BinanceIcon, Skeleton } from '@pancakeswap/uikit'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { BuyingStage } from './types'\n\nexport const StyledModal = styled(Modal)<{ stage: BuyingStage }>`\n  & > div:last-child {\n    padding: 0;\n  }\n  & h2:first-of-type {\n    ${({ stage, theme }) =>\n      stage === BuyingStage.APPROVE_AND_CONFIRM || stage === BuyingStage.CONFIRM\n        ? `color: ${theme.colors.textSubtle}`\n        : null};\n  }\n  & svg:first-of-type {\n    ${({ stage, theme }) =>\n      stage === BuyingStage.APPROVE_AND_CONFIRM || stage === BuyingStage.CONFIRM\n        ? `fill: ${theme.colors.textSubtle}`\n        : null};\n  }\n`\n\nexport const BorderedBox = styled(Grid)`\n  margin: 16px 0;\n  padding: 16px;\n  background-color: ${({ theme }) => theme.colors.background};\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  border-radius: ${({ theme }) => theme.radii.default};\n  grid-template-columns: 1fr 1fr;\n  grid-row-gap: 8px;\n`\n\ninterface BnbAmountCellProps {\n  bnbAmount: number\n  isLoading?: boolean\n  isInsufficient?: boolean\n}\n\nexport const BnbAmountCell: React.FC<BnbAmountCellProps> = ({ bnbAmount, isLoading, isInsufficient }) => {\n  const bnbBusdPrice = useBNBBusdPrice()\n  if (isLoading) {\n    return (\n      <Flex flexDirection=\"column\" justifySelf=\"flex-end\">\n        <Skeleton width=\"86px\" height=\"20px\" mb=\"6px\" />\n        <Skeleton width=\"86px\" height=\"20px\" />\n      </Flex>\n    )\n  }\n  const usdAmount = multiplyPriceByAmount(bnbBusdPrice, bnbAmount)\n  return (\n    <Flex justifySelf=\"flex-end\" flexDirection=\"column\">\n      <Flex justifyContent=\"flex-end\">\n        <BinanceIcon height={16} width={16} mr=\"4px\" />\n        <Text bold color={isInsufficient ? 'failure' : 'text'}>{`${bnbAmount.toLocaleString(undefined, {\n          minimumFractionDigits: 3,\n          maximumFractionDigits: 3,\n        })}`}</Text>\n      </Flex>\n      <Text small color=\"textSubtle\" textAlign=\"right\">\n        {`($${usdAmount.toLocaleString(undefined, {\n          minimumFractionDigits: 2,\n          maximumFractionDigits: 2,\n        })})`}\n      </Text>\n    </Flex>\n  )\n}\n","import React from 'react'\nimport { Flex, Text, Button, ButtonMenu, ButtonMenuItem, Message, Link } from '@pancakeswap/uikit'\nimport { FetchStatus } from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { BASE_URL } from 'config'\nimport { NftToken } from 'state/nftMarket/types'\nimport { getBscScanLinkForNft } from 'utils'\nimport { Divider, RoundedImage } from '../shared/styles'\nimport { BorderedBox, BnbAmountCell } from './styles'\nimport { PaymentCurrency } from './types'\n\ninterface ReviewStageProps {\n  nftToBuy: NftToken\n  paymentCurrency: PaymentCurrency\n  setPaymentCurrency: (index: number) => void\n  nftPrice: number\n  walletBalance: number\n  walletFetchStatus: FetchStatus\n  notEnoughBnbForPurchase: boolean\n  continueToNextStage: () => void\n}\n\nconst ReviewStage: React.FC<ReviewStageProps> = ({\n  nftToBuy,\n  paymentCurrency,\n  setPaymentCurrency,\n  nftPrice,\n  walletBalance,\n  walletFetchStatus,\n  notEnoughBnbForPurchase,\n  continueToNextStage,\n}) => {\n  const { t } = useTranslation()\n  return (\n    <>\n      <Flex px=\"24px\" pt=\"24px\" flexDirection=\"column\">\n        <Flex>\n          <RoundedImage src={nftToBuy.image.thumbnail} height={68} width={68} mr=\"16px\" />\n          <Flex flexDirection=\"column\" justifyContent=\"space-evenly\">\n            <Text color=\"textSubtle\" fontSize=\"12px\">\n              {nftToBuy.collectionName}\n            </Text>\n            <Text bold>{nftToBuy.name}</Text>\n            <Flex justifyContent=\"space-between\" alignItems=\"center\">\n              <Text fontSize=\"12px\" color=\"textSubtle\" p=\"0px\" height=\"16px\" mr=\"4px\">\n                {t('Token ID:')}\n              </Text>\n              <Button\n                as={Link}\n                scale=\"xs\"\n                px=\"0px\"\n                pt=\"2px\"\n                external\n                variant=\"text\"\n                href={getBscScanLinkForNft(nftToBuy.collectionAddress, nftToBuy.tokenId)}\n              >\n                {nftToBuy.tokenId}\n              </Button>\n            </Flex>\n          </Flex>\n        </Flex>\n        <BorderedBox>\n          <Text small color=\"textSubtle\">\n            {t('Pay with')}\n          </Text>\n          <ButtonMenu\n            activeIndex={paymentCurrency}\n            onItemClick={(index) => setPaymentCurrency(index)}\n            scale=\"sm\"\n            variant=\"subtle\"\n          >\n            <ButtonMenuItem>BNB</ButtonMenuItem>\n            <ButtonMenuItem>WBNB</ButtonMenuItem>\n          </ButtonMenu>\n          <Text small color=\"textSubtle\">\n            {t('Total payment')}\n          </Text>\n          <BnbAmountCell bnbAmount={nftPrice} />\n          <Text small color=\"textSubtle\">\n            {t('%symbol% in wallet', { symbol: paymentCurrency === PaymentCurrency.BNB ? 'BNB' : 'WBNB' })}\n          </Text>\n          <BnbAmountCell\n            bnbAmount={walletBalance}\n            isLoading={walletFetchStatus !== FetchStatus.SUCCESS}\n            isInsufficient={walletFetchStatus === FetchStatus.SUCCESS && notEnoughBnbForPurchase}\n          />\n        </BorderedBox>\n        {walletFetchStatus === FetchStatus.SUCCESS && notEnoughBnbForPurchase && (\n          <Message p=\"8px\" variant=\"danger\">\n            <Text>\n              {t('Not enough %symbol% to purchase this NFT', {\n                symbol: paymentCurrency === PaymentCurrency.BNB ? 'BNB' : 'WBNB',\n              })}\n            </Text>\n          </Message>\n        )}\n        <Flex alignItems=\"center\">\n          <Text my=\"16px\" mr=\"4px\">\n            {t('Convert between BNB and WBNB for free')}:\n          </Text>\n          <Button\n            as={Link}\n            p=\"0px\"\n            height=\"16px\"\n            external\n            variant=\"text\"\n            href={`${BASE_URL}/swap?inputCurrency=BNB&outputCurrency=0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c`}\n          >\n            {t('Convert')}\n          </Button>\n        </Flex>\n      </Flex>\n      <Divider />\n      <Flex px=\"24px\" pb=\"24px\" flexDirection=\"column\">\n        <Button\n          onClick={continueToNextStage}\n          disabled={walletFetchStatus !== FetchStatus.SUCCESS || notEnoughBnbForPurchase}\n          mb=\"8px\"\n        >\n          {t('Checkout')}\n        </Button>\n        <Button\n          as={Link}\n          external\n          style={{ width: '100%' }}\n          href={`${BASE_URL}/swap?outputCurrency=BNB`}\n          variant=\"secondary\"\n        >\n          {t('Get %symbol1% or %symbol2%', { symbol1: 'BNB', symbol2: 'WBNB' })}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default ReviewStage\n","import React, { useState } from 'react'\nimport { InjectedModalProps } from '@pancakeswap/uikit'\nimport { ethers } from 'ethers'\nimport useTheme from 'hooks/useTheme'\nimport { useTranslation } from 'contexts/Localization'\nimport useTokenBalance, { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { ethersToBigNumber } from 'utils/bigNumber'\nimport tokens from 'config/constants/tokens'\nimport { parseUnits, formatEther } from 'ethers/lib/utils'\nimport { useERC20, useNftMarketContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport useToast from 'hooks/useToast'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useAppDispatch } from 'state'\nimport { addUserNft } from 'state/nftMarket/reducer'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport { StyledModal } from './styles'\nimport ReviewStage from './ReviewStage'\nimport ConfirmStage from '../shared/ConfirmStage'\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\nimport { PaymentCurrency, BuyingStage } from './types'\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\n\nconst modalTitles = {\n  [BuyingStage.REVIEW]: 'Review',\n  [BuyingStage.APPROVE_AND_CONFIRM]: 'Back',\n  [BuyingStage.CONFIRM]: 'Back',\n  [BuyingStage.TX_CONFIRMED]: 'Transaction Confirmed',\n}\n\ninterface BuyModalProps extends InjectedModalProps {\n  nftToBuy: NftToken\n}\n\nconst BuyModal: React.FC<BuyModalProps> = ({ nftToBuy, onDismiss }) => {\n  const [stage, setStage] = useState(BuyingStage.REVIEW)\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\n  const [paymentCurrency, setPaymentCurrency] = useState<PaymentCurrency>(PaymentCurrency.BNB)\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const { account } = useWeb3React()\n  const wbnbContract = useERC20(tokens.wbnb.address)\n  const nftMarketContract = useNftMarketContract()\n\n  const { toastSuccess } = useToast()\n  const dispatch = useAppDispatch()\n\n  const nftPriceWei = parseUnits(nftToBuy.marketData.currentAskPrice, 'ether')\n  const nftPrice = parseFloat(nftToBuy.marketData.currentAskPrice)\n\n  // BNB - returns ethers.BigNumber\n  const { balance: bnbBalance, fetchStatus: bnbFetchStatus } = useGetBnbBalance()\n  const formattedBnbBalance = parseFloat(formatEther(bnbBalance))\n  // WBNB - returns BigNumber\n  const { balance: wbnbBalance, fetchStatus: wbnbFetchStatus } = useTokenBalance(tokens.wbnb.address)\n  const formattedWbnbBalance = getBalanceNumber(wbnbBalance)\n\n  const walletBalance = paymentCurrency === PaymentCurrency.BNB ? formattedBnbBalance : formattedWbnbBalance\n  const walletFetchStatus = paymentCurrency === PaymentCurrency.BNB ? bnbFetchStatus : wbnbFetchStatus\n\n  const notEnoughBnbForPurchase =\n    paymentCurrency === PaymentCurrency.BNB\n      ? bnbBalance.lt(nftPriceWei)\n      : wbnbBalance.lt(ethersToBigNumber(nftPriceWei))\n\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      try {\n        const currentAllowance = await wbnbContract.allowance(account, nftMarketContract.address)\n        return currentAllowance.gt(0)\n      } catch (error) {\n        return false\n      }\n    },\n    onApprove: () => {\n      return callWithGasPrice(wbnbContract, 'approve', [nftMarketContract.address, ethers.constants.MaxUint256])\n    },\n    onApproveSuccess: async ({ receipt }) => {\n      toastSuccess(\n        t('Contract approved - you can now buy NFT with WBNB!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n      )\n    },\n    onConfirm: () => {\n      const payAmount = Number.isNaN(nftPrice)\n        ? ethers.BigNumber.from(0)\n        : parseUnits(nftToBuy.marketData.currentAskPrice)\n      if (paymentCurrency === PaymentCurrency.BNB) {\n        return callWithGasPrice(nftMarketContract, 'buyTokenUsingBNB', [nftToBuy.collectionAddress, nftToBuy.tokenId], {\n          value: payAmount,\n        })\n      }\n      return callWithGasPrice(nftMarketContract, 'buyTokenUsingWBNB', [\n        nftToBuy.collectionAddress,\n        nftToBuy.tokenId,\n        payAmount,\n      ])\n    },\n    onSuccess: async ({ receipt }) => {\n      setConfirmedTxHash(receipt.transactionHash)\n      setStage(BuyingStage.TX_CONFIRMED)\n      dispatch(\n        addUserNft({\n          tokenId: nftToBuy.tokenId,\n          collectionAddress: nftToBuy.collectionAddress,\n          nftLocation: NftLocation.WALLET,\n        }),\n      )\n      toastSuccess(\n        t('Your NFT has been sent to your wallet'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n      )\n    },\n  })\n\n  const continueToNextStage = () => {\n    if (paymentCurrency === PaymentCurrency.WBNB && !isApproved) {\n      setStage(BuyingStage.APPROVE_AND_CONFIRM)\n    } else {\n      setStage(BuyingStage.CONFIRM)\n    }\n  }\n\n  const goBack = () => {\n    setStage(BuyingStage.REVIEW)\n  }\n\n  const showBackButton = stage === BuyingStage.CONFIRM || stage === BuyingStage.APPROVE_AND_CONFIRM\n\n  return (\n    <StyledModal\n      title={modalTitles[stage]}\n      stage={stage}\n      onDismiss={onDismiss}\n      onBack={showBackButton ? goBack : null}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {stage === BuyingStage.REVIEW && (\n        <ReviewStage\n          nftToBuy={nftToBuy}\n          paymentCurrency={paymentCurrency}\n          setPaymentCurrency={setPaymentCurrency}\n          nftPrice={nftPrice}\n          walletBalance={walletBalance}\n          walletFetchStatus={walletFetchStatus}\n          notEnoughBnbForPurchase={notEnoughBnbForPurchase}\n          continueToNextStage={continueToNextStage}\n        />\n      )}\n      {stage === BuyingStage.APPROVE_AND_CONFIRM && (\n        <ApproveAndConfirmStage\n          variant=\"buy\"\n          handleApprove={handleApprove}\n          isApproved={isApproved}\n          isApproving={isApproving}\n          isConfirming={isConfirming}\n          handleConfirm={handleConfirm}\n        />\n      )}\n      {stage === BuyingStage.CONFIRM && <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />}\n      {stage === BuyingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\n    </StyledModal>\n  )\n}\n\nexport default BuyModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Link } from 'react-router-dom'\nimport { Flex, Box, Card, CardBody, Text, Button, Image, BinanceIcon, Skeleton, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport BuyModal from '../../components/BuySellModals/BuyModal'\nimport SellModal from '../../components/BuySellModals/SellModal'\nimport { nftsBaseUrl } from '../../constants'\n\nconst RoundedImage = styled(Image)`\n  height: max-content;\n  border-radius: ${({ theme }) => theme.radii.default};\n  overflow: hidden;\n  & > img {\n    object-fit: contain;\n  }\n`\n\nconst Container = styled(Flex)`\n  gap: 24px;\n`\n\nconst CollectionLink = styled(Link)`\n  color: ${({ theme }) => theme.colors.primary};\n  display: block;\n  font-weight: 600;\n  margin-top: 16px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin-top: 50px;\n  }\n`\n\ninterface MainNFTCardProps {\n  cheapestNft: NftToken\n  cheapestNftFromOtherSellers?: NftToken\n  nothingForSaleBunny?: NftToken\n}\n\nconst MainNFTCard: React.FC<MainNFTCardProps> = ({ cheapestNft, cheapestNftFromOtherSellers, nothingForSaleBunny }) => {\n  const { t } = useTranslation()\n  const bnbBusdPrice = useBNBBusdPrice()\n\n  const nftToDisplay = cheapestNftFromOtherSellers || cheapestNft || nothingForSaleBunny\n\n  const onlyOwnNftsOnSale = !cheapestNftFromOtherSellers\n  const hasListings = cheapestNftFromOtherSellers || cheapestNft\n\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nftToDisplay.marketData?.currentAskPrice))\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nftToDisplay} />)\n  const [onPresentAdjustPriceModal] = useModal(<SellModal variant=\"edit\" nftToSell={cheapestNft} />)\n\n  const actionButton = onlyOwnNftsOnSale ? (\n    <Button\n      variant=\"danger\"\n      minWidth=\"168px\"\n      width={['100%', null, 'max-content']}\n      mt=\"24px\"\n      onClick={onPresentAdjustPriceModal}\n    >\n      {t('Adjust Sale Price')}\n    </Button>\n  ) : (\n    <Button\n      disabled={onlyOwnNftsOnSale}\n      minWidth=\"168px\"\n      width={['100%', null, 'max-content']}\n      mt=\"24px\"\n      onClick={onPresentBuyModal}\n    >\n      {t('Buy')}\n    </Button>\n  )\n  return (\n    <Card mb=\"40px\">\n      <CardBody>\n        <Container flexDirection={['column-reverse', null, 'row']}>\n          <Flex flex=\"2\">\n            <Box>\n              <CollectionLink to={`${nftsBaseUrl}/collections/${nftToDisplay.collectionAddress}`}>\n                {nftToDisplay.collectionName}\n              </CollectionLink>\n              <Text fontSize=\"40px\" bold mt=\"12px\">\n                {nftToDisplay.name}\n              </Text>\n              <Text mt={['16px', '16px', '48px']}>{t(nftToDisplay.description)}</Text>\n              {(cheapestNft || cheapestNftFromOtherSellers) && (\n                <>\n                  <Text color=\"textSubtle\" mt={['16px', '16px', '48px']}>\n                    {t('Lowest price')}\n                  </Text>\n                  <Flex alignItems=\"center\" mt=\"8px\">\n                    <BinanceIcon width={18} height={18} mr=\"4px\" />\n                    <Text fontSize=\"24px\" bold mr=\"4px\">\n                      {nftToDisplay.marketData.currentAskPrice}\n                    </Text>\n                    {bnbBusdPrice ? (\n                      <Text color=\"textSubtle\">{`(~${priceInUsd.toLocaleString(undefined, {\n                        minimumFractionDigits: 2,\n                        maximumFractionDigits: 2,\n                      })} USD)`}</Text>\n                    ) : (\n                      <Skeleton width=\"64px\" />\n                    )}\n                  </Flex>\n                </>\n              )}\n              {hasListings && actionButton}\n            </Box>\n          </Flex>\n          <Flex flex=\"2\" justifyContent={['center', null, 'flex-end']} alignItems=\"center\">\n            <RoundedImage src={nftToDisplay.image.thumbnail} width={440} height={440} />\n          </Flex>\n        </Container>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default MainNFTCard\n","import React, { useState } from 'react'\nimport styled, { keyframes, css } from 'styled-components'\nimport { Grid, Text, Card, Box, ChevronUpIcon, ChevronDownIcon, IconButton } from '@pancakeswap/uikit'\nimport useTheme from 'hooks/useTheme'\n\nconst expandAnimation = keyframes`\n  from {\n    max-height: 0px;\n  }\n  to {\n    max-height: 720px;\n  }\n`\n\nconst collapseAnimation = keyframes`\n  from {\n    max-height: 710px;\n  }\n  to {\n    max-height: 0px;\n  }\n`\n\nconst ExpandableCardBody = styled(Box)<{ expanded: boolean }>`\n  animation: ${({ expanded }) =>\n    expanded\n      ? css`\n          ${expandAnimation} 300ms linear forwards\n        `\n      : css`\n          ${collapseAnimation} 300ms linear forwards\n        `};\n`\n\nconst FullWidthCard = styled(Card)`\n  width: 100%;\n`\n\ninterface ExpandableCardProps {\n  icon: React.ReactNode\n  title: string\n  content: React.ReactNode\n}\n\nconst ExpandableCard: React.FC<ExpandableCardProps> = ({ icon, title, content }) => {\n  const [expanded, setExpanded] = useState(true)\n  const { theme } = useTheme()\n  return (\n    <FullWidthCard>\n      <Grid\n        gridTemplateColumns=\"1fr 8fr 1fr\"\n        alignItems=\"center\"\n        height=\"72px\"\n        px=\"24px\"\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\n      >\n        {icon}\n        <Text bold>{title}</Text>\n        <IconButton\n          onClick={() => {\n            setExpanded((prev) => !prev)\n          }}\n          variant=\"text\"\n          maxWidth=\"32px\"\n        >\n          {expanded ? (\n            <ChevronUpIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\n          ) : (\n            <ChevronDownIcon width=\"24px\" height=\"24px\" color=\"textSubtle\" />\n          )}\n        </IconButton>\n      </Grid>\n      <ExpandableCardBody expanded={expanded}>{content}</ExpandableCardBody>\n    </FullWidthCard>\n  )\n}\n\nexport default ExpandableCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport {\n  Box,\n  Flex,\n  Grid,\n  Text,\n  Image,\n  CogIcon,\n  SellIcon,\n  WalletFilledIcon,\n  CameraIcon,\n  BinanceIcon,\n  Skeleton,\n  useModal,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { NftLocation, NftToken, UserNftInitializationState } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableCard from './ExpandableCard'\nimport useFetchUserNfts from '../../Profile/hooks/useFetchUserNfts'\nimport SellModal from '../../components/BuySellModals/SellModal'\nimport ProfileNftModal from '../../components/ProfileNftModal'\n\nconst RoundedImage = styled(Image)`\n  & > img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\nconst ScrollableContainer = styled(Box)`\n  overflow-y: auto;\n  max-height: 224px;\n`\n\nconst Divider = styled.div`\n  margin: 16px 20px;\n  border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\n`\n\nconst CollectibleRowContainer = styled(Grid)`\n  &:hover {\n    opacity: 0.5;\n    cursor: pointer;\n  }\n`\n\nconst LocationColors = {\n  [NftLocation.FORSALE]: 'failure',\n  [NftLocation.WALLET]: 'secondary',\n  [NftLocation.PROFILE]: 'textSubtle',\n}\n\nconst LocationIcons = {\n  [NftLocation.FORSALE]: SellIcon,\n  [NftLocation.WALLET]: WalletFilledIcon,\n  [NftLocation.PROFILE]: CameraIcon,\n}\n\ninterface CollectibleRowProps {\n  nft: NftToken\n  lowestPrice: string\n}\n\nconst CollectibleRow: React.FC<CollectibleRowProps> = ({ nft, lowestPrice }) => {\n  const { t } = useTranslation()\n  const modalVariant = nft.location === NftLocation.WALLET ? 'sell' : 'edit'\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={nft} />)\n  const [onPresentModal] = useModal(<SellModal variant={modalVariant} nftToSell={nft} />)\n  return (\n    <CollectibleRowContainer\n      gridTemplateColumns=\"96px 1fr\"\n      px=\"16px\"\n      pb=\"8px\"\n      my=\"16px\"\n      onClick={nft.location === NftLocation.PROFILE ? onPresentProfileNftModal : onPresentModal}\n    >\n      <RoundedImage src={nft.image.thumbnail} width={64} height={64} mx=\"16px\" />\n      <Grid gridTemplateColumns=\"1fr 1fr\">\n        <Text bold>{nft.name}</Text>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n          {nft.collectionName}\n        </Text>\n        {lowestPrice && (\n          <>\n            <Text small color=\"textSubtle\">\n              {t('Lowest price')}\n            </Text>\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\n              <Text small>{lowestPrice}</Text>\n            </Flex>\n          </>\n        )}\n        {nft.location === NftLocation.FORSALE ? (\n          <>\n            <Text small color=\"textSubtle\">\n              {t('Your price')}\n            </Text>\n            <Flex justifySelf=\"flex-end\" width=\"max-content\">\n              <BinanceIcon width=\"16px\" height=\"16px\" mr=\"4px\" />\n              <Text small>{nft.marketData.currentAskPrice}</Text>\n            </Flex>\n          </>\n        ) : (\n          <Text small color=\"textDisabled\">\n            {t('Not on sale')}\n          </Text>\n        )}\n      </Grid>\n    </CollectibleRowContainer>\n  )\n}\n\ninterface CollectiblesByLocationProps {\n  location: NftLocation\n  nfts: NftToken[]\n  lowestPrice: string\n}\n\nconst CollectiblesByLocation: React.FC<CollectiblesByLocationProps> = ({ location, nfts, lowestPrice }) => {\n  const { t } = useTranslation()\n  const IconComponent = LocationIcons[location]\n  return (\n    <Flex flexDirection=\"column\">\n      <Grid gridTemplateColumns=\"32px 1fr\" px=\"16px\" pb=\"8px\">\n        <IconComponent color={LocationColors[location]} width=\"24px\" height=\"24px\" />\n        <Text display=\"inline\" bold color={LocationColors[location]}>\n          {t(location)}\n        </Text>\n      </Grid>\n      <ScrollableContainer>\n        {nfts.map((nft) => (\n          <CollectibleRow key={nft.tokenId} nft={nft} lowestPrice={lowestPrice} />\n        ))}\n      </ScrollableContainer>\n    </Flex>\n  )\n}\n\ninterface ManageCardProps {\n  bunnyId: string\n  lowestPrice?: string\n}\n\nconst ManageCard: React.FC<ManageCardProps> = ({ bunnyId, lowestPrice }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { userNftsInitializationState, nfts: userNfts } = useUserNfts()\n  useFetchUserNfts(account)\n\n  const bunniesInWallet = userNfts.filter(\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.WALLET,\n  )\n  const bunniesForSale = userNfts.filter(\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.FORSALE,\n  )\n  const profilePicBunny = userNfts.filter(\n    (nft) => nft.attributes[0].value === bunnyId && nft.location === NftLocation.PROFILE,\n  )\n\n  const loading = userNftsInitializationState !== UserNftInitializationState.INITIALIZED\n  const useHasNoBunnies =\n    !loading && bunniesInWallet.length === 0 && bunniesForSale.length === 0 && profilePicBunny.length === 0\n\n  const content = (\n    <Box pt=\"16px\">\n      {useHasNoBunnies && (\n        <Text px=\"16px\" pb=\"16px\" color=\"textSubtle\">\n          {t('You don’t have any of this item.')}\n        </Text>\n      )}\n      {loading && (\n        <Box px=\"16px\" pb=\"8px\">\n          <Skeleton mb=\"8px\" />\n          <Skeleton mb=\"8px\" />\n          <Skeleton mb=\"8px\" />\n        </Box>\n      )}\n      {bunniesForSale.length > 0 && (\n        <CollectiblesByLocation location={NftLocation.FORSALE} nfts={bunniesForSale} lowestPrice={lowestPrice} />\n      )}\n      {bunniesInWallet.length > 0 && (\n        <>\n          {bunniesForSale.length > 0 && <Divider />}\n          <CollectiblesByLocation location={NftLocation.WALLET} nfts={bunniesInWallet} lowestPrice={lowestPrice} />\n        </>\n      )}\n      {profilePicBunny.length > 0 && (\n        <>\n          {(bunniesForSale.length > 0 || bunniesInWallet.length > 0) && <Divider />}\n          <CollectiblesByLocation location={NftLocation.PROFILE} nfts={profilePicBunny} lowestPrice={lowestPrice} />\n        </>\n      )}\n    </Box>\n  )\n  return <ExpandableCard title={t('Manage Yours')} icon={<CogIcon width=\"24px\" height=\"24px\" />} content={content} />\n}\n\nexport default ManageCard\n","import React from 'react'\nimport { Box, Flex, Text, NftIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NftAttribute } from 'state/nftMarket/types'\nimport ExpandableCard from './ExpandableCard'\n\ninterface PropertiesCardProps {\n  properties: NftAttribute[]\n  rarity: { [key: string]: string }\n}\n\n// Map of known traits to human-readable text\nconst KNOWN_TRAITS_TEXT = {\n  bunnyId: 'Bunny ID',\n}\n\nconst SingleProperty: React.FC<{ title: string; value: string | number; rarity: string }> = ({\n  title,\n  value,\n  rarity,\n}) => {\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n        {KNOWN_TRAITS_TEXT[title] ?? title}\n      </Text>\n      <Flex alignItems=\"center\">\n        <Text bold textTransform=\"uppercase\" mr=\"4px\">\n          {value}\n        </Text>\n        <Text small color=\"textSubtle\">\n          ({rarity}%)\n        </Text>\n      </Flex>\n    </Flex>\n  )\n}\n\nconst PropertiesCard: React.FC<PropertiesCardProps> = ({ properties, rarity }) => {\n  const { t } = useTranslation()\n  const content = (\n    <Box p=\"24px\">\n      {properties.map((property) => (\n        <SingleProperty\n          key={property.traitType}\n          title={property.traitType}\n          value={property.value}\n          rarity={rarity[property.traitType]}\n        />\n      ))}\n    </Box>\n  )\n  return <ExpandableCard title={t('Properties')} icon={<NftIcon width=\"24px\" height=\"24px\" />} content={content} />\n}\n\nexport default PropertiesCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Box, Flex, Text, SearchIcon, Link } from '@pancakeswap/uikit'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport ExpandableCard from './ExpandableCard'\n\ninterface DetailsCardProps {\n  contractAddress: string\n  ipfsJson: string\n}\n\nconst LongTextContainer = styled(Text)`\n  max-width: 120px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst DetailsCard: React.FC<DetailsCardProps> = ({ contractAddress, ipfsJson }) => {\n  const { t } = useTranslation()\n  const { chainId } = useActiveWeb3React()\n  const content = (\n    <Box p=\"24px\">\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"16px\">\n        <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n          {t('Contract address')}\n        </Text>\n        <Link external href={getBscScanLink(contractAddress, 'address', chainId)}>\n          <LongTextContainer bold>{contractAddress}</LongTextContainer>\n        </Link>\n      </Flex>\n      {ipfsJson && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text fontSize=\"12px\" color=\"textSubtle\" bold textTransform=\"uppercase\">\n            IPFS JSON\n          </Text>\n          <Link external href={ipfsJson}>\n            <LongTextContainer bold>{ipfsJson}</LongTextContainer>\n          </Link>\n        </Flex>\n      )}\n    </Box>\n  )\n  return <ExpandableCard title={t('Details')} icon={<SearchIcon width=\"24px\" height=\"24px\" />} content={content} />\n}\n\nexport default DetailsCard\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Swiper, SwiperSlide } from 'swiper/react'\nimport SwiperCore from 'swiper'\nimport { ArrowBackIcon, ArrowForwardIcon, Box, IconButton, Text, Flex, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useNftsFromCollection } from 'state/nftMarket/hooks'\nimport { isAddress } from 'utils'\nimport { pancakeBunniesAddress } from '../../constants'\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\n\nimport 'swiper/swiper-bundle.css'\n\nconst INITIAL_SLIDE = 4\n\nconst SwiperCircle = styled.div<{ isActive }>`\n  background-color: ${({ theme, isActive }) => (isActive ? theme.colors.secondary : theme.colors.textDisabled)};\n  width: 12px;\n  height: 12px;\n  margin-right: 8px;\n  border-radius: 50%;\n  cursor: pointer;\n`\n\nconst StyledSwiper = styled.div`\n  ${({ theme }) => theme.mediaQueries.md} {\n    .swiper-wrapper {\n      max-height: 390px;\n    }\n  }\n`\n\ninterface MoreFromThisCollectionProps {\n  collectionAddress: string\n  currentTokenName: string\n}\n\nconst MoreFromThisCollection: React.FC<MoreFromThisCollectionProps> = ({ collectionAddress, currentTokenName }) => {\n  const { t } = useTranslation()\n  const [swiperRef, setSwiperRef] = useState<SwiperCore>(null)\n  const [activeIndex, setActiveIndex] = useState(1)\n  const { isMobile, isMd, isLg } = useMatchBreakpoints()\n  const nftList = useNftsFromCollection(collectionAddress)\n\n  if (!nftList) {\n    return null\n  }\n\n  let slidesPerView = 4\n  let maxPageIndex = 3\n\n  if (isLg) {\n    slidesPerView = 3\n    maxPageIndex = 4\n  }\n  if (isMd) {\n    slidesPerView = 2\n    maxPageIndex = 6\n  }\n\n  let nftsToShow = nftList.filter((nft) => nft.name !== currentTokenName && nft.marketData.isTradable)\n  if (isAddress(collectionAddress) === pancakeBunniesAddress) {\n    // PancakeBunnies should display 1 card per bunny id\n    nftsToShow = nftsToShow.reduce((nftArray, current) => {\n      const bunnyId = current.attributes[0].value\n      if (!nftArray.find((nft) => nft.attributes[0].value === bunnyId)) {\n        nftArray.push(current)\n      }\n      return nftArray\n    }, [])\n  }\n  nftsToShow = nftsToShow.slice(0, 12)\n\n  const nextSlide = () => {\n    if (activeIndex < maxPageIndex - 1) {\n      setActiveIndex(activeIndex + 1)\n      swiperRef.slideNext()\n    }\n  }\n\n  const previousSlide = () => {\n    if (activeIndex > 0) {\n      setActiveIndex(activeIndex - 1)\n      swiperRef.slidePrev()\n    }\n  }\n\n  const goToSlide = (index: number) => {\n    setActiveIndex(index / slidesPerView)\n    swiperRef.slideTo(index)\n  }\n\n  const updateActiveIndex = ({ activeIndex: newActiveIndex }) => {\n    if (newActiveIndex !== undefined) setActiveIndex(Math.ceil(newActiveIndex / slidesPerView))\n  }\n\n  return (\n    <Box pt=\"56px\" mb=\"52px\">\n      <Text bold mb=\"24px\">\n        {t('More from this collection')}\n      </Text>\n      {isMobile ? (\n        <StyledSwiper>\n          <Swiper spaceBetween={16} slidesPerView={1.5}>\n            {nftsToShow.map((nft) => (\n              <SwiperSlide key={nft.tokenId}>\n                <CollectibleLinkCard nft={nft} />\n              </SwiperSlide>\n            ))}\n          </Swiper>\n        </StyledSwiper>\n      ) : (\n        <StyledSwiper>\n          <Swiper\n            onSwiper={setSwiperRef}\n            onActiveIndexChange={updateActiveIndex}\n            spaceBetween={16}\n            slidesPerView={slidesPerView}\n            slidesPerGroup={slidesPerView}\n            initialSlide={INITIAL_SLIDE}\n          >\n            {nftsToShow.map((nft) => (\n              <SwiperSlide key={nft.tokenId}>\n                <CollectibleLinkCard nft={nft} />\n              </SwiperSlide>\n            ))}\n          </Swiper>\n          <Flex mt=\"16px\" alignItems=\"center\" justifyContent=\"center\">\n            <IconButton variant=\"text\" onClick={previousSlide}>\n              <ArrowBackIcon />\n            </IconButton>\n            {[...Array(maxPageIndex).keys()].map((index) => (\n              <SwiperCircle\n                key={index}\n                onClick={() => goToSlide(index * slidesPerView)}\n                isActive={activeIndex === index}\n              />\n            ))}\n            <IconButton variant=\"text\" onClick={nextSlide}>\n              <ArrowForwardIcon />\n            </IconButton>\n          </Flex>\n        </StyledSwiper>\n      )}\n    </Box>\n  )\n}\n\nexport default MoreFromThisCollection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\nimport { Price } from '@pancakeswap/sdk'\nimport { Button, Grid, Text, Flex, Box, BinanceIcon, useModal, Skeleton } from '@pancakeswap/uikit'\nimport { formatNumber } from 'utils/formatBalance'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { NftToken } from 'state/nftMarket/types'\nimport BuyModal from 'views/Nft/market/components/BuySellModals/BuyModal'\nimport SellModal from 'views/Nft/market/components/BuySellModals/SellModal'\nimport ProfileCell from 'views/Nft/market/components/ProfileCell'\n\nconst OwnersTableRow = styled(Grid)`\n  grid-template-columns: 2fr 2fr 1fr;\n  grid-row-gap: 16px;\n  margin-top: 16px;\n  align-itmes: center;\n  & > div {\n    padding-bottom: 16px;\n    border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\n  }\n`\n\nconst ButtonContainer = styled(Box)`\n  text-align: right;\n  padding-right: 24px;\n`\n\ninterface RowProps {\n  t: ContextApi['t']\n  nft: NftToken\n  bnbBusdPrice: Price\n  account: string\n}\n\nconst Row: React.FC<RowProps> = ({ t, nft, bnbBusdPrice, account }) => {\n  const priceInUsd = multiplyPriceByAmount(bnbBusdPrice, parseFloat(nft.marketData.currentAskPrice))\n\n  const ownNft = account ? nft.marketData.currentSeller === account.toLowerCase() : false\n  const [onPresentBuyModal] = useModal(<BuyModal nftToBuy={nft} />)\n  const [onPresentAdjustPriceModal] = useModal(<SellModal variant=\"edit\" nftToSell={nft} />)\n\n  return (\n    <>\n      <Box pl=\"24px\">\n        <Flex justifySelf=\"flex-start\" alignItems=\"center\" width=\"max-content\">\n          <BinanceIcon width=\"24px\" height=\"24px\" mr=\"8px\" />\n          <Text bold>{formatNumber(parseFloat(nft.marketData.currentAskPrice), 0, 3)}</Text>\n        </Flex>\n        {bnbBusdPrice ? (\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {`(~${formatNumber(priceInUsd, 2, 2)} USD)`}\n          </Text>\n        ) : (\n          <Skeleton width=\"86px\" height=\"12px\" mt=\"4px\" />\n        )}\n      </Box>\n      <Box>\n        <Flex width=\"max-content\" alignItems=\"center\">\n          <ProfileCell accountAddress={nft.marketData.currentSeller} />\n        </Flex>\n      </Box>\n      <ButtonContainer>\n        {ownNft ? (\n          <Button scale=\"sm\" variant=\"danger\" maxWidth=\"128px\" onClick={onPresentAdjustPriceModal}>\n            {t('Edit')}\n          </Button>\n        ) : (\n          <Button scale=\"sm\" variant=\"secondary\" maxWidth=\"128px\" onClick={onPresentBuyModal}>\n            {t('Buy')}\n          </Button>\n        )}\n      </ButtonContainer>\n    </>\n  )\n}\n\ninterface ForSaleTableRowsProps {\n  nftsForSale: NftToken[]\n}\n\nconst ForSaleTableRow: React.FC<ForSaleTableRowsProps> = ({ nftsForSale }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const bnbBusdPrice = useBNBBusdPrice()\n  return (\n    <OwnersTableRow>\n      {nftsForSale.map((nft) => (\n        <Row key={nft.tokenId} t={t} nft={nft} bnbBusdPrice={bnbBusdPrice} account={account} />\n      ))}\n    </OwnersTableRow>\n  )\n}\n\nexport default ForSaleTableRow\n","import styled from 'styled-components'\n\nexport const StyledSortButton = styled.button`\n  border: none;\n  cursor: pointer;\n  background: none;\n  color: ${({ theme }) => theme.colors.secondary};\n  font-weight: bold;\n`\n","import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport {\n  Flex,\n  Card,\n  Grid,\n  SellIcon,\n  Text,\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  useMatchBreakpoints,\n  ArrowUpIcon,\n  ArrowDownIcon,\n  Button,\n  Spinner,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\nimport { NftToken } from 'state/nftMarket/types'\nimport ForSaleTableRows from './ForSaleTableRows'\nimport { StyledSortButton } from './styles'\n\nconst ITEMS_PER_PAGE_DESKTOP = 10\nconst ITEMS_PER_PAGE_MOBILE = 5\n\nconst StyledCard = styled(Card)<{ hasManyPages: boolean }>`\n  width: 100%;\n  & > div:first-child {\n    ${({ hasManyPages }) => (hasManyPages ? 'min-height: 480px;' : null)}\n    display: flex;\n    flex-direction: column;\n    ${({ theme }) => theme.mediaQueries.md} {\n      ${({ hasManyPages }) => (hasManyPages ? 'min-height: 850px;' : null)}\n    }\n  }\n`\n\nconst TableHeading = styled(Grid)`\n  border-bottom: ${({ theme }) => `1px solid ${theme.colors.cardBorder}`};\n`\n\nconst PageButtons = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 16px;\n  margin-bottom: 16px;\n`\n\nconst Arrow = styled.div`\n  color: ${({ theme }) => theme.colors.primary};\n  padding: 0 20px;\n  :hover {\n    cursor: pointer;\n  }\n`\n\ninterface ForSaleTableCardProps {\n  nftsForSale: NftToken[]\n  bunnyId: string\n  totalForSale: number\n  priceSort: 'asc' | 'desc'\n  isFetchingMoreNfts: boolean\n  togglePriceSort: () => void\n  loadMore: (orderDirection: 'asc' | 'desc') => void\n}\n\nconst ForSaleTableCard: React.FC<ForSaleTableCardProps> = ({\n  nftsForSale,\n  bunnyId,\n  totalForSale,\n  loadMore,\n  isFetchingMoreNfts,\n  priceSort,\n  togglePriceSort,\n}) => {\n  const [page, setPage] = useState(1)\n  const { isMobile } = useMatchBreakpoints()\n  const itemsPerPage = isMobile ? ITEMS_PER_PAGE_MOBILE : ITEMS_PER_PAGE_DESKTOP\n\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n\n  useEffect(() => {\n    // If user clicks on other NFT at the bottom of the page - load new NFT table starting on page 1\n    // Same for reversing sorting direction\n    setPage(1)\n  }, [bunnyId, priceSort])\n\n  const needsExtraPage = nftsForSale.length % itemsPerPage !== 0\n  let maxPage = Math.floor(nftsForSale.length / itemsPerPage)\n  if (needsExtraPage) {\n    maxPage += 1\n  }\n\n  const nftsOnCurrentPage = nftsForSale.slice((page - 1) * itemsPerPage, page * itemsPerPage)\n\n  const switchPage = (pageNumber: number) => {\n    setPage(pageNumber)\n  }\n\n  const loadMoreHandler = () => {\n    loadMore(priceSort)\n  }\n\n  const loadMoreButton = isFetchingMoreNfts ? (\n    <Flex width=\"96px\" justifyContent=\"center\">\n      <Spinner size={32} />\n    </Flex>\n  ) : (\n    <Button variant=\"primary\" scale=\"xs\" ml=\"12px\" onClick={loadMoreHandler}>\n      {t('Load more')}\n    </Button>\n  )\n\n  return (\n    <StyledCard hasManyPages={maxPage > 1}>\n      <Grid\n        flex=\"0 1 auto\"\n        gridTemplateColumns=\"34px 1fr\"\n        alignItems=\"center\"\n        height=\"72px\"\n        px=\"24px\"\n        borderBottom={`1px solid ${theme.colors.cardBorder}`}\n      >\n        <SellIcon width=\"24px\" height=\"24px\" />\n        <Text bold>{t('For Sale (%num%)', { num: totalForSale.toLocaleString() })}</Text>\n      </Grid>\n      {nftsOnCurrentPage.length > 0 ? (\n        <>\n          <TableHeading flex=\"0 1 auto\" gridTemplateColumns=\"2fr 2fr 1fr\" py=\"12px\">\n            <StyledSortButton type=\"button\" onClick={togglePriceSort}>\n              <Flex alignItems=\"center\">\n                <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\" px=\"24px\">\n                  {t('Price')}\n                </Text>\n                {priceSort === 'asc' ? <ArrowUpIcon color=\"textSubtle\" /> : <ArrowDownIcon color=\"textSubtle\" />}\n              </Flex>\n            </StyledSortButton>\n            <Text textTransform=\"uppercase\" color=\"textSubtle\" bold fontSize=\"12px\">\n              {t('Owner')}\n            </Text>\n          </TableHeading>\n          <Flex flex=\"1 1 auto\" flexDirection=\"column\" justifyContent=\"space-between\" height=\"100%\">\n            <ForSaleTableRows nftsForSale={nftsOnCurrentPage} />\n            <PageButtons>\n              <Arrow\n                onClick={() => {\n                  switchPage(page === 1 ? page : page - 1)\n                }}\n              >\n                <ArrowBackIcon color={page === 1 ? 'textDisabled' : 'primary'} />\n              </Arrow>\n              <Text>{t('Page %page% of %maxPage%', { page, maxPage })}</Text>\n              {page === maxPage ? (\n                loadMoreButton\n              ) : (\n                <Arrow\n                  onClick={() => {\n                    switchPage(page === maxPage ? page : page + 1)\n                  }}\n                >\n                  <ArrowForwardIcon color={page === maxPage ? 'textDisabled' : 'primary'} />\n                </Arrow>\n              )}\n            </PageButtons>\n          </Flex>\n        </>\n      ) : (\n        <Flex justifyContent=\"center\" alignItems=\"center\" height=\"200px\">\n          <Text>{t('No items for sale')}</Text>\n        </Flex>\n      )}\n    </StyledCard>\n  )\n}\n\nexport default ForSaleTableCard\n","import React, { useState, useEffect, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { useParams } from 'react-router'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex } from '@pancakeswap/uikit'\nimport orderBy from 'lodash/orderBy'\nimport Page from 'components/Layout/Page'\nimport { useFetchByBunnyId, useGetAllBunniesByBunnyId } from 'state/nftMarket/hooks'\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport PageLoader from 'components/Loader/PageLoader'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport useRefresh from 'hooks/useRefresh'\nimport MainNFTCard from './MainNFTCard'\nimport ManageCard from './ManageCard'\nimport PropertiesCard from './PropertiesCard'\nimport DetailsCard from './DetailsCard'\nimport MoreFromThisCollection from './MoreFromThisCollection'\nimport ForSaleTableCard from './ForSaleTableCard'\nimport { pancakeBunniesAddress } from '../../constants'\nimport { sortNFTsByPriceBuilder } from './ForSaleTableCard/utils'\nimport { SortType } from '../../types'\n\nconst TwoColumnsContainer = styled(Flex)`\n  gap: 22px;\n  align-items: flex-start;\n  & > div:first-child {\n    flex: 1;\n    gap: 20px;\n  }\n  & > div:last-child {\n    flex: 2;\n  }\n`\n\nconst IndividualNFTPage = () => {\n  // For PancakeBunnies tokenId in url is really bunnyId\n  const { account } = useWeb3React()\n  const { collectionAddress, tokenId } = useParams<{ collectionAddress: string; tokenId: string }>()\n  const [attributesDistribution, setAttributesDistribution] = useState<{ [key: string]: number }>(null)\n  const [nothingForSaleBunny, setNothingForSaleBunny] = useState<NftToken>(null)\n  const allBunnies = useGetAllBunniesByBunnyId(tokenId)\n  const [priceSort, setPriceSort] = useState<SortType>('asc')\n  const previousPriceSort = usePreviousValue(priceSort)\n  const { isFetchingMoreNfts, latestFetchAt, fetchMorePancakeBunnies } = useFetchByBunnyId(tokenId)\n  const { fastRefresh } = useRefresh()\n  const bunniesSortedByPrice = orderBy(allBunnies, (nft) => parseFloat(nft.marketData.currentAskPrice))\n  const allBunniesFromOtherSellers = account\n    ? bunniesSortedByPrice.filter((bunny) => bunny.marketData.currentSeller !== account.toLowerCase())\n    : bunniesSortedByPrice\n  const cheapestBunny = bunniesSortedByPrice[0]\n  const cheapestBunnyFromOtherSellers = allBunniesFromOtherSellers[0]\n\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\n\n  // useUpdateNftInfo(collectionAddress)\n\n  useEffect(() => {\n    // Fetch first 30 NFTs on page load\n    // And then query every 10 sec in case some new (cheaper) NFTs were listed\n    const msSinceLastUpdate = Date.now() - latestFetchAt\n    // Check for last update is here to prevent too many request due to fetchMorePancakeBunnies updating too often\n    // (it can't be reasonably wrapper in useCallback because the tokens are updated every time you call it, which is the whole point)\n    if (msSinceLastUpdate > 10000 && !isFetchingMoreNfts) {\n      fetchMorePancakeBunnies(priceSort)\n    }\n  }, [priceSort, fetchMorePancakeBunnies, isFetchingMoreNfts, latestFetchAt, fastRefresh])\n\n  useEffect(() => {\n    const fetchTokens = async () => {\n      const apiResponse = await getNftsFromCollectionApi(collectionAddress)\n      setAttributesDistribution(apiResponse.attributesDistribution)\n    }\n\n    fetchTokens()\n  }, [collectionAddress, setAttributesDistribution])\n\n  useEffect(() => {\n    // Fetch most expensive items if user selects other sorting\n    if (previousPriceSort && previousPriceSort !== priceSort) {\n      fetchMorePancakeBunnies(priceSort)\n    }\n  }, [fetchMorePancakeBunnies, priceSort, previousPriceSort])\n\n  useEffect(() => {\n    const fetchBasicBunnyData = async () => {\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      setNothingForSaleBunny({\n        // In this case tokenId doesn't matter, this token can't be bought\n        tokenId: data[tokenId].name,\n        name: data[tokenId].name,\n        description: data[tokenId].description,\n        collectionName: data[tokenId].collection.name,\n        collectionAddress: pancakeBunniesAddress,\n        image: data[tokenId].image,\n        attributes: [\n          {\n            traitType: 'bunnyId',\n            value: tokenId,\n            displayType: null,\n          },\n        ],\n      })\n    }\n    // If bunny id has no listings on the market - get basic bunny info\n    if (isPBCollection && !cheapestBunny) {\n      fetchBasicBunnyData()\n    }\n  }, [cheapestBunny, tokenId, isPBCollection])\n\n  const sortedNfts = useMemo(() => allBunnies.sort(sortNFTsByPriceBuilder({ priceSort })), [allBunnies, priceSort])\n\n  if (!cheapestBunny && !nothingForSaleBunny) {\n    // TODO redirect to nft market page if collection or bunny id does not exist (came here from some bad url)\n    // That would require tracking loading states and stuff...\n\n    // For now this if is used to show loading spinner while we're getting the data\n    return <PageLoader />\n  }\n\n  const togglePriceSort = () => {\n    setPriceSort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\n  }\n\n  const getBunnyIdRarity = () => {\n    if (attributesDistribution) {\n      const total = Object.values(attributesDistribution).reduce((acc, cur) => {\n        return acc + cur\n      }, 0)\n      return ((attributesDistribution[tokenId] / total) * 100).toFixed(2)\n    }\n    return null\n  }\n\n  const properties = isPBCollection ? cheapestBunny?.attributes || nothingForSaleBunny?.attributes : []\n\n  const propertyRarity = isPBCollection ? { bunnyId: getBunnyIdRarity() } : {}\n\n  return (\n    <Page>\n      <MainNFTCard\n        cheapestNft={cheapestBunny}\n        cheapestNftFromOtherSellers={cheapestBunnyFromOtherSellers}\n        nothingForSaleBunny={nothingForSaleBunny}\n      />\n      <TwoColumnsContainer flexDirection={['column', 'column', 'row']}>\n        <Flex flexDirection=\"column\" width=\"100%\">\n          <ManageCard bunnyId={tokenId} lowestPrice={cheapestBunny?.marketData?.currentAskPrice} />\n          <PropertiesCard properties={properties} rarity={propertyRarity} />\n          <DetailsCard contractAddress={collectionAddress} ipfsJson={cheapestBunny?.marketData?.metadataUrl} />\n        </Flex>\n        <ForSaleTableCard\n          nftsForSale={sortedNfts}\n          bunnyId={tokenId}\n          totalForSale={allBunnies.length}\n          loadMore={fetchMorePancakeBunnies}\n          priceSort={priceSort}\n          togglePriceSort={togglePriceSort}\n          isFetchingMoreNfts={isFetchingMoreNfts}\n        />\n      </TwoColumnsContainer>\n      <MoreFromThisCollection\n        collectionAddress={collectionAddress}\n        currentTokenName={cheapestBunny?.name || nothingForSaleBunny?.name}\n      />\n    </Page>\n  )\n}\n\nexport default IndividualNFTPage\n","type sortBuilder = {\n  priceSort: string\n}\n\nexport const sortNFTsByPriceBuilder =\n  ({ priceSort }: sortBuilder) =>\n  (nftA, nftB) => {\n    const nftPriceA = Number(nftA.marketData.currentAskPrice) ?? 0\n    const nftPriceB = Number(nftB.marketData.currentAskPrice) ?? 0\n\n    return priceSort === 'asc' ? nftPriceA - nftPriceB : nftPriceB - nftPriceA\n  }\n"],"sourceRoot":""}