{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/FarmAuction/components/AuctionCakeBurn.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Text, Flex, Skeleton, Image } from '@pancakeswap/uikit';\nimport { useFarmAuctionContract } from 'hooks/useContract';\nimport { useTranslation } from 'contexts/Localization';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { ethersToBigNumber } from 'utils/bigNumber';\nimport Balance from 'components/Balance';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BurnedText = styled(Text)`\n  font-size: 52px;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    font-size: 64px;\n  }\n`;\n_c = BurnedText;\n\nconst AuctionCakeBurn = () => {\n  _s();\n\n  const [burnedCakeAmount, setBurnedCakeAmount] = useState(0);\n  const {\n    t\n  } = useTranslation();\n  const farmAuctionContract = useFarmAuctionContract();\n  const cakePriceBusd = usePriceCakeBusd();\n  const burnedAmountAsUSD = cakePriceBusd.times(burnedCakeAmount);\n  useEffect(() => {\n    const fetchBurnedCakeAmount = async () => {\n      try {\n        const amount = await farmAuctionContract.totalCollected();\n        const amountAsBN = ethersToBigNumber(amount);\n        setBurnedCakeAmount(getBalanceNumber(amountAsBN));\n      } catch (error) {\n        console.error('Failed to fetch burned auction cake', error);\n      }\n    };\n\n    if (burnedCakeAmount === 0) {\n      fetchBurnedCakeAmount();\n    }\n  }, [burnedCakeAmount, farmAuctionContract]);\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    flexDirection: ['column-reverse', null, 'row'],\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      flex: \"2\",\n      children: [burnedCakeAmount !== 0 ? /*#__PURE__*/_jsxDEV(Balance, {\n        fontSize: \"64px\",\n        bold: true,\n        value: burnedCakeAmount,\n        decimals: 0,\n        unit: \" CAKE\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n        width: \"256px\",\n        height: \"64px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(BurnedText, {\n        textTransform: \"uppercase\",\n        bold: true,\n        color: \"secondary\",\n        children: t('Burned')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"24px\",\n        bold: true,\n        children: t('through community auctions so far!')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), !burnedAmountAsUSD.isNaN() && !burnedAmountAsUSD.isZero() ? /*#__PURE__*/_jsxDEV(Text, {\n        color: \"textSubtle\",\n        children: [\"~$\", burnedAmountAsUSD.toNumber().toLocaleString('en', {\n          maximumFractionDigits: 0\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n        width: \"128px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Image, {\n      width: 350,\n      height: 320,\n      src: \"/images/burnt-cake.png\",\n      alt: t('Burnt CAKE')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuctionCakeBurn, \"JMrJ5lBVVAcnEPGexG4r6v2xRaU=\", false, function () {\n  return [useTranslation, useFarmAuctionContract, usePriceCakeBusd];\n});\n\n_c2 = AuctionCakeBurn;\nexport default AuctionCakeBurn;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BurnedText\");\n$RefreshReg$(_c2, \"AuctionCakeBurn\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/FarmAuction/components/AuctionCakeBurn.tsx"],"names":["React","useState","useEffect","Text","Flex","Skeleton","Image","useFarmAuctionContract","useTranslation","usePriceCakeBusd","getBalanceNumber","ethersToBigNumber","Balance","styled","BurnedText","theme","mediaQueries","sm","AuctionCakeBurn","burnedCakeAmount","setBurnedCakeAmount","t","farmAuctionContract","cakePriceBusd","burnedAmountAsUSD","times","fetchBurnedCakeAmount","amount","totalCollected","amountAsBN","error","console","isNaN","isZero","toNumber","toLocaleString","maximumFractionDigits"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Text, Flex, Skeleton, Image } from '@pancakeswap/uikit'\nimport { useFarmAuctionContract } from 'hooks/useContract'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { ethersToBigNumber } from 'utils/bigNumber'\nimport Balance from 'components/Balance'\nimport styled from 'styled-components'\n\nconst BurnedText = styled(Text)`\n  font-size: 52px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    font-size: 64px;\n  }\n`\n\nconst AuctionCakeBurn: React.FC = () => {\n  const [burnedCakeAmount, setBurnedCakeAmount] = useState(0)\n  const { t } = useTranslation()\n  const farmAuctionContract = useFarmAuctionContract()\n  const cakePriceBusd = usePriceCakeBusd()\n\n  const burnedAmountAsUSD = cakePriceBusd.times(burnedCakeAmount)\n\n  useEffect(() => {\n    const fetchBurnedCakeAmount = async () => {\n      try {\n        const amount = await farmAuctionContract.totalCollected()\n        const amountAsBN = ethersToBigNumber(amount)\n        setBurnedCakeAmount(getBalanceNumber(amountAsBN))\n      } catch (error) {\n        console.error('Failed to fetch burned auction cake', error)\n      }\n    }\n    if (burnedCakeAmount === 0) {\n      fetchBurnedCakeAmount()\n    }\n  }, [burnedCakeAmount, farmAuctionContract])\n  return (\n    <Flex flexDirection={['column-reverse', null, 'row']}>\n      <Flex flexDirection=\"column\" flex=\"2\">\n        {burnedCakeAmount !== 0 ? (\n          <Balance fontSize=\"64px\" bold value={burnedCakeAmount} decimals={0} unit=\" CAKE\" />\n        ) : (\n          <Skeleton width=\"256px\" height=\"64px\" />\n        )}\n        <BurnedText textTransform=\"uppercase\" bold color=\"secondary\">\n          {t('Burned')}\n        </BurnedText>\n        <Text fontSize=\"24px\" bold>\n          {t('through community auctions so far!')}\n        </Text>\n        {!burnedAmountAsUSD.isNaN() && !burnedAmountAsUSD.isZero() ? (\n          <Text color=\"textSubtle\">\n            ~${burnedAmountAsUSD.toNumber().toLocaleString('en', { maximumFractionDigits: 0 })}\n          </Text>\n        ) : (\n          <Skeleton width=\"128px\" />\n        )}\n      </Flex>\n      <Image width={350} height={320} src=\"/images/burnt-cake.png\" alt={t('Burnt CAKE')} />\n    </Flex>\n  )\n}\n\nexport default AuctionCakeBurn\n"]},"metadata":{},"sourceType":"module"}