{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{currencyEquals,ETHER,WETH}from'@pancakeswap/sdk';import{useMemo}from'react';import useActiveWeb3React from'hooks/useActiveWeb3React';import{tryParseAmount}from'../state/swap/hooks';import{useTransactionAdder}from'../state/transactions/hooks';import{useCurrencyBalance}from'../state/wallet/hooks';import{useWETHContract}from'./useContract';import{useCallWithGasPrice}from'./useCallWithGasPrice';export var WrapType;(function(WrapType){WrapType[WrapType[\"NOT_APPLICABLE\"]=0]=\"NOT_APPLICABLE\";WrapType[WrapType[\"WRAP\"]=1]=\"WRAP\";WrapType[WrapType[\"UNWRAP\"]=2]=\"UNWRAP\";})(WrapType||(WrapType={}));var NOT_APPLICABLE={wrapType:WrapType.NOT_APPLICABLE};/**\n * Given the selected input and output currency, return a wrap callback\n * @param inputCurrency the selected input currency\n * @param outputCurrency the selected output currency\n * @param typedValue the user input value\n */export default function useWrapCallback(inputCurrency,outputCurrency,typedValue){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId,account=_useActiveWeb3React.account;var _useCallWithGasPrice=useCallWithGasPrice(),callWithGasPrice=_useCallWithGasPrice.callWithGasPrice;var wethContract=useWETHContract();var balance=useCurrencyBalance(account!==null&&account!==void 0?account:undefined,inputCurrency);// we can always parse the amount typed as the input currency, since wrapping is 1:1\nvar inputAmount=useMemo(function(){return tryParseAmount(typedValue,inputCurrency);},[inputCurrency,typedValue]);var addTransaction=useTransactionAdder();return useMemo(function(){if(!wethContract||!chainId||!inputCurrency||!outputCurrency)return NOT_APPLICABLE;var sufficientBalance=inputAmount&&balance&&!balance.lessThan(inputAmount);if(inputCurrency===ETHER&&currencyEquals(WETH[chainId],outputCurrency)){return{wrapType:WrapType.WRAP,execute:sufficientBalance&&inputAmount?/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var txReceipt;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return callWithGasPrice(wethContract,'deposit',undefined,{value:\"0x\".concat(inputAmount.raw.toString(16))});case 3:txReceipt=_context.sent;addTransaction(txReceipt,{summary:\"Wrap \".concat(inputAmount.toSignificant(6),\" BNB to WBNB\")});_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);console.error('Could not deposit',_context.t0);case 10:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);})):undefined,inputError:sufficientBalance?undefined:'Insufficient BNB balance'};}if(currencyEquals(WETH[chainId],inputCurrency)&&outputCurrency===ETHER){return{wrapType:WrapType.UNWRAP,execute:sufficientBalance&&inputAmount?/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var txReceipt;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return callWithGasPrice(wethContract,'withdraw',[\"0x\".concat(inputAmount.raw.toString(16))]);case 3:txReceipt=_context2.sent;addTransaction(txReceipt,{summary:\"Unwrap \".concat(inputAmount.toSignificant(6),\" WBNB to BNB\")});_context2.next=10;break;case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](0);console.error('Could not withdraw',_context2.t0);case 10:case\"end\":return _context2.stop();}}},_callee2,null,[[0,7]]);})):undefined,inputError:sufficientBalance?undefined:'Insufficient WBNB balance'};}return NOT_APPLICABLE;},[wethContract,chainId,inputCurrency,outputCurrency,inputAmount,balance,addTransaction,callWithGasPrice]);}","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/hooks/useWrapCallback.ts"],"names":["currencyEquals","ETHER","WETH","useMemo","useActiveWeb3React","tryParseAmount","useTransactionAdder","useCurrencyBalance","useWETHContract","useCallWithGasPrice","WrapType","NOT_APPLICABLE","wrapType","useWrapCallback","inputCurrency","outputCurrency","typedValue","chainId","account","callWithGasPrice","wethContract","balance","undefined","inputAmount","addTransaction","sufficientBalance","lessThan","WRAP","execute","value","raw","toString","txReceipt","summary","toSignificant","console","error","inputError","UNWRAP"],"mappings":"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","sourcesContent":["import { Currency, currencyEquals, ETHER, WETH } from '@pancakeswap/sdk'\nimport { useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { tryParseAmount } from '../state/swap/hooks'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { useCurrencyBalance } from '../state/wallet/hooks'\nimport { useWETHContract } from './useContract'\nimport { useCallWithGasPrice } from './useCallWithGasPrice'\n\nexport enum WrapType {\n  NOT_APPLICABLE,\n  WRAP,\n  UNWRAP,\n}\n\nconst NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE }\n/**\n * Given the selected input and output currency, return a wrap callback\n * @param inputCurrency the selected input currency\n * @param outputCurrency the selected output currency\n * @param typedValue the user input value\n */\nexport default function useWrapCallback(\n  inputCurrency: Currency | undefined,\n  outputCurrency: Currency | undefined,\n  typedValue: string | undefined,\n): { wrapType: WrapType; execute?: undefined | (() => Promise<void>); inputError?: string } {\n  const { chainId, account } = useActiveWeb3React()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const wethContract = useWETHContract()\n  const balance = useCurrencyBalance(account ?? undefined, inputCurrency)\n  // we can always parse the amount typed as the input currency, since wrapping is 1:1\n  const inputAmount = useMemo(() => tryParseAmount(typedValue, inputCurrency), [inputCurrency, typedValue])\n  const addTransaction = useTransactionAdder()\n\n  return useMemo(() => {\n    if (!wethContract || !chainId || !inputCurrency || !outputCurrency) return NOT_APPLICABLE\n\n    const sufficientBalance = inputAmount && balance && !balance.lessThan(inputAmount)\n\n    if (inputCurrency === ETHER && currencyEquals(WETH[chainId], outputCurrency)) {\n      return {\n        wrapType: WrapType.WRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await callWithGasPrice(wethContract, 'deposit', undefined, {\n                    value: `0x${inputAmount.raw.toString(16)}`,\n                  })\n                  addTransaction(txReceipt, { summary: `Wrap ${inputAmount.toSignificant(6)} BNB to WBNB` })\n                } catch (error) {\n                  console.error('Could not deposit', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance ? undefined : 'Insufficient BNB balance',\n      }\n    }\n    if (currencyEquals(WETH[chainId], inputCurrency) && outputCurrency === ETHER) {\n      return {\n        wrapType: WrapType.UNWRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await callWithGasPrice(wethContract, 'withdraw', [\n                    `0x${inputAmount.raw.toString(16)}`,\n                  ])\n                  addTransaction(txReceipt, { summary: `Unwrap ${inputAmount.toSignificant(6)} WBNB to BNB` })\n                } catch (error) {\n                  console.error('Could not withdraw', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance ? undefined : 'Insufficient WBNB balance',\n      }\n    }\n    return NOT_APPLICABLE\n  }, [wethContract, chainId, inputCurrency, outputCurrency, inputAmount, balance, addTransaction, callWithGasPrice])\n}\n"]},"metadata":{},"sourceType":"module"}