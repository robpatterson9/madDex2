{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Predictions/components/History/HistoricalBet.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Box, ChevronDownIcon, ChevronUpIcon, Flex, IconButton, InfoIcon, PlayCircleOutlineIcon, Text, useTooltip, WaitIcon } from '@pancakeswap/uikit';\nimport { useWeb3React } from '@web3-react/core';\nimport styled from 'styled-components';\nimport { useAppDispatch } from 'state';\nimport { PredictionStatus } from 'state/types';\nimport { REWARD_RATE } from 'state/predictions/config';\nimport { useGetCurrentEpoch, useGetIsClaimable, useGetPredictionsStatus } from 'state/predictions/hooks';\nimport { fetchLedgerData, markAsCollected } from 'state/predictions';\nimport { getRoundResult, Result } from 'state/predictions/helpers';\nimport { useTranslation } from 'contexts/Localization';\nimport { formatBnb, getNetPayout } from './helpers';\nimport CollectWinningsButton from '../CollectWinningsButton';\nimport ReclaimPositionButton from '../ReclaimPositionButton';\nimport BetDetails from './BetDetails';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledBet = styled(Flex).attrs({\n  alignItems: 'center',\n  p: '16px'\n})`\n  background-color: ${({\n  theme\n}) => theme.card.background};\n  border-bottom: 2px solid ${({\n  theme\n}) => theme.colors.cardBorder};\n  cursor: pointer;\n`;\n_c = StyledBet;\nconst YourResult = styled(Box)`\n  flex: 1;\n`;\n_c2 = YourResult;\n\nconst HistoricalBet = ({\n  bet\n}) => {\n  _s();\n\n  const [isOpen, setIsOpen] = useState(false);\n  const {\n    amount,\n    round\n  } = bet;\n  const {\n    t\n  } = useTranslation();\n  const {\n    targetRef,\n    tooltip,\n    tooltipVisible\n  } = useTooltip( /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      bold: true,\n      mb: \"4px\",\n      children: t('Neither side wins this round')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: t('The Locked Price & Closed Price are exactly the same (within 8 decimals), so neither side wins. All funds entered into UP and DOWN positions will go to the weekly CAKE burn.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true), {\n    placement: 'right'\n  });\n  const currentEpoch = useGetCurrentEpoch();\n  const status = useGetPredictionsStatus();\n  const canClaim = useGetIsClaimable(bet.round.epoch);\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n\n  const toggleOpen = () => setIsOpen(!isOpen);\n\n  const getRoundColor = result => {\n    switch (result) {\n      case Result.WIN:\n        return 'success';\n\n      case Result.LOSE:\n        return 'failure';\n\n      case Result.CANCELED:\n        return 'textDisabled';\n\n      case Result.HOUSE:\n        return 'textDisabled';\n\n      default:\n        return 'text';\n    }\n  };\n\n  const getRoundPrefix = result => {\n    if (result === Result.LOSE) {\n      return '-';\n    }\n\n    if (result === Result.WIN) {\n      return '+';\n    }\n\n    return '';\n  };\n\n  const roundResult = getRoundResult(bet, currentEpoch);\n  const resultTextColor = getRoundColor(roundResult);\n  const resultTextPrefix = getRoundPrefix(roundResult);\n  const isOpenRound = round.epoch === currentEpoch;\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1; // Winners get the payout, otherwise the claim what they put it if it was canceled\n\n  const payout = roundResult === Result.WIN ? getNetPayout(bet, REWARD_RATE) : amount;\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(WaitIcon, {\n          color: \"primary\",\n          mr: \"6px\",\n          width: \"24px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          color: \"primary\",\n          bold: true,\n          children: t('Starting Soon')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this);\n    }\n\n    if (isLiveRound) {\n      return /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(PlayCircleOutlineIcon, {\n          color: \"secondary\",\n          mr: \"6px\",\n          width: \"24px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          color: \"secondary\",\n          bold: true,\n          children: t('Live Now')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        children: t('Your Result')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        color: resultTextColor,\n        lineHeight: 1,\n        children: roundResult === Result.CANCELED ? t('Canceled') : roundResult === Result.HOUSE ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [tooltipVisible && tooltip, /*#__PURE__*/_jsxDEV(Flex, {\n            alignItems: \"center\",\n            ref: targetRef,\n            children: [t('To Burn'), /*#__PURE__*/_jsxDEV(InfoIcon, {\n              width: \"16px\",\n              ml: \"4px\",\n              color: \"secondary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true) : `${resultTextPrefix}${formatBnb(payout)}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n\n  const handleSuccess = async () => {\n    // We have to mark the bet as claimed immediately because it does not update fast enough\n    dispatch(markAsCollected({\n      [bet.round.epoch]: true\n    }));\n    dispatch(fetchLedgerData({\n      account,\n      epochs: [bet.round.epoch]\n    }));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(StyledBet, {\n      onClick: toggleOpen,\n      role: \"button\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        width: \"48px\",\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          textAlign: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"12px\",\n            color: \"textSubtle\",\n            children: t('Round')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            bold: true,\n            lineHeight: 1,\n            children: round.epoch.toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YourResult, {\n        px: \"24px\",\n        children: renderBetLabel()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), roundResult === Result.WIN && canClaim && /*#__PURE__*/_jsxDEV(CollectWinningsButton, {\n        hasClaimed: !canClaim,\n        onSuccess: handleSuccess,\n        scale: \"sm\",\n        mr: \"8px\",\n        children: t('Collect')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 11\n      }, this), roundResult === Result.CANCELED && canClaim && /*#__PURE__*/_jsxDEV(ReclaimPositionButton, {\n        epoch: bet.round.epoch,\n        scale: \"sm\",\n        mr: \"8px\",\n        children: t('Reclaim')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this), !isOpenRound && !isLiveRound && /*#__PURE__*/_jsxDEV(IconButton, {\n        variant: \"text\",\n        scale: \"sm\",\n        children: isOpen ? /*#__PURE__*/_jsxDEV(ChevronUpIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 23\n        }, this) : /*#__PURE__*/_jsxDEV(ChevronDownIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 43\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), isOpen && /*#__PURE__*/_jsxDEV(BetDetails, {\n      bet: bet,\n      result: getRoundResult(bet, currentEpoch)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true);\n};\n\n_s(HistoricalBet, \"yX8v8u7SE/IC0wsrRvkDsNRd5y8=\", false, function () {\n  return [useTranslation, useTooltip, useGetCurrentEpoch, useGetPredictionsStatus, useGetIsClaimable, useAppDispatch, useWeb3React];\n});\n\n_c3 = HistoricalBet;\nexport default HistoricalBet;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledBet\");\n$RefreshReg$(_c2, \"YourResult\");\n$RefreshReg$(_c3, \"HistoricalBet\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Predictions/components/History/HistoricalBet.tsx"],"names":["React","useState","Box","ChevronDownIcon","ChevronUpIcon","Flex","IconButton","InfoIcon","PlayCircleOutlineIcon","Text","useTooltip","WaitIcon","useWeb3React","styled","useAppDispatch","PredictionStatus","REWARD_RATE","useGetCurrentEpoch","useGetIsClaimable","useGetPredictionsStatus","fetchLedgerData","markAsCollected","getRoundResult","Result","useTranslation","formatBnb","getNetPayout","CollectWinningsButton","ReclaimPositionButton","BetDetails","StyledBet","attrs","alignItems","p","theme","card","background","colors","cardBorder","YourResult","HistoricalBet","bet","isOpen","setIsOpen","amount","round","t","targetRef","tooltip","tooltipVisible","placement","currentEpoch","status","canClaim","epoch","dispatch","account","toggleOpen","getRoundColor","result","WIN","LOSE","CANCELED","HOUSE","getRoundPrefix","roundResult","resultTextColor","resultTextPrefix","isOpenRound","isLiveRound","LIVE","payout","renderBetLabel","handleSuccess","epochs","toLocaleString"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport {\n  Box,\n  ChevronDownIcon,\n  ChevronUpIcon,\n  Flex,\n  IconButton,\n  InfoIcon,\n  PlayCircleOutlineIcon,\n  Text,\n  useTooltip,\n  WaitIcon,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { useAppDispatch } from 'state'\nimport { Bet, PredictionStatus } from 'state/types'\nimport { REWARD_RATE } from 'state/predictions/config'\nimport { useGetCurrentEpoch, useGetIsClaimable, useGetPredictionsStatus } from 'state/predictions/hooks'\nimport { fetchLedgerData, markAsCollected } from 'state/predictions'\nimport { getRoundResult, Result } from 'state/predictions/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatBnb, getNetPayout } from './helpers'\nimport CollectWinningsButton from '../CollectWinningsButton'\nimport ReclaimPositionButton from '../ReclaimPositionButton'\nimport BetDetails from './BetDetails'\n\ninterface BetProps {\n  bet: Bet\n}\n\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\n  cursor: pointer;\n`\n\nconst YourResult = styled(Box)`\n  flex: 1;\n`\n\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const { amount, round } = bet\n  const { t } = useTranslation()\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Neither side wins this round')}\n      </Text>\n      <Text>\n        {t(\n          'The Locked Price & Closed Price are exactly the same (within 8 decimals), so neither side wins. All funds entered into UP and DOWN positions will go to the weekly CAKE burn.',\n        )}\n      </Text>\n    </>,\n    { placement: 'right' },\n  )\n\n  const currentEpoch = useGetCurrentEpoch()\n  const status = useGetPredictionsStatus()\n  const canClaim = useGetIsClaimable(bet.round.epoch)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  const toggleOpen = () => setIsOpen(!isOpen)\n\n  const getRoundColor = (result) => {\n    switch (result) {\n      case Result.WIN:\n        return 'success'\n      case Result.LOSE:\n        return 'failure'\n      case Result.CANCELED:\n        return 'textDisabled'\n      case Result.HOUSE:\n        return 'textDisabled'\n      default:\n        return 'text'\n    }\n  }\n\n  const getRoundPrefix = (result) => {\n    if (result === Result.LOSE) {\n      return '-'\n    }\n\n    if (result === Result.WIN) {\n      return '+'\n    }\n\n    return ''\n  }\n\n  const roundResult = getRoundResult(bet, currentEpoch)\n  const resultTextColor = getRoundColor(roundResult)\n  const resultTextPrefix = getRoundPrefix(roundResult)\n  const isOpenRound = round.epoch === currentEpoch\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\n\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\n  const payout = roundResult === Result.WIN ? getNetPayout(bet, REWARD_RATE) : amount\n\n  const renderBetLabel = () => {\n    if (isOpenRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"primary\" bold>\n            {t('Starting Soon')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    if (isLiveRound) {\n      return (\n        <Flex alignItems=\"center\">\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\n          <Text color=\"secondary\" bold>\n            {t('Live Now')}\n          </Text>\n        </Flex>\n      )\n    }\n\n    return (\n      <>\n        <Text fontSize=\"12px\" color=\"textSubtle\">\n          {t('Your Result')}\n        </Text>\n        <Text bold color={resultTextColor} lineHeight={1}>\n          {roundResult === Result.CANCELED ? (\n            t('Canceled')\n          ) : roundResult === Result.HOUSE ? (\n            <>\n              {tooltipVisible && tooltip}\n              <Flex alignItems=\"center\" ref={targetRef}>\n                {t('To Burn')}\n                <InfoIcon width=\"16px\" ml=\"4px\" color=\"secondary\" />\n              </Flex>\n            </>\n          ) : (\n            `${resultTextPrefix}${formatBnb(payout)}`\n          )}\n        </Text>\n      </>\n    )\n  }\n\n  const handleSuccess = async () => {\n    // We have to mark the bet as claimed immediately because it does not update fast enough\n    dispatch(markAsCollected({ [bet.round.epoch]: true }))\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\n  }\n\n  return (\n    <>\n      <StyledBet onClick={toggleOpen} role=\"button\">\n        <Box width=\"48px\">\n          <Text textAlign=\"center\">\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {t('Round')}\n            </Text>\n            <Text bold lineHeight={1}>\n              {round.epoch.toLocaleString()}\n            </Text>\n          </Text>\n        </Box>\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\n        {roundResult === Result.WIN && canClaim && (\n          <CollectWinningsButton hasClaimed={!canClaim} onSuccess={handleSuccess} scale=\"sm\" mr=\"8px\">\n            {t('Collect')}\n          </CollectWinningsButton>\n        )}\n        {roundResult === Result.CANCELED && canClaim && (\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\n            {t('Reclaim')}\n          </ReclaimPositionButton>\n        )}\n        {!isOpenRound && !isLiveRound && (\n          <IconButton variant=\"text\" scale=\"sm\">\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\n          </IconButton>\n        )}\n      </StyledBet>\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\n    </>\n  )\n}\n\nexport default HistoricalBet\n"]},"metadata":{},"sourceType":"module"}