{"ast":null,"code":"import { ChainId, JSBI, Percent } from '@pancakeswap/sdk';\nimport { mainnetTokens, testnetTokens } from './tokens';\nexport const ROUTER_ADDRESS = '0x10ED43C718714eb63d5aA57B78B54704E256024E'; // a list of tokens by chain\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST = {\n  [ChainId.MAINNET]: [mainnetTokens.wbnb, mainnetTokens.cake, mainnetTokens.busd, mainnetTokens.usdt, mainnetTokens.btcb, mainnetTokens.ust, mainnetTokens.eth, mainnetTokens.usdc],\n  [ChainId.TESTNET]: [testnetTokens.wbnb, testnetTokens.cake, testnetTokens.busd]\n};\n/**\n * Addittional bases for specific tokens\n * @example { [WBTC.address]: [renBTC], [renBTC.address]: [WBTC] }\n */\n\nexport const ADDITIONAL_BASES = {\n  [ChainId.MAINNET]: {}\n};\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n * @example [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\n */\n\nexport const CUSTOM_BASES = {\n  [ChainId.MAINNET]: {}\n}; // used for display in the default list when adding liquidity\n\nexport const SUGGESTED_BASES = {\n  [ChainId.MAINNET]: [mainnetTokens.busd, mainnetTokens.cake, mainnetTokens.btcb],\n  [ChainId.TESTNET]: [testnetTokens.wbnb, testnetTokens.cake, testnetTokens.busd]\n}; // used to construct the list of all pairs we consider by default in the frontend\n\nexport const BASES_TO_TRACK_LIQUIDITY_FOR = {\n  [ChainId.MAINNET]: [mainnetTokens.wbnb, mainnetTokens.dai, mainnetTokens.busd, mainnetTokens.usdt],\n  [ChainId.TESTNET]: [testnetTokens.wbnb, testnetTokens.cake, testnetTokens.busd]\n};\nexport const PINNED_PAIRS = {\n  [ChainId.MAINNET]: [[mainnetTokens.cake, mainnetTokens.wbnb], [mainnetTokens.busd, mainnetTokens.usdt], [mainnetTokens.dai, mainnetTokens.usdt]]\n};\nexport const NetworkContextName = 'NETWORK'; // default allowed slippage, in bips\n\nexport const INITIAL_ALLOWED_SLIPPAGE = 1200; // 20 minutes, denominated in seconds\n\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20;\nexport const BIG_INT_ZERO = JSBI.BigInt(0); // one basis point\n\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000));\nexport const BIPS_BASE = JSBI.BigInt(10000); // used for warning states\n\nexport const ALLOWED_PRICE_IMPACT_LOW = new Percent(JSBI.BigInt(100), BIPS_BASE); // 1%\n\nexport const ALLOWED_PRICE_IMPACT_MEDIUM = new Percent(JSBI.BigInt(300), BIPS_BASE); // 3%\n\nexport const ALLOWED_PRICE_IMPACT_HIGH = new Percent(JSBI.BigInt(500), BIPS_BASE); // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\n\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN = new Percent(JSBI.BigInt(1000), BIPS_BASE); // 10%\n// for non expert mode disable swaps above this\n\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT = new Percent(JSBI.BigInt(1500), BIPS_BASE); // 15%\n// used to ensure the user doesn't send so much BNB so they end up with <.01\n\nexport const MIN_BNB = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)); // .01 BNB\n\nexport const BETTER_TRADE_LESS_HOPS_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(10000));\nexport const ZERO_PERCENT = new Percent('0');\nexport const ONE_HUNDRED_PERCENT = new Percent('1'); // SDN OFAC addresses\n\nexport const BLOCKED_ADDRESSES = ['0x7F367cC41522cE07553e823bf3be79A889DEbe1B', '0xd882cFc20F52f2599D84b8e8D58C7FB62cfE344b', '0x901bb9583b24D97e995513C6778dc6888AB6870e', '0xA7e5d5A720f06526557c513402f2e6B5fA20b008', '0x8576aCC5C05D6Ce88f4e49bf65BdF0C62F91353C'];\nexport { default as farmsConfig } from './farms';\nexport { default as poolsConfig } from './pools';\nexport { default as ifosConfig } from './ifo';","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/config/constants/index.ts"],"names":["ChainId","JSBI","Percent","mainnetTokens","testnetTokens","ROUTER_ADDRESS","BASES_TO_CHECK_TRADES_AGAINST","MAINNET","wbnb","cake","busd","usdt","btcb","ust","eth","usdc","TESTNET","ADDITIONAL_BASES","CUSTOM_BASES","SUGGESTED_BASES","BASES_TO_TRACK_LIQUIDITY_FOR","dai","PINNED_PAIRS","NetworkContextName","INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","BIG_INT_ZERO","BigInt","ONE_BIPS","BIPS_BASE","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","BLOCKED_PRICE_IMPACT_NON_EXPERT","MIN_BNB","exponentiate","BETTER_TRADE_LESS_HOPS_THRESHOLD","ZERO_PERCENT","ONE_HUNDRED_PERCENT","BLOCKED_ADDRESSES","default","farmsConfig","poolsConfig","ifosConfig"],"mappings":"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","sourcesContent":["import { ChainId, JSBI, Percent, Token } from '@pancakeswap/sdk'\nimport { mainnetTokens, testnetTokens } from './tokens'\n\nexport const ROUTER_ADDRESS = '0x10ED43C718714eb63d5aA57B78B54704E256024E'\n\n// a list of tokens by chain\ntype ChainTokenList = {\n  readonly [chainId in ChainId]: Token[]\n}\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\n  [ChainId.MAINNET]: [\n    mainnetTokens.wbnb,\n    mainnetTokens.cake,\n    mainnetTokens.busd,\n    mainnetTokens.usdt,\n    mainnetTokens.btcb,\n    mainnetTokens.ust,\n    mainnetTokens.eth,\n    mainnetTokens.usdc,\n  ],\n  [ChainId.TESTNET]: [testnetTokens.wbnb, testnetTokens.cake, testnetTokens.busd],\n}\n\n/**\n * Addittional bases for specific tokens\n * @example { [WBTC.address]: [renBTC], [renBTC.address]: [WBTC] }\n */\nexport const ADDITIONAL_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\n  [ChainId.MAINNET]: {},\n}\n\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n * @example [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\n */\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\n  [ChainId.MAINNET]: {},\n}\n\n// used for display in the default list when adding liquidity\nexport const SUGGESTED_BASES: ChainTokenList = {\n  [ChainId.MAINNET]: [mainnetTokens.busd, mainnetTokens.cake, mainnetTokens.btcb],\n  [ChainId.TESTNET]: [testnetTokens.wbnb, testnetTokens.cake, testnetTokens.busd],\n}\n\n// used to construct the list of all pairs we consider by default in the frontend\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\n  [ChainId.MAINNET]: [mainnetTokens.wbnb, mainnetTokens.dai, mainnetTokens.busd, mainnetTokens.usdt],\n  [ChainId.TESTNET]: [testnetTokens.wbnb, testnetTokens.cake, testnetTokens.busd],\n}\n\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\n  [ChainId.MAINNET]: [\n    [mainnetTokens.cake, mainnetTokens.wbnb],\n    [mainnetTokens.busd, mainnetTokens.usdt],\n    [mainnetTokens.dai, mainnetTokens.usdt],\n  ],\n}\n\nexport const NetworkContextName = 'NETWORK'\n\n// default allowed slippage, in bips\nexport const INITIAL_ALLOWED_SLIPPAGE = 1200\n// 20 minutes, denominated in seconds\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\n\nexport const BIG_INT_ZERO = JSBI.BigInt(0)\n\n// one basis point\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\nexport const BIPS_BASE = JSBI.BigInt(10000)\n// used for warning states\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\n// for non expert mode disable swaps above this\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\n\n// used to ensure the user doesn't send so much BNB so they end up with <.01\nexport const MIN_BNB: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 BNB\nexport const BETTER_TRADE_LESS_HOPS_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(10000))\n\nexport const ZERO_PERCENT = new Percent('0')\nexport const ONE_HUNDRED_PERCENT = new Percent('1')\n\n// SDN OFAC addresses\nexport const BLOCKED_ADDRESSES: string[] = [\n  '0x7F367cC41522cE07553e823bf3be79A889DEbe1B',\n  '0xd882cFc20F52f2599D84b8e8D58C7FB62cfE344b',\n  '0x901bb9583b24D97e995513C6778dc6888AB6870e',\n  '0xA7e5d5A720f06526557c513402f2e6B5fA20b008',\n  '0x8576aCC5C05D6Ce88f4e49bf65BdF0C62F91353C',\n]\n\nexport { default as farmsConfig } from './farms'\nexport { default as poolsConfig } from './pools'\nexport { default as ifosConfig } from './ifo'\n"]},"metadata":{},"sourceType":"module"}