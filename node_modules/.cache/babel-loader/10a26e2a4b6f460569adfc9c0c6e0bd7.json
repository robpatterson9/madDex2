{"ast":null,"code":"import { request, gql } from 'graphql-request';\nimport { INFO_CLIENT } from 'config/constants/endpoints';\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers';\n/**\n * Transactions of the given pool, used on Pool page\n */\n\nconst POOL_TRANSACTIONS = gql`\n  query poolTransactions($address: Bytes!) {\n    mints(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burns(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`;\n\nconst fetchPoolTransactions = async address => {\n  try {\n    const data = await request(INFO_CLIENT, POOL_TRANSACTIONS, {\n      address\n    });\n    const mints = data.mints.map(mapMints);\n    const burns = data.burns.map(mapBurns);\n    const swaps = data.swaps.map(mapSwaps);\n    return {\n      data: [...mints, ...burns, ...swaps],\n      error: false\n    };\n  } catch (error) {\n    console.error(`Failed to fetch transactions for pool ${address}`, error);\n    return {\n      error: true\n    };\n  }\n};\n\nexport default fetchPoolTransactions;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/queries/pools/transactions.ts"],"names":["request","gql","INFO_CLIENT","mapMints","mapBurns","mapSwaps","POOL_TRANSACTIONS","fetchPoolTransactions","address","data","mints","map","burns","swaps","error","console"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AAGA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,QAA7B,QAA6C,4BAA7C;AACA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAGL,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA3DA;;AAmEA,MAAMM,qBAAqB,GAAG,MAAOC,OAAP,IAA8E;AAC1G,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMT,OAAO,CAAqBE,WAArB,EAAkCI,iBAAlC,EAAqD;AAC7EE,MAAAA;AAD6E,KAArD,CAA1B;AAGA,UAAME,KAAK,GAAGD,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAeR,QAAf,CAAd;AACA,UAAMS,KAAK,GAAGH,IAAI,CAACG,KAAL,CAAWD,GAAX,CAAeP,QAAf,CAAd;AACA,UAAMS,KAAK,GAAGJ,IAAI,CAACI,KAAL,CAAWF,GAAX,CAAeN,QAAf,CAAd;AACA,WAAO;AAAEI,MAAAA,IAAI,EAAE,CAAC,GAAGC,KAAJ,EAAW,GAAGE,KAAd,EAAqB,GAAGC,KAAxB,CAAR;AAAwCC,MAAAA,KAAK,EAAE;AAA/C,KAAP;AACD,GARD,CAQE,OAAOA,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAe,yCAAwCN,OAAQ,EAA/D,EAAkEM,KAAlE;AACA,WAAO;AACLA,MAAAA,KAAK,EAAE;AADF,KAAP;AAGD;AACF,CAfD;;AAiBA,eAAeP,qBAAf","sourcesContent":["import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { Transaction } from 'state/info/types'\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\n/**\n * Transactions of the given pool, used on Pool page\n */\nconst POOL_TRANSACTIONS = gql`\n  query poolTransactions($address: Bytes!) {\n    mints(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burns(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\n\ninterface TransactionResults {\n  mints: MintResponse[]\n  swaps: SwapResponse[]\n  burns: BurnResponse[]\n}\n\nconst fetchPoolTransactions = async (address: string): Promise<{ data?: Transaction[]; error: boolean }> => {\n  try {\n    const data = await request<TransactionResults>(INFO_CLIENT, POOL_TRANSACTIONS, {\n      address,\n    })\n    const mints = data.mints.map(mapMints)\n    const burns = data.burns.map(mapBurns)\n    const swaps = data.swaps.map(mapSwaps)\n    return { data: [...mints, ...burns, ...swaps], error: false }\n  } catch (error) {\n    console.error(`Failed to fetch transactions for pool ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchPoolTransactions\n"]},"metadata":{},"sourceType":"module"}