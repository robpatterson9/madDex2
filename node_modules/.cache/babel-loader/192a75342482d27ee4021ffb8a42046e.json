{"ast":null,"code":"import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React,{useState,useMemo,useEffect}from'react';import styled from'styled-components';import{Flex,Box,Text,Heading,Card,Skeleton}from'@pancakeswap/uikit';import{format,fromUnixTime}from'date-fns';import{useTranslation}from'contexts/Localization';import Page from'components/Layout/Page';import LineChart from'views/Info/components/InfoCharts/LineChart';import TokenTable from'views/Info/components/InfoTables/TokensTable';import PoolTable from'views/Info/components/InfoTables/PoolsTable';import{formatAmount}from'views/Info/utils/formatInfoNumbers';import BarChart from'views/Info/components/InfoCharts/BarChart';import{useAllPoolData,useAllTokenData,useProtocolChartData,useProtocolData,useProtocolTransactions}from'state/info/hooks';import TransactionTable from'views/Info/components/InfoTables/TransactionsTable';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export var ChartCardsContainer=styled(Flex)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  justify-content: space-between;\\n  flex-direction: column;\\n  width: 100%;\\n  padding: 0;\\n  gap: 1em;\\n\\n  & > * {\\n    width: 100%;\\n  }\\n\\n  \",\" {\\n    flex-direction: row;\\n  } ;\\n\"])),function(_ref){var theme=_ref.theme;return theme.mediaQueries.md;});var Overview=function Overview(){var _useTranslation=useTranslation(),t=_useTranslation.t;var _useState=useState(),_useState2=_slicedToArray(_useState,2),liquidityHover=_useState2[0],setLiquidityHover=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),liquidityDateHover=_useState4[0],setLiquidityDateHover=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),volumeHover=_useState6[0],setVolumeHover=_useState6[1];var _useState7=useState(),_useState8=_slicedToArray(_useState7,2),volumeDateHover=_useState8[0],setVolumeDateHover=_useState8[1];var _useProtocolData=useProtocolData(),_useProtocolData2=_slicedToArray(_useProtocolData,1),protocolData=_useProtocolData2[0];var _useProtocolChartData=useProtocolChartData(),_useProtocolChartData2=_slicedToArray(_useProtocolChartData,1),chartData=_useProtocolChartData2[0];var _useProtocolTransacti=useProtocolTransactions(),_useProtocolTransacti2=_slicedToArray(_useProtocolTransacti,1),transactions=_useProtocolTransacti2[0];var currentDate=format(new Date(),'MMM d, yyyy');// Getting latest liquidity and volumeUSD to display on top of chart when not hovered\nuseEffect(function(){if(volumeHover==null&&protocolData){setVolumeHover(protocolData.volumeUSD);}},[protocolData,volumeHover]);useEffect(function(){if(liquidityHover==null&&protocolData){setLiquidityHover(protocolData.liquidityUSD);}},[liquidityHover,protocolData]);var formattedLiquidityData=useMemo(function(){if(chartData){return chartData.map(function(day){return{time:fromUnixTime(day.date),value:day.liquidityUSD};});}return[];},[chartData]);var formattedVolumeData=useMemo(function(){if(chartData){return chartData.map(function(day){return{time:fromUnixTime(day.date),value:day.volumeUSD};});}return[];},[chartData]);var allTokens=useAllTokenData();var formattedTokens=useMemo(function(){return Object.values(allTokens).map(function(token){return token.data;}).filter(function(token){return token;});},[allTokens]);var allPoolData=useAllPoolData();var poolDatas=useMemo(function(){return Object.values(allPoolData).map(function(pool){return pool.data;}).filter(function(pool){return pool;});},[allPoolData]);var somePoolsAreLoading=useMemo(function(){return Object.values(allPoolData).some(function(pool){return!pool.data;});},[allPoolData]);return/*#__PURE__*/_jsxs(Page,{children:[/*#__PURE__*/_jsx(Heading,{scale:\"lg\",mb:\"16px\",id:\"info-overview-title\",children:t('PancakeSwap Info & Analytics')}),/*#__PURE__*/_jsxs(ChartCardsContainer,{children:[/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(Box,{p:['16px','16px','24px'],children:[/*#__PURE__*/_jsx(Text,{bold:true,color:\"secondary\",children:t('Liquidity')}),liquidityHover>0?/*#__PURE__*/_jsxs(Text,{bold:true,fontSize:\"24px\",children:[\"$\",formatAmount(liquidityHover)]}):/*#__PURE__*/_jsx(Skeleton,{width:\"128px\",height:\"36px\"}),/*#__PURE__*/_jsx(Text,{children:liquidityDateHover!==null&&liquidityDateHover!==void 0?liquidityDateHover:currentDate}),/*#__PURE__*/_jsx(Box,{height:\"250px\",children:/*#__PURE__*/_jsx(LineChart,{data:formattedLiquidityData,setHoverValue:setLiquidityHover,setHoverDate:setLiquidityDateHover})})]})}),/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(Box,{p:['16px','16px','24px'],children:[/*#__PURE__*/_jsx(Text,{bold:true,color:\"secondary\",children:t('Volume 24H')}),volumeHover>0?/*#__PURE__*/_jsxs(Text,{bold:true,fontSize:\"24px\",children:[\"$\",formatAmount(volumeHover)]}):/*#__PURE__*/_jsx(Skeleton,{width:\"128px\",height:\"36px\"}),/*#__PURE__*/_jsx(Text,{children:volumeDateHover!==null&&volumeDateHover!==void 0?volumeDateHover:currentDate}),/*#__PURE__*/_jsx(Box,{height:\"250px\",children:/*#__PURE__*/_jsx(BarChart,{data:formattedVolumeData,setHoverValue:setVolumeHover,setHoverDate:setVolumeDateHover})})]})})]}),/*#__PURE__*/_jsx(Heading,{scale:\"lg\",mt:\"40px\",mb:\"16px\",children:t('Top Tokens')}),/*#__PURE__*/_jsx(TokenTable,{tokenDatas:formattedTokens}),/*#__PURE__*/_jsx(Heading,{scale:\"lg\",mt:\"40px\",mb:\"16px\",children:t('Top Pools')}),/*#__PURE__*/_jsx(PoolTable,{poolDatas:poolDatas,loading:somePoolsAreLoading}),/*#__PURE__*/_jsx(Heading,{scale:\"lg\",mt:\"40px\",mb:\"16px\",children:t('Transactions')}),/*#__PURE__*/_jsx(TransactionTable,{transactions:transactions})]});};export default Overview;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Info/Overview/index.tsx"],"names":["React","useState","useMemo","useEffect","styled","Flex","Box","Text","Heading","Card","Skeleton","format","fromUnixTime","useTranslation","Page","LineChart","TokenTable","PoolTable","formatAmount","BarChart","useAllPoolData","useAllTokenData","useProtocolChartData","useProtocolData","useProtocolTransactions","TransactionTable","ChartCardsContainer","theme","mediaQueries","md","Overview","t","liquidityHover","setLiquidityHover","liquidityDateHover","setLiquidityDateHover","volumeHover","setVolumeHover","volumeDateHover","setVolumeDateHover","protocolData","chartData","transactions","currentDate","Date","volumeUSD","liquidityUSD","formattedLiquidityData","map","day","time","date","value","formattedVolumeData","allTokens","formattedTokens","Object","values","token","data","filter","allPoolData","poolDatas","pool","somePoolsAreLoading","some"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Box, Text, Heading, Card, Skeleton } from '@pancakeswap/uikit'\nimport { format, fromUnixTime } from 'date-fns'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/Layout/Page'\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\nimport {\n  useAllPoolData,\n  useAllTokenData,\n  useProtocolChartData,\n  useProtocolData,\n  useProtocolTransactions,\n} from 'state/info/hooks'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\n\nexport const ChartCardsContainer = styled(Flex)`\n  justify-content: space-between;\n  flex-direction: column;\n  width: 100%;\n  padding: 0;\n  gap: 1em;\n\n  & > * {\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  } ;\n`\n\nconst Overview: React.FC = () => {\n  const { t } = useTranslation()\n  const [liquidityHover, setLiquidityHover] = useState<number | undefined>()\n  const [liquidityDateHover, setLiquidityDateHover] = useState<string | undefined>()\n  const [volumeHover, setVolumeHover] = useState<number | undefined>()\n  const [volumeDateHover, setVolumeDateHover] = useState<string | undefined>()\n\n  const [protocolData] = useProtocolData()\n  const [chartData] = useProtocolChartData()\n  const [transactions] = useProtocolTransactions()\n\n  const currentDate = format(new Date(), 'MMM d, yyyy')\n\n  // Getting latest liquidity and volumeUSD to display on top of chart when not hovered\n  useEffect(() => {\n    if (volumeHover == null && protocolData) {\n      setVolumeHover(protocolData.volumeUSD)\n    }\n  }, [protocolData, volumeHover])\n  useEffect(() => {\n    if (liquidityHover == null && protocolData) {\n      setLiquidityHover(protocolData.liquidityUSD)\n    }\n  }, [liquidityHover, protocolData])\n\n  const formattedLiquidityData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.liquidityUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const formattedVolumeData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.volumeUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const allTokens = useAllTokenData()\n\n  const formattedTokens = useMemo(() => {\n    return Object.values(allTokens)\n      .map((token) => token.data)\n      .filter((token) => token)\n  }, [allTokens])\n\n  const allPoolData = useAllPoolData()\n  const poolDatas = useMemo(() => {\n    return Object.values(allPoolData)\n      .map((pool) => pool.data)\n      .filter((pool) => pool)\n  }, [allPoolData])\n\n  const somePoolsAreLoading = useMemo(() => {\n    return Object.values(allPoolData).some((pool) => !pool.data)\n  }, [allPoolData])\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\" id=\"info-overview-title\">\n        {t('PancakeSwap Info & Analytics')}\n      </Heading>\n      <ChartCardsContainer>\n        <Card>\n          <Box p={['16px', '16px', '24px']}>\n            <Text bold color=\"secondary\">\n              {t('Liquidity')}\n            </Text>\n            {liquidityHover > 0 ? (\n              <Text bold fontSize=\"24px\">\n                ${formatAmount(liquidityHover)}\n              </Text>\n            ) : (\n              <Skeleton width=\"128px\" height=\"36px\" />\n            )}\n            <Text>{liquidityDateHover ?? currentDate}</Text>\n            <Box height=\"250px\">\n              <LineChart\n                data={formattedLiquidityData}\n                setHoverValue={setLiquidityHover}\n                setHoverDate={setLiquidityDateHover}\n              />\n            </Box>\n          </Box>\n        </Card>\n        <Card>\n          <Box p={['16px', '16px', '24px']}>\n            <Text bold color=\"secondary\">\n              {t('Volume 24H')}\n            </Text>\n            {volumeHover > 0 ? (\n              <Text bold fontSize=\"24px\">\n                ${formatAmount(volumeHover)}\n              </Text>\n            ) : (\n              <Skeleton width=\"128px\" height=\"36px\" />\n            )}\n            <Text>{volumeDateHover ?? currentDate}</Text>\n            <Box height=\"250px\">\n              <BarChart data={formattedVolumeData} setHoverValue={setVolumeHover} setHoverDate={setVolumeDateHover} />\n            </Box>\n          </Box>\n        </Card>\n      </ChartCardsContainer>\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Tokens')}\n      </Heading>\n      <TokenTable tokenDatas={formattedTokens} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Pools')}\n      </Heading>\n      <PoolTable poolDatas={poolDatas} loading={somePoolsAreLoading} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Transactions')}\n      </Heading>\n      <TransactionTable transactions={transactions} />\n    </Page>\n  )\n}\n\nexport default Overview\n"]},"metadata":{},"sourceType":"module"}