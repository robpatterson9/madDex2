{"ast":null,"code":"import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React from'react';import styled from'styled-components';import{Text,useMatchBreakpoints}from'@pancakeswap/uikit';import{useCakeVault}from'state/pools/hooks';import{useTranslation}from'contexts/Localization';import BaseCell,{CellContent}from'./BaseCell';import Apr from'../Apr';import{convertSharesToCake}from'../../../helpers';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var StyledCell=styled(BaseCell)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  flex: 1 0 50px;\\n  \",\" {\\n    flex: 0 0 120px;\\n  }\\n\"])),function(_ref){var theme=_ref.theme;return theme.mediaQueries.md;});var AutoAprCell=function AutoAprCell(_ref2){var pool=_ref2.pool;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useMatchBreakpoints=useMatchBreakpoints(),isMobile=_useMatchBreakpoints.isMobile;var _useCakeVault=useCakeVault(),userShares=_useCakeVault.userData.userShares,performanceFee=_useCakeVault.fees.performanceFee,pricePerFullShare=_useCakeVault.pricePerFullShare;var _convertSharesToCake=convertSharesToCake(userShares,pricePerFullShare),cakeAsBigNumber=_convertSharesToCake.cakeAsBigNumber;var performanceFeeAsDecimal=performanceFee&&performanceFee/100;return/*#__PURE__*/_jsx(StyledCell,{role:\"cell\",children:/*#__PURE__*/_jsxs(CellContent,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",color:\"textSubtle\",textAlign:\"left\",children:t('APY')}),/*#__PURE__*/_jsx(Apr,{pool:pool,stakedBalance:cakeAsBigNumber,performanceFee:performanceFeeAsDecimal,showIcon:!isMobile})]})});};export default AutoAprCell;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolsTable/Cells/AutoAprCell.tsx"],"names":["React","styled","Text","useMatchBreakpoints","useCakeVault","useTranslation","BaseCell","CellContent","Apr","convertSharesToCake","StyledCell","theme","mediaQueries","md","AutoAprCell","pool","t","isMobile","userShares","userData","performanceFee","fees","pricePerFullShare","cakeAsBigNumber","performanceFeeAsDecimal"],"mappings":"4LAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,IAAT,CAAeC,mBAAf,KAA0C,oBAA1C,CAEA,OAASC,YAAT,KAA6B,mBAA7B,CACA,OAASC,cAAT,KAA+B,uBAA/B,CACA,MAAOC,CAAAA,QAAP,EAAmBC,WAAnB,KAAsC,YAAtC,CACA,MAAOC,CAAAA,GAAP,KAAgB,QAAhB,CACA,OAASC,mBAAT,KAAoC,kBAApC,C,wFAMA,GAAMC,CAAAA,UAAU,CAAGT,MAAM,CAACK,QAAD,CAAT,0HAEZ,kBAAGK,CAAAA,KAAH,MAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACC,YAAN,CAAmBC,EAAlC,EAFY,CAAhB,CAOA,GAAMC,CAAAA,WAAmC,CAAG,QAAtCA,CAAAA,WAAsC,OAAc,IAAXC,CAAAA,IAAW,OAAXA,IAAW,CACxD,oBAAcV,cAAc,EAA5B,CAAQW,CAAR,iBAAQA,CAAR,CACA,yBAAqBb,mBAAmB,EAAxC,CAAQc,QAAR,sBAAQA,QAAR,CAEA,kBAIIb,YAAY,EAJhB,CACcc,UADd,eACEC,QADF,CACcD,UADd,CAEUE,cAFV,eAEEC,IAFF,CAEUD,cAFV,CAGEE,iBAHF,eAGEA,iBAHF,CAMA,yBAA4Bb,mBAAmB,CAACS,UAAD,CAAaI,iBAAb,CAA/C,CAAQC,eAAR,sBAAQA,eAAR,CACA,GAAMC,CAAAA,uBAAuB,CAAGJ,cAAc,EAAIA,cAAc,CAAG,GAAnE,CAEA,mBACE,KAAC,UAAD,EAAY,IAAI,CAAC,MAAjB,uBACE,MAAC,WAAD,yBACE,KAAC,IAAD,EAAM,QAAQ,CAAC,MAAf,CAAsB,KAAK,CAAC,YAA5B,CAAyC,SAAS,CAAC,MAAnD,UACGJ,CAAC,CAAC,KAAD,CADJ,EADF,cAIE,KAAC,GAAD,EACE,IAAI,CAAED,IADR,CAEE,aAAa,CAAEQ,eAFjB,CAGE,cAAc,CAAEC,uBAHlB,CAIE,QAAQ,CAAE,CAACP,QAJb,EAJF,GADF,EADF,CAeD,CA5BD,CA8BA,cAAeH,CAAAA,WAAf","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { DeserializedPool } from 'state/types'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell, { CellContent } from './BaseCell'\nimport Apr from '../Apr'\nimport { convertSharesToCake } from '../../../helpers'\n\ninterface AprCellProps {\n  pool: DeserializedPool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 1 0 50px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n  }\n`\n\nconst AutoAprCell: React.FC<AprCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  const {\n    userData: { userShares },\n    fees: { performanceFee },\n    pricePerFullShare,\n  } = useCakeVault()\n\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('APY')}\n        </Text>\n        <Apr\n          pool={pool}\n          stakedBalance={cakeAsBigNumber}\n          performanceFee={performanceFeeAsDecimal}\n          showIcon={!isMobile}\n        />\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AutoAprCell\n"]},"metadata":{},"sourceType":"module"}