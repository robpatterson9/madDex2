{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Predictions/components/CollectRoundWinningsModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { ModalContainer, ModalBody, ModalTitle, ModalHeader, Button, AutoRenewIcon, TrophyGoldIcon, Text, Flex, Heading, Box, ModalCloseButton, Skeleton } from '@pancakeswap/uikit';\nimport { useWeb3React } from '@web3-react/core';\nimport { useAppDispatch } from 'state';\nimport { REWARD_RATE } from 'state/predictions/config';\nimport { fetchNodeHistory, markAsCollected } from 'state/predictions';\nimport { useTranslation } from 'contexts/Localization';\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice';\nimport useToast from 'hooks/useToast';\nimport { usePredictionsContract } from 'hooks/useContract';\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice';\nimport { ToastDescriptionWithTx } from 'components/Toast';\nimport { useGetHistory, useGetIsFetchingHistory } from 'state/predictions/hooks';\nimport { multiplyPriceByAmount } from 'utils/prices';\nimport { formatNumber } from 'utils/formatBalance';\nimport { getPayout } from './History/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Modal = styled(ModalContainer)`\n  overflow: visible;\n`;\n_c = Modal;\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`;\n_c2 = BunnyDecoration;\n\nconst calculateClaimableRounds = history => {\n  if (!history) {\n    return {\n      epochs: [],\n      total: 0\n    };\n  }\n\n  return history.reduce((accum, bet) => {\n    if (!bet.claimed && bet.position === bet.round.position) {\n      const betPayout = getPayout(bet, REWARD_RATE);\n      return { ...accum,\n        epochs: [...accum.epochs, bet.round.epoch],\n        total: accum.total + betPayout\n      };\n    }\n\n    return accum;\n  }, {\n    epochs: [],\n    total: 0\n  });\n};\n\nconst CollectRoundWinningsModal = ({\n  onDismiss,\n  onSuccess\n}) => {\n  _s();\n\n  const [isPendingTx, setIsPendingTx] = useState(false);\n  const {\n    account\n  } = useWeb3React();\n  const {\n    t\n  } = useTranslation();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n  const predictionsContract = usePredictionsContract();\n  const bnbBusdPrice = useBNBBusdPrice();\n  const dispatch = useAppDispatch();\n  const isLoadingHistory = useGetIsFetchingHistory();\n  const history = useGetHistory();\n  const {\n    epochs,\n    total\n  } = calculateClaimableRounds(history);\n  const totalBnb = multiplyPriceByAmount(bnbBusdPrice, total);\n  useEffect(() => {\n    // Fetch history if they have not opened the history pane yet\n    if (history.length === 0) {\n      dispatch(fetchNodeHistory({\n        account\n      }));\n    }\n  }, [account, history, dispatch]);\n\n  const handleClick = async () => {\n    try {\n      const tx = await callWithGasPrice(predictionsContract, 'claim', [epochs]);\n      setIsPendingTx(true);\n      const receipt = await tx.wait(); // Immediately mark rounds as claimed\n\n      dispatch(markAsCollected(epochs.reduce((accum, epoch) => {\n        return { ...accum,\n          [epoch]: true\n        };\n      }, {})));\n\n      if (onSuccess) {\n        await onSuccess();\n      }\n\n      onDismiss();\n      setIsPendingTx(false);\n      toastSuccess(t('Winnings collected!'), /*#__PURE__*/_jsxDEV(ToastDescriptionWithTx, {\n        txHash: receipt.transactionHash,\n        children: t('Your prizes have been sent to your wallet')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this));\n    } catch (error) {\n      var _error$data;\n\n      console.error('Unable to claim winnings', error);\n      toastError(t('Error'), (error === null || error === void 0 ? void 0 : (_error$data = error.data) === null || _error$data === void 0 ? void 0 : _error$data.message) || t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n    } finally {\n      setIsPendingTx(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    minWidth: \"288px\",\n    position: \"relative\",\n    mt: \"124px\",\n    children: [/*#__PURE__*/_jsxDEV(BunnyDecoration, {\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/decorations/prize-bunny.png\",\n        alt: \"bunny decoration\",\n        height: \"124px\",\n        width: \"168px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalHeader, {\n      children: [/*#__PURE__*/_jsxDEV(ModalTitle, {\n        children: /*#__PURE__*/_jsxDEV(Heading, {\n          children: t('Collect Winnings')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalCloseButton, {\n        onDismiss: onDismiss\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n      p: \"24px\",\n      children: [/*#__PURE__*/_jsxDEV(TrophyGoldIcon, {\n        width: \"96px\",\n        mx: \"auto\",\n        mb: \"24px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"start\",\n        justifyContent: \"space-between\",\n        mb: \"8px\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: t('Collecting')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          style: {\n            textAlign: 'right'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            children: `${formatNumber(total, 0, 4)} BNB`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"12px\",\n            color: \"textSubtle\",\n            children: `~$${totalBnb.toFixed(2)}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"start\",\n        justifyContent: \"center\",\n        mb: \"24px\",\n        children: isLoadingHistory ? /*#__PURE__*/_jsxDEV(Skeleton, {\n          height: \"21\",\n          width: \"140px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Text, {\n          color: \"textSubtle\",\n          fontSize: \"14px\",\n          children: epochs.length === 1 ? t('From round %round%', {\n            round: epochs[0]\n          }) : t('From rounds %rounds%', {\n            rounds: epochs.join(', ')\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        mb: \"8px\",\n        onClick: handleClick,\n        isLoading: isPendingTx || isLoadingHistory,\n        endIcon: isPendingTx ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n          spin: true,\n          color: \"currentColor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 34\n        }, this) : null,\n        children: t('Confirm')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CollectRoundWinningsModal, \"GKgRIiyanGYCOxMNBHBTMkLJb7Q=\", false, function () {\n  return [useWeb3React, useTranslation, useToast, useCallWithGasPrice, usePredictionsContract, useBNBBusdPrice, useAppDispatch, useGetIsFetchingHistory, useGetHistory];\n});\n\n_c3 = CollectRoundWinningsModal;\nexport default CollectRoundWinningsModal;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Modal\");\n$RefreshReg$(_c2, \"BunnyDecoration\");\n$RefreshReg$(_c3, \"CollectRoundWinningsModal\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Predictions/components/CollectRoundWinningsModal.tsx"],"names":["React","useEffect","useState","styled","ModalContainer","ModalBody","ModalTitle","ModalHeader","Button","AutoRenewIcon","TrophyGoldIcon","Text","Flex","Heading","Box","ModalCloseButton","Skeleton","useWeb3React","useAppDispatch","REWARD_RATE","fetchNodeHistory","markAsCollected","useTranslation","useBNBBusdPrice","useToast","usePredictionsContract","useCallWithGasPrice","ToastDescriptionWithTx","useGetHistory","useGetIsFetchingHistory","multiplyPriceByAmount","formatNumber","getPayout","Modal","BunnyDecoration","div","calculateClaimableRounds","history","epochs","total","reduce","accum","bet","claimed","position","round","betPayout","epoch","CollectRoundWinningsModal","onDismiss","onSuccess","isPendingTx","setIsPendingTx","account","t","toastSuccess","toastError","callWithGasPrice","predictionsContract","bnbBusdPrice","dispatch","isLoadingHistory","totalBnb","length","handleClick","tx","receipt","wait","transactionHash","error","console","data","message","textAlign","toFixed","rounds","join"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  ModalContainer,\n  ModalBody,\n  ModalTitle,\n  ModalHeader,\n  InjectedModalProps,\n  Button,\n  AutoRenewIcon,\n  TrophyGoldIcon,\n  Text,\n  Flex,\n  Heading,\n  Box,\n  ModalCloseButton,\n  Skeleton,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { REWARD_RATE } from 'state/predictions/config'\nimport { fetchNodeHistory, markAsCollected } from 'state/predictions'\nimport { Bet } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport useToast from 'hooks/useToast'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useGetHistory, useGetIsFetchingHistory } from 'state/predictions/hooks'\nimport { multiplyPriceByAmount } from 'utils/prices'\nimport { formatNumber } from 'utils/formatBalance'\nimport { getPayout } from './History/helpers'\n\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\n  onSuccess?: () => Promise<void>\n}\n\nconst Modal = styled(ModalContainer)`\n  overflow: visible;\n`\n\nconst BunnyDecoration = styled.div`\n  position: absolute;\n  top: -116px; // line up bunny at the top of the modal\n  left: 0px;\n  text-align: center;\n  width: 100%;\n`\n\ninterface ClaimableRounds {\n  epochs: number[]\n  total: number\n}\n\nconst calculateClaimableRounds = (history): ClaimableRounds => {\n  if (!history) {\n    return { epochs: [], total: 0 }\n  }\n\n  return history.reduce(\n    (accum: ClaimableRounds, bet: Bet) => {\n      if (!bet.claimed && bet.position === bet.round.position) {\n        const betPayout = getPayout(bet, REWARD_RATE)\n        return {\n          ...accum,\n          epochs: [...accum.epochs, bet.round.epoch],\n          total: accum.total + betPayout,\n        }\n      }\n\n      return accum\n    },\n    { epochs: [], total: 0 },\n  )\n}\n\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({ onDismiss, onSuccess }) => {\n  const [isPendingTx, setIsPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { toastSuccess, toastError } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const predictionsContract = usePredictionsContract()\n  const bnbBusdPrice = useBNBBusdPrice()\n  const dispatch = useAppDispatch()\n  const isLoadingHistory = useGetIsFetchingHistory()\n  const history = useGetHistory()\n\n  const { epochs, total } = calculateClaimableRounds(history)\n  const totalBnb = multiplyPriceByAmount(bnbBusdPrice, total)\n\n  useEffect(() => {\n    // Fetch history if they have not opened the history pane yet\n    if (history.length === 0) {\n      dispatch(fetchNodeHistory({ account }))\n    }\n  }, [account, history, dispatch])\n\n  const handleClick = async () => {\n    try {\n      const tx = await callWithGasPrice(predictionsContract, 'claim', [epochs])\n      setIsPendingTx(true)\n      const receipt = await tx.wait()\n\n      // Immediately mark rounds as claimed\n      dispatch(\n        markAsCollected(\n          epochs.reduce((accum, epoch) => {\n            return { ...accum, [epoch]: true }\n          }, {}),\n        ),\n      )\n\n      if (onSuccess) {\n        await onSuccess()\n      }\n\n      onDismiss()\n      setIsPendingTx(false)\n      toastSuccess(\n        t('Winnings collected!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n          {t('Your prizes have been sent to your wallet')}\n        </ToastDescriptionWithTx>,\n      )\n    } catch (error) {\n      console.error('Unable to claim winnings', error)\n      toastError(\n        t('Error'),\n        error?.data?.message || t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n      )\n    } finally {\n      setIsPendingTx(false)\n    }\n  }\n\n  return (\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\n      <BunnyDecoration>\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\n      </BunnyDecoration>\n      <ModalHeader>\n        <ModalTitle>\n          <Heading>{t('Collect Winnings')}</Heading>\n        </ModalTitle>\n        <ModalCloseButton onDismiss={onDismiss} />\n      </ModalHeader>\n      <ModalBody p=\"24px\">\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text>{t('Collecting')}</Text>\n          <Box style={{ textAlign: 'right' }}>\n            <Text>{`${formatNumber(total, 0, 4)} BNB`}</Text>\n            <Text fontSize=\"12px\" color=\"textSubtle\">\n              {`~$${totalBnb.toFixed(2)}`}\n            </Text>\n          </Box>\n        </Flex>\n        <Flex alignItems=\"start\" justifyContent=\"center\" mb=\"24px\">\n          {isLoadingHistory ? (\n            <Skeleton height=\"21\" width=\"140px\" />\n          ) : (\n            <Text color=\"textSubtle\" fontSize=\"14px\">\n              {epochs.length === 1\n                ? t('From round %round%', { round: epochs[0] })\n                : t('From rounds %rounds%', { rounds: epochs.join(', ') })}\n            </Text>\n          )}\n        </Flex>\n        <Button\n          width=\"100%\"\n          mb=\"8px\"\n          onClick={handleClick}\n          isLoading={isPendingTx || isLoadingHistory}\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default CollectRoundWinningsModal\n"]},"metadata":{},"sourceType":"module"}