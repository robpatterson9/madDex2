{"ast":null,"code":"import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useCallback,useEffect,useState}from'react';import useIsWindowVisible from'hooks/useIsWindowVisible';var getNow=function getNow(){return Math.floor(Date.now()/1000);};/**\n * Consider this moving up to the global level\n */var useCountdown=function useCountdown(timestamp){var _useState=useState(function(){return timestamp-getNow();}),_useState2=_slicedToArray(_useState,2),secondsRemaining=_useState2[0],setSecondsRemaining=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isPaused=_useState4[0],setIsPaused=_useState4[1];var isWindowVisible=useIsWindowVisible();var pause=useCallback(function(){return setIsPaused(true);},[setIsPaused]);var unpause=useCallback(function(){return setIsPaused(false);},[setIsPaused]);useEffect(function(){var timer;if(!isPaused&&secondsRemaining>0){timer=setTimeout(function(){setSecondsRemaining(function(prevSecondsRemaining){return prevSecondsRemaining-1;});},1000);}return function(){clearTimeout(timer);};},[secondsRemaining,isPaused,setSecondsRemaining]);useEffect(function(){setSecondsRemaining(timestamp-getNow());},[timestamp,setSecondsRemaining]);// Pause the timer if the tab becomes inactive to avoid it becoming out of sync\nuseEffect(function(){if(isWindowVisible){setSecondsRemaining(timestamp-getNow());unpause();}else{pause();}},[pause,unpause,timestamp,setSecondsRemaining,isWindowVisible]);return{secondsRemaining:secondsRemaining,pause:pause,unpause:unpause};};export default useCountdown;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Predictions/hooks/useCountdown.ts"],"names":["useCallback","useEffect","useState","useIsWindowVisible","getNow","Math","floor","Date","now","useCountdown","timestamp","secondsRemaining","setSecondsRemaining","isPaused","setIsPaused","isWindowVisible","pause","unpause","timer","setTimeout","prevSecondsRemaining","clearTimeout"],"mappings":"wJAAA,OAASA,WAAT,CAAsBC,SAAtB,CAAiCC,QAAjC,KAAiD,OAAjD,CACA,MAAOC,CAAAA,kBAAP,KAA+B,0BAA/B,CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,SAAMC,CAAAA,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,GAAa,IAAxB,CAAN,EAAf,CAEA;AACA;AACA,GACA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,SAAD,CAAuB,CAC1C,cAAgDR,QAAQ,CAAC,UAAM,CAC7D,MAAOQ,CAAAA,SAAS,CAAGN,MAAM,EAAzB,CACD,CAFuD,CAAxD,wCAAOO,gBAAP,eAAyBC,mBAAzB,eAGA,eAAgCV,QAAQ,CAAC,KAAD,CAAxC,yCAAOW,QAAP,eAAiBC,WAAjB,eACA,GAAMC,CAAAA,eAAe,CAAGZ,kBAAkB,EAA1C,CAEA,GAAMa,CAAAA,KAAK,CAAGhB,WAAW,CAAC,iBAAMc,CAAAA,WAAW,CAAC,IAAD,CAAjB,EAAD,CAA0B,CAACA,WAAD,CAA1B,CAAzB,CACA,GAAMG,CAAAA,OAAO,CAAGjB,WAAW,CAAC,iBAAMc,CAAAA,WAAW,CAAC,KAAD,CAAjB,EAAD,CAA2B,CAACA,WAAD,CAA3B,CAA3B,CAEAb,SAAS,CAAC,UAAM,CACd,GAAIiB,CAAAA,KAAJ,CAEA,GAAI,CAACL,QAAD,EAAaF,gBAAgB,CAAG,CAApC,CAAuC,CACrCO,KAAK,CAAGC,UAAU,CAAC,UAAM,CACvBP,mBAAmB,CAAC,SAACQ,oBAAD,QAA0BA,CAAAA,oBAAoB,CAAG,CAAjD,EAAD,CAAnB,CACD,CAFiB,CAEf,IAFe,CAAlB,CAGD,CAED,MAAO,WAAM,CACXC,YAAY,CAACH,KAAD,CAAZ,CACD,CAFD,CAGD,CAZQ,CAYN,CAACP,gBAAD,CAAmBE,QAAnB,CAA6BD,mBAA7B,CAZM,CAAT,CAcAX,SAAS,CAAC,UAAM,CACdW,mBAAmB,CAACF,SAAS,CAAGN,MAAM,EAAnB,CAAnB,CACD,CAFQ,CAEN,CAACM,SAAD,CAAYE,mBAAZ,CAFM,CAAT,CAIA;AACAX,SAAS,CAAC,UAAM,CACd,GAAIc,eAAJ,CAAqB,CACnBH,mBAAmB,CAACF,SAAS,CAAGN,MAAM,EAAnB,CAAnB,CACAa,OAAO,GACR,CAHD,IAGO,CACLD,KAAK,GACN,CACF,CAPQ,CAON,CAACA,KAAD,CAAQC,OAAR,CAAiBP,SAAjB,CAA4BE,mBAA5B,CAAiDG,eAAjD,CAPM,CAAT,CASA,MAAO,CAAEJ,gBAAgB,CAAhBA,gBAAF,CAAoBK,KAAK,CAALA,KAApB,CAA2BC,OAAO,CAAPA,OAA3B,CAAP,CACD,CAvCD,CAyCA,cAAeR,CAAAA,YAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\n\nconst getNow = () => Math.floor(Date.now() / 1000)\n\n/**\n * Consider this moving up to the global level\n */\nconst useCountdown = (timestamp: number) => {\n  const [secondsRemaining, setSecondsRemaining] = useState(() => {\n    return timestamp - getNow()\n  })\n  const [isPaused, setIsPaused] = useState(false)\n  const isWindowVisible = useIsWindowVisible()\n\n  const pause = useCallback(() => setIsPaused(true), [setIsPaused])\n  const unpause = useCallback(() => setIsPaused(false), [setIsPaused])\n\n  useEffect(() => {\n    let timer: ReturnType<typeof setTimeout>\n\n    if (!isPaused && secondsRemaining > 0) {\n      timer = setTimeout(() => {\n        setSecondsRemaining((prevSecondsRemaining) => prevSecondsRemaining - 1)\n      }, 1000)\n    }\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [secondsRemaining, isPaused, setSecondsRemaining])\n\n  useEffect(() => {\n    setSecondsRemaining(timestamp - getNow())\n  }, [timestamp, setSecondsRemaining])\n\n  // Pause the timer if the tab becomes inactive to avoid it becoming out of sync\n  useEffect(() => {\n    if (isWindowVisible) {\n      setSecondsRemaining(timestamp - getNow())\n      unpause()\n    } else {\n      pause()\n    }\n  }, [pause, unpause, timestamp, setSecondsRemaining, isWindowVisible])\n\n  return { secondsRemaining, pause, unpause }\n}\n\nexport default useCountdown\n"]},"metadata":{},"sourceType":"module"}