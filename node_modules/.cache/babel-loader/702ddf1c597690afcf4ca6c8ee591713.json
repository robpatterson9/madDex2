{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState,useCallback}from'react';import BigNumber from'bignumber.js';import{BSC_BLOCK_TIME}from'config';import{useBlock}from'state/block/hooks';import{useLpTokenPrice}from'state/farms/hooks';import useRefresh from'hooks/useRefresh';import{multicallv2}from'utils/multicall';import ifoV2Abi from'config/abi/ifoV2.json';import{BIG_ZERO}from'utils/bigNumber';import{getStatus}from'../helpers';// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\nvar TAX_PRECISION=10000000000;var formatPool=function formatPool(pool){return{raisingAmountPool:pool?new BigNumber(pool[0].toString()):BIG_ZERO,offeringAmountPool:pool?new BigNumber(pool[1].toString()):BIG_ZERO,limitPerUserInLP:pool?new BigNumber(pool[2].toString()):BIG_ZERO,hasTax:pool?pool[3]:false,totalAmountPool:pool?new BigNumber(pool[4].toString()):BIG_ZERO,sumTaxesOverflow:pool?new BigNumber(pool[5].toString()):BIG_ZERO};};/**\n * Gets all public data of an IFO\n */var useGetPublicIfoData=function useGetPublicIfoData(ifo){var address=ifo.address,releaseBlockNumber=ifo.releaseBlockNumber;var lpTokenPriceInUsd=useLpTokenPrice(ifo.currency.symbol);var _useRefresh=useRefresh(),fastRefresh=_useRefresh.fastRefresh;var _useState=useState({status:'idle',blocksRemaining:0,secondsUntilStart:0,progress:5,secondsUntilEnd:0,poolBasic:{raisingAmountPool:BIG_ZERO,offeringAmountPool:BIG_ZERO,limitPerUserInLP:BIG_ZERO,taxRate:0,totalAmountPool:BIG_ZERO,sumTaxesOverflow:BIG_ZERO},poolUnlimited:{raisingAmountPool:BIG_ZERO,offeringAmountPool:BIG_ZERO,limitPerUserInLP:BIG_ZERO,taxRate:0,totalAmountPool:BIG_ZERO,sumTaxesOverflow:BIG_ZERO},startBlockNum:0,endBlockNum:0,numberPoints:0}),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var _useBlock=useBlock(),currentBlock=_useBlock.currentBlock;var fetchIfoData=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var ifoCalls,_yield$multicallv,_yield$multicallv2,startBlock,endBlock,poolBasic,poolUnlimited,taxRate,numberPoints,poolBasicFormatted,poolUnlimitedFormatted,startBlockNum,endBlockNum,taxRateNum,status,totalBlocks,blocksRemaining,progress;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:ifoCalls=[{address:address,name:'startBlock'},{address:address,name:'endBlock'},{address:address,name:'viewPoolInformation',params:[0]},{address:address,name:'viewPoolInformation',params:[1]},{address:address,name:'viewPoolTaxRateOverflow',params:[1]},{address:address,name:'numberPoints'}];_context.next=3;return multicallv2(ifoV2Abi,ifoCalls);case 3:_yield$multicallv=_context.sent;_yield$multicallv2=_slicedToArray(_yield$multicallv,6);startBlock=_yield$multicallv2[0];endBlock=_yield$multicallv2[1];poolBasic=_yield$multicallv2[2];poolUnlimited=_yield$multicallv2[3];taxRate=_yield$multicallv2[4];numberPoints=_yield$multicallv2[5];poolBasicFormatted=formatPool(poolBasic);poolUnlimitedFormatted=formatPool(poolUnlimited);startBlockNum=startBlock?startBlock[0].toNumber():0;endBlockNum=endBlock?endBlock[0].toNumber():0;taxRateNum=taxRate?taxRate[0].div(TAX_PRECISION).toNumber():0;status=getStatus(currentBlock,startBlockNum,endBlockNum);totalBlocks=endBlockNum-startBlockNum;blocksRemaining=endBlockNum-currentBlock;// Calculate the total progress until finished or until start\nprogress=currentBlock>startBlockNum?(currentBlock-startBlockNum)/totalBlocks*100:(currentBlock-releaseBlockNumber)/(startBlockNum-releaseBlockNumber)*100;setState(function(prev){return _objectSpread(_objectSpread({},prev),{},{secondsUntilEnd:blocksRemaining*BSC_BLOCK_TIME,secondsUntilStart:(startBlockNum-currentBlock)*BSC_BLOCK_TIME,poolBasic:_objectSpread(_objectSpread({},poolBasicFormatted),{},{taxRate:0}),poolUnlimited:_objectSpread(_objectSpread({},poolUnlimitedFormatted),{},{taxRate:taxRateNum}),status:status,progress:progress,blocksRemaining:blocksRemaining,startBlockNum:startBlockNum,endBlockNum:endBlockNum,numberPoints:numberPoints?numberPoints[0].toNumber():0});});case 21:case\"end\":return _context.stop();}}},_callee);})),[address,currentBlock,releaseBlockNumber]);useEffect(function(){fetchIfoData();},[fetchIfoData,fastRefresh]);return _objectSpread(_objectSpread({},state),{},{currencyPriceInUSD:lpTokenPriceInUsd,fetchIfoData:fetchIfoData});};export default useGetPublicIfoData;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Ifos/hooks/v2/useGetPublicIfoData.ts"],"names":["useEffect","useState","useCallback","BigNumber","BSC_BLOCK_TIME","useBlock","useLpTokenPrice","useRefresh","multicallv2","ifoV2Abi","BIG_ZERO","getStatus","TAX_PRECISION","formatPool","pool","raisingAmountPool","toString","offeringAmountPool","limitPerUserInLP","hasTax","totalAmountPool","sumTaxesOverflow","useGetPublicIfoData","ifo","address","releaseBlockNumber","lpTokenPriceInUsd","currency","symbol","fastRefresh","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","poolBasic","taxRate","poolUnlimited","startBlockNum","endBlockNum","numberPoints","state","setState","currentBlock","fetchIfoData","ifoCalls","name","params","startBlock","endBlock","poolBasicFormatted","poolUnlimitedFormatted","toNumber","taxRateNum","div","totalBlocks","prev","currencyPriceInUSD"],"mappings":"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","sourcesContent":["import { useEffect, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus } from 'config/constants/types'\nimport { useBlock } from 'state/block/hooks'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV2Abi from 'config/abi/ifoV2.json'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { PublicIfoData } from '../../types'\nimport { getStatus } from '../helpers'\n\n// https://github.com/pancakeswap/pancake-contracts/blob/master/projects/ifo/contracts/IFOV2.sol#L431\n// 1,000,000,000 / 100\nconst TAX_PRECISION = 10000000000\n\nconst formatPool = (pool) => ({\n  raisingAmountPool: pool ? new BigNumber(pool[0].toString()) : BIG_ZERO,\n  offeringAmountPool: pool ? new BigNumber(pool[1].toString()) : BIG_ZERO,\n  limitPerUserInLP: pool ? new BigNumber(pool[2].toString()) : BIG_ZERO,\n  hasTax: pool ? pool[3] : false,\n  totalAmountPool: pool ? new BigNumber(pool[4].toString()) : BIG_ZERO,\n  sumTaxesOverflow: pool ? new BigNumber(pool[5].toString()) : BIG_ZERO,\n})\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const { fastRefresh } = useRefresh()\n\n  const [state, setState] = useState({\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    poolBasic: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO,\n    },\n    poolUnlimited: {\n      raisingAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO,\n      limitPerUserInLP: BIG_ZERO,\n      taxRate: 0,\n      totalAmountPool: BIG_ZERO,\n      sumTaxesOverflow: BIG_ZERO,\n    },\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: 0,\n  })\n  const { currentBlock } = useBlock()\n\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = [\n      {\n        address,\n        name: 'startBlock',\n      },\n      {\n        address,\n        name: 'endBlock',\n      },\n      {\n        address,\n        name: 'viewPoolInformation',\n        params: [0],\n      },\n      {\n        address,\n        name: 'viewPoolInformation',\n        params: [1],\n      },\n      {\n        address,\n        name: 'viewPoolTaxRateOverflow',\n        params: [1],\n      },\n      {\n        address,\n        name: 'numberPoints',\n      },\n    ]\n\n    const [startBlock, endBlock, poolBasic, poolUnlimited, taxRate, numberPoints] = await multicallv2(\n      ifoV2Abi,\n      ifoCalls,\n    )\n\n    const poolBasicFormatted = formatPool(poolBasic)\n    const poolUnlimitedFormatted = formatPool(poolUnlimited)\n\n    const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\n    const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\n    const taxRateNum = taxRate ? taxRate[0].div(TAX_PRECISION).toNumber() : 0\n\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum)\n    const totalBlocks = endBlockNum - startBlockNum\n    const blocksRemaining = endBlockNum - currentBlock\n\n    // Calculate the total progress until finished or until start\n    const progress =\n      currentBlock > startBlockNum\n        ? ((currentBlock - startBlockNum) / totalBlocks) * 100\n        : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n    setState((prev) => ({\n      ...prev,\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n      poolBasic: { ...poolBasicFormatted, taxRate: 0 },\n      poolUnlimited: { ...poolUnlimitedFormatted, taxRate: taxRateNum },\n      status,\n      progress,\n      blocksRemaining,\n      startBlockNum,\n      endBlockNum,\n      numberPoints: numberPoints ? numberPoints[0].toNumber() : 0,\n    }))\n  }, [address, currentBlock, releaseBlockNumber])\n\n  useEffect(() => {\n    fetchIfoData()\n  }, [fetchIfoData, fastRefresh])\n\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\n}\n\nexport default useGetPublicIfoData\n"]},"metadata":{},"sourceType":"module"}