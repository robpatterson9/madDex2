{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import BigNumber from'bignumber.js';import masterchefABI from'config/abi/masterchef.json';import erc20 from'config/abi/erc20.json';import{getAddress,getMasterChefAddress}from'utils/addressHelpers';import{BIG_TEN,BIG_ZERO}from'utils/bigNumber';import multicall from'utils/multicall';var fetchFarm=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(farm){var _info$allocPoint;var pid,lpAddresses,token,quoteToken,lpAddress,calls,_yield$multicall,_yield$multicall2,tokenBalanceLP,quoteTokenBalanceLP,lpTokenBalanceMC,lpTotalSupply,tokenDecimals,quoteTokenDecimals,lpTokenRatio,tokenAmountTotal,quoteTokenAmountTotal,quoteTokenAmountMc,lpTotalInQuoteToken,_ref2,_ref3,info,totalAllocPoint,allocPoint,poolWeight;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:pid=farm.pid,lpAddresses=farm.lpAddresses,token=farm.token,quoteToken=farm.quoteToken;lpAddress=getAddress(lpAddresses);calls=[// Balance of token in the LP contract\n{address:token.address,name:'balanceOf',params:[lpAddress]},// Balance of quote token on LP contract\n{address:quoteToken.address,name:'balanceOf',params:[lpAddress]},// Balance of LP tokens in the master chef contract\n{address:lpAddress,name:'balanceOf',params:[getMasterChefAddress()]},// Total supply of LP tokens\n{address:lpAddress,name:'totalSupply'},// Token decimals\n{address:token.address,name:'decimals'},// Quote token decimals\n{address:quoteToken.address,name:'decimals'}];_context.next=5;return multicall(erc20,calls);case 5:_yield$multicall=_context.sent;_yield$multicall2=_slicedToArray(_yield$multicall,6);tokenBalanceLP=_yield$multicall2[0];quoteTokenBalanceLP=_yield$multicall2[1];lpTokenBalanceMC=_yield$multicall2[2];lpTotalSupply=_yield$multicall2[3];tokenDecimals=_yield$multicall2[4];quoteTokenDecimals=_yield$multicall2[5];// Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation\nlpTokenRatio=new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply));// Raw amount of token in the LP, including those not staked\ntokenAmountTotal=new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals));quoteTokenAmountTotal=new BigNumber(quoteTokenBalanceLP).div(BIG_TEN.pow(quoteTokenDecimals));// Amount of quoteToken in the LP that are staked in the MC\nquoteTokenAmountMc=quoteTokenAmountTotal.times(lpTokenRatio);// Total staked in LP, in quote token value\nlpTotalInQuoteToken=quoteTokenAmountMc.times(new BigNumber(2));// Only make masterchef calls if farm has pid\nif(!(pid||pid===0)){_context.next=24;break;}_context.next=21;return multicall(masterchefABI,[{address:getMasterChefAddress(),name:'poolInfo',params:[pid]},{address:getMasterChefAddress(),name:'totalAllocPoint'}]);case 21:_context.t0=_context.sent;_context.next=25;break;case 24:_context.t0=[null,null];case 25:_ref2=_context.t0;_ref3=_slicedToArray(_ref2,2);info=_ref3[0];totalAllocPoint=_ref3[1];allocPoint=info?new BigNumber((_info$allocPoint=info.allocPoint)===null||_info$allocPoint===void 0?void 0:_info$allocPoint._hex):BIG_ZERO;poolWeight=totalAllocPoint?allocPoint.div(new BigNumber(totalAllocPoint)):BIG_ZERO;return _context.abrupt(\"return\",{tokenAmountTotal:tokenAmountTotal.toJSON(),lpTotalSupply:new BigNumber(lpTotalSupply).toJSON(),lpTotalInQuoteToken:lpTotalInQuoteToken.toJSON(),tokenPriceVsQuote:quoteTokenAmountTotal.div(tokenAmountTotal).toJSON(),poolWeight:poolWeight.toJSON(),multiplier:\"\".concat(allocPoint.div(100).toString(),\"X\")});case 32:case\"end\":return _context.stop();}}},_callee);}));return function fetchFarm(_x){return _ref.apply(this,arguments);};}();export default fetchFarm;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/farms/fetchPublicFarmData.ts"],"names":["BigNumber","masterchefABI","erc20","getAddress","getMasterChefAddress","BIG_TEN","BIG_ZERO","multicall","fetchFarm","farm","pid","lpAddresses","token","quoteToken","lpAddress","calls","address","name","params","tokenBalanceLP","quoteTokenBalanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","lpTokenRatio","div","tokenAmountTotal","pow","quoteTokenAmountTotal","quoteTokenAmountMc","times","lpTotalInQuoteToken","info","totalAllocPoint","allocPoint","_hex","poolWeight","toJSON","tokenPriceVsQuote","multiplier","toString"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport erc20 from 'config/abi/erc20.json'\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\nimport { BIG_TEN, BIG_ZERO } from 'utils/bigNumber'\nimport multicall from 'utils/multicall'\nimport { SerializedFarm, SerializedBigNumber } from '../types'\n\ntype PublicFarmData = {\n  tokenAmountTotal: SerializedBigNumber\n  lpTotalInQuoteToken: SerializedBigNumber\n  lpTotalSupply: SerializedBigNumber\n  tokenPriceVsQuote: SerializedBigNumber\n  poolWeight: SerializedBigNumber\n  multiplier: string\n}\n\nconst fetchFarm = async (farm: SerializedFarm): Promise<PublicFarmData> => {\n  const { pid, lpAddresses, token, quoteToken } = farm\n  const lpAddress = getAddress(lpAddresses)\n  const calls = [\n    // Balance of token in the LP contract\n    {\n      address: token.address,\n      name: 'balanceOf',\n      params: [lpAddress],\n    },\n    // Balance of quote token on LP contract\n    {\n      address: quoteToken.address,\n      name: 'balanceOf',\n      params: [lpAddress],\n    },\n    // Balance of LP tokens in the master chef contract\n    {\n      address: lpAddress,\n      name: 'balanceOf',\n      params: [getMasterChefAddress()],\n    },\n    // Total supply of LP tokens\n    {\n      address: lpAddress,\n      name: 'totalSupply',\n    },\n    // Token decimals\n    {\n      address: token.address,\n      name: 'decimals',\n    },\n    // Quote token decimals\n    {\n      address: quoteToken.address,\n      name: 'decimals',\n    },\n  ]\n\n  const [tokenBalanceLP, quoteTokenBalanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] =\n    await multicall(erc20, calls)\n\n  // Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation\n  const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n  // Raw amount of token in the LP, including those not staked\n  const tokenAmountTotal = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals))\n  const quoteTokenAmountTotal = new BigNumber(quoteTokenBalanceLP).div(BIG_TEN.pow(quoteTokenDecimals))\n\n  // Amount of quoteToken in the LP that are staked in the MC\n  const quoteTokenAmountMc = quoteTokenAmountTotal.times(lpTokenRatio)\n\n  // Total staked in LP, in quote token value\n  const lpTotalInQuoteToken = quoteTokenAmountMc.times(new BigNumber(2))\n\n  // Only make masterchef calls if farm has pid\n  const [info, totalAllocPoint] =\n    pid || pid === 0\n      ? await multicall(masterchefABI, [\n          {\n            address: getMasterChefAddress(),\n            name: 'poolInfo',\n            params: [pid],\n          },\n          {\n            address: getMasterChefAddress(),\n            name: 'totalAllocPoint',\n          },\n        ])\n      : [null, null]\n\n  const allocPoint = info ? new BigNumber(info.allocPoint?._hex) : BIG_ZERO\n  const poolWeight = totalAllocPoint ? allocPoint.div(new BigNumber(totalAllocPoint)) : BIG_ZERO\n\n  return {\n    tokenAmountTotal: tokenAmountTotal.toJSON(),\n    lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\n    lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n    tokenPriceVsQuote: quoteTokenAmountTotal.div(tokenAmountTotal).toJSON(),\n    poolWeight: poolWeight.toJSON(),\n    multiplier: `${allocPoint.div(100).toString()}X`,\n  }\n}\n\nexport default fetchFarm\n"]},"metadata":{},"sourceType":"module"}