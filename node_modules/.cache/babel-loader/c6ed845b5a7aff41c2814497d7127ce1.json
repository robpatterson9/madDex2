{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps';\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers';\nimport { useState, useEffect } from 'react';\nimport { request, gql } from 'graphql-request';\nimport { INFO_CLIENT } from 'config/constants/endpoints';\nconst BNB_PRICES = gql`\n  query prices($block24: Int!, $block48: Int!, $blockWeek: Int!) {\n    current: bundle(id: \"1\") {\n      bnbPrice\n    }\n    oneDay: bundle(id: \"1\", block: { number: $block24 }) {\n      bnbPrice\n    }\n    twoDay: bundle(id: \"1\", block: { number: $block48 }) {\n      bnbPrice\n    }\n    oneWeek: bundle(id: \"1\", block: { number: $blockWeek }) {\n      bnbPrice\n    }\n  }\n`;\n\nconst fetchBnbPrices = async (block24, block48, blockWeek) => {\n  try {\n    var _data$current$bnbPric, _data$current, _data$oneDay$bnbPrice, _data$oneDay, _data$twoDay$bnbPrice, _data$twoDay, _data$oneWeek$bnbPric, _data$oneWeek;\n\n    const data = await request(INFO_CLIENT, BNB_PRICES, {\n      block24,\n      block48,\n      blockWeek\n    });\n    return {\n      error: false,\n      bnbPrices: {\n        current: parseFloat((_data$current$bnbPric = (_data$current = data.current) === null || _data$current === void 0 ? void 0 : _data$current.bnbPrice) !== null && _data$current$bnbPric !== void 0 ? _data$current$bnbPric : '0'),\n        oneDay: parseFloat((_data$oneDay$bnbPrice = (_data$oneDay = data.oneDay) === null || _data$oneDay === void 0 ? void 0 : _data$oneDay.bnbPrice) !== null && _data$oneDay$bnbPrice !== void 0 ? _data$oneDay$bnbPrice : '0'),\n        twoDay: parseFloat((_data$twoDay$bnbPrice = (_data$twoDay = data.twoDay) === null || _data$twoDay === void 0 ? void 0 : _data$twoDay.bnbPrice) !== null && _data$twoDay$bnbPrice !== void 0 ? _data$twoDay$bnbPrice : '0'),\n        week: parseFloat((_data$oneWeek$bnbPric = (_data$oneWeek = data.oneWeek) === null || _data$oneWeek === void 0 ? void 0 : _data$oneWeek.bnbPrice) !== null && _data$oneWeek$bnbPric !== void 0 ? _data$oneWeek$bnbPric : '0')\n      }\n    };\n  } catch (error) {\n    console.error('Failed to fetch BNB prices', error);\n    return {\n      error: true,\n      bnbPrices: undefined\n    };\n  }\n};\n/**\n * Returns BNB prices at current, 24h, 48h, and 7d intervals\n */\n\n\nexport const useBnbPrices = () => {\n  _s();\n\n  const [prices, setPrices] = useState();\n  const [error, setError] = useState(false);\n  const [t24, t48, tWeek] = getDeltaTimestamps();\n  const {\n    blocks,\n    error: blockError\n  } = useBlocksFromTimestamps([t24, t48, tWeek]);\n  useEffect(() => {\n    const fetch = async () => {\n      const [block24, block48, blockWeek] = blocks;\n      const {\n        bnbPrices,\n        error: fetchError\n      } = await fetchBnbPrices(block24.number, block48.number, blockWeek.number);\n\n      if (fetchError) {\n        setError(true);\n      } else {\n        setPrices(bnbPrices);\n      }\n    };\n\n    if (!prices && !error && blocks && !blockError) {\n      fetch();\n    }\n  }, [error, prices, blocks, blockError]);\n  return prices;\n};\n\n_s(useBnbPrices, \"YtIFZIjwyfyklXP/YHFlW3b/ZDo=\", false, function () {\n  return [useBlocksFromTimestamps];\n});","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Info/hooks/useBnbPrices.ts"],"names":["useBlocksFromTimestamps","getDeltaTimestamps","useState","useEffect","request","gql","INFO_CLIENT","BNB_PRICES","fetchBnbPrices","block24","block48","blockWeek","data","error","bnbPrices","current","parseFloat","bnbPrice","oneDay","twoDay","week","oneWeek","console","undefined","useBnbPrices","prices","setPrices","setError","t24","t48","tWeek","blocks","blockError","fetch","fetchError","number"],"mappings":"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","sourcesContent":["import { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\n\nexport interface BnbPrices {\n  current: number\n  oneDay: number\n  twoDay: number\n  week: number\n}\n\nconst BNB_PRICES = gql`\n  query prices($block24: Int!, $block48: Int!, $blockWeek: Int!) {\n    current: bundle(id: \"1\") {\n      bnbPrice\n    }\n    oneDay: bundle(id: \"1\", block: { number: $block24 }) {\n      bnbPrice\n    }\n    twoDay: bundle(id: \"1\", block: { number: $block48 }) {\n      bnbPrice\n    }\n    oneWeek: bundle(id: \"1\", block: { number: $blockWeek }) {\n      bnbPrice\n    }\n  }\n`\n\ninterface PricesResponse {\n  current: {\n    bnbPrice: string\n  }\n  oneDay: {\n    bnbPrice: string\n  }\n  twoDay: {\n    bnbPrice: string\n  }\n  oneWeek: {\n    bnbPrice: string\n  }\n}\n\nconst fetchBnbPrices = async (\n  block24: number,\n  block48: number,\n  blockWeek: number,\n): Promise<{ bnbPrices: BnbPrices | undefined; error: boolean }> => {\n  try {\n    const data = await request<PricesResponse>(INFO_CLIENT, BNB_PRICES, {\n      block24,\n      block48,\n      blockWeek,\n    })\n    return {\n      error: false,\n      bnbPrices: {\n        current: parseFloat(data.current?.bnbPrice ?? '0'),\n        oneDay: parseFloat(data.oneDay?.bnbPrice ?? '0'),\n        twoDay: parseFloat(data.twoDay?.bnbPrice ?? '0'),\n        week: parseFloat(data.oneWeek?.bnbPrice ?? '0'),\n      },\n    }\n  } catch (error) {\n    console.error('Failed to fetch BNB prices', error)\n    return {\n      error: true,\n      bnbPrices: undefined,\n    }\n  }\n}\n\n/**\n * Returns BNB prices at current, 24h, 48h, and 7d intervals\n */\nexport const useBnbPrices = (): BnbPrices | undefined => {\n  const [prices, setPrices] = useState<BnbPrices | undefined>()\n  const [error, setError] = useState(false)\n\n  const [t24, t48, tWeek] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24, t48, tWeek])\n\n  useEffect(() => {\n    const fetch = async () => {\n      const [block24, block48, blockWeek] = blocks\n      const { bnbPrices, error: fetchError } = await fetchBnbPrices(block24.number, block48.number, blockWeek.number)\n      if (fetchError) {\n        setError(true)\n      } else {\n        setPrices(bnbPrices)\n      }\n    }\n    if (!prices && !error && blocks && !blockError) {\n      fetch()\n    }\n  }, [error, prices, blocks, blockError])\n\n  return prices\n}\n"]},"metadata":{},"sourceType":"module"}