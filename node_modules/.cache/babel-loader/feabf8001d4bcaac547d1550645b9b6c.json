{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport tokens from 'config/constants/tokens';\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { simpleRpcProvider } from 'utils/providers';\nimport useRefresh from './useRefresh';\nimport useLastUpdated from './useLastUpdated';\nexport let FetchStatus;\n\n(function (FetchStatus) {\n  FetchStatus[\"NOT_FETCHED\"] = \"not-fetched\";\n  FetchStatus[\"SUCCESS\"] = \"success\";\n  FetchStatus[\"FAILED\"] = \"failed\";\n})(FetchStatus || (FetchStatus = {}));\n\nconst useTokenBalance = tokenAddress => {\n  _s();\n\n  const {\n    NOT_FETCHED,\n    SUCCESS,\n    FAILED\n  } = FetchStatus;\n  const [balanceState, setBalanceState] = useState({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED\n  });\n  const {\n    account\n  } = useWeb3React();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress);\n\n      try {\n        const res = await contract.balanceOf(account);\n        setBalanceState({\n          balance: new BigNumber(res.toString()),\n          fetchStatus: SUCCESS\n        });\n      } catch (e) {\n        console.error(e);\n        setBalanceState(prev => ({ ...prev,\n          fetchStatus: FAILED\n        }));\n      }\n    };\n\n    if (account) {\n      fetchBalance();\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED]);\n  return balanceState;\n};\n\n_s(useTokenBalance, \"1ELNDtB/fOSrT6hPARUJVrYjuFo=\", false, function () {\n  return [useWeb3React, useRefresh];\n});\n\nexport const useTotalSupply = () => {\n  _s2();\n\n  const {\n    slowRefresh\n  } = useRefresh();\n  const [totalSupply, setTotalSupply] = useState();\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract();\n      const supply = await cakeContract.totalSupply();\n      setTotalSupply(new BigNumber(supply.toString()));\n    }\n\n    fetchTotalSupply();\n  }, [slowRefresh]);\n  return totalSupply;\n};\n\n_s2(useTotalSupply, \"2ibDHTZcwYU9LaabTrlsn9E1ufk=\", false, function () {\n  return [useRefresh];\n});\n\nexport const useBurnedBalance = tokenAddress => {\n  _s3();\n\n  const [balance, setBalance] = useState(BIG_ZERO);\n  const {\n    slowRefresh\n  } = useRefresh();\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress);\n      const res = await contract.balanceOf('0x000000000000000000000000000000000000dEaD');\n      setBalance(new BigNumber(res.toString()));\n    };\n\n    fetchBalance();\n  }, [tokenAddress, slowRefresh]);\n  return balance;\n};\n\n_s3(useBurnedBalance, \"4MQotZwd6O1prY/6FmL3ShgL1qM=\", false, function () {\n  return [useRefresh];\n});\n\nexport const useGetBnbBalance = () => {\n  _s4();\n\n  const [fetchStatus, setFetchStatus] = useState(FetchStatus.NOT_FETCHED);\n  const [balance, setBalance] = useState(ethers.BigNumber.from(0));\n  const {\n    account\n  } = useWeb3React();\n  const {\n    lastUpdated,\n    setLastUpdated\n  } = useLastUpdated();\n  useEffect(() => {\n    const fetchBalance = async () => {\n      try {\n        const walletBalance = await simpleRpcProvider.getBalance(account);\n        setBalance(walletBalance);\n        setFetchStatus(FetchStatus.SUCCESS);\n      } catch {\n        setFetchStatus(FetchStatus.FAILED);\n      }\n    };\n\n    if (account) {\n      fetchBalance();\n    }\n  }, [account, lastUpdated, setBalance, setFetchStatus]);\n  return {\n    balance,\n    fetchStatus,\n    refresh: setLastUpdated\n  };\n};\n\n_s4(useGetBnbBalance, \"9kFAoRMSA1SoyD5hJ9+XNNxQLkg=\", false, function () {\n  return [useWeb3React, useLastUpdated];\n});\n\nexport const useGetCakeBalance = () => {\n  _s5();\n\n  const {\n    balance,\n    fetchStatus\n  } = useTokenBalance(tokens.mad.address); // TODO: Remove ethers conversion once useTokenBalance is converted to ethers.BigNumber\n\n  return {\n    balance: ethers.BigNumber.from(balance.toString()),\n    fetchStatus\n  };\n};\n\n_s5(useGetCakeBalance, \"qHka9nPMT0koIbbUrmErI/IYagY=\", false, function () {\n  return [useTokenBalance];\n});\n\nexport default useTokenBalance;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/hooks/useTokenBalance.ts"],"names":["useEffect","useState","ethers","BigNumber","useWeb3React","tokens","getBep20Contract","getCakeContract","BIG_ZERO","simpleRpcProvider","useRefresh","useLastUpdated","FetchStatus","useTokenBalance","tokenAddress","NOT_FETCHED","SUCCESS","FAILED","balanceState","setBalanceState","balance","fetchStatus","account","fastRefresh","fetchBalance","contract","res","balanceOf","toString","e","console","error","prev","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","fetchTotalSupply","cakeContract","supply","useBurnedBalance","setBalance","useGetBnbBalance","setFetchStatus","from","lastUpdated","setLastUpdated","walletBalance","getBalance","refresh","useGetCakeBalance","mad","address"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport tokens from 'config/constants/tokens'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { simpleRpcProvider } from 'utils/providers'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\ntype UseTokenBalanceState = {\n  balance: BigNumber\n  fetchStatus: FetchStatus\n}\n\nexport enum FetchStatus {\n  NOT_FETCHED = 'not-fetched',\n  SUCCESS = 'success',\n  FAILED = 'failed',\n}\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const { NOT_FETCHED, SUCCESS, FAILED } = FetchStatus\n  const [balanceState, setBalanceState] = useState<UseTokenBalanceState>({\n    balance: BIG_ZERO,\n    fetchStatus: NOT_FETCHED,\n  })\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      try {\n        const res = await contract.balanceOf(account)\n        setBalanceState({ balance: new BigNumber(res.toString()), fetchStatus: SUCCESS })\n      } catch (e) {\n        console.error(e)\n        setBalanceState((prev) => ({\n          ...prev,\n          fetchStatus: FAILED,\n        }))\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, fastRefresh, SUCCESS, FAILED])\n\n  return balanceState\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.totalSupply()\n      setTotalSupply(new BigNumber(supply.toString()))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress)\n      const res = await contract.balanceOf('0x000000000000000000000000000000000000dEaD')\n      setBalance(new BigNumber(res.toString()))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [fetchStatus, setFetchStatus] = useState(FetchStatus.NOT_FETCHED)\n  const [balance, setBalance] = useState(ethers.BigNumber.from(0))\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      try {\n        const walletBalance = await simpleRpcProvider.getBalance(account)\n        setBalance(walletBalance)\n        setFetchStatus(FetchStatus.SUCCESS)\n      } catch {\n        setFetchStatus(FetchStatus.FAILED)\n      }\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, lastUpdated, setBalance, setFetchStatus])\n\n  return { balance, fetchStatus, refresh: setLastUpdated }\n}\n\nexport const useGetCakeBalance = () => {\n  const { balance, fetchStatus } = useTokenBalance(tokens.mad.address)\n\n  // TODO: Remove ethers conversion once useTokenBalance is converted to ethers.BigNumber\n  return { balance: ethers.BigNumber.from(balance.toString()), fetchStatus }\n}\n\nexport default useTokenBalance\n"]},"metadata":{},"sourceType":"module"}