{"ast":null,"code":"import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React,{useMemo}from'react';import{Flex,Skeleton,Text}from'@pancakeswap/uikit';import styled from'styled-components';import{useTranslation}from'contexts/Localization';import BigNumber from'bignumber.js';import Balance from'components/Balance';import{useCakeVault}from'state/pools/hooks';import{getBalanceNumber}from'utils/formatBalance';import BaseCell,{CellContent}from'./BaseCell';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var StyledCell=styled(BaseCell)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  flex: 2 0 100px;\\n\"])));var TotalStakedCell=function TotalStakedCell(_ref){var pool=_ref.pool;var _useTranslation=useTranslation(),t=_useTranslation.t;var sousId=pool.sousId,stakingToken=pool.stakingToken,totalStaked=pool.totalStaked,isAutoVault=pool.isAutoVault;var _useCakeVault=useCakeVault(),totalCakeInVault=_useCakeVault.totalCakeInVault;var isManualCakePool=sousId===0;var totalStakedBalance=useMemo(function(){if(isAutoVault){return getBalanceNumber(totalCakeInVault,stakingToken.decimals);}if(isManualCakePool){var manualCakeTotalMinusAutoVault=new BigNumber(totalStaked).minus(totalCakeInVault);return getBalanceNumber(manualCakeTotalMinusAutoVault,stakingToken.decimals);}return getBalanceNumber(totalStaked,stakingToken.decimals);},[isAutoVault,totalCakeInVault,isManualCakePool,totalStaked,stakingToken.decimals]);return/*#__PURE__*/_jsx(StyledCell,{role:\"cell\",children:/*#__PURE__*/_jsxs(CellContent,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",color:\"textSubtle\",textAlign:\"left\",children:t('Total staked')}),totalStaked&&totalStaked.gte(0)?/*#__PURE__*/_jsx(Flex,{height:\"20px\",alignItems:\"center\",children:/*#__PURE__*/_jsx(Balance,{fontSize:\"16px\",value:totalStakedBalance,decimals:0,unit:\" \".concat(stakingToken.symbol)})}):/*#__PURE__*/_jsx(Skeleton,{width:\"80px\",height:\"16px\"})]})});};export default TotalStakedCell;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolsTable/Cells/TotalStakedCell.tsx"],"names":["React","useMemo","Flex","Skeleton","Text","styled","useTranslation","BigNumber","Balance","useCakeVault","getBalanceNumber","BaseCell","CellContent","StyledCell","TotalStakedCell","pool","t","sousId","stakingToken","totalStaked","isAutoVault","totalCakeInVault","isManualCakePool","totalStakedBalance","decimals","manualCakeTotalMinusAutoVault","minus","gte","symbol"],"mappings":"4LAAA,MAAOA,CAAAA,KAAP,EAAgBC,OAAhB,KAA+B,OAA/B,CACA,OAASC,IAAT,CAAeC,QAAf,CAAyBC,IAAzB,KAAqC,oBAArC,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,cAAT,KAA+B,uBAA/B,CACA,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CACA,MAAOC,CAAAA,OAAP,KAAoB,oBAApB,CAEA,OAASC,YAAT,KAA6B,mBAA7B,CACA,OAASC,gBAAT,KAAiC,qBAAjC,CACA,MAAOC,CAAAA,QAAP,EAAmBC,WAAnB,KAAsC,YAAtC,C,wFAMA,GAAMC,CAAAA,UAAU,CAAGR,MAAM,CAACM,QAAD,CAAT,uFAAhB,CAIA,GAAMG,CAAAA,eAA+C,CAAG,QAAlDA,CAAAA,eAAkD,MAAc,IAAXC,CAAAA,IAAW,MAAXA,IAAW,CACpE,oBAAcT,cAAc,EAA5B,CAAQU,CAAR,iBAAQA,CAAR,CACA,GAAQC,CAAAA,MAAR,CAA2DF,IAA3D,CAAQE,MAAR,CAAgBC,YAAhB,CAA2DH,IAA3D,CAAgBG,YAAhB,CAA8BC,WAA9B,CAA2DJ,IAA3D,CAA8BI,WAA9B,CAA2CC,WAA3C,CAA2DL,IAA3D,CAA2CK,WAA3C,CACA,kBAA6BX,YAAY,EAAzC,CAAQY,gBAAR,eAAQA,gBAAR,CAEA,GAAMC,CAAAA,gBAAgB,CAAGL,MAAM,GAAK,CAApC,CAEA,GAAMM,CAAAA,kBAAkB,CAAGtB,OAAO,CAAC,UAAM,CACvC,GAAImB,WAAJ,CAAiB,CACf,MAAOV,CAAAA,gBAAgB,CAACW,gBAAD,CAAmBH,YAAY,CAACM,QAAhC,CAAvB,CACD,CACD,GAAIF,gBAAJ,CAAsB,CACpB,GAAMG,CAAAA,6BAA6B,CAAG,GAAIlB,CAAAA,SAAJ,CAAcY,WAAd,EAA2BO,KAA3B,CAAiCL,gBAAjC,CAAtC,CACA,MAAOX,CAAAA,gBAAgB,CAACe,6BAAD,CAAgCP,YAAY,CAACM,QAA7C,CAAvB,CACD,CACD,MAAOd,CAAAA,gBAAgB,CAACS,WAAD,CAAcD,YAAY,CAACM,QAA3B,CAAvB,CACD,CATiC,CAS/B,CAACJ,WAAD,CAAcC,gBAAd,CAAgCC,gBAAhC,CAAkDH,WAAlD,CAA+DD,YAAY,CAACM,QAA5E,CAT+B,CAAlC,CAWA,mBACE,KAAC,UAAD,EAAY,IAAI,CAAC,MAAjB,uBACE,MAAC,WAAD,yBACE,KAAC,IAAD,EAAM,QAAQ,CAAC,MAAf,CAAsB,KAAK,CAAC,YAA5B,CAAyC,SAAS,CAAC,MAAnD,UACGR,CAAC,CAAC,cAAD,CADJ,EADF,CAIGG,WAAW,EAAIA,WAAW,CAACQ,GAAZ,CAAgB,CAAhB,CAAf,cACC,KAAC,IAAD,EAAM,MAAM,CAAC,MAAb,CAAoB,UAAU,CAAC,QAA/B,uBACE,KAAC,OAAD,EAAS,QAAQ,CAAC,MAAlB,CAAyB,KAAK,CAAEJ,kBAAhC,CAAoD,QAAQ,CAAE,CAA9D,CAAiE,IAAI,YAAML,YAAY,CAACU,MAAnB,CAArE,EADF,EADD,cAKC,KAAC,QAAD,EAAU,KAAK,CAAC,MAAhB,CAAuB,MAAM,CAAC,MAA9B,EATJ,GADF,EADF,CAgBD,CAlCD,CAoCA,cAAed,CAAAA,eAAf","sourcesContent":["import React, { useMemo } from 'react'\nimport { Flex, Skeleton, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\nimport Balance from 'components/Balance'\nimport { DeserializedPool } from 'state/types'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface TotalStakedCellProps {\n  pool: DeserializedPool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 2 0 100px;\n`\n\nconst TotalStakedCell: React.FC<TotalStakedCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { sousId, stakingToken, totalStaked, isAutoVault } = pool\n  const { totalCakeInVault } = useCakeVault()\n\n  const isManualCakePool = sousId === 0\n\n  const totalStakedBalance = useMemo(() => {\n    if (isAutoVault) {\n      return getBalanceNumber(totalCakeInVault, stakingToken.decimals)\n    }\n    if (isManualCakePool) {\n      const manualCakeTotalMinusAutoVault = new BigNumber(totalStaked).minus(totalCakeInVault)\n      return getBalanceNumber(manualCakeTotalMinusAutoVault, stakingToken.decimals)\n    }\n    return getBalanceNumber(totalStaked, stakingToken.decimals)\n  }, [isAutoVault, totalCakeInVault, isManualCakePool, totalStaked, stakingToken.decimals])\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('Total staked')}\n        </Text>\n        {totalStaked && totalStaked.gte(0) ? (\n          <Flex height=\"20px\" alignItems=\"center\">\n            <Balance fontSize=\"16px\" value={totalStakedBalance} decimals={0} unit={` ${stakingToken.symbol}`} />\n          </Flex>\n        ) : (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default TotalStakedCell\n"]},"metadata":{},"sourceType":"module"}