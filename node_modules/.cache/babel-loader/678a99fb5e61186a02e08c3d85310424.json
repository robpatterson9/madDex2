{"ast":null,"code":"import React from'react';import{Text,Flex,TooltipText,useTooltip,Skeleton,Heading}from'@pancakeswap/uikit';import{useWeb3React}from'@web3-react/core';import{getCakeVaultEarnings}from'views/Pools/helpers';import{useTranslation}from'contexts/Localization';import Balance from'components/Balance';import{useCakeVault}from'state/pools/hooks';import{ActionContainer,ActionTitles,ActionContent}from'./styles';import UnstakingFeeCountdownRow from'../../CakeVaultCard/UnstakingFeeCountdownRow';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var AutoHarvestAction=function AutoHarvestAction(_ref){var userDataLoaded=_ref.userDataLoaded,earningTokenPrice=_ref.earningTokenPrice;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var _useCakeVault=useCakeVault(),_useCakeVault$userDat=_useCakeVault.userData,cakeAtLastUserAction=_useCakeVault$userDat.cakeAtLastUserAction,userShares=_useCakeVault$userDat.userShares,pricePerFullShare=_useCakeVault.pricePerFullShare,performanceFee=_useCakeVault.fees.performanceFee;var _getCakeVaultEarnings=getCakeVaultEarnings(account,cakeAtLastUserAction,userShares,pricePerFullShare,earningTokenPrice),hasAutoEarnings=_getCakeVaultEarnings.hasAutoEarnings,autoCakeToDisplay=_getCakeVaultEarnings.autoCakeToDisplay,autoUsdToDisplay=_getCakeVaultEarnings.autoUsdToDisplay;var earningTokenBalance=autoCakeToDisplay;var earningTokenDollarBalance=autoUsdToDisplay;var hasEarnings=hasAutoEarnings;var _useTooltip=useTooltip(t('Subtracted automatically from each yield harvest and burned.'),{placement:'bottom-start'}),targetRef=_useTooltip.targetRef,tooltip=_useTooltip.tooltip,tooltipVisible=_useTooltip.tooltipVisible;var actionTitle=/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",bold:true,color:\"secondary\",as:\"span\",textTransform:\"uppercase\",children:t('Recent CAKE profit')});if(!account){return/*#__PURE__*/_jsxs(ActionContainer,{children:[/*#__PURE__*/_jsx(ActionTitles,{children:actionTitle}),/*#__PURE__*/_jsx(ActionContent,{children:/*#__PURE__*/_jsx(Heading,{children:\"0\"})})]});}if(!userDataLoaded){return/*#__PURE__*/_jsxs(ActionContainer,{children:[/*#__PURE__*/_jsx(ActionTitles,{children:actionTitle}),/*#__PURE__*/_jsx(ActionContent,{children:/*#__PURE__*/_jsx(Skeleton,{width:180,height:\"32px\",marginTop:14})})]});}return/*#__PURE__*/_jsxs(ActionContainer,{isAutoVault:true,children:[/*#__PURE__*/_jsx(ActionTitles,{children:actionTitle}),/*#__PURE__*/_jsxs(ActionContent,{children:[/*#__PURE__*/_jsx(Flex,{flex:\"1\",pt:\"16px\",flexDirection:\"column\",alignSelf:\"flex-start\",children:/*#__PURE__*/_jsx(_Fragment,{children:hasEarnings?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Balance,{lineHeight:\"1\",bold:true,fontSize:\"20px\",decimals:5,value:earningTokenBalance}),earningTokenPrice>0&&/*#__PURE__*/_jsx(Balance,{display:\"inline\",fontSize:\"12px\",color:\"textSubtle\",decimals:2,prefix:\"~\",value:earningTokenDollarBalance,unit:\" USD\"})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Heading,{color:\"textDisabled\",children:\"0\"}),/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",color:\"textDisabled\",children:\"0 USD\"})]})})}),/*#__PURE__*/_jsxs(Flex,{flex:\"1.3\",flexDirection:\"column\",alignSelf:\"flex-start\",alignItems:\"flex-start\",children:[/*#__PURE__*/_jsx(UnstakingFeeCountdownRow,{isTableVariant:true}),/*#__PURE__*/_jsxs(Flex,{mb:\"2px\",justifyContent:\"space-between\",alignItems:\"center\",children:[tooltipVisible&&tooltip,/*#__PURE__*/_jsx(TooltipText,{ref:targetRef,small:true,children:t('Performance Fee')}),/*#__PURE__*/_jsx(Flex,{alignItems:\"center\",children:/*#__PURE__*/_jsxs(Text,{ml:\"4px\",small:true,children:[performanceFee/100,\"%\"]})})]})]})]})]});};export default AutoHarvestAction;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolsTable/ActionPanel/AutoHarvest.tsx"],"names":["React","Text","Flex","TooltipText","useTooltip","Skeleton","Heading","useWeb3React","getCakeVaultEarnings","useTranslation","Balance","useCakeVault","ActionContainer","ActionTitles","ActionContent","UnstakingFeeCountdownRow","AutoHarvestAction","userDataLoaded","earningTokenPrice","t","account","userData","cakeAtLastUserAction","userShares","pricePerFullShare","performanceFee","fees","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","earningTokenBalance","earningTokenDollarBalance","hasEarnings","placement","targetRef","tooltip","tooltipVisible","actionTitle"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Text, Flex, TooltipText, useTooltip, Skeleton, Heading } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { DeserializedPool } from 'state/types'\n\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\nimport UnstakingFeeCountdownRow from '../../CakeVaultCard/UnstakingFeeCountdownRow'\n\ninterface AutoHarvestActionProps extends DeserializedPool {\n  userDataLoaded: boolean\n}\n\nconst AutoHarvestAction: React.FunctionComponent<AutoHarvestActionProps> = ({ userDataLoaded, earningTokenPrice }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const {\n    userData: { cakeAtLastUserAction, userShares },\n    pricePerFullShare,\n    fees: { performanceFee },\n  } = useCakeVault()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    earningTokenPrice,\n  )\n\n  const earningTokenBalance = autoCakeToDisplay\n  const earningTokenDollarBalance = autoUsdToDisplay\n  const hasEarnings = hasAutoEarnings\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('Subtracted automatically from each yield harvest and burned.'),\n    { placement: 'bottom-start' },\n  )\n\n  const actionTitle = (\n    <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n      {t('Recent CAKE profit')}\n    </Text>\n  )\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>{actionTitle}</ActionTitles>\n        <ActionContent>\n          <Heading>0</Heading>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataLoaded) {\n    return (\n      <ActionContainer>\n        <ActionTitles>{actionTitle}</ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer isAutoVault>\n      <ActionTitles>{actionTitle}</ActionTitles>\n      <ActionContent>\n        <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n          <>\n            {hasEarnings ? (\n              <>\n                <Balance lineHeight=\"1\" bold fontSize=\"20px\" decimals={5} value={earningTokenBalance} />\n                {earningTokenPrice > 0 && (\n                  <Balance\n                    display=\"inline\"\n                    fontSize=\"12px\"\n                    color=\"textSubtle\"\n                    decimals={2}\n                    prefix=\"~\"\n                    value={earningTokenDollarBalance}\n                    unit=\" USD\"\n                  />\n                )}\n              </>\n            ) : (\n              <>\n                <Heading color=\"textDisabled\">0</Heading>\n                <Text fontSize=\"12px\" color=\"textDisabled\">\n                  0 USD\n                </Text>\n              </>\n            )}\n          </>\n        </Flex>\n        <Flex flex=\"1.3\" flexDirection=\"column\" alignSelf=\"flex-start\" alignItems=\"flex-start\">\n          <UnstakingFeeCountdownRow isTableVariant />\n          <Flex mb=\"2px\" justifyContent=\"space-between\" alignItems=\"center\">\n            {tooltipVisible && tooltip}\n            <TooltipText ref={targetRef} small>\n              {t('Performance Fee')}\n            </TooltipText>\n            <Flex alignItems=\"center\">\n              <Text ml=\"4px\" small>\n                {performanceFee / 100}%\n              </Text>\n            </Flex>\n          </Flex>\n        </Flex>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default AutoHarvestAction\n"]},"metadata":{},"sourceType":"module"}