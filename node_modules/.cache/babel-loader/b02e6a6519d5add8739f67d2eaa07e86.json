{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _defineProperty from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState,useCallback}from'react';import{useWeb3React}from'@web3-react/core';import BigNumber from'bignumber.js';import{useERC20,useIfoV2Contract}from'hooks/useContract';import useRefresh from'hooks/useRefresh';import{multicallv2}from'utils/multicall';import ifoV2Abi from'config/abi/ifoV2.json';import{BIG_ZERO}from'utils/bigNumber';import useIfoAllowance from'../useIfoAllowance';/**\n * Gets all data from an IFO related to a wallet\n */var useGetWalletIfoData=function useGetWalletIfoData(ifo){var _useRefresh=useRefresh(),fastRefresh=_useRefresh.fastRefresh;var _useState=useState({poolBasic:{amountTokenCommittedInLP:BIG_ZERO,offeringAmountInToken:BIG_ZERO,refundingAmountInLP:BIG_ZERO,taxAmountInLP:BIG_ZERO,hasClaimed:false,isPendingTx:false},poolUnlimited:{amountTokenCommittedInLP:BIG_ZERO,offeringAmountInToken:BIG_ZERO,refundingAmountInLP:BIG_ZERO,taxAmountInLP:BIG_ZERO,hasClaimed:false,isPendingTx:false}}),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var address=ifo.address,currency=ifo.currency;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var contract=useIfoV2Contract(address);var currencyContract=useERC20(currency.address);var allowance=useIfoAllowance(currencyContract,address);var setPendingTx=function setPendingTx(status,poolId){return setState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},_defineProperty({},poolId,_objectSpread(_objectSpread({},prevState[poolId]),{},{isPendingTx:status})));});};var setIsClaimed=function setIsClaimed(poolId){setState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},_defineProperty({},poolId,_objectSpread(_objectSpread({},prevState[poolId]),{},{hasClaimed:true})));});};var fetchIfoData=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var ifoCalls,_yield$multicallv,_yield$multicallv2,userInfo,amounts;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:ifoCalls=['viewUserInfo','viewUserOfferingAndRefundingAmountsForPools'].map(function(method){return{address:address,name:method,params:[account,[0,1]]};});_context.next=3;return multicallv2(ifoV2Abi,ifoCalls);case 3:_yield$multicallv=_context.sent;_yield$multicallv2=_slicedToArray(_yield$multicallv,2);userInfo=_yield$multicallv2[0];amounts=_yield$multicallv2[1];setState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{poolBasic:_objectSpread(_objectSpread({},prevState.poolBasic),{},{amountTokenCommittedInLP:new BigNumber(userInfo[0][0].toString()),offeringAmountInToken:new BigNumber(amounts[0][0][0].toString()),refundingAmountInLP:new BigNumber(amounts[0][0][1].toString()),taxAmountInLP:new BigNumber(amounts[0][0][2].toString()),hasClaimed:userInfo[1][0]}),poolUnlimited:_objectSpread(_objectSpread({},prevState.poolUnlimited),{},{amountTokenCommittedInLP:new BigNumber(userInfo[0][1].toString()),offeringAmountInToken:new BigNumber(amounts[0][1][0].toString()),refundingAmountInLP:new BigNumber(amounts[0][1][1].toString()),taxAmountInLP:new BigNumber(amounts[0][1][2].toString()),hasClaimed:userInfo[1][1]})});});case 8:case\"end\":return _context.stop();}}},_callee);})),[account,address]);useEffect(function(){if(account){fetchIfoData();}},[account,fetchIfoData,fastRefresh]);return _objectSpread(_objectSpread({},state),{},{allowance:allowance,contract:contract,setPendingTx:setPendingTx,setIsClaimed:setIsClaimed,fetchIfoData:fetchIfoData});};export default useGetWalletIfoData;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Ifos/hooks/v2/useGetWalletIfoData.ts"],"names":["useEffect","useState","useCallback","useWeb3React","BigNumber","useERC20","useIfoV2Contract","useRefresh","multicallv2","ifoV2Abi","BIG_ZERO","useIfoAllowance","useGetWalletIfoData","ifo","fastRefresh","poolBasic","amountTokenCommittedInLP","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","hasClaimed","isPendingTx","poolUnlimited","state","setState","address","currency","account","contract","currencyContract","allowance","setPendingTx","status","poolId","prevState","setIsClaimed","fetchIfoData","ifoCalls","map","method","name","params","userInfo","amounts","toString"],"mappings":"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","sourcesContent":["import { useEffect, useState, useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV2Contract } from 'hooks/useContract'\nimport useRefresh from 'hooks/useRefresh'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV2Abi from 'config/abi/ifoV2.json'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useIfoAllowance from '../useIfoAllowance'\nimport { WalletIfoState, WalletIfoData } from '../../types'\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const { fastRefresh } = useRefresh()\n  const [state, setState] = useState<WalletIfoState>({\n    poolBasic: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n    },\n    poolUnlimited: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n    },\n  })\n\n  const { address, currency } = ifo\n\n  const { account } = useWeb3React()\n  const contract = useIfoV2Contract(address)\n  const currencyContract = useERC20(currency.address)\n  const allowance = useIfoAllowance(currencyContract, address)\n\n  const setPendingTx = (status: boolean, poolId: PoolIds) =>\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        isPendingTx: status,\n      },\n    }))\n\n  const setIsClaimed = (poolId: PoolIds) => {\n    setState((prevState) => ({\n      ...prevState,\n      [poolId]: {\n        ...prevState[poolId],\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['viewUserInfo', 'viewUserOfferingAndRefundingAmountsForPools'].map((method) => ({\n      address,\n      name: method,\n      params: [account, [0, 1]],\n    }))\n\n    const [userInfo, amounts] = await multicallv2(ifoV2Abi, ifoCalls)\n\n    setState((prevState) => ({\n      ...prevState,\n      poolBasic: {\n        ...prevState.poolBasic,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][0].toString()),\n        offeringAmountInToken: new BigNumber(amounts[0][0][0].toString()),\n        refundingAmountInLP: new BigNumber(amounts[0][0][1].toString()),\n        taxAmountInLP: new BigNumber(amounts[0][0][2].toString()),\n        hasClaimed: userInfo[1][0],\n      },\n      poolUnlimited: {\n        ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: new BigNumber(userInfo[0][1].toString()),\n        offeringAmountInToken: new BigNumber(amounts[0][1][0].toString()),\n        refundingAmountInLP: new BigNumber(amounts[0][1][1].toString()),\n        taxAmountInLP: new BigNumber(amounts[0][1][2].toString()),\n        hasClaimed: userInfo[1][1],\n      },\n    }))\n  }, [account, address])\n\n  useEffect(() => {\n    if (account) {\n      fetchIfoData()\n    }\n  }, [account, fetchIfoData, fastRefresh])\n\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData }\n}\n\nexport default useGetWalletIfoData\n"]},"metadata":{},"sourceType":"module"}