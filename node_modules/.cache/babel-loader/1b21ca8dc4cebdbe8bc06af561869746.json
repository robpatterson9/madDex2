{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { JSBI, Percent, TokenAmount } from '@pancakeswap/sdk';\nimport { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport { wrappedCurrency } from 'utils/wrappedCurrency';\nimport { usePair } from 'hooks/usePairs';\nimport useTotalSupply from 'hooks/useTotalSupply';\nimport { useTranslation } from 'contexts/Localization';\nimport { tryParseAmount } from '../swap/hooks';\nimport { useTokenBalances } from '../wallet/hooks';\nimport { Field, typeInput } from './actions';\nexport function useBurnState() {\n  _s();\n\n  return useSelector(state => state.burn);\n}\n\n_s(useBurnState, \"nKHvd/QB6hocKEk0fSJoSYcCyR8=\", false, function () {\n  return [useSelector];\n});\n\nexport function useDerivedBurnInfo(currencyA, currencyB) {\n  _s2();\n\n  var _pair$liquidityToken$, _pair$liquidityToken;\n\n  const {\n    account,\n    chainId\n  } = useActiveWeb3React();\n  const {\n    independentField,\n    typedValue\n  } = useBurnState();\n  const {\n    t\n  } = useTranslation(); // pair + totalsupply\n\n  const [, pair] = usePair(currencyA, currencyB); // balances\n\n  const relevantTokenBalances = useTokenBalances(account !== null && account !== void 0 ? account : undefined, [pair === null || pair === void 0 ? void 0 : pair.liquidityToken]);\n  const userLiquidity = relevantTokenBalances === null || relevantTokenBalances === void 0 ? void 0 : relevantTokenBalances[(_pair$liquidityToken$ = pair === null || pair === void 0 ? void 0 : (_pair$liquidityToken = pair.liquidityToken) === null || _pair$liquidityToken === void 0 ? void 0 : _pair$liquidityToken.address) !== null && _pair$liquidityToken$ !== void 0 ? _pair$liquidityToken$ : ''];\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)];\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair === null || pair === void 0 ? void 0 : pair.liquidityToken\n  }; // liquidity values\n\n  const totalSupply = useTotalSupply(pair === null || pair === void 0 ? void 0 : pair.liquidityToken);\n  const liquidityValueA = pair && totalSupply && userLiquidity && tokenA && // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n  JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw) ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw) : undefined;\n  const liquidityValueB = pair && totalSupply && userLiquidity && tokenB && // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n  JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw) ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw) : undefined;\n  const liquidityValues = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB\n  };\n  let percentToRemove = new Percent('0', '100'); // user specified a %\n\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100');\n  } // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n      if (pair === null || pair === void 0 ? void 0 : pair.liquidityToken) {\n        const independentAmount = tryParseAmount(typedValue, pair.liquidityToken);\n\n        if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n          percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw);\n        }\n      }\n    } // user specified a specific amount of token a or b\n    else if (tokens[independentField]) {\n        const independentAmount = tryParseAmount(typedValue, tokens[independentField]);\n        const liquidityValue = liquidityValues[independentField];\n\n        if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\n          percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw);\n        }\n      }\n\n  const parsedAmounts = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]: userLiquidity && percentToRemove && percentToRemove.greaterThan('0') ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient) : undefined,\n    [Field.CURRENCY_A]: tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient) : undefined,\n    [Field.CURRENCY_B]: tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient) : undefined\n  };\n  let error;\n\n  if (!account) {\n    error = t('Connect Wallet');\n  }\n\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    var _error;\n\n    error = (_error = error) !== null && _error !== void 0 ? _error : t('Enter an amount');\n  }\n\n  return {\n    pair,\n    parsedAmounts,\n    error\n  };\n}\n\n_s2(useDerivedBurnInfo, \"ZhfaRKNDcuuii8eW44NjxP64uSs=\", false, function () {\n  return [useActiveWeb3React, useBurnState, useTranslation, usePair, useTokenBalances, useTotalSupply];\n});\n\nexport function useBurnActionHandlers() {\n  _s3();\n\n  const dispatch = useDispatch();\n  const onUserInput = useCallback((field, typedValue) => {\n    dispatch(typeInput({\n      field,\n      typedValue\n    }));\n  }, [dispatch]);\n  return {\n    onUserInput\n  };\n}\n\n_s3(useBurnActionHandlers, \"lEPT7YuAO+/A5u9H2YSu9Ik8G/0=\", false, function () {\n  return [useDispatch];\n});","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/burn/hooks.ts"],"names":["JSBI","Percent","TokenAmount","useCallback","useDispatch","useSelector","useActiveWeb3React","wrappedCurrency","usePair","useTotalSupply","useTranslation","tryParseAmount","useTokenBalances","Field","typeInput","useBurnState","state","burn","useDerivedBurnInfo","currencyA","currencyB","account","chainId","independentField","typedValue","t","pair","relevantTokenBalances","undefined","liquidityToken","userLiquidity","address","tokenA","tokenB","tokens","CURRENCY_A","CURRENCY_B","LIQUIDITY","totalSupply","liquidityValueA","greaterThanOrEqual","raw","getLiquidityValue","liquidityValueB","liquidityValues","percentToRemove","LIQUIDITY_PERCENT","independentAmount","greaterThan","liquidityValue","parsedAmounts","token","multiply","quotient","error","useBurnActionHandlers","dispatch","onUserInput","field"],"mappings":"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","sourcesContent":["import { Currency, CurrencyAmount, JSBI, Pair, Percent, TokenAmount } from '@pancakeswap/sdk'\nimport { useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { wrappedCurrency } from 'utils/wrappedCurrency'\nimport { usePair } from 'hooks/usePairs'\nimport useTotalSupply from 'hooks/useTotalSupply'\n\nimport { useTranslation } from 'contexts/Localization'\nimport { AppDispatch, AppState } from '../index'\nimport { tryParseAmount } from '../swap/hooks'\nimport { useTokenBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\n\nexport function useBurnState(): AppState['burn'] {\n  return useSelector<AppState, AppState['burn']>((state) => state.burn)\n}\n\nexport function useDerivedBurnInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined,\n): {\n  pair?: Pair | null\n  parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: TokenAmount\n    [Field.CURRENCY_A]?: CurrencyAmount\n    [Field.CURRENCY_B]?: CurrencyAmount\n  }\n  error?: string\n} {\n  const { account, chainId } = useActiveWeb3React()\n\n  const { independentField, typedValue } = useBurnState()\n\n  const { t } = useTranslation()\n\n  // pair + totalsupply\n  const [, pair] = usePair(currencyA, currencyB)\n\n  // balances\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [pair?.liquidityToken])\n  const userLiquidity: undefined | TokenAmount = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\n\n  const [tokenA, tokenB] = [wrappedCurrency(currencyA, chainId), wrappedCurrency(currencyB, chainId)]\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair?.liquidityToken,\n  }\n\n  // liquidity values\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n  const liquidityValueA =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenA &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\n      ? new TokenAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).raw)\n      : undefined\n  const liquidityValueB =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenB &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.raw, userLiquidity.raw)\n      ? new TokenAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).raw)\n      : undefined\n  const liquidityValues: { [Field.CURRENCY_A]?: TokenAmount; [Field.CURRENCY_B]?: TokenAmount } = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB,\n  }\n\n  let percentToRemove: Percent = new Percent('0', '100')\n  // user specified a %\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100')\n  }\n  // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n    if (pair?.liquidityToken) {\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken)\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n        percentToRemove = new Percent(independentAmount.raw, userLiquidity.raw)\n      }\n    }\n  }\n  // user specified a specific amount of token a or b\n  else if (tokens[independentField]) {\n    const independentAmount = tryParseAmount(typedValue, tokens[independentField])\n    const liquidityValue = liquidityValues[independentField]\n    if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\n      percentToRemove = new Percent(independentAmount.raw, liquidityValue.raw)\n    }\n  }\n\n  const parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: TokenAmount\n    [Field.CURRENCY_A]?: TokenAmount\n    [Field.CURRENCY_B]?: TokenAmount\n  } = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]:\n      userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\n        ? new TokenAmount(userLiquidity.token, percentToRemove.multiply(userLiquidity.raw).quotient)\n        : undefined,\n    [Field.CURRENCY_A]:\n      tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA\n        ? new TokenAmount(tokenA, percentToRemove.multiply(liquidityValueA.raw).quotient)\n        : undefined,\n    [Field.CURRENCY_B]:\n      tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB\n        ? new TokenAmount(tokenB, percentToRemove.multiply(liquidityValueB.raw).quotient)\n        : undefined,\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = t('Connect Wallet')\n  }\n\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? t('Enter an amount')\n  }\n\n  return { pair, parsedAmounts, error }\n}\n\nexport function useBurnActionHandlers(): {\n  onUserInput: (field: Field, typedValue: string) => void\n} {\n  const dispatch = useDispatch<AppDispatch>()\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch],\n  )\n\n  return {\n    onUserInput,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}