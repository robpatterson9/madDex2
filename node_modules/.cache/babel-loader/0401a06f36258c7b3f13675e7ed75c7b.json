{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{JSBI,Percent,Router,TradeType}from'@pancakeswap/sdk';import{useMemo}from'react';import useActiveWeb3React from'hooks/useActiveWeb3React';import{useGasPrice}from'state/user/hooks';import truncateHash from'utils/truncateHash';import{BIPS_BASE,INITIAL_ALLOWED_SLIPPAGE}from'../config/constants';import{useTransactionAdder}from'../state/transactions/hooks';import{calculateGasMargin,getRouterContract,isAddress}from'../utils';import isZero from'../utils/isZero';import useTransactionDeadline from'./useTransactionDeadline';import useENS from'./ENS/useENS';export var SwapCallbackState;(function(SwapCallbackState){SwapCallbackState[SwapCallbackState[\"INVALID\"]=0]=\"INVALID\";SwapCallbackState[SwapCallbackState[\"LOADING\"]=1]=\"LOADING\";SwapCallbackState[SwapCallbackState[\"VALID\"]=2]=\"VALID\";})(SwapCallbackState||(SwapCallbackState={}));/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName\n */function useSwapCallArguments(trade){var allowedSlippage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:INITIAL_ALLOWED_SLIPPAGE;var// in bips\nrecipientAddressOrName=arguments.length>2?arguments[2]:undefined;var _useActiveWeb3React=useActiveWeb3React(),account=_useActiveWeb3React.account,chainId=_useActiveWeb3React.chainId,library=_useActiveWeb3React.library;var _useENS=useENS(recipientAddressOrName),recipientAddress=_useENS.address;var recipient=recipientAddressOrName===null?account:recipientAddress;var deadline=useTransactionDeadline();return useMemo(function(){if(!trade||!recipient||!library||!account||!chainId||!deadline)return[];var contract=getRouterContract(chainId,library,account);if(!contract){return[];}var swapMethods=[];swapMethods.push(Router.swapCallParameters(trade,{feeOnTransfer:false,allowedSlippage:new Percent(JSBI.BigInt(allowedSlippage),BIPS_BASE),recipient:recipient,deadline:deadline.toNumber()}));if(trade.tradeType===TradeType.EXACT_INPUT){swapMethods.push(Router.swapCallParameters(trade,{feeOnTransfer:true,allowedSlippage:new Percent(JSBI.BigInt(allowedSlippage),BIPS_BASE),recipient:recipient,deadline:deadline.toNumber()}));}return swapMethods.map(function(parameters){return{parameters:parameters,contract:contract};});},[account,allowedSlippage,chainId,deadline,library,recipient,trade]);}// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(trade){var allowedSlippage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:INITIAL_ALLOWED_SLIPPAGE;var// in bips\nrecipientAddressOrName=arguments.length>2?arguments[2]:undefined;var _useActiveWeb3React2=useActiveWeb3React(),account=_useActiveWeb3React2.account,chainId=_useActiveWeb3React2.chainId,library=_useActiveWeb3React2.library;var gasPrice=useGasPrice();var swapCalls=useSwapCallArguments(trade,allowedSlippage,recipientAddressOrName);var addTransaction=useTransactionAdder();var _useENS2=useENS(recipientAddressOrName),recipientAddress=_useENS2.address;var recipient=recipientAddressOrName===null?account:recipientAddress;return useMemo(function(){if(!trade||!library||!account||!chainId){return{state:SwapCallbackState.INVALID,callback:null,error:'Missing dependencies'};}if(!recipient){if(recipientAddressOrName!==null){return{state:SwapCallbackState.INVALID,callback:null,error:'Invalid recipient'};}return{state:SwapCallbackState.LOADING,callback:null,error:null};}return{state:SwapCallbackState.VALID,callback:function(){var _onSwap=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var estimatedCalls,successfulEstimation,errorCalls,_successfulEstimation,contract,_successfulEstimation2,methodName,args,value,gasEstimate;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return Promise.all(swapCalls.map(function(call){var _contract$estimateGas;var _call$parameters=call.parameters,methodName=_call$parameters.methodName,args=_call$parameters.args,value=_call$parameters.value,contract=call.contract;var options=!value||isZero(value)?{}:{value:value};return(_contract$estimateGas=contract.estimateGas)[methodName].apply(_contract$estimateGas,_toConsumableArray(args).concat([options])).then(function(gasEstimate){return{call:call,gasEstimate:gasEstimate};}).catch(function(gasError){var _contract$callStatic;console.error('Gas estimate failed, trying eth_call to extract error',call);return(_contract$callStatic=contract.callStatic)[methodName].apply(_contract$callStatic,_toConsumableArray(args).concat([options])).then(function(result){console.error('Unexpected successful call after failed estimate gas',call,gasError,result);return{call:call,error:new Error('Unexpected issue with estimating the gas. Please try again.')};}).catch(function(callError){var _callError$data;console.error('Call threw error',call,callError);var reason=callError.reason||((_callError$data=callError.data)===null||_callError$data===void 0?void 0:_callError$data.message)||callError.message;var errorMessage=\"The transaction cannot succeed due to error: \".concat(reason!==null&&reason!==void 0?reason:'Unknown error, check the logs',\".\");return{call:call,error:new Error(errorMessage)};});});}));case 2:estimatedCalls=_context.sent;// a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\nsuccessfulEstimation=estimatedCalls.find(function(el,ix,list){return'gasEstimate'in el&&(ix===list.length-1||'gasEstimate'in list[ix+1]);});if(successfulEstimation){_context.next=9;break;}errorCalls=estimatedCalls.filter(function(call){return'error'in call;});if(!(errorCalls.length>0)){_context.next=8;break;}throw errorCalls[errorCalls.length-1].error;case 8:throw new Error('Unexpected error. Please contact support: none of the calls threw an error');case 9:_successfulEstimation=successfulEstimation.call,contract=_successfulEstimation.contract,_successfulEstimation2=_successfulEstimation.parameters,methodName=_successfulEstimation2.methodName,args=_successfulEstimation2.args,value=_successfulEstimation2.value,gasEstimate=successfulEstimation.gasEstimate;return _context.abrupt(\"return\",contract[methodName].apply(contract,_toConsumableArray(args).concat([_objectSpread({gasLimit:calculateGasMargin(gasEstimate),gasPrice:gasPrice},value&&!isZero(value)?{value:value,from:account}:{from:account})])).then(function(response){var inputSymbol=trade.inputAmount.currency.symbol;var outputSymbol=trade.outputAmount.currency.symbol;var inputAmount=trade.inputAmount.toSignificant(3);var outputAmount=trade.outputAmount.toSignificant(3);var base=\"Swap \".concat(inputAmount,\" \").concat(inputSymbol,\" for \").concat(outputAmount,\" \").concat(outputSymbol);var withRecipient=recipient===account?base:\"\".concat(base,\" to \").concat(recipientAddressOrName&&isAddress(recipientAddressOrName)?truncateHash(recipientAddressOrName):recipientAddressOrName);addTransaction(response,{summary:withRecipient});return response.hash;}).catch(function(error){// if the user rejected the tx, pass this along\nif((error===null||error===void 0?void 0:error.code)===4001){throw new Error('Transaction rejected.');}else{// otherwise, the error was unexpected and we need to convey that\nconsole.error(\"Swap failed\",error,methodName,args,value);throw new Error(\"Swap failed: \".concat(error.message));}}));case 11:case\"end\":return _context.stop();}}},_callee);}));function onSwap(){return _onSwap.apply(this,arguments);}return onSwap;}(),error:null};},[trade,library,account,chainId,recipient,recipientAddressOrName,swapCalls,addTransaction,gasPrice]);}","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/hooks/useSwapCallback.ts"],"names":["JSBI","Percent","Router","TradeType","useMemo","useActiveWeb3React","useGasPrice","truncateHash","BIPS_BASE","INITIAL_ALLOWED_SLIPPAGE","useTransactionAdder","calculateGasMargin","getRouterContract","isAddress","isZero","useTransactionDeadline","useENS","SwapCallbackState","useSwapCallArguments","trade","allowedSlippage","recipientAddressOrName","account","chainId","library","recipientAddress","address","recipient","deadline","contract","swapMethods","push","swapCallParameters","feeOnTransfer","BigInt","toNumber","tradeType","EXACT_INPUT","map","parameters","useSwapCallback","gasPrice","swapCalls","addTransaction","state","INVALID","callback","error","LOADING","VALID","Promise","all","call","methodName","args","value","options","estimateGas","then","gasEstimate","catch","gasError","console","callStatic","result","Error","callError","reason","data","message","errorMessage","estimatedCalls","successfulEstimation","find","el","ix","list","length","errorCalls","filter","gasLimit","from","response","inputSymbol","inputAmount","currency","symbol","outputSymbol","outputAmount","toSignificant","base","withRecipient","summary","hash","code","onSwap"],"mappings":"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","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { JSBI, Percent, Router, SwapParameters, Trade, TradeType } from '@pancakeswap/sdk'\nimport { useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useGasPrice } from 'state/user/hooks'\nimport truncateHash from 'utils/truncateHash'\nimport { BIPS_BASE, INITIAL_ALLOWED_SLIPPAGE } from '../config/constants'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { calculateGasMargin, getRouterContract, isAddress } from '../utils'\nimport isZero from '../utils/isZero'\nimport useTransactionDeadline from './useTransactionDeadline'\nimport useENS from './ENS/useENS'\n\nexport enum SwapCallbackState {\n  INVALID,\n  LOADING,\n  VALID,\n}\n\ninterface SwapCall {\n  contract: Contract\n  parameters: SwapParameters\n}\n\ninterface SuccessfulCall {\n  call: SwapCall\n  gasEstimate: BigNumber\n}\n\ninterface FailedCall {\n  call: SwapCall\n  error: Error\n}\n\ntype EstimatedSwapCall = SuccessfulCall | FailedCall\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName\n */\nfunction useSwapCallArguments(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddressOrName: string | null, // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): SwapCall[] {\n  const { account, chainId, library } = useActiveWeb3React()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n  const deadline = useTransactionDeadline()\n\n  return useMemo(() => {\n    if (!trade || !recipient || !library || !account || !chainId || !deadline) return []\n\n    const contract: Contract | null = getRouterContract(chainId, library, account)\n    if (!contract) {\n      return []\n    }\n\n    const swapMethods = []\n\n    swapMethods.push(\n      Router.swapCallParameters(trade, {\n        feeOnTransfer: false,\n        allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n        recipient,\n        deadline: deadline.toNumber(),\n      }),\n    )\n\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\n      swapMethods.push(\n        Router.swapCallParameters(trade, {\n          feeOnTransfer: true,\n          allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n          recipient,\n          deadline: deadline.toNumber(),\n        }),\n      )\n    }\n\n    return swapMethods.map((parameters) => ({ parameters, contract }))\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade])\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddressOrName: string | null, // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } {\n  const { account, chainId, library } = useActiveWeb3React()\n  const gasPrice = useGasPrice()\n\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, recipientAddressOrName)\n\n  const addTransaction = useTransactionAdder()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n\n  return useMemo(() => {\n    if (!trade || !library || !account || !chainId) {\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\n    }\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return { state: SwapCallbackState.INVALID, callback: null, error: 'Invalid recipient' }\n      }\n      return { state: SwapCallbackState.LOADING, callback: null, error: null }\n    }\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap(): Promise<string> {\n        const estimatedCalls: EstimatedSwapCall[] = await Promise.all(\n          swapCalls.map((call) => {\n            const {\n              parameters: { methodName, args, value },\n              contract,\n            } = call\n            const options = !value || isZero(value) ? {} : { value }\n\n            return contract.estimateGas[methodName](...args, options)\n              .then((gasEstimate) => {\n                return {\n                  call,\n                  gasEstimate,\n                }\n              })\n              .catch((gasError) => {\n                console.error('Gas estimate failed, trying eth_call to extract error', call)\n\n                return contract.callStatic[methodName](...args, options)\n                  .then((result) => {\n                    console.error('Unexpected successful call after failed estimate gas', call, gasError, result)\n                    return { call, error: new Error('Unexpected issue with estimating the gas. Please try again.') }\n                  })\n                  .catch((callError) => {\n                    console.error('Call threw error', call, callError)\n                    const reason: string = callError.reason || callError.data?.message || callError.message\n                    const errorMessage = `The transaction cannot succeed due to error: ${\n                      reason ?? 'Unknown error, check the logs'\n                    }.`\n\n                    return { call, error: new Error(errorMessage) }\n                  })\n              })\n          }),\n        )\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        const successfulEstimation = estimatedCalls.find(\n          (el, ix, list): el is SuccessfulCall =>\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]),\n        )\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error')\n        }\n\n        const {\n          call: {\n            contract,\n            parameters: { methodName, args, value },\n          },\n          gasEstimate,\n        } = successfulEstimation\n\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          gasPrice,\n          ...(value && !isZero(value) ? { value, from: account } : { from: account }),\n        })\n          .then((response: any) => {\n            const inputSymbol = trade.inputAmount.currency.symbol\n            const outputSymbol = trade.outputAmount.currency.symbol\n            const inputAmount = trade.inputAmount.toSignificant(3)\n            const outputAmount = trade.outputAmount.toSignificant(3)\n\n            const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`\n            const withRecipient =\n              recipient === account\n                ? base\n                : `${base} to ${\n                    recipientAddressOrName && isAddress(recipientAddressOrName)\n                      ? truncateHash(recipientAddressOrName)\n                      : recipientAddressOrName\n                  }`\n\n            addTransaction(response, {\n              summary: withRecipient,\n            })\n\n            return response.hash\n          })\n          .catch((error: any) => {\n            // if the user rejected the tx, pass this along\n            if (error?.code === 4001) {\n              throw new Error('Transaction rejected.')\n            } else {\n              // otherwise, the error was unexpected and we need to convey that\n              console.error(`Swap failed`, error, methodName, args, value)\n              throw new Error(`Swap failed: ${error.message}`)\n            }\n          })\n      },\n      error: null,\n    }\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction, gasPrice])\n}\n"]},"metadata":{},"sourceType":"module"}