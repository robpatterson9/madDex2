{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/components/Menu/GlobalSettings/SettingsModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Text, Toggle, Flex, Modal } from '@pancakeswap/uikit';\nimport { useAudioModeManager, useExpertModeManager, useUserExpertModeAcknowledgementShow, useUserSingleHopOnly } from 'state/user/hooks';\nimport { useTranslation } from 'contexts/Localization';\nimport { useSwapActionHandlers } from 'state/swap/hooks';\nimport useTheme from 'hooks/useTheme';\nimport QuestionHelper from '../../QuestionHelper';\nimport TransactionSettings from './TransactionSettings';\nimport ExpertModal from './ExpertModal';\nimport GasSettings from './GasSettings';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ScrollableContainer = styled(Flex)`\n  flex-direction: column;\n  max-height: 400px;\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    max-height: none;\n  }\n`;\n_c = ScrollableContainer;\n\nconst SettingsModal = ({\n  onDismiss\n}) => {\n  _s();\n\n  const [showConfirmExpertModal, setShowConfirmExpertModal] = useState(false);\n  const [showExpertModeAcknowledgement, setShowExpertModeAcknowledgement] = useUserExpertModeAcknowledgementShow();\n  const [expertMode, toggleExpertMode] = useExpertModeManager();\n  const [singleHopOnly, setSingleHopOnly] = useUserSingleHopOnly();\n  const [audioPlay, toggleSetAudioMode] = useAudioModeManager();\n  const {\n    onChangeRecipient\n  } = useSwapActionHandlers();\n  const {\n    t\n  } = useTranslation();\n  const {\n    theme,\n    isDark,\n    toggleTheme\n  } = useTheme();\n\n  if (showConfirmExpertModal) {\n    return /*#__PURE__*/_jsxDEV(ExpertModal, {\n      setShowConfirmExpertModal: setShowConfirmExpertModal,\n      onDismiss: onDismiss,\n      setShowExpertModeAcknowledgement: setShowExpertModeAcknowledgement\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n\n  const handleExpertModeToggle = () => {\n    if (expertMode) {\n      onChangeRecipient(null);\n      toggleExpertMode();\n    } else if (!showExpertModeAcknowledgement) {\n      onChangeRecipient(null);\n      toggleExpertMode();\n    } else {\n      setShowConfirmExpertModal(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: t('Settings'),\n    headerBackground: \"gradients.cardHeader\",\n    onDismiss: onDismiss,\n    style: {\n      maxWidth: '420px'\n    },\n    children: /*#__PURE__*/_jsxDEV(ScrollableContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        pb: \"24px\",\n        flexDirection: \"column\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          textTransform: \"uppercase\",\n          fontSize: \"12px\",\n          color: \"secondary\",\n          mb: \"24px\",\n          children: t('Global')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          justifyContent: \"space-between\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(GasSettings, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        pt: \"24px\",\n        flexDirection: \"column\",\n        borderTop: `1px ${theme.colors.cardBorder} solid`,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          textTransform: \"uppercase\",\n          fontSize: \"12px\",\n          color: \"secondary\",\n          mb: \"24px\",\n          children: t('Swaps & Liquidity')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TransactionSettings, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        mb: \"24px\",\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            children: t('Expert Mode')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n            text: t('Bypasses confirmation modals and allows high slippage trades. Use at your own risk.'),\n            placement: \"top-start\",\n            ml: \"4px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Toggle, {\n          id: \"toggle-expert-mode-button\",\n          scale: \"md\",\n          checked: expertMode,\n          onChange: handleExpertModeToggle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        mb: \"24px\",\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            children: t('Disable Multihops')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n            text: t('Restricts swaps to direct pairs only.'),\n            placement: \"top-start\",\n            ml: \"4px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Toggle, {\n          id: \"toggle-disable-multihop-button\",\n          checked: singleHopOnly,\n          scale: \"md\",\n          onChange: () => {\n            setSingleHopOnly(!singleHopOnly);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        alignItems: \"center\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SettingsModal, \"PhPjl0ZZ5ujk8k0Oc1V8Bb097/M=\", false, function () {\n  return [useUserExpertModeAcknowledgementShow, useExpertModeManager, useUserSingleHopOnly, useAudioModeManager, useSwapActionHandlers, useTranslation, useTheme];\n});\n\n_c2 = SettingsModal;\nexport default SettingsModal;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ScrollableContainer\");\n$RefreshReg$(_c2, \"SettingsModal\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/components/Menu/GlobalSettings/SettingsModal.tsx"],"names":["React","useState","styled","Text","Toggle","Flex","Modal","useAudioModeManager","useExpertModeManager","useUserExpertModeAcknowledgementShow","useUserSingleHopOnly","useTranslation","useSwapActionHandlers","useTheme","QuestionHelper","TransactionSettings","ExpertModal","GasSettings","ScrollableContainer","theme","mediaQueries","sm","SettingsModal","onDismiss","showConfirmExpertModal","setShowConfirmExpertModal","showExpertModeAcknowledgement","setShowExpertModeAcknowledgement","expertMode","toggleExpertMode","singleHopOnly","setSingleHopOnly","audioPlay","toggleSetAudioMode","onChangeRecipient","t","isDark","toggleTheme","handleExpertModeToggle","maxWidth","colors","cardBorder"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,EAA8BC,MAA9B,EAAsCC,IAAtC,EAA4CC,KAA5C,QAA6E,oBAA7E;AACA,SACEC,mBADF,EAEEC,oBAFF,EAGEC,oCAHF,EAIEC,oBAJF,QAKO,kBALP;AAMA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,qBAAT,QAAsC,kBAAtC;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,cAAP,MAA2B,sBAA3B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,mBAAmB,GAAGhB,MAAM,CAACG,IAAD,CAAO;AACzC;AACA;AACA,IAAI,CAAC;AAAEc,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,YAAN,CAAmBC,EAAG;AACzC;AACA;AACA,CANA;KAAMH,mB;;AAQN,MAAMI,aAA2C,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAAA;;AACrE,QAAM,CAACC,sBAAD,EAAyBC,yBAAzB,IAAsDxB,QAAQ,CAAC,KAAD,CAApE;AACA,QAAM,CAACyB,6BAAD,EAAgCC,gCAAhC,IAAoElB,oCAAoC,EAA9G;AACA,QAAM,CAACmB,UAAD,EAAaC,gBAAb,IAAiCrB,oBAAoB,EAA3D;AACA,QAAM,CAACsB,aAAD,EAAgBC,gBAAhB,IAAoCrB,oBAAoB,EAA9D;AACA,QAAM,CAACsB,SAAD,EAAYC,kBAAZ,IAAkC1B,mBAAmB,EAA3D;AACA,QAAM;AAAE2B,IAAAA;AAAF,MAAwBtB,qBAAqB,EAAnD;AAEA,QAAM;AAAEuB,IAAAA;AAAF,MAAQxB,cAAc,EAA5B;AACA,QAAM;AAAEQ,IAAAA,KAAF;AAASiB,IAAAA,MAAT;AAAiBC,IAAAA;AAAjB,MAAiCxB,QAAQ,EAA/C;;AAEA,MAAIW,sBAAJ,EAA4B;AAC1B,wBACE,QAAC,WAAD;AACE,MAAA,yBAAyB,EAAEC,yBAD7B;AAEE,MAAA,SAAS,EAAEF,SAFb;AAGE,MAAA,gCAAgC,EAAEI;AAHpC;AAAA;AAAA;AAAA;AAAA,YADF;AAOD;;AAED,QAAMW,sBAAsB,GAAG,MAAM;AACnC,QAAIV,UAAJ,EAAgB;AACdM,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAL,MAAAA,gBAAgB;AACjB,KAHD,MAGO,IAAI,CAACH,6BAAL,EAAoC;AACzCQ,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAL,MAAAA,gBAAgB;AACjB,KAHM,MAGA;AACLJ,MAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACD;AACF,GAVD;;AAYA,sBACE,QAAC,KAAD;AACE,IAAA,KAAK,EAAEU,CAAC,CAAC,UAAD,CADV;AAEE,IAAA,gBAAgB,EAAC,sBAFnB;AAGE,IAAA,SAAS,EAAEZ,SAHb;AAIE,IAAA,KAAK,EAAE;AAAEgB,MAAAA,QAAQ,EAAE;AAAZ,KAJT;AAAA,2BAME,QAAC,mBAAD;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,MAAT;AAAgB,QAAA,aAAa,EAAC,QAA9B;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,aAAa,EAAC,WAAzB;AAAqC,UAAA,QAAQ,EAAC,MAA9C;AAAqD,UAAA,KAAK,EAAC,WAA3D;AAAuE,UAAA,EAAE,EAAC,MAA1E;AAAA,oBACGJ,CAAC,CAAC,QAAD;AADJ;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,IAAD;AAAM,UAAA,cAAc,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA,gBAJF,eAQE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,gBARF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAWE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,MAAT;AAAgB,QAAA,aAAa,EAAC,QAA9B;AAAuC,QAAA,SAAS,EAAG,OAAMhB,KAAK,CAACqB,MAAN,CAAaC,UAAW,QAAjF;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,aAAa,EAAC,WAAzB;AAAqC,UAAA,QAAQ,EAAC,MAA9C;AAAqD,UAAA,KAAK,EAAC,WAA3D;AAAuE,UAAA,EAAE,EAAC,MAA1E;AAAA,oBACGN,CAAC,CAAC,mBAAD;AADJ;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,mBAAD;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cAXF,eAiBE,QAAC,IAAD;AAAM,QAAA,cAAc,EAAC,eAArB;AAAqC,QAAA,UAAU,EAAC,QAAhD;AAAyD,QAAA,EAAE,EAAC,MAA5D;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,UAAU,EAAC,QAAjB;AAAA,kCACE,QAAC,IAAD;AAAA,sBAAOA,CAAC,CAAC,aAAD;AAAR;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,cAAD;AACE,YAAA,IAAI,EAAEA,CAAC,CAAC,qFAAD,CADT;AAEE,YAAA,SAAS,EAAC,WAFZ;AAGE,YAAA,EAAE,EAAC;AAHL;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eASE,QAAC,MAAD;AAAQ,UAAA,EAAE,EAAC,2BAAX;AAAuC,UAAA,KAAK,EAAC,IAA7C;AAAkD,UAAA,OAAO,EAAEP,UAA3D;AAAuE,UAAA,QAAQ,EAAEU;AAAjF;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBF,eA4BE,QAAC,IAAD;AAAM,QAAA,cAAc,EAAC,eAArB;AAAqC,QAAA,UAAU,EAAC,QAAhD;AAAyD,QAAA,EAAE,EAAC,MAA5D;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,UAAU,EAAC,QAAjB;AAAA,kCACE,QAAC,IAAD;AAAA,sBAAOH,CAAC,CAAC,mBAAD;AAAR;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,cAAD;AAAgB,YAAA,IAAI,EAAEA,CAAC,CAAC,uCAAD,CAAvB;AAAkE,YAAA,SAAS,EAAC,WAA5E;AAAwF,YAAA,EAAE,EAAC;AAA3F;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAKE,QAAC,MAAD;AACE,UAAA,EAAE,EAAC,gCADL;AAEE,UAAA,OAAO,EAAEL,aAFX;AAGE,UAAA,KAAK,EAAC,IAHR;AAIE,UAAA,QAAQ,EAAE,MAAM;AACdC,YAAAA,gBAAgB,CAAC,CAACD,aAAF,CAAhB;AACD;AANH;AAAA;AAAA;AAAA;AAAA,gBALF;AAAA;AAAA;AAAA;AAAA;AAAA,cA5BF,eA0CE,QAAC,IAAD;AAAM,QAAA,cAAc,EAAC,eAArB;AAAqC,QAAA,UAAU,EAAC;AAAhD;AAAA;AAAA;AAAA;AAAA,cA1CF;AAAA;AAAA;AAAA;AAAA;AAAA;AANF;AAAA;AAAA;AAAA;AAAA,UADF;AA+DD,CAhGD;;GAAMR,a;UAEsEb,oC,EACnCD,oB,EACGE,oB,EACFH,mB,EACVK,qB,EAEhBD,c,EACyBE,Q;;;MATnCS,a;AAkGN,eAAeA,aAAf","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { Text, PancakeToggle, Toggle, Flex, Modal, InjectedModalProps } from '@pancakeswap/uikit'\nimport {\n  useAudioModeManager,\n  useExpertModeManager,\n  useUserExpertModeAcknowledgementShow,\n  useUserSingleHopOnly,\n} from 'state/user/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { useSwapActionHandlers } from 'state/swap/hooks'\nimport useTheme from 'hooks/useTheme'\nimport QuestionHelper from '../../QuestionHelper'\nimport TransactionSettings from './TransactionSettings'\nimport ExpertModal from './ExpertModal'\nimport GasSettings from './GasSettings'\n\nconst ScrollableContainer = styled(Flex)`\n  flex-direction: column;\n  max-height: 400px;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    max-height: none;\n  }\n`\n\nconst SettingsModal: React.FC<InjectedModalProps> = ({ onDismiss }) => {\n  const [showConfirmExpertModal, setShowConfirmExpertModal] = useState(false)\n  const [showExpertModeAcknowledgement, setShowExpertModeAcknowledgement] = useUserExpertModeAcknowledgementShow()\n  const [expertMode, toggleExpertMode] = useExpertModeManager()\n  const [singleHopOnly, setSingleHopOnly] = useUserSingleHopOnly()\n  const [audioPlay, toggleSetAudioMode] = useAudioModeManager()\n  const { onChangeRecipient } = useSwapActionHandlers()\n\n  const { t } = useTranslation()\n  const { theme, isDark, toggleTheme } = useTheme()\n\n  if (showConfirmExpertModal) {\n    return (\n      <ExpertModal\n        setShowConfirmExpertModal={setShowConfirmExpertModal}\n        onDismiss={onDismiss}\n        setShowExpertModeAcknowledgement={setShowExpertModeAcknowledgement}\n      />\n    )\n  }\n\n  const handleExpertModeToggle = () => {\n    if (expertMode) {\n      onChangeRecipient(null)\n      toggleExpertMode()\n    } else if (!showExpertModeAcknowledgement) {\n      onChangeRecipient(null)\n      toggleExpertMode()\n    } else {\n      setShowConfirmExpertModal(true)\n    }\n  }\n\n  return (\n    <Modal\n      title={t('Settings')}\n      headerBackground=\"gradients.cardHeader\"\n      onDismiss={onDismiss}\n      style={{ maxWidth: '420px' }}\n    >\n      <ScrollableContainer>\n        <Flex pb=\"24px\" flexDirection=\"column\">\n          <Text bold textTransform=\"uppercase\" fontSize=\"12px\" color=\"secondary\" mb=\"24px\">\n            {t('Global')}\n          </Text>\n          <Flex justifyContent=\"space-between\">\n            {/* <Text mb=\"24px\">{t('Dark mode')}</Text> */}\n            {/* <ThemeSwitcher isDark={isDark} toggleTheme={toggleTheme} /> */}\n          </Flex>\n          <GasSettings />\n        </Flex>\n        <Flex pt=\"24px\" flexDirection=\"column\" borderTop={`1px ${theme.colors.cardBorder} solid`}>\n          <Text bold textTransform=\"uppercase\" fontSize=\"12px\" color=\"secondary\" mb=\"24px\">\n            {t('Swaps & Liquidity')}\n          </Text>\n          <TransactionSettings />\n        </Flex>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\n          <Flex alignItems=\"center\">\n            <Text>{t('Expert Mode')}</Text>\n            <QuestionHelper\n              text={t('Bypasses confirmation modals and allows high slippage trades. Use at your own risk.')}\n              placement=\"top-start\"\n              ml=\"4px\"\n            />\n          </Flex>\n          <Toggle id=\"toggle-expert-mode-button\" scale=\"md\" checked={expertMode} onChange={handleExpertModeToggle} />\n        </Flex>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\n          <Flex alignItems=\"center\">\n            <Text>{t('Disable Multihops')}</Text>\n            <QuestionHelper text={t('Restricts swaps to direct pairs only.')} placement=\"top-start\" ml=\"4px\" />\n          </Flex>\n          <Toggle\n            id=\"toggle-disable-multihop-button\"\n            checked={singleHopOnly}\n            scale=\"md\"\n            onChange={() => {\n              setSingleHopOnly(!singleHopOnly)\n            }}\n          />\n        </Flex>\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          {/* <Flex alignItems=\"center\">\n            <Text>{t('Flippy sounds')}</Text>\n            <QuestionHelper\n              text={t('Fun sounds ')}\n              placement=\"top-start\"\n              ml=\"4px\"\n            />\n          </Flex>\n          <PancakeToggle checked={audioPlay} onChange={toggleSetAudioMode} scale=\"md\" /> */}\n        </Flex>\n      </ScrollableContainer>\n    </Modal>\n  )\n}\n\nexport default SettingsModal\n"]},"metadata":{},"sourceType":"module"}