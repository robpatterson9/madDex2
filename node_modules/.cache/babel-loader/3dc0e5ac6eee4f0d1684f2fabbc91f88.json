{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useAppDispatch } from 'state';\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions';\nimport { stakeFarm } from 'utils/calls';\nimport BigNumber from 'bignumber.js';\nimport { DEFAULT_TOKEN_DECIMAL, DEFAULT_GAS_LIMIT } from 'config';\nimport { BIG_TEN } from 'utils/bigNumber';\nimport { useMasterchef, useSousChef } from 'hooks/useContract';\nimport getGasPrice from 'utils/getGasPrice';\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT\n};\n\nconst sousStake = async (sousChefContract, amount, decimals = 18) => {\n  const gasPrice = getGasPrice();\n  const tx = await sousChefContract.deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString(), { ...options,\n    gasPrice\n  });\n  const receipt = await tx.wait();\n  return receipt.status;\n};\n\nconst sousStakeBnb = async (sousChefContract, amount) => {\n  const gasPrice = getGasPrice();\n  const tx = await sousChefContract.deposit(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(), { ...options,\n    gasPrice\n  });\n  const receipt = await tx.wait();\n  return receipt.status;\n};\n\nconst useStakePool = (sousId, isUsingBnb = false) => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  const masterChefContract = useMasterchef();\n  const sousChefContract = useSousChef(sousId);\n  const handleStake = useCallback(async (amount, decimals) => {\n    if (sousId === 0) {\n      await stakeFarm(masterChefContract, 0, amount);\n    } else if (isUsingBnb) {\n      await sousStakeBnb(sousChefContract, amount);\n    } else {\n      await sousStake(sousChefContract, amount, decimals);\n    }\n\n    dispatch(updateUserStakedBalance(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId]);\n  return {\n    onStake: handleStake\n  };\n};\n\n_s(useStakePool, \"vpe8vSSPvb8ajwzF6csd4rEGZXU=\", false, function () {\n  return [useAppDispatch, useWeb3React, useMasterchef, useSousChef];\n});\n\nexport default useStakePool;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/hooks/useStakePool.ts"],"names":["useCallback","useWeb3React","useAppDispatch","updateUserStakedBalance","updateUserBalance","stakeFarm","BigNumber","DEFAULT_TOKEN_DECIMAL","DEFAULT_GAS_LIMIT","BIG_TEN","useMasterchef","useSousChef","getGasPrice","options","gasLimit","sousStake","sousChefContract","amount","decimals","gasPrice","tx","deposit","times","pow","toString","receipt","wait","status","sousStakeBnb","useStakePool","sousId","isUsingBnb","dispatch","account","masterChefContract","handleStake","onStake"],"mappings":"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","sourcesContent":["import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stakeFarm } from 'utils/calls'\nimport BigNumber from 'bignumber.js'\nimport { DEFAULT_TOKEN_DECIMAL, DEFAULT_GAS_LIMIT } from 'config'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\nimport getGasPrice from 'utils/getGasPrice'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nconst sousStake = async (sousChefContract, amount, decimals = 18) => {\n  const gasPrice = getGasPrice()\n  const tx = await sousChefContract.deposit(new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString(), {\n    ...options,\n    gasPrice,\n  })\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst sousStakeBnb = async (sousChefContract, amount) => {\n  const gasPrice = getGasPrice()\n  const tx = await sousChefContract.deposit(new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(), {\n    ...options,\n    gasPrice,\n  })\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst useStakePool = (sousId: number, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await stakeFarm(masterChefContract, 0, amount)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount)\n      } else {\n        await sousStake(sousChefContract, amount, decimals)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStakePool\n"]},"metadata":{},"sourceType":"module"}