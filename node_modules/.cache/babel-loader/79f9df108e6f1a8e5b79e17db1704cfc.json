{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{useCallback}from'react';import{useGasPrice}from'state/user/hooks';import{get}from'lodash';/**\n * Perform a contract call with a gas price returned from useGasPrice\n * @param contract Used to perform the call\n * @param methodName The name of the method called\n * @param methodArgs An array of arguments to pass to the method\n * @param overrides An overrides object to pass to the method. gasPrice passed in here will take priority over the price returned by useGasPrice\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */export function useCallWithGasPrice(){var gasPrice=useGasPrice();var callWithGasPrice=useCallback(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(contract,methodName){var methodArgs,overrides,contractMethod,hasManualGasPriceOverride,tx,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:methodArgs=_args.length>2&&_args[2]!==undefined?_args[2]:[];overrides=_args.length>3&&_args[3]!==undefined?_args[3]:null;contractMethod=get(contract,methodName);hasManualGasPriceOverride=overrides===null||overrides===void 0?void 0:overrides.gasPrice;_context.next=6;return contractMethod.apply(void 0,_toConsumableArray(methodArgs).concat([hasManualGasPriceOverride?_objectSpread({},overrides):_objectSpread(_objectSpread({},overrides),{},{gasPrice:gasPrice})]));case 6:tx=_context.sent;return _context.abrupt(\"return\",tx);case 8:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}(),[gasPrice]);return{callWithGasPrice:callWithGasPrice};}","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/hooks/useCallWithGasPrice.ts"],"names":["useCallback","useGasPrice","get","useCallWithGasPrice","gasPrice","callWithGasPrice","contract","methodName","methodArgs","overrides","contractMethod","hasManualGasPriceOverride","tx"],"mappings":"omBAAA,OAASA,WAAT,KAA4B,OAA5B,CAEA,OAASC,WAAT,KAA4B,kBAA5B,CACA,OAASC,GAAT,KAAoB,QAApB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,CAAAA,mBAAT,EAA+B,CACpC,GAAMC,CAAAA,QAAQ,CAAGH,WAAW,EAA5B,CAEA,GAAMI,CAAAA,gBAAgB,CAAGL,WAAW,0FAClC,iBACEM,QADF,CAEEC,UAFF,uMAGEC,UAHF,+CAGsB,EAHtB,CAIEC,SAJF,+CAI6B,IAJ7B,CAMQC,cANR,CAMyBR,GAAG,CAACI,QAAD,CAAWC,UAAX,CAN5B,CAOQI,yBAPR,CAOoCF,SAPpC,SAOoCA,SAPpC,iBAOoCA,SAAS,CAAEL,QAP/C,uBASmBM,CAAAA,cAAc,MAAd,2BACZF,UADY,UAEfG,yBAAyB,kBAAQF,SAAR,iCAA2BA,SAA3B,MAAsCL,QAAQ,CAARA,QAAtC,EAFV,GATnB,QASQQ,EATR,+CAcSA,EAdT,wDADkC,mEAiBlC,CAACR,QAAD,CAjBkC,CAApC,CAoBA,MAAO,CAAEC,gBAAgB,CAAhBA,gBAAF,CAAP,CACD","sourcesContent":["import { useCallback } from 'react'\nimport ethers, { Contract, CallOverrides } from 'ethers'\nimport { useGasPrice } from 'state/user/hooks'\nimport { get } from 'lodash'\n\n/**\n * Perform a contract call with a gas price returned from useGasPrice\n * @param contract Used to perform the call\n * @param methodName The name of the method called\n * @param methodArgs An array of arguments to pass to the method\n * @param overrides An overrides object to pass to the method. gasPrice passed in here will take priority over the price returned by useGasPrice\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */\nexport function useCallWithGasPrice() {\n  const gasPrice = useGasPrice()\n\n  const callWithGasPrice = useCallback(\n    async (\n      contract: Contract,\n      methodName: string,\n      methodArgs: any[] = [],\n      overrides: CallOverrides = null,\n    ): Promise<ethers.providers.TransactionResponse> => {\n      const contractMethod = get(contract, methodName)\n      const hasManualGasPriceOverride = overrides?.gasPrice\n\n      const tx = await contractMethod(\n        ...methodArgs,\n        hasManualGasPriceOverride ? { ...overrides } : { ...overrides, gasPrice },\n      )\n\n      return tx\n    },\n    [gasPrice],\n  )\n\n  return { callWithGasPrice }\n}\n"]},"metadata":{},"sourceType":"module"}