{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import{request,gql}from'graphql-request';import{INFO_CLIENT}from'config/constants/endpoints';import{mapMints,mapBurns,mapSwaps}from'state/info/queries/helpers';/**\n * Transactions of the given pool, used on Pool page\n */var POOL_TRANSACTIONS=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  query poolTransactions($address: Bytes!) {\\n    mints(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\\n      id\\n      timestamp\\n      pair {\\n        token0 {\\n          id\\n          symbol\\n        }\\n        token1 {\\n          id\\n          symbol\\n        }\\n      }\\n      to\\n      amount0\\n      amount1\\n      amountUSD\\n    }\\n    swaps(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\\n      id\\n      timestamp\\n      pair {\\n        token0 {\\n          id\\n          symbol\\n        }\\n        token1 {\\n          id\\n          symbol\\n        }\\n      }\\n      from\\n      amount0In\\n      amount1In\\n      amount0Out\\n      amount1Out\\n      amountUSD\\n    }\\n    burns(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\\n      id\\n      timestamp\\n      pair {\\n        token0 {\\n          id\\n          symbol\\n        }\\n        token1 {\\n          id\\n          symbol\\n        }\\n      }\\n      sender\\n      amount0\\n      amount1\\n      amountUSD\\n    }\\n  }\\n\"])));var fetchPoolTransactions=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(address){var data,mints,burns,swaps;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return request(INFO_CLIENT,POOL_TRANSACTIONS,{address:address});case 3:data=_context.sent;mints=data.mints.map(mapMints);burns=data.burns.map(mapBurns);swaps=data.swaps.map(mapSwaps);return _context.abrupt(\"return\",{data:[].concat(_toConsumableArray(mints),_toConsumableArray(burns),_toConsumableArray(swaps)),error:false});case 10:_context.prev=10;_context.t0=_context[\"catch\"](0);console.error(\"Failed to fetch transactions for pool \".concat(address),_context.t0);return _context.abrupt(\"return\",{error:true});case 14:case\"end\":return _context.stop();}}},_callee,null,[[0,10]]);}));return function fetchPoolTransactions(_x){return _ref.apply(this,arguments);};}();export default fetchPoolTransactions;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/queries/pools/transactions.ts"],"names":["request","gql","INFO_CLIENT","mapMints","mapBurns","mapSwaps","POOL_TRANSACTIONS","fetchPoolTransactions","address","data","mints","map","burns","swaps","error","console"],"mappings":"yoBAAA,OAASA,OAAT,CAAkBC,GAAlB,KAA6B,iBAA7B,CACA,OAASC,WAAT,KAA4B,4BAA5B,CAGA,OAASC,QAAT,CAAmBC,QAAnB,CAA6BC,QAA7B,KAA6C,4BAA7C,CACA;AACA;AACA,GACA,GAAMC,CAAAA,iBAAiB,CAAGL,GAAH,+nCAAvB,CAmEA,GAAMM,CAAAA,qBAAqB,0FAAG,iBAAOC,OAAP,mLAEPR,CAAAA,OAAO,CAAqBE,WAArB,CAAkCI,iBAAlC,CAAqD,CAC7EE,OAAO,CAAPA,OAD6E,CAArD,CAFA,QAEpBC,IAFoB,eAKpBC,KALoB,CAKZD,IAAI,CAACC,KAAL,CAAWC,GAAX,CAAeR,QAAf,CALY,CAMpBS,KANoB,CAMZH,IAAI,CAACG,KAAL,CAAWD,GAAX,CAAeP,QAAf,CANY,CAOpBS,KAPoB,CAOZJ,IAAI,CAACI,KAAL,CAAWF,GAAX,CAAeN,QAAf,CAPY,iCAQnB,CAAEI,IAAI,8BAAMC,KAAN,qBAAgBE,KAAhB,qBAA0BC,KAA1B,EAAN,CAAwCC,KAAK,CAAE,KAA/C,CARmB,4DAU1BC,OAAO,CAACD,KAAR,iDAAuDN,OAAvD,eAV0B,gCAWnB,CACLM,KAAK,CAAE,IADF,CAXmB,uEAAH,kBAArBP,CAAAA,qBAAqB,4CAA3B,CAiBA,cAAeA,CAAAA,qBAAf","sourcesContent":["import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { Transaction } from 'state/info/types'\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\n/**\n * Transactions of the given pool, used on Pool page\n */\nconst POOL_TRANSACTIONS = gql`\n  query poolTransactions($address: Bytes!) {\n    mints(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burns(first: 35, orderBy: timestamp, orderDirection: desc, where: { pair: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\n\ninterface TransactionResults {\n  mints: MintResponse[]\n  swaps: SwapResponse[]\n  burns: BurnResponse[]\n}\n\nconst fetchPoolTransactions = async (address: string): Promise<{ data?: Transaction[]; error: boolean }> => {\n  try {\n    const data = await request<TransactionResults>(INFO_CLIENT, POOL_TRANSACTIONS, {\n      address,\n    })\n    const mints = data.mints.map(mapMints)\n    const burns = data.burns.map(mapBurns)\n    const swaps = data.swaps.map(mapSwaps)\n    return { data: [...mints, ...burns, ...swaps], error: false }\n  } catch (error) {\n    console.error(`Failed to fetch transactions for pool ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchPoolTransactions\n"]},"metadata":{},"sourceType":"module"}