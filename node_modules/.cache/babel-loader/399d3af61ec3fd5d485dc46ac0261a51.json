{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _toConsumableArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var _templateObject;import{request,gql}from'graphql-request';import{GRAPH_API_LOTTERY}from'config/constants/endpoints';import{getRoundIdsArray,fetchMultipleLotteries}from'./helpers';export var MAX_LOTTERIES_REQUEST_SIZE=100;/* eslint-disable camelcase */var applyNodeDataToLotteriesGraphResponse=function applyNodeDataToLotteriesGraphResponse(nodeData,graphResponse){//   If no graph response - return node data\nif(graphResponse.length===0){return nodeData.map(function(nodeRound){return{endTime:nodeRound.endTime,finalNumber:nodeRound.finalNumber.toString(),startTime:nodeRound.startTime,status:nodeRound.status,id:nodeRound.lotteryId.toString(),ticketPrice:nodeRound.priceTicketInCake,totalTickets:'',totalUsers:'',winningTickets:''};});}// Populate all nodeRound data with supplementary graphResponse round data when available\nvar nodeRoundsWithGraphData=nodeData.map(function(nodeRoundData){var graphRoundData=graphResponse.find(function(graphResponseRound){return graphResponseRound.id===nodeRoundData.lotteryId;});return{endTime:nodeRoundData.endTime,finalNumber:nodeRoundData.finalNumber.toString(),startTime:nodeRoundData.startTime,status:nodeRoundData.status,id:nodeRoundData.lotteryId,ticketPrice:graphRoundData===null||graphRoundData===void 0?void 0:graphRoundData.ticketPrice,totalTickets:graphRoundData===null||graphRoundData===void 0?void 0:graphRoundData.totalTickets,totalUsers:graphRoundData===null||graphRoundData===void 0?void 0:graphRoundData.totalUsers,winningTickets:graphRoundData===null||graphRoundData===void 0?void 0:graphRoundData.winningTickets};});// Return the rounds with combined node + subgraph data, plus all remaining subgraph rounds.\nvar _nodeRoundsWithGraphD=nodeRoundsWithGraphData.slice(-1),_nodeRoundsWithGraphD2=_slicedToArray(_nodeRoundsWithGraphD,1),lastCombinedDataRound=_nodeRoundsWithGraphD2[0];var lastCombinedDataRoundIndex=graphResponse.map(function(graphRound){return graphRound===null||graphRound===void 0?void 0:graphRound.id;}).indexOf(lastCombinedDataRound===null||lastCombinedDataRound===void 0?void 0:lastCombinedDataRound.id);var remainingSubgraphRounds=graphResponse?graphResponse.splice(lastCombinedDataRoundIndex+1):[];var mergedResponse=[].concat(_toConsumableArray(nodeRoundsWithGraphData),_toConsumableArray(remainingSubgraphRounds));return mergedResponse;};export var getGraphLotteries=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var first,skip,where,response,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:first=_args.length>0&&_args[0]!==undefined?_args[0]:MAX_LOTTERIES_REQUEST_SIZE;skip=_args.length>1&&_args[1]!==undefined?_args[1]:0;where=_args.length>2&&_args[2]!==undefined?_args[2]:{};_context.prev=3;_context.next=6;return request(GRAPH_API_LOTTERY,gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n        query getLotteries($first: Int!, $skip: Int!, $where: Lottery_filter) {\\n          lotteries(first: $first, skip: $skip, where: $where, orderDirection: desc, orderBy: block) {\\n            id\\n            totalUsers\\n            totalTickets\\n            winningTickets\\n            status\\n            finalNumber\\n            startTime\\n            endTime\\n            ticketPrice\\n          }\\n        }\\n      \"]))),{skip:skip,first:first,where:where});case 6:response=_context.sent;return _context.abrupt(\"return\",response.lotteries);case 10:_context.prev=10;_context.t0=_context[\"catch\"](3);console.error(_context.t0);return _context.abrupt(\"return\",[]);case 14:case\"end\":return _context.stop();}}},_callee,null,[[3,10]]);}));return function getGraphLotteries(){return _ref.apply(this,arguments);};}();var getLotteriesData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(currentLotteryId){var idsForNodesCall,nodeData,graphResponse,mergedData;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:idsForNodesCall=getRoundIdsArray(currentLotteryId);_context2.next=3;return fetchMultipleLotteries(idsForNodesCall);case 3:nodeData=_context2.sent;_context2.next=6;return getGraphLotteries();case 6:graphResponse=_context2.sent;mergedData=applyNodeDataToLotteriesGraphResponse(nodeData,graphResponse);return _context2.abrupt(\"return\",mergedData);case 9:case\"end\":return _context2.stop();}}},_callee2);}));return function getLotteriesData(_x){return _ref2.apply(this,arguments);};}();export default getLotteriesData;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/lottery/getLotteriesData.ts"],"names":["request","gql","GRAPH_API_LOTTERY","getRoundIdsArray","fetchMultipleLotteries","MAX_LOTTERIES_REQUEST_SIZE","applyNodeDataToLotteriesGraphResponse","nodeData","graphResponse","length","map","nodeRound","endTime","finalNumber","toString","startTime","status","id","lotteryId","ticketPrice","priceTicketInCake","totalTickets","totalUsers","winningTickets","nodeRoundsWithGraphData","nodeRoundData","graphRoundData","find","graphResponseRound","slice","lastCombinedDataRound","lastCombinedDataRoundIndex","graphRound","indexOf","remainingSubgraphRounds","splice","mergedResponse","getGraphLotteries","first","skip","where","response","lotteries","console","error","getLotteriesData","currentLotteryId","idsForNodesCall","mergedData"],"mappings":"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","sourcesContent":["import { request, gql } from 'graphql-request'\nimport { GRAPH_API_LOTTERY } from 'config/constants/endpoints'\nimport { LotteryRoundGraphEntity, LotteryResponse } from 'state/types'\nimport { getRoundIdsArray, fetchMultipleLotteries } from './helpers'\n\nexport const MAX_LOTTERIES_REQUEST_SIZE = 100\n\n/* eslint-disable camelcase */\ntype LotteriesWhere = { id_in?: string[] }\n\nconst applyNodeDataToLotteriesGraphResponse = (\n  nodeData: LotteryResponse[],\n  graphResponse: LotteryRoundGraphEntity[],\n): LotteryRoundGraphEntity[] => {\n  //   If no graph response - return node data\n  if (graphResponse.length === 0) {\n    return nodeData.map((nodeRound) => {\n      return {\n        endTime: nodeRound.endTime,\n        finalNumber: nodeRound.finalNumber.toString(),\n        startTime: nodeRound.startTime,\n        status: nodeRound.status,\n        id: nodeRound.lotteryId.toString(),\n        ticketPrice: nodeRound.priceTicketInCake,\n        totalTickets: '',\n        totalUsers: '',\n        winningTickets: '',\n      }\n    })\n  }\n\n  // Populate all nodeRound data with supplementary graphResponse round data when available\n  const nodeRoundsWithGraphData = nodeData.map((nodeRoundData) => {\n    const graphRoundData = graphResponse.find((graphResponseRound) => graphResponseRound.id === nodeRoundData.lotteryId)\n    return {\n      endTime: nodeRoundData.endTime,\n      finalNumber: nodeRoundData.finalNumber.toString(),\n      startTime: nodeRoundData.startTime,\n      status: nodeRoundData.status,\n      id: nodeRoundData.lotteryId,\n      ticketPrice: graphRoundData?.ticketPrice,\n      totalTickets: graphRoundData?.totalTickets,\n      totalUsers: graphRoundData?.totalUsers,\n      winningTickets: graphRoundData?.winningTickets,\n    }\n  })\n\n  // Return the rounds with combined node + subgraph data, plus all remaining subgraph rounds.\n  const [lastCombinedDataRound] = nodeRoundsWithGraphData.slice(-1)\n  const lastCombinedDataRoundIndex = graphResponse\n    .map((graphRound) => graphRound?.id)\n    .indexOf(lastCombinedDataRound?.id)\n\n  const remainingSubgraphRounds = graphResponse ? graphResponse.splice(lastCombinedDataRoundIndex + 1) : []\n  const mergedResponse = [...nodeRoundsWithGraphData, ...remainingSubgraphRounds]\n  return mergedResponse\n}\n\nexport const getGraphLotteries = async (\n  first = MAX_LOTTERIES_REQUEST_SIZE,\n  skip = 0,\n  where: LotteriesWhere = {},\n): Promise<LotteryRoundGraphEntity[]> => {\n  try {\n    const response = await request(\n      GRAPH_API_LOTTERY,\n      gql`\n        query getLotteries($first: Int!, $skip: Int!, $where: Lottery_filter) {\n          lotteries(first: $first, skip: $skip, where: $where, orderDirection: desc, orderBy: block) {\n            id\n            totalUsers\n            totalTickets\n            winningTickets\n            status\n            finalNumber\n            startTime\n            endTime\n            ticketPrice\n          }\n        }\n      `,\n      { skip, first, where },\n    )\n    return response.lotteries\n  } catch (error) {\n    console.error(error)\n    return []\n  }\n}\n\nconst getLotteriesData = async (currentLotteryId: string): Promise<LotteryRoundGraphEntity[]> => {\n  const idsForNodesCall = getRoundIdsArray(currentLotteryId)\n  const nodeData = await fetchMultipleLotteries(idsForNodesCall)\n  const graphResponse = await getGraphLotteries()\n  const mergedData = applyNodeDataToLotteriesGraphResponse(nodeData, graphResponse)\n  return mergedData\n}\n\nexport default getLotteriesData\n"]},"metadata":{},"sourceType":"module"}