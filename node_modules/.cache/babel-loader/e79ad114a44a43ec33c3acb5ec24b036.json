{"ast":null,"code":"import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{Grid,useModal,Text,Flex}from'@pancakeswap/uikit';import{useUserNfts}from'state/nftMarket/hooks';import{NftLocation,UserNftInitializationState}from'state/nftMarket/types';import{useTranslation}from'contexts/Localization';import{CollectibleActionCard}from'../../components/CollectibleCard';import GridPlaceholder from'../../components/GridPlaceholder';import ProfileNftModal from'../../components/ProfileNftModal';import NoNftsImage from'./NoNftsImage';import SellModal from'../../components/BuySellModals/SellModal';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var UserNfts=function UserNfts(){var _useUserNfts=useUserNfts(),nfts=_useUserNfts.nfts,userNftsInitializationState=_useUserNfts.userNftsInitializationState;var _useState=useState({nft:null,location:null}),_useState2=_slicedToArray(_useState,2),clickedProfileNft=_useState2[0],setClickedProfileNft=_useState2[1];var _useState3=useState({nft:null,location:null,variant:null}),_useState4=_slicedToArray(_useState3,2),clickedSellNft=_useState4[0],setClickedSellNft=_useState4[1];var _useModal=useModal(/*#__PURE__*/_jsx(ProfileNftModal,{nft:clickedProfileNft.nft})),_useModal2=_slicedToArray(_useModal,1),onPresentProfileNftModal=_useModal2[0];var _useModal3=useModal(/*#__PURE__*/_jsx(SellModal,{variant:clickedSellNft.variant,nftToSell:clickedSellNft.nft})),_useModal4=_slicedToArray(_useModal3,1),onPresentSellModal=_useModal4[0];var _useTranslation=useTranslation(),t=_useTranslation.t;var handleCollectibleClick=function handleCollectibleClick(nft,location){switch(location){case NftLocation.PROFILE:setClickedProfileNft({nft:nft,location:location});break;case NftLocation.WALLET:setClickedSellNft({nft:nft,location:location,variant:'sell'});break;case NftLocation.FORSALE:setClickedSellNft({nft:nft,location:location,variant:'edit'});break;default:break;}};useEffect(function(){if(clickedProfileNft.nft){onPresentProfileNftModal();}// exhaustive deps disabled as the useModal dep causes re-render loop\n// eslint-disable-next-line react-hooks/exhaustive-deps\n},[clickedProfileNft]);useEffect(function(){if(clickedSellNft.nft){onPresentSellModal();}// exhaustive deps disabled as the useModal dep causes re-render loop\n// eslint-disable-next-line react-hooks/exhaustive-deps\n},[clickedSellNft]);return/*#__PURE__*/_jsx(_Fragment,{children:nfts.length===0&&userNftsInitializationState===UserNftInitializationState.INITIALIZED?/*#__PURE__*/_jsxs(Flex,{p:\"24px\",flexDirection:\"column\",alignItems:\"center\",children:[/*#__PURE__*/_jsx(NoNftsImage,{}),/*#__PURE__*/_jsx(Text,{pt:\"8px\",bold:true,children:t('No NFTs found')})]}):// User has NFTs and data has been fetched\nnfts.length>0?/*#__PURE__*/_jsx(Grid,{gridGap:\"16px\",gridTemplateColumns:['1fr','repeat(2, 1fr)','repeat(3, 1fr)',null,'repeat(4, 1fr)'],alignItems:\"start\",children:nfts.map(function(nft){var marketData=nft.marketData,location=nft.location;return/*#__PURE__*/_jsx(CollectibleActionCard,{isUserNft:true,onClick:function onClick(){return handleCollectibleClick(nft,location);},nft:nft,currentAskPrice:(marketData===null||marketData===void 0?void 0:marketData.currentAskPrice)&&(marketData===null||marketData===void 0?void 0:marketData.isTradable)&&parseFloat(marketData.currentAskPrice),nftLocation:location},\"\".concat(nft.tokenId,\"-\").concat(nft.collectionName));})}):/*#__PURE__*/ // User NFT data hasn't been fetched\n_jsx(GridPlaceholder,{})});};export default UserNfts;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Profile/components/UserNfts.tsx"],"names":["React","useState","useEffect","Grid","useModal","Text","Flex","useUserNfts","NftLocation","UserNftInitializationState","useTranslation","CollectibleActionCard","GridPlaceholder","ProfileNftModal","NoNftsImage","SellModal","UserNfts","nfts","userNftsInitializationState","nft","location","clickedProfileNft","setClickedProfileNft","variant","clickedSellNft","setClickedSellNft","onPresentProfileNftModal","onPresentSellModal","t","handleCollectibleClick","PROFILE","WALLET","FORSALE","length","INITIALIZED","map","marketData","currentAskPrice","isTradable","parseFloat","tokenId","collectionName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Grid, useModal, Text, Flex } from '@pancakeswap/uikit'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { NftLocation, UserNftInitializationState, NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { CollectibleActionCard } from '../../components/CollectibleCard'\nimport GridPlaceholder from '../../components/GridPlaceholder'\nimport ProfileNftModal from '../../components/ProfileNftModal'\nimport NoNftsImage from './NoNftsImage'\nimport SellModal from '../../components/BuySellModals/SellModal'\n\ninterface ProfileNftProps {\n  nft: NftToken\n  location: NftLocation\n}\n\ninterface SellNftProps {\n  nft: NftToken\n  location: NftLocation\n  variant: 'sell' | 'edit'\n}\n\nconst UserNfts = () => {\n  const { nfts, userNftsInitializationState } = useUserNfts()\n  const [clickedProfileNft, setClickedProfileNft] = useState<ProfileNftProps>({ nft: null, location: null })\n  const [clickedSellNft, setClickedSellNft] = useState<SellNftProps>({ nft: null, location: null, variant: null })\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={clickedProfileNft.nft} />)\n  const [onPresentSellModal] = useModal(<SellModal variant={clickedSellNft.variant} nftToSell={clickedSellNft.nft} />)\n  const { t } = useTranslation()\n\n  const handleCollectibleClick = (nft: NftToken, location: NftLocation) => {\n    switch (location) {\n      case NftLocation.PROFILE:\n        setClickedProfileNft({ nft, location })\n        break\n      case NftLocation.WALLET:\n        setClickedSellNft({ nft, location, variant: 'sell' })\n        break\n      case NftLocation.FORSALE:\n        setClickedSellNft({ nft, location, variant: 'edit' })\n        break\n      default:\n        break\n    }\n  }\n\n  useEffect(() => {\n    if (clickedProfileNft.nft) {\n      onPresentProfileNftModal()\n    }\n    // exhaustive deps disabled as the useModal dep causes re-render loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedProfileNft])\n\n  useEffect(() => {\n    if (clickedSellNft.nft) {\n      onPresentSellModal()\n    }\n    // exhaustive deps disabled as the useModal dep causes re-render loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedSellNft])\n\n  return (\n    <>\n      {/* User has no NFTs */}\n      {nfts.length === 0 && userNftsInitializationState === UserNftInitializationState.INITIALIZED ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFTs found')}\n          </Text>\n        </Flex>\n      ) : // User has NFTs and data has been fetched\n      nfts.length > 0 ? (\n        <Grid\n          gridGap=\"16px\"\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n          alignItems=\"start\"\n        >\n          {nfts.map((nft) => {\n            const { marketData, location } = nft\n\n            return (\n              <CollectibleActionCard\n                isUserNft\n                onClick={() => handleCollectibleClick(nft, location)}\n                key={`${nft.tokenId}-${nft.collectionName}`}\n                nft={nft}\n                currentAskPrice={\n                  marketData?.currentAskPrice && marketData?.isTradable && parseFloat(marketData.currentAskPrice)\n                }\n                nftLocation={location}\n              />\n            )\n          })}\n        </Grid>\n      ) : (\n        // User NFT data hasn't been fetched\n        <GridPlaceholder />\n      )}\n    </>\n  )\n}\n\nexport default UserNfts\n"]},"metadata":{},"sourceType":"module"}