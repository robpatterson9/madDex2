{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _defineProperty from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import poolsConfig from'config/constants/pools';import sousChefABI from'config/abi/sousChef.json';import erc20ABI from'config/abi/erc20.json';import multicall from'utils/multicall';import{getMasterchefContract}from'utils/contractHelpers';import{getAddress}from'utils/addressHelpers';import{simpleRpcProvider}from'utils/providers';import BigNumber from'bignumber.js';// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nvar nonBnbPools=poolsConfig.filter(function(pool){return pool.stakingToken.symbol!=='BNB';});var bnbPools=poolsConfig.filter(function(pool){return pool.stakingToken.symbol==='BNB';});var nonMasterPools=poolsConfig.filter(function(pool){return pool.sousId!==0;});var masterChefContract=getMasterchefContract();export var fetchPoolsAllowance=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(account){var calls,allowances;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:calls=nonBnbPools.map(function(pool){return{address:pool.stakingToken.address,name:'allowance',params:[account,getAddress(pool.contractAddress)]};});_context.next=3;return multicall(erc20ABI,calls);case 3:allowances=_context.sent;return _context.abrupt(\"return\",nonBnbPools.reduce(function(acc,pool,index){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},pool.sousId,new BigNumber(allowances[index]).toJSON()));},{}));case 5:case\"end\":return _context.stop();}}},_callee);}));return function fetchPoolsAllowance(_x){return _ref.apply(this,arguments);};}();export var fetchUserBalances=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(account){var calls,tokenBalancesRaw,tokenBalances,bnbBalance,bnbBalances;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:// Non BNB pools\ncalls=nonBnbPools.map(function(pool){return{address:pool.stakingToken.address,name:'balanceOf',params:[account]};});_context2.next=3;return multicall(erc20ABI,calls);case 3:tokenBalancesRaw=_context2.sent;tokenBalances=nonBnbPools.reduce(function(acc,pool,index){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},pool.sousId,new BigNumber(tokenBalancesRaw[index]).toJSON()));},{});// BNB pools\n_context2.next=7;return simpleRpcProvider.getBalance(account);case 7:bnbBalance=_context2.sent;bnbBalances=bnbPools.reduce(function(acc,pool){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},pool.sousId,new BigNumber(bnbBalance.toString()).toJSON()));},{});return _context2.abrupt(\"return\",_objectSpread(_objectSpread({},tokenBalances),bnbBalances));case 10:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchUserBalances(_x2){return _ref2.apply(this,arguments);};}();export var fetchUserStakeBalances=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(account){var calls,userInfo,stakedBalances,_yield$masterChefCont,masterPoolAmount;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:calls=nonMasterPools.map(function(p){return{address:getAddress(p.contractAddress),name:'userInfo',params:[account]};});_context3.next=3;return multicall(sousChefABI,calls);case 3:userInfo=_context3.sent;stakedBalances=nonMasterPools.reduce(function(acc,pool,index){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},pool.sousId,new BigNumber(userInfo[index].amount._hex).toJSON()));},{});// Cake / Cake pool\n_context3.next=7;return masterChefContract.userInfo('0',account);case 7:_yield$masterChefCont=_context3.sent;masterPoolAmount=_yield$masterChefCont.amount;return _context3.abrupt(\"return\",_objectSpread(_objectSpread({},stakedBalances),{},{0:new BigNumber(masterPoolAmount.toString()).toJSON()}));case 10:case\"end\":return _context3.stop();}}},_callee3);}));return function fetchUserStakeBalances(_x3){return _ref3.apply(this,arguments);};}();export var fetchUserPendingRewards=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(account){var calls,res,pendingRewards,pendingReward;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:calls=nonMasterPools.map(function(p){return{address:getAddress(p.contractAddress),name:'pendingReward',params:[account]};});_context4.next=3;return multicall(sousChefABI,calls);case 3:res=_context4.sent;pendingRewards=nonMasterPools.reduce(function(acc,pool,index){return _objectSpread(_objectSpread({},acc),{},_defineProperty({},pool.sousId,new BigNumber(res[index]).toJSON()));},{});// Cake / Cake pool\n_context4.next=7;return masterChefContract.pendingCake('0',account);case 7:pendingReward=_context4.sent;return _context4.abrupt(\"return\",_objectSpread(_objectSpread({},pendingRewards),{},{0:new BigNumber(pendingReward.toString()).toJSON()}));case 9:case\"end\":return _context4.stop();}}},_callee4);}));return function fetchUserPendingRewards(_x4){return _ref4.apply(this,arguments);};}();","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/pools/fetchPoolsUser.ts"],"names":["poolsConfig","sousChefABI","erc20ABI","multicall","getMasterchefContract","getAddress","simpleRpcProvider","BigNumber","nonBnbPools","filter","pool","stakingToken","symbol","bnbPools","nonMasterPools","sousId","masterChefContract","fetchPoolsAllowance","account","calls","map","address","name","params","contractAddress","allowances","reduce","acc","index","toJSON","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","toString","fetchUserStakeBalances","p","userInfo","stakedBalances","amount","_hex","masterPoolAmount","fetchUserPendingRewards","res","pendingRewards","pendingCake","pendingReward"],"mappings":"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","sourcesContent":["import poolsConfig from 'config/constants/pools'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport multicall from 'utils/multicall'\nimport { getMasterchefContract } from 'utils/contractHelpers'\nimport { getAddress } from 'utils/addressHelpers'\nimport { simpleRpcProvider } from 'utils/providers'\nimport BigNumber from 'bignumber.js'\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((pool) => pool.stakingToken.symbol !== 'BNB')\nconst bnbPools = poolsConfig.filter((pool) => pool.stakingToken.symbol === 'BNB')\nconst nonMasterPools = poolsConfig.filter((pool) => pool.sousId !== 0)\nconst masterChefContract = getMasterchefContract()\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((pool) => ({\n    address: pool.stakingToken.address,\n    name: 'allowance',\n    params: [account, getAddress(pool.contractAddress)],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((pool) => ({\n    address: pool.stakingToken.address,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await simpleRpcProvider.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance.toString()).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: getAddress(p.contractAddress),\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.userInfo('0', account)\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount.toString()).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: getAddress(p.contractAddress),\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.pendingCake('0', account)\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward.toString()).toJSON() }\n}\n"]},"metadata":{},"sourceType":"module"}