{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{AutoRenewIcon,Button,Flex,Text}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{useCake}from'hooks/useContract';import useToast from'hooks/useToast';import{useProfile}from'state/profile/hooks';import{getPancakeProfileAddress}from'utils/addressHelpers';import{formatBigNumber}from'utils/formatBalance';import useGetProfileCosts from'views/Nft/market/Profile/hooks/useGetProfileCosts';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ApproveCakePage=function ApproveCakePage(_ref){var goToChange=_ref.goToChange,onDismiss=_ref.onDismiss;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isApproving=_useState2[0],setIsApproving=_useState2[1];var _useProfile=useProfile(),profile=_useProfile.profile;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useGetProfileCosts=useGetProfileCosts(),numberCakeToUpdate=_useGetProfileCosts.numberCakeToUpdate,numberCakeToReactivate=_useGetProfileCosts.numberCakeToReactivate;var cakeContract=useCake();var _useToast=useToast(),toastError=_useToast.toastError;var cost=profile.isActive?numberCakeToUpdate:numberCakeToReactivate;var handleApprove=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var tx,receipt;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return cakeContract.approve(getPancakeProfileAddress(),cost.mul(2).toString());case 2:tx=_context.sent;setIsApproving(true);_context.next=6;return tx.wait();case 6:receipt=_context.sent;if(receipt.status){goToChange();}else{toastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));setIsApproving(false);}case 8:case\"end\":return _context.stop();}}},_callee);}));return function handleApprove(){return _ref2.apply(this,arguments);};}();if(!profile){return null;}return/*#__PURE__*/_jsxs(Flex,{flexDirection:\"column\",children:[/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",justifyContent:\"space-between\",mb:\"24px\",children:[/*#__PURE__*/_jsx(Text,{children:profile.isActive?t('Cost to update:'):t('Cost to reactivate:')}),/*#__PURE__*/_jsxs(Text,{children:[formatBigNumber(cost),\" CAKE\"]})]}),/*#__PURE__*/_jsx(Button,{disabled:isApproving,isLoading:isApproving,endIcon:isApproving?/*#__PURE__*/_jsx(AutoRenewIcon,{spin:true,color:\"currentColor\"}):null,width:\"100%\",mb:\"8px\",onClick:handleApprove,children:t('Enable')}),/*#__PURE__*/_jsx(Button,{variant:\"text\",width:\"100%\",onClick:onDismiss,disabled:isApproving,children:t('Close Window')})]});};export default ApproveCakePage;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Profile/components/EditProfileModal/ApproveCakeView.tsx"],"names":["React","useState","AutoRenewIcon","Button","Flex","Text","useTranslation","useCake","useToast","useProfile","getPancakeProfileAddress","formatBigNumber","useGetProfileCosts","ApproveCakePage","goToChange","onDismiss","isApproving","setIsApproving","profile","t","numberCakeToUpdate","numberCakeToReactivate","cakeContract","toastError","cost","isActive","handleApprove","approve","mul","toString","tx","wait","receipt","status"],"mappings":"qcAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,aAAT,CAAwBC,MAAxB,CAAgCC,IAAhC,CAA0DC,IAA1D,KAAsE,oBAAtE,CACA,OAASC,cAAT,KAA+B,uBAA/B,CACA,OAASC,OAAT,KAAwB,mBAAxB,CACA,MAAOC,CAAAA,QAAP,KAAqB,gBAArB,CACA,OAASC,UAAT,KAA2B,qBAA3B,CACA,OAASC,wBAAT,KAAyC,sBAAzC,CACA,OAASC,eAAT,KAAgC,qBAAhC,CACA,MAAOC,CAAAA,kBAAP,KAA+B,mDAA/B,C,wFAOA,GAAMC,CAAAA,eAA+C,CAAG,QAAlDA,CAAAA,eAAkD,MAA+B,IAA5BC,CAAAA,UAA4B,MAA5BA,UAA4B,CAAhBC,SAAgB,MAAhBA,SAAgB,CACrF,cAAsCd,QAAQ,CAAC,KAAD,CAA9C,wCAAOe,WAAP,eAAoBC,cAApB,eACA,gBAAoBR,UAAU,EAA9B,CAAQS,OAAR,aAAQA,OAAR,CACA,oBAAcZ,cAAc,EAA5B,CAAQa,CAAR,iBAAQA,CAAR,CACA,wBAAuDP,kBAAkB,EAAzE,CAAQQ,kBAAR,qBAAQA,kBAAR,CAA4BC,sBAA5B,qBAA4BA,sBAA5B,CACA,GAAMC,CAAAA,YAAY,CAAGf,OAAO,EAA5B,CACA,cAAuBC,QAAQ,EAA/B,CAAQe,UAAR,WAAQA,UAAR,CACA,GAAMC,CAAAA,IAAI,CAAGN,OAAO,CAACO,QAAR,CAAmBL,kBAAnB,CAAwCC,sBAArD,CAEA,GAAMK,CAAAA,aAAa,2FAAG,wKACHJ,CAAAA,YAAY,CAACK,OAAb,CAAqBjB,wBAAwB,EAA7C,CAAiDc,IAAI,CAACI,GAAL,CAAS,CAAT,EAAYC,QAAZ,EAAjD,CADG,QACdC,EADc,eAEpBb,cAAc,CAAC,IAAD,CAAd,CAFoB,sBAGEa,CAAAA,EAAE,CAACC,IAAH,EAHF,QAGdC,OAHc,eAIpB,GAAIA,OAAO,CAACC,MAAZ,CAAoB,CAClBnB,UAAU,GACX,CAFD,IAEO,CACLS,UAAU,CAACJ,CAAC,CAAC,OAAD,CAAF,CAAaA,CAAC,CAAC,oFAAD,CAAd,CAAV,CACAF,cAAc,CAAC,KAAD,CAAd,CACD,CATmB,sDAAH,kBAAbS,CAAAA,aAAa,2CAAnB,CAYA,GAAI,CAACR,OAAL,CAAc,CACZ,MAAO,KAAP,CACD,CAED,mBACE,MAAC,IAAD,EAAM,aAAa,CAAC,QAApB,wBACE,MAAC,IAAD,EAAM,UAAU,CAAC,QAAjB,CAA0B,cAAc,CAAC,eAAzC,CAAyD,EAAE,CAAC,MAA5D,wBACE,KAAC,IAAD,WAAOA,OAAO,CAACO,QAAR,CAAmBN,CAAC,CAAC,iBAAD,CAApB,CAA0CA,CAAC,CAAC,qBAAD,CAAlD,EADF,cAEE,MAAC,IAAD,YAAOR,eAAe,CAACa,IAAD,CAAtB,WAFF,GADF,cAKE,KAAC,MAAD,EACE,QAAQ,CAAER,WADZ,CAEE,SAAS,CAAEA,WAFb,CAGE,OAAO,CAAEA,WAAW,cAAG,KAAC,aAAD,EAAe,IAAI,KAAnB,CAAoB,KAAK,CAAC,cAA1B,EAAH,CAAiD,IAHvE,CAIE,KAAK,CAAC,MAJR,CAKE,EAAE,CAAC,KALL,CAME,OAAO,CAAEU,aANX,UAQGP,CAAC,CAAC,QAAD,CARJ,EALF,cAeE,KAAC,MAAD,EAAQ,OAAO,CAAC,MAAhB,CAAuB,KAAK,CAAC,MAA7B,CAAoC,OAAO,CAAEJ,SAA7C,CAAwD,QAAQ,CAAEC,WAAlE,UACGG,CAAC,CAAC,cAAD,CADJ,EAfF,GADF,CAqBD,CA9CD,CAgDA,cAAeN,CAAAA,eAAf","sourcesContent":["import React, { useState } from 'react'\nimport { AutoRenewIcon, Button, Flex, InjectedModalProps, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCake } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { useProfile } from 'state/profile/hooks'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport { formatBigNumber } from 'utils/formatBalance'\nimport useGetProfileCosts from 'views/Nft/market/Profile/hooks/useGetProfileCosts'\nimport { UseEditProfileResponse } from './reducer'\n\ninterface ApproveCakePageProps extends InjectedModalProps {\n  goToChange: UseEditProfileResponse['goToChange']\n}\n\nconst ApproveCakePage: React.FC<ApproveCakePageProps> = ({ goToChange, onDismiss }) => {\n  const [isApproving, setIsApproving] = useState(false)\n  const { profile } = useProfile()\n  const { t } = useTranslation()\n  const { numberCakeToUpdate, numberCakeToReactivate } = useGetProfileCosts()\n  const cakeContract = useCake()\n  const { toastError } = useToast()\n  const cost = profile.isActive ? numberCakeToUpdate : numberCakeToReactivate\n\n  const handleApprove = async () => {\n    const tx = await cakeContract.approve(getPancakeProfileAddress(), cost.mul(2).toString())\n    setIsApproving(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      goToChange()\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsApproving(false)\n    }\n  }\n\n  if (!profile) {\n    return null\n  }\n\n  return (\n    <Flex flexDirection=\"column\">\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\n        <Text>{profile.isActive ? t('Cost to update:') : t('Cost to reactivate:')}</Text>\n        <Text>{formatBigNumber(cost)} CAKE</Text>\n      </Flex>\n      <Button\n        disabled={isApproving}\n        isLoading={isApproving}\n        endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        width=\"100%\"\n        mb=\"8px\"\n        onClick={handleApprove}\n      >\n        {t('Enable')}\n      </Button>\n      <Button variant=\"text\" width=\"100%\" onClick={onDismiss} disabled={isApproving}>\n        {t('Close Window')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default ApproveCakePage\n"]},"metadata":{},"sourceType":"module"}