{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Nft/market/components/BuySellModals/SellModal/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { parseUnits } from 'ethers/lib/utils';\nimport useTheme from 'hooks/useTheme';\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction';\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice';\nimport useToast from 'hooks/useToast';\nimport { ToastDescriptionWithTx } from 'components/Toast';\nimport { useTranslation } from 'contexts/Localization';\nimport { isAddress } from 'utils';\nimport { useNftMarketContract, usePancakeRabbits } from 'hooks/useContract';\nimport { useAppDispatch } from 'state';\nimport { removeUserNft, updateUserNft } from 'state/nftMarket/reducer';\nimport { NftLocation } from 'state/nftMarket/types';\nimport { useGetLowestPriceFromNft } from 'views/Nft/market/hooks/useGetLowestPrice';\nimport SellStage from './SellStage';\nimport SetPriceStage from './SetPriceStage';\nimport EditStage from './EditStage';\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage';\nimport TransactionConfirmed from '../shared/TransactionConfirmed';\nimport { StyledModal, stagesWithBackButton } from './styles';\nimport { SellingStage } from './types';\nimport ConfirmStage from '../shared/ConfirmStage';\nimport RemoveStage from './RemoveStage';\nimport TransferStage from './TransferStage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const modalTitles = (stage, t) => {\n  switch (stage) {\n    // Sell flow\n    case SellingStage.SELL:\n      return t('Details');\n\n    case SellingStage.SET_PRICE:\n    case SellingStage.APPROVE_AND_CONFIRM_SELL:\n      return t('Back');\n    // Adjust price flow\n\n    case SellingStage.EDIT:\n      return t('Details');\n\n    case SellingStage.ADJUST_PRICE:\n      return t('Back');\n\n    case SellingStage.CONFIRM_ADJUST_PRICE:\n      return t('Confirm transaction');\n    // Remove from market flow\n\n    case SellingStage.REMOVE_FROM_MARKET:\n      return t('Back');\n\n    case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\n      return t('Confirm transaction');\n    // Transfer flow\n\n    case SellingStage.TRANSFER:\n      return t('Back');\n\n    case SellingStage.CONFIRM_TRANSFER:\n      return t('Confirm transaction');\n    // Common\n\n    case SellingStage.TX_CONFIRMED:\n      return t('Transaction Confirmed');\n\n    default:\n      return '';\n  }\n};\n\nconst getToastText = (variant, stage, t) => {\n  if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\n    return t('Your NFT has been returned to your wallet');\n  }\n\n  if (stage === SellingStage.CONFIRM_TRANSFER) {\n    return t('Your NFT has been transferred to another wallet');\n  }\n\n  if (variant === 'sell') {\n    return t('Your NFT has been listed for sale!');\n  }\n\n  return t('Your NFT listing has been changed.');\n};\n\nconst SellModal = ({\n  variant,\n  nftToSell,\n  onDismiss\n}) => {\n  _s();\n\n  const [stage, setStage] = useState(variant === 'sell' ? SellingStage.SELL : SellingStage.EDIT);\n  const [price, setPrice] = useState(variant === 'sell' ? '' : nftToSell.marketData.currentAskPrice);\n  const [transferAddress, setTransferAddress] = useState('');\n  const [confirmedTxHash, setConfirmedTxHash] = useState('');\n  const {\n    t\n  } = useTranslation();\n  const {\n    theme\n  } = useTheme();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n  const {\n    toastSuccess\n  } = useToast();\n  const pancakeBunniesContract = usePancakeRabbits();\n  const nftMarketContract = useNftMarketContract();\n  const dispatch = useAppDispatch();\n  const isInvalidTransferAddress = transferAddress.length > 0 && !isAddress(transferAddress);\n  const {\n    lowestPrice\n  } = useGetLowestPriceFromNft(nftToSell);\n\n  const goBack = () => {\n    switch (stage) {\n      case SellingStage.SET_PRICE:\n        setStage(SellingStage.SELL);\n        break;\n\n      case SellingStage.APPROVE_AND_CONFIRM_SELL:\n        setStage(SellingStage.SET_PRICE);\n        break;\n\n      case SellingStage.ADJUST_PRICE:\n        setPrice(nftToSell.marketData.currentAskPrice);\n        setStage(SellingStage.EDIT);\n        break;\n\n      case SellingStage.CONFIRM_ADJUST_PRICE:\n        setStage(SellingStage.ADJUST_PRICE);\n        break;\n\n      case SellingStage.REMOVE_FROM_MARKET:\n        setStage(SellingStage.EDIT);\n        break;\n\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\n        setStage(SellingStage.REMOVE_FROM_MARKET);\n        break;\n\n      case SellingStage.TRANSFER:\n        setStage(SellingStage.SELL);\n        break;\n\n      case SellingStage.CONFIRM_TRANSFER:\n        setStage(SellingStage.TRANSFER);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const continueToNextStage = () => {\n    switch (stage) {\n      case SellingStage.SELL:\n        setStage(SellingStage.SET_PRICE);\n        break;\n\n      case SellingStage.SET_PRICE:\n        setStage(SellingStage.APPROVE_AND_CONFIRM_SELL);\n        break;\n\n      case SellingStage.EDIT:\n        setStage(SellingStage.ADJUST_PRICE);\n        break;\n\n      case SellingStage.ADJUST_PRICE:\n        setStage(SellingStage.CONFIRM_ADJUST_PRICE);\n        break;\n\n      case SellingStage.REMOVE_FROM_MARKET:\n        setStage(SellingStage.CONFIRM_REMOVE_FROM_MARKET);\n        break;\n\n      case SellingStage.TRANSFER:\n        setStage(SellingStage.CONFIRM_TRANSFER);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const continueToRemoveFromMarketStage = () => {\n    setStage(SellingStage.REMOVE_FROM_MARKET);\n  };\n\n  const continueToTransferStage = () => {\n    setStage(SellingStage.TRANSFER);\n  };\n\n  const dispatchSuccessAction = () => {\n    switch (stage) {\n      // Remove from sale\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\n        dispatch(updateUserNft({\n          tokenId: nftToSell.tokenId,\n          collectionAddress: nftToSell.collectionAddress,\n          location: NftLocation.WALLET\n        }));\n        break;\n      // Transfer NFT\n\n      case SellingStage.CONFIRM_TRANSFER:\n        dispatch(removeUserNft({\n          tokenId: nftToSell.tokenId\n        }));\n        break;\n\n      default:\n        // Modify listing OR list for sale\n        dispatch(updateUserNft({\n          tokenId: nftToSell.tokenId,\n          collectionAddress: nftToSell.collectionAddress,\n          location: NftLocation.FORSALE\n        }));\n        break;\n    }\n  };\n\n  const {\n    isApproving,\n    isApproved,\n    isConfirming,\n    handleApprove,\n    handleConfirm\n  } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      try {\n        const approvedForContract = await pancakeBunniesContract.getApproved(nftToSell.tokenId);\n        return approvedForContract.toLowerCase() === nftMarketContract.address.toLowerCase();\n      } catch (error) {\n        return false;\n      }\n    },\n    onApprove: () => {\n      return callWithGasPrice(pancakeBunniesContract, 'approve', [nftMarketContract.address, nftToSell.tokenId]);\n    },\n    onApproveSuccess: async ({\n      receipt\n    }) => {\n      toastSuccess(t('Contract approved - you can now put your NFT for sale!'), /*#__PURE__*/_jsxDEV(ToastDescriptionWithTx, {\n        txHash: receipt.transactionHash\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this));\n    },\n    onConfirm: () => {\n      if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\n        return callWithGasPrice(nftMarketContract, 'cancelAskOrder', [nftToSell.collectionAddress, nftToSell.tokenId]);\n      }\n\n      if (stage === SellingStage.CONFIRM_TRANSFER) {\n        return callWithGasPrice(pancakeBunniesContract, 'safeTransferFrom(address,address,uint256)', [account, transferAddress, nftToSell.tokenId]);\n      }\n\n      const methodName = variant === 'sell' ? 'createAskOrder' : 'modifyAskOrder';\n      const askPrice = parseUnits(price);\n      return callWithGasPrice(nftMarketContract, methodName, [nftToSell.collectionAddress, nftToSell.tokenId, askPrice]);\n    },\n    onSuccess: async ({\n      receipt\n    }) => {\n      toastSuccess(getToastText(variant, stage, t), /*#__PURE__*/_jsxDEV(ToastDescriptionWithTx, {\n        txHash: receipt.transactionHash\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 53\n      }, this));\n      dispatchSuccessAction();\n      setConfirmedTxHash(receipt.transactionHash);\n      setStage(SellingStage.TX_CONFIRMED);\n    }\n  });\n  const showBackButton = stagesWithBackButton.includes(stage) && !isConfirming && !isApproving;\n  return /*#__PURE__*/_jsxDEV(StyledModal, {\n    title: modalTitles[stage],\n    stage: stage,\n    onDismiss: onDismiss,\n    onBack: showBackButton ? goBack : null,\n    headerBackground: theme.colors.gradients.cardHeader,\n    children: [stage === SellingStage.SELL && /*#__PURE__*/_jsxDEV(SellStage, {\n      nftToSell: nftToSell,\n      lowestPrice: lowestPrice,\n      continueToNextStage: continueToNextStage,\n      continueToTransferStage: continueToTransferStage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 9\n    }, this), stage === SellingStage.SET_PRICE && /*#__PURE__*/_jsxDEV(SetPriceStage, {\n      nftToSell: nftToSell,\n      variant: \"set\",\n      continueToNextStage: continueToNextStage,\n      lowestPrice: lowestPrice,\n      price: price,\n      setPrice: setPrice\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }, this), stage === SellingStage.APPROVE_AND_CONFIRM_SELL && /*#__PURE__*/_jsxDEV(ApproveAndConfirmStage, {\n      variant: \"sell\",\n      isApproved: isApproved,\n      isApproving: isApproving,\n      isConfirming: isConfirming,\n      handleApprove: handleApprove,\n      handleConfirm: handleConfirm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 9\n    }, this), stage === SellingStage.TX_CONFIRMED && /*#__PURE__*/_jsxDEV(TransactionConfirmed, {\n      txHash: confirmedTxHash,\n      onDismiss: onDismiss\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 47\n    }, this), stage === SellingStage.EDIT && /*#__PURE__*/_jsxDEV(EditStage, {\n      nftToSell: nftToSell,\n      lowestPrice: lowestPrice,\n      continueToAdjustPriceStage: continueToNextStage,\n      continueToRemoveFromMarketStage: continueToRemoveFromMarketStage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }, this), stage === SellingStage.ADJUST_PRICE && /*#__PURE__*/_jsxDEV(SetPriceStage, {\n      nftToSell: nftToSell,\n      variant: \"adjust\",\n      continueToNextStage: continueToNextStage,\n      currentPrice: nftToSell.marketData.currentAskPrice,\n      lowestPrice: lowestPrice,\n      price: price,\n      setPrice: setPrice\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 9\n    }, this), stage === SellingStage.CONFIRM_ADJUST_PRICE && /*#__PURE__*/_jsxDEV(ConfirmStage, {\n      isConfirming: isConfirming,\n      handleConfirm: handleConfirm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 9\n    }, this), stage === SellingStage.REMOVE_FROM_MARKET && /*#__PURE__*/_jsxDEV(RemoveStage, {\n      continueToNextStage: continueToNextStage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 53\n    }, this), stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET && /*#__PURE__*/_jsxDEV(ConfirmStage, {\n      isConfirming: isConfirming,\n      handleConfirm: handleConfirm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 9\n    }, this), stage === SellingStage.TRANSFER && /*#__PURE__*/_jsxDEV(TransferStage, {\n      nftToSell: nftToSell,\n      lowestPrice: lowestPrice,\n      continueToNextStage: continueToNextStage,\n      transferAddress: transferAddress,\n      setTransferAddress: setTransferAddress,\n      isInvalidTransferAddress: isInvalidTransferAddress\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }, this), stage === SellingStage.CONFIRM_TRANSFER && /*#__PURE__*/_jsxDEV(ConfirmStage, {\n      isConfirming: isConfirming,\n      handleConfirm: handleConfirm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SellModal, \"6tCz0sX/m2NmpRtQKvsaTpDMmNo=\", false, function () {\n  return [useTranslation, useTheme, useWeb3React, useCallWithGasPrice, useToast, usePancakeRabbits, useNftMarketContract, useAppDispatch, useGetLowestPriceFromNft, useApproveConfirmTransaction];\n});\n\n_c = SellModal;\nexport default SellModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"SellModal\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/components/BuySellModals/SellModal/index.tsx"],"names":["React","useState","useWeb3React","parseUnits","useTheme","useApproveConfirmTransaction","useCallWithGasPrice","useToast","ToastDescriptionWithTx","useTranslation","isAddress","useNftMarketContract","usePancakeRabbits","useAppDispatch","removeUserNft","updateUserNft","NftLocation","useGetLowestPriceFromNft","SellStage","SetPriceStage","EditStage","ApproveAndConfirmStage","TransactionConfirmed","StyledModal","stagesWithBackButton","SellingStage","ConfirmStage","RemoveStage","TransferStage","modalTitles","stage","t","SELL","SET_PRICE","APPROVE_AND_CONFIRM_SELL","EDIT","ADJUST_PRICE","CONFIRM_ADJUST_PRICE","REMOVE_FROM_MARKET","CONFIRM_REMOVE_FROM_MARKET","TRANSFER","CONFIRM_TRANSFER","TX_CONFIRMED","getToastText","variant","SellModal","nftToSell","onDismiss","setStage","price","setPrice","marketData","currentAskPrice","transferAddress","setTransferAddress","confirmedTxHash","setConfirmedTxHash","theme","account","callWithGasPrice","toastSuccess","pancakeBunniesContract","nftMarketContract","dispatch","isInvalidTransferAddress","length","lowestPrice","goBack","continueToNextStage","continueToRemoveFromMarketStage","continueToTransferStage","dispatchSuccessAction","tokenId","collectionAddress","location","WALLET","FORSALE","isApproving","isApproved","isConfirming","handleApprove","handleConfirm","onRequiresApproval","approvedForContract","getApproved","toLowerCase","address","error","onApprove","onApproveSuccess","receipt","transactionHash","onConfirm","methodName","askPrice","onSuccess","showBackButton","includes","colors","gradients","cardHeader"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { InjectedModalProps } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { parseUnits } from 'ethers/lib/utils'\nimport useTheme from 'hooks/useTheme'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useToast from 'hooks/useToast'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useTranslation } from 'contexts/Localization'\nimport { ContextApi } from 'contexts/Localization/types'\nimport { isAddress } from 'utils'\nimport { useNftMarketContract, usePancakeRabbits } from 'hooks/useContract'\nimport { useAppDispatch } from 'state'\nimport { removeUserNft, updateUserNft } from 'state/nftMarket/reducer'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport { useGetLowestPriceFromNft } from 'views/Nft/market/hooks/useGetLowestPrice'\nimport SellStage from './SellStage'\nimport SetPriceStage from './SetPriceStage'\nimport EditStage from './EditStage'\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\nimport { StyledModal, stagesWithBackButton } from './styles'\nimport { SellingStage } from './types'\nimport ConfirmStage from '../shared/ConfirmStage'\nimport RemoveStage from './RemoveStage'\nimport TransferStage from './TransferStage'\n\nexport const modalTitles = (stage: SellingStage, t: ContextApi['t']) => {\n  switch (stage) {\n    // Sell flow\n    case SellingStage.SELL:\n      return t('Details')\n    case SellingStage.SET_PRICE:\n    case SellingStage.APPROVE_AND_CONFIRM_SELL:\n      return t('Back')\n    // Adjust price flow\n    case SellingStage.EDIT:\n      return t('Details')\n    case SellingStage.ADJUST_PRICE:\n      return t('Back')\n    case SellingStage.CONFIRM_ADJUST_PRICE:\n      return t('Confirm transaction')\n    // Remove from market flow\n    case SellingStage.REMOVE_FROM_MARKET:\n      return t('Back')\n    case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\n      return t('Confirm transaction')\n    // Transfer flow\n    case SellingStage.TRANSFER:\n      return t('Back')\n    case SellingStage.CONFIRM_TRANSFER:\n      return t('Confirm transaction')\n    // Common\n    case SellingStage.TX_CONFIRMED:\n      return t('Transaction Confirmed')\n    default:\n      return ''\n  }\n}\n\nconst getToastText = (variant: string, stage: SellingStage, t: ContextApi['t']) => {\n  if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\n    return t('Your NFT has been returned to your wallet')\n  }\n  if (stage === SellingStage.CONFIRM_TRANSFER) {\n    return t('Your NFT has been transferred to another wallet')\n  }\n  if (variant === 'sell') {\n    return t('Your NFT has been listed for sale!')\n  }\n  return t('Your NFT listing has been changed.')\n}\n\ninterface SellModalProps extends InjectedModalProps {\n  variant: 'sell' | 'edit'\n  nftToSell: NftToken\n}\n\nconst SellModal: React.FC<SellModalProps> = ({ variant, nftToSell, onDismiss }) => {\n  const [stage, setStage] = useState(variant === 'sell' ? SellingStage.SELL : SellingStage.EDIT)\n  const [price, setPrice] = useState(variant === 'sell' ? '' : nftToSell.marketData.currentAskPrice)\n  const [transferAddress, setTransferAddress] = useState('')\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { account } = useWeb3React()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const { toastSuccess } = useToast()\n  const pancakeBunniesContract = usePancakeRabbits()\n  const nftMarketContract = useNftMarketContract()\n  const dispatch = useAppDispatch()\n\n  const isInvalidTransferAddress = transferAddress.length > 0 && !isAddress(transferAddress)\n\n  const { lowestPrice } = useGetLowestPriceFromNft(nftToSell)\n\n  const goBack = () => {\n    switch (stage) {\n      case SellingStage.SET_PRICE:\n        setStage(SellingStage.SELL)\n        break\n      case SellingStage.APPROVE_AND_CONFIRM_SELL:\n        setStage(SellingStage.SET_PRICE)\n        break\n      case SellingStage.ADJUST_PRICE:\n        setPrice(nftToSell.marketData.currentAskPrice)\n        setStage(SellingStage.EDIT)\n        break\n      case SellingStage.CONFIRM_ADJUST_PRICE:\n        setStage(SellingStage.ADJUST_PRICE)\n        break\n      case SellingStage.REMOVE_FROM_MARKET:\n        setStage(SellingStage.EDIT)\n        break\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\n        setStage(SellingStage.REMOVE_FROM_MARKET)\n        break\n      case SellingStage.TRANSFER:\n        setStage(SellingStage.SELL)\n        break\n      case SellingStage.CONFIRM_TRANSFER:\n        setStage(SellingStage.TRANSFER)\n        break\n      default:\n        break\n    }\n  }\n\n  const continueToNextStage = () => {\n    switch (stage) {\n      case SellingStage.SELL:\n        setStage(SellingStage.SET_PRICE)\n        break\n      case SellingStage.SET_PRICE:\n        setStage(SellingStage.APPROVE_AND_CONFIRM_SELL)\n        break\n      case SellingStage.EDIT:\n        setStage(SellingStage.ADJUST_PRICE)\n        break\n      case SellingStage.ADJUST_PRICE:\n        setStage(SellingStage.CONFIRM_ADJUST_PRICE)\n        break\n      case SellingStage.REMOVE_FROM_MARKET:\n        setStage(SellingStage.CONFIRM_REMOVE_FROM_MARKET)\n        break\n      case SellingStage.TRANSFER:\n        setStage(SellingStage.CONFIRM_TRANSFER)\n        break\n      default:\n        break\n    }\n  }\n\n  const continueToRemoveFromMarketStage = () => {\n    setStage(SellingStage.REMOVE_FROM_MARKET)\n  }\n\n  const continueToTransferStage = () => {\n    setStage(SellingStage.TRANSFER)\n  }\n\n  const dispatchSuccessAction = () => {\n    switch (stage) {\n      // Remove from sale\n      case SellingStage.CONFIRM_REMOVE_FROM_MARKET:\n        dispatch(\n          updateUserNft({\n            tokenId: nftToSell.tokenId,\n            collectionAddress: nftToSell.collectionAddress,\n            location: NftLocation.WALLET,\n          }),\n        )\n        break\n      // Transfer NFT\n      case SellingStage.CONFIRM_TRANSFER:\n        dispatch(\n          removeUserNft({\n            tokenId: nftToSell.tokenId,\n          }),\n        )\n        break\n      default:\n        // Modify listing OR list for sale\n        dispatch(\n          updateUserNft({\n            tokenId: nftToSell.tokenId,\n            collectionAddress: nftToSell.collectionAddress,\n            location: NftLocation.FORSALE,\n          }),\n        )\n        break\n    }\n  }\n\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      try {\n        const approvedForContract = await pancakeBunniesContract.getApproved(nftToSell.tokenId)\n        return approvedForContract.toLowerCase() === nftMarketContract.address.toLowerCase()\n      } catch (error) {\n        return false\n      }\n    },\n    onApprove: () => {\n      return callWithGasPrice(pancakeBunniesContract, 'approve', [nftMarketContract.address, nftToSell.tokenId])\n    },\n    onApproveSuccess: async ({ receipt }) => {\n      toastSuccess(\n        t('Contract approved - you can now put your NFT for sale!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n      )\n    },\n    onConfirm: () => {\n      if (stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET) {\n        return callWithGasPrice(nftMarketContract, 'cancelAskOrder', [nftToSell.collectionAddress, nftToSell.tokenId])\n      }\n      if (stage === SellingStage.CONFIRM_TRANSFER) {\n        return callWithGasPrice(pancakeBunniesContract, 'safeTransferFrom(address,address,uint256)', [\n          account,\n          transferAddress,\n          nftToSell.tokenId,\n        ])\n      }\n      const methodName = variant === 'sell' ? 'createAskOrder' : 'modifyAskOrder'\n      const askPrice = parseUnits(price)\n      return callWithGasPrice(nftMarketContract, methodName, [nftToSell.collectionAddress, nftToSell.tokenId, askPrice])\n    },\n    onSuccess: async ({ receipt }) => {\n      toastSuccess(getToastText(variant, stage, t), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      dispatchSuccessAction()\n      setConfirmedTxHash(receipt.transactionHash)\n      setStage(SellingStage.TX_CONFIRMED)\n    },\n  })\n\n  const showBackButton = stagesWithBackButton.includes(stage) && !isConfirming && !isApproving\n\n  return (\n    <StyledModal\n      title={modalTitles[stage]}\n      stage={stage}\n      onDismiss={onDismiss}\n      onBack={showBackButton ? goBack : null}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {stage === SellingStage.SELL && (\n        <SellStage\n          nftToSell={nftToSell}\n          lowestPrice={lowestPrice}\n          continueToNextStage={continueToNextStage}\n          continueToTransferStage={continueToTransferStage}\n        />\n      )}\n      {stage === SellingStage.SET_PRICE && (\n        <SetPriceStage\n          nftToSell={nftToSell}\n          variant=\"set\"\n          continueToNextStage={continueToNextStage}\n          lowestPrice={lowestPrice}\n          price={price}\n          setPrice={setPrice}\n        />\n      )}\n      {stage === SellingStage.APPROVE_AND_CONFIRM_SELL && (\n        <ApproveAndConfirmStage\n          variant=\"sell\"\n          isApproved={isApproved}\n          isApproving={isApproving}\n          isConfirming={isConfirming}\n          handleApprove={handleApprove}\n          handleConfirm={handleConfirm}\n        />\n      )}\n      {stage === SellingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\n      {stage === SellingStage.EDIT && (\n        <EditStage\n          nftToSell={nftToSell}\n          lowestPrice={lowestPrice}\n          continueToAdjustPriceStage={continueToNextStage}\n          continueToRemoveFromMarketStage={continueToRemoveFromMarketStage}\n        />\n      )}\n      {stage === SellingStage.ADJUST_PRICE && (\n        <SetPriceStage\n          nftToSell={nftToSell}\n          variant=\"adjust\"\n          continueToNextStage={continueToNextStage}\n          currentPrice={nftToSell.marketData.currentAskPrice}\n          lowestPrice={lowestPrice}\n          price={price}\n          setPrice={setPrice}\n        />\n      )}\n      {stage === SellingStage.CONFIRM_ADJUST_PRICE && (\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\n      )}\n      {stage === SellingStage.REMOVE_FROM_MARKET && <RemoveStage continueToNextStage={continueToNextStage} />}\n      {stage === SellingStage.CONFIRM_REMOVE_FROM_MARKET && (\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\n      )}\n      {stage === SellingStage.TRANSFER && (\n        <TransferStage\n          nftToSell={nftToSell}\n          lowestPrice={lowestPrice}\n          continueToNextStage={continueToNextStage}\n          transferAddress={transferAddress}\n          setTransferAddress={setTransferAddress}\n          isInvalidTransferAddress={isInvalidTransferAddress}\n        />\n      )}\n      {stage === SellingStage.CONFIRM_TRANSFER && (\n        <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />\n      )}\n    </StyledModal>\n  )\n}\n\nexport default SellModal\n"]},"metadata":{},"sourceType":"module"}