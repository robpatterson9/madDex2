{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolsTable/ActionPanel/Stake.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport BigNumber from 'bignumber.js';\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, useTooltip, Flex, Text } from '@pancakeswap/uikit';\nimport ConnectWalletButton from 'components/ConnectWalletButton';\nimport { useWeb3React } from '@web3-react/core';\nimport { useCakeVault } from 'state/pools/hooks';\nimport Balance from 'components/Balance';\nimport { useTranslation } from 'contexts/Localization';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { PoolCategory } from 'config/constants/types';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { useERC20 } from 'hooks/useContract';\nimport { convertSharesToCake } from 'views/Pools/helpers';\nimport { ActionContainer, ActionTitles, ActionContent } from './styles';\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal';\nimport StakeModal from '../../PoolCard/Modals/StakeModal';\nimport VaultStakeModal from '../../CakeVaultCard/VaultStakeModal';\nimport { useCheckVaultApprovalStatus, useApprovePool, useVaultApprove } from '../../../hooks/useApprove';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`;\n_c = IconButtonWrapper;\n\nconst Staked = ({\n  pool,\n  userDataLoaded\n}) => {\n  _s();\n\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    stakingLimit,\n    isFinished,\n    poolCategory,\n    userData,\n    stakingTokenPrice,\n    isAutoVault\n  } = pool;\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const stakingTokenContract = useERC20(stakingToken.address || '');\n  const {\n    handleApprove: handlePoolApprove,\n    requestedApproval: requestedPoolApproval\n  } = useApprovePool(stakingTokenContract, sousId, earningToken.symbol);\n  const {\n    isVaultApproved,\n    setLastUpdated\n  } = useCheckVaultApprovalStatus();\n  const {\n    handleApprove: handleVaultApprove,\n    requestedApproval: requestedVaultApproval\n  } = useVaultApprove(setLastUpdated);\n  const handleApprove = isAutoVault ? handleVaultApprove : handlePoolApprove;\n  const requestedApproval = isAutoVault ? requestedVaultApproval : requestedPoolApproval;\n  const isBnbPool = poolCategory === PoolCategory.BINANCE;\n  const allowance = (userData === null || userData === void 0 ? void 0 : userData.allowance) ? new BigNumber(userData.allowance) : BIG_ZERO;\n  const stakedBalance = (userData === null || userData === void 0 ? void 0 : userData.stakedBalance) ? new BigNumber(userData.stakedBalance) : BIG_ZERO;\n  const isNotVaultAndHasStake = !isAutoVault && stakedBalance.gt(0);\n  const stakingTokenBalance = (userData === null || userData === void 0 ? void 0 : userData.stakingTokenBalance) ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO;\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals);\n  const stakedTokenDollarBalance = getBalanceNumber(stakedBalance.multipliedBy(stakingTokenPrice), stakingToken.decimals);\n  const {\n    userData: {\n      userShares\n    },\n    pricePerFullShare\n  } = useCakeVault();\n  const {\n    cakeAsBigNumber,\n    cakeAsNumberBalance\n  } = convertSharesToCake(userShares, pricePerFullShare);\n  const hasSharesStaked = userShares && userShares.gt(0);\n  const isVaultWithShares = isAutoVault && hasSharesStaked;\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals);\n  const needsApproval = isAutoVault ? !isVaultApproved : !allowance.gt(0) && !isBnbPool;\n  const [onPresentTokenRequired] = useModal( /*#__PURE__*/_jsxDEV(NotEnoughTokensModal, {\n    tokenSymbol: stakingToken.symbol\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 45\n  }, this));\n  const [onPresentStake] = useModal( /*#__PURE__*/_jsxDEV(StakeModal, {\n    isBnbPool: isBnbPool,\n    pool: pool,\n    stakingTokenBalance: stakingTokenBalance,\n    stakingTokenPrice: stakingTokenPrice\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this));\n  const [onPresentVaultStake] = useModal( /*#__PURE__*/_jsxDEV(VaultStakeModal, {\n    stakingMax: stakingTokenBalance,\n    pool: pool\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 42\n  }, this));\n  const [onPresentUnstake] = useModal( /*#__PURE__*/_jsxDEV(StakeModal, {\n    stakingTokenBalance: stakingTokenBalance,\n    isBnbPool: isBnbPool,\n    pool: pool,\n    stakingTokenPrice: stakingTokenPrice,\n    isRemovingStake: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this));\n  const [onPresentVaultUnstake] = useModal( /*#__PURE__*/_jsxDEV(VaultStakeModal, {\n    stakingMax: cakeAsBigNumber,\n    pool: pool,\n    isRemovingStake: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 44\n  }, this));\n\n  const onStake = () => {\n    if (isAutoVault) {\n      onPresentVaultStake();\n    } else {\n      onPresentStake();\n    }\n  };\n\n  const onUnstake = () => {\n    if (isAutoVault) {\n      onPresentVaultUnstake();\n    } else {\n      onPresentUnstake();\n    }\n  };\n\n  const {\n    targetRef,\n    tooltip,\n    tooltipVisible\n  } = useTooltip(t(\"You've already staked the maximum amount you can stake in this pool!\"), {\n    placement: 'bottom'\n  });\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit);\n\n  if (!account) {\n    return /*#__PURE__*/_jsxDEV(ActionContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ActionTitles, {\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"12px\",\n          bold: true,\n          color: \"textSubtle\",\n          as: \"span\",\n          textTransform: \"uppercase\",\n          children: t('Start staking')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ActionContent, {\n        children: /*#__PURE__*/_jsxDEV(ConnectWalletButton, {\n          width: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (!userDataLoaded) {\n    return /*#__PURE__*/_jsxDEV(ActionContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ActionTitles, {\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"12px\",\n          bold: true,\n          color: \"textSubtle\",\n          as: \"span\",\n          textTransform: \"uppercase\",\n          children: t('Start staking')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ActionContent, {\n        children: /*#__PURE__*/_jsxDEV(Skeleton, {\n          width: 180,\n          height: \"32px\",\n          marginTop: 14\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (needsApproval) {\n    return /*#__PURE__*/_jsxDEV(ActionContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ActionTitles, {\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"12px\",\n          bold: true,\n          color: \"textSubtle\",\n          as: \"span\",\n          textTransform: \"uppercase\",\n          children: t('Enable pool')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ActionContent, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          width: \"100%\",\n          disabled: requestedApproval,\n          onClick: handleApprove,\n          variant: \"secondary\",\n          children: t('Enable')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this);\n  } // Wallet connected, user data loaded and approved\n\n\n  if (isNotVaultAndHasStake || isVaultWithShares) {\n    return /*#__PURE__*/_jsxDEV(ActionContainer, {\n      isAutoVault: isAutoVault,\n      children: [/*#__PURE__*/_jsxDEV(ActionTitles, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"12px\",\n          bold: true,\n          color: \"secondary\",\n          as: \"span\",\n          textTransform: \"uppercase\",\n          children: [stakingToken.symbol, ' ']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"12px\",\n          bold: true,\n          color: \"textSubtle\",\n          as: \"span\",\n          textTransform: \"uppercase\",\n          children: isAutoVault ? t('Staked (compounding)') : t('Staked')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ActionContent, {\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          flex: \"1\",\n          pt: \"16px\",\n          flexDirection: \"column\",\n          alignSelf: \"flex-start\",\n          children: [/*#__PURE__*/_jsxDEV(Balance, {\n            lineHeight: \"1\",\n            bold: true,\n            fontSize: \"20px\",\n            decimals: 5,\n            value: isAutoVault ? cakeAsNumberBalance : stakedTokenBalance\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Balance, {\n            fontSize: \"12px\",\n            display: \"inline\",\n            color: \"textSubtle\",\n            decimals: 2,\n            value: isAutoVault ? stakedAutoDollarValue : stakedTokenDollarBalance,\n            unit: \" USD\",\n            prefix: \"~\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconButtonWrapper, {\n          children: [/*#__PURE__*/_jsxDEV(IconButton, {\n            variant: \"secondary\",\n            onClick: onUnstake,\n            mr: \"6px\",\n            children: /*#__PURE__*/_jsxDEV(MinusIcon, {\n              color: \"primary\",\n              width: \"14px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this), reachStakingLimit ? /*#__PURE__*/_jsxDEV(\"span\", {\n            ref: targetRef,\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              variant: \"secondary\",\n              disabled: true,\n              children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                color: \"textDisabled\",\n                width: \"24px\",\n                height: \"24px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 218,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 217,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(IconButton, {\n            variant: \"secondary\",\n            onClick: stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired,\n            disabled: isFinished,\n            children: /*#__PURE__*/_jsxDEV(AddIcon, {\n              color: \"primary\",\n              width: \"14px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), tooltipVisible && tooltip]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ActionContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ActionTitles, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"12px\",\n        bold: true,\n        color: \"secondary\",\n        as: \"span\",\n        textTransform: \"uppercase\",\n        children: [t('Stake'), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"12px\",\n        bold: true,\n        color: \"textSubtle\",\n        as: \"span\",\n        textTransform: \"uppercase\",\n        children: stakingToken.symbol\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ActionContent, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        onClick: stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired,\n        variant: \"secondary\",\n        disabled: isFinished,\n        children: t('Stake')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Staked, \"v+ZXJPGJic3T/HE80V4C/0+SKnM=\", false, function () {\n  return [useTranslation, useWeb3React, useERC20, useApprovePool, useCheckVaultApprovalStatus, useVaultApprove, useCakeVault, useModal, useModal, useModal, useModal, useModal, useTooltip];\n});\n\n_c2 = Staked;\nexport default Staked;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"IconButtonWrapper\");\n$RefreshReg$(_c2, \"Staked\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolsTable/ActionPanel/Stake.tsx"],"names":["React","styled","BigNumber","Button","useModal","IconButton","AddIcon","MinusIcon","Skeleton","useTooltip","Flex","Text","ConnectWalletButton","useWeb3React","useCakeVault","Balance","useTranslation","getBalanceNumber","PoolCategory","BIG_ZERO","useERC20","convertSharesToCake","ActionContainer","ActionTitles","ActionContent","NotEnoughTokensModal","StakeModal","VaultStakeModal","useCheckVaultApprovalStatus","useApprovePool","useVaultApprove","IconButtonWrapper","div","Staked","pool","userDataLoaded","sousId","stakingToken","earningToken","stakingLimit","isFinished","poolCategory","userData","stakingTokenPrice","isAutoVault","t","account","stakingTokenContract","address","handleApprove","handlePoolApprove","requestedApproval","requestedPoolApproval","symbol","isVaultApproved","setLastUpdated","handleVaultApprove","requestedVaultApproval","isBnbPool","BINANCE","allowance","stakedBalance","isNotVaultAndHasStake","gt","stakingTokenBalance","stakedTokenBalance","decimals","stakedTokenDollarBalance","multipliedBy","userShares","pricePerFullShare","cakeAsBigNumber","cakeAsNumberBalance","hasSharesStaked","isVaultWithShares","stakedAutoDollarValue","needsApproval","onPresentTokenRequired","onPresentStake","onPresentVaultStake","onPresentUnstake","onPresentVaultUnstake","onStake","onUnstake","targetRef","tooltip","tooltipVisible","placement","reachStakingLimit","gte"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, useTooltip, Flex, Text } from '@pancakeswap/uikit'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { DeserializedPool } from 'state/types'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useERC20 } from 'hooks/useContract'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport StakeModal from '../../PoolCard/Modals/StakeModal'\nimport VaultStakeModal from '../../CakeVaultCard/VaultStakeModal'\nimport { useCheckVaultApprovalStatus, useApprovePool, useVaultApprove } from '../../../hooks/useApprove'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps {\n  pool: DeserializedPool\n  userDataLoaded: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({ pool, userDataLoaded }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    stakingLimit,\n    isFinished,\n    poolCategory,\n    userData,\n    stakingTokenPrice,\n    isAutoVault,\n  } = pool\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const stakingTokenContract = useERC20(stakingToken.address || '')\n  const { handleApprove: handlePoolApprove, requestedApproval: requestedPoolApproval } = useApprovePool(\n    stakingTokenContract,\n    sousId,\n    earningToken.symbol,\n  )\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n  const { handleApprove: handleVaultApprove, requestedApproval: requestedVaultApproval } =\n    useVaultApprove(setLastUpdated)\n\n  const handleApprove = isAutoVault ? handleVaultApprove : handlePoolApprove\n  const requestedApproval = isAutoVault ? requestedVaultApproval : requestedPoolApproval\n\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isNotVaultAndHasStake = !isAutoVault && stakedBalance.gt(0)\n\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const hasSharesStaked = userShares && userShares.gt(0)\n  const isVaultWithShares = isAutoVault && hasSharesStaked\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\n\n  const needsApproval = isAutoVault ? !isVaultApproved : !allowance.gt(0) && !isBnbPool\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentVaultStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const [onPresentVaultUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  const onStake = () => {\n    if (isAutoVault) {\n      onPresentVaultStake()\n    } else {\n      onPresentStake()\n    }\n  }\n\n  const onUnstake = () => {\n    if (isAutoVault) {\n      onPresentVaultUnstake()\n    } else {\n      onPresentUnstake()\n    }\n  }\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\"You've already staked the maximum amount you can stake in this pool!\"),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataLoaded) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (needsApproval) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Enable pool')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n            {t('Enable')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  // Wallet connected, user data loaded and approved\n  if (isNotVaultAndHasStake || isVaultWithShares) {\n    return (\n      <ActionContainer isAutoVault={isAutoVault}>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n            {stakingToken.symbol}{' '}\n          </Text>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {isAutoVault ? t('Staked (compounding)') : t('Staked')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n            <Balance\n              lineHeight=\"1\"\n              bold\n              fontSize=\"20px\"\n              decimals={5}\n              value={isAutoVault ? cakeAsNumberBalance : stakedTokenBalance}\n            />\n            <Balance\n              fontSize=\"12px\"\n              display=\"inline\"\n              color=\"textSubtle\"\n              decimals={2}\n              value={isAutoVault ? stakedAutoDollarValue : stakedTokenDollarBalance}\n              unit=\" USD\"\n              prefix=\"~\"\n            />\n          </Flex>\n          <IconButtonWrapper>\n            <IconButton variant=\"secondary\" onClick={onUnstake} mr=\"6px\">\n              <MinusIcon color=\"primary\" width=\"14px\" />\n            </IconButton>\n            {reachStakingLimit ? (\n              <span ref={targetRef}>\n                <IconButton variant=\"secondary\" disabled>\n                  <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n                </IconButton>\n              </span>\n            ) : (\n              <IconButton\n                variant=\"secondary\"\n                onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n                disabled={isFinished}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            )}\n          </IconButtonWrapper>\n          {tooltipVisible && tooltip}\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n          {t('Stake')}{' '}\n        </Text>\n        <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n          {stakingToken.symbol}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button\n          width=\"100%\"\n          onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n          variant=\"secondary\"\n          disabled={isFinished}\n        >\n          {t('Stake')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n"]},"metadata":{},"sourceType":"module"}