{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _defineProperty from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState,useCallback}from'react';import{useWeb3React}from'@web3-react/core';import BigNumber from'bignumber.js';import{PoolIds}from'config/constants/types';import{useERC20,useIfoV1Contract}from'hooks/useContract';import{multicallv2}from'utils/multicall';import ifoV1Abi from'config/abi/ifoV1.json';import{BIG_ZERO}from'utils/bigNumber';import useIfoAllowance from'../useIfoAllowance';/**\n * Gets all data from an IFO related to a wallet\n */var useGetWalletIfoData=function useGetWalletIfoData(ifo){var _useState=useState(_defineProperty({},PoolIds.poolUnlimited,{amountTokenCommittedInLP:BIG_ZERO,hasClaimed:false,isPendingTx:false,offeringAmountInToken:BIG_ZERO,refundingAmountInLP:BIG_ZERO,taxAmountInLP:BIG_ZERO// Not used\n})),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var address=ifo.address,currency=ifo.currency;var poolUnlimited=state.poolUnlimited;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var contract=useIfoV1Contract(address);var currencyContract=useERC20(currency.address);var allowance=useIfoAllowance(currencyContract,address,poolUnlimited.isPendingTx);var setPendingTx=function setPendingTx(status){return setState(function(prevState){return _defineProperty({},PoolIds.poolUnlimited,_objectSpread(_objectSpread({},prevState.poolUnlimited),{},{isPendingTx:status}));});};var setIsClaimed=function setIsClaimed(){setState(function(prevState){return _defineProperty({},PoolIds.poolUnlimited,_objectSpread(_objectSpread({},prevState.poolUnlimited),{},{hasClaimed:true}));});};var fetchIfoData=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var ifoCalls,_yield$multicallv,_yield$multicallv2,offeringAmount,userInfoResponse,refundingAmount,parsedUserInfo;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:ifoCalls=['getOfferingAmount','userInfo','getRefundingAmount'].map(function(method){return{address:address,name:method,params:[account]};});_context.next=3;return multicallv2(ifoV1Abi,ifoCalls);case 3:_yield$multicallv=_context.sent;_yield$multicallv2=_slicedToArray(_yield$multicallv,3);offeringAmount=_yield$multicallv2[0];userInfoResponse=_yield$multicallv2[1];refundingAmount=_yield$multicallv2[2];parsedUserInfo=userInfoResponse?{amount:new BigNumber(userInfoResponse.amount.toString()),claimed:userInfoResponse.claimed}:{amount:BIG_ZERO,claimed:false};setState(function(prevState){return _defineProperty({},PoolIds.poolUnlimited,_objectSpread(_objectSpread({},prevState.poolUnlimited),{},{amountTokenCommittedInLP:parsedUserInfo.amount,hasClaimed:parsedUserInfo.claimed,offeringAmountInToken:offeringAmount?new BigNumber(offeringAmount[0].toString()):BIG_ZERO,refundingAmountInLP:refundingAmount?new BigNumber(refundingAmount[0].toString()):BIG_ZERO}));});case 10:case\"end\":return _context.stop();}}},_callee);})),[account,address]);useEffect(function(){if(account){fetchIfoData();}},[account,fetchIfoData]);return _objectSpread(_objectSpread({},state),{},{allowance:allowance,contract:contract,setPendingTx:setPendingTx,setIsClaimed:setIsClaimed,fetchIfoData:fetchIfoData});};export default useGetWalletIfoData;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Ifos/hooks/v1/useGetWalletIfoData.ts"],"names":["useEffect","useState","useCallback","useWeb3React","BigNumber","PoolIds","useERC20","useIfoV1Contract","multicallv2","ifoV1Abi","BIG_ZERO","useIfoAllowance","useGetWalletIfoData","ifo","poolUnlimited","amountTokenCommittedInLP","hasClaimed","isPendingTx","offeringAmountInToken","refundingAmountInLP","taxAmountInLP","state","setState","address","currency","account","contract","currencyContract","allowance","setPendingTx","status","prevState","setIsClaimed","fetchIfoData","ifoCalls","map","method","name","params","offeringAmount","userInfoResponse","refundingAmount","parsedUserInfo","amount","toString","claimed"],"mappings":"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","sourcesContent":["import { useEffect, useState, useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { Ifo, PoolIds } from 'config/constants/types'\nimport { useERC20, useIfoV1Contract } from 'hooks/useContract'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV1Abi from 'config/abi/ifoV1.json'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useIfoAllowance from '../useIfoAllowance'\nimport { WalletIfoState, WalletIfoData } from '../../types'\n\ninterface UserInfo {\n  amount: BigNumber\n  claimed: boolean\n}\n\n/**\n * Gets all data from an IFO related to a wallet\n */\nconst useGetWalletIfoData = (ifo: Ifo): WalletIfoData => {\n  const [state, setState] = useState<WalletIfoState>({\n    [PoolIds.poolUnlimited]: {\n      amountTokenCommittedInLP: BIG_ZERO,\n      hasClaimed: false,\n      isPendingTx: false,\n      offeringAmountInToken: BIG_ZERO,\n      refundingAmountInLP: BIG_ZERO,\n      taxAmountInLP: BIG_ZERO, // Not used\n    },\n  })\n\n  const { address, currency } = ifo\n  const { poolUnlimited } = state\n\n  const { account } = useWeb3React()\n  const contract = useIfoV1Contract(address)\n  const currencyContract = useERC20(currency.address)\n  const allowance = useIfoAllowance(currencyContract, address, poolUnlimited.isPendingTx)\n\n  const setPendingTx = (status: boolean) =>\n    setState((prevState) => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        isPendingTx: status,\n      },\n    }))\n\n  const setIsClaimed = () => {\n    setState((prevState) => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        hasClaimed: true,\n      },\n    }))\n  }\n\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['getOfferingAmount', 'userInfo', 'getRefundingAmount'].map((method) => ({\n      address,\n      name: method,\n      params: [account],\n    }))\n\n    const [offeringAmount, userInfoResponse, refundingAmount] = await multicallv2(ifoV1Abi, ifoCalls)\n    const parsedUserInfo: UserInfo = userInfoResponse\n      ? {\n          amount: new BigNumber(userInfoResponse.amount.toString()),\n          claimed: userInfoResponse.claimed,\n        }\n      : { amount: BIG_ZERO, claimed: false }\n\n    setState((prevState) => ({\n      [PoolIds.poolUnlimited]: {\n        ...prevState.poolUnlimited,\n        amountTokenCommittedInLP: parsedUserInfo.amount,\n        hasClaimed: parsedUserInfo.claimed,\n        offeringAmountInToken: offeringAmount ? new BigNumber(offeringAmount[0].toString()) : BIG_ZERO,\n        refundingAmountInLP: refundingAmount ? new BigNumber(refundingAmount[0].toString()) : BIG_ZERO,\n      },\n    }))\n  }, [account, address])\n\n  useEffect(() => {\n    if (account) {\n      fetchIfoData()\n    }\n  }, [account, fetchIfoData])\n\n  return { ...state, allowance, contract, setPendingTx, setIsClaimed, fetchIfoData }\n}\n\nexport default useGetWalletIfoData\n"]},"metadata":{},"sourceType":"module"}