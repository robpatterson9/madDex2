{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{useEffect}from'react';import{connectorLocalStorageKey,ConnectorNames}from'@pancakeswap/uikit';import useAuth from'hooks/useAuth';var _binanceChainListener=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:return _context.abrupt(\"return\",new Promise(function(resolve){return Object.defineProperty(window,'BinanceChain',{get:function get(){return this.bsc;},set:function set(bsc){this.bsc=bsc;resolve();}});}));case 1:case\"end\":return _context.stop();}}},_callee);}));return function _binanceChainListener(){return _ref.apply(this,arguments);};}();var useEagerConnect=function useEagerConnect(){var _useAuth=useAuth(),login=_useAuth.login;useEffect(function(){var connectorId=window.localStorage.getItem(connectorLocalStorageKey);if(connectorId){var isConnectorBinanceChain=connectorId===ConnectorNames.BSC;var isBinanceChainDefined=Reflect.has(window,'BinanceChain');// Currently BSC extension doesn't always inject in time.\n// We must check to see if it exists, and if not, wait for it before proceeding.\nif(isConnectorBinanceChain&&!isBinanceChainDefined){_binanceChainListener().then(function(){return login(connectorId);});return;}login(connectorId);}},[login]);};export default useEagerConnect;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/hooks/useEagerConnect.ts"],"names":["useEffect","connectorLocalStorageKey","ConnectorNames","useAuth","_binanceChainListener","Promise","resolve","Object","defineProperty","window","get","bsc","set","useEagerConnect","login","connectorId","localStorage","getItem","isConnectorBinanceChain","BSC","isBinanceChainDefined","Reflect","has","then"],"mappings":"6SAAA,OAASA,SAAT,KAA0B,OAA1B,CACA,OAASC,wBAAT,CAAmCC,cAAnC,KAAyD,oBAAzD,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CAEA,GAAMC,CAAAA,qBAAqB,0FAAG,mKAC5B,GAAIC,CAAAA,OAAJ,CAAkB,SAACC,OAAD,QAChBC,CAAAA,MAAM,CAACC,cAAP,CAAsBC,MAAtB,CAA8B,cAA9B,CAA8C,CAC5CC,GAD4C,eACtC,CACJ,MAAO,MAAKC,GAAZ,CACD,CAH2C,CAI5CC,GAJ4C,cAIxCD,GAJwC,CAInC,CACP,KAAKA,GAAL,CAAWA,GAAX,CAEAL,OAAO,GACR,CAR2C,CAA9C,CADgB,EAAlB,CAD4B,wDAAH,kBAArBF,CAAAA,qBAAqB,0CAA3B,CAcA,GAAMS,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAM,CAC5B,aAAkBV,OAAO,EAAzB,CAAQW,KAAR,UAAQA,KAAR,CAEAd,SAAS,CAAC,UAAM,CACd,GAAMe,CAAAA,WAAW,CAAGN,MAAM,CAACO,YAAP,CAAoBC,OAApB,CAA4BhB,wBAA5B,CAApB,CAEA,GAAIc,WAAJ,CAAiB,CACf,GAAMG,CAAAA,uBAAuB,CAAGH,WAAW,GAAKb,cAAc,CAACiB,GAA/D,CACA,GAAMC,CAAAA,qBAAqB,CAAGC,OAAO,CAACC,GAAR,CAAYb,MAAZ,CAAoB,cAApB,CAA9B,CAEA;AACA;AACA,GAAIS,uBAAuB,EAAI,CAACE,qBAAhC,CAAuD,CACrDhB,qBAAqB,GAAGmB,IAAxB,CAA6B,iBAAMT,CAAAA,KAAK,CAACC,WAAD,CAAX,EAA7B,EAEA,OACD,CAEDD,KAAK,CAACC,WAAD,CAAL,CACD,CACF,CAjBQ,CAiBN,CAACD,KAAD,CAjBM,CAAT,CAkBD,CArBD,CAuBA,cAAeD,CAAAA,eAAf","sourcesContent":["import { useEffect } from 'react'\nimport { connectorLocalStorageKey, ConnectorNames } from '@pancakeswap/uikit'\nimport useAuth from 'hooks/useAuth'\n\nconst _binanceChainListener = async () =>\n  new Promise<void>((resolve) =>\n    Object.defineProperty(window, 'BinanceChain', {\n      get() {\n        return this.bsc\n      },\n      set(bsc) {\n        this.bsc = bsc\n\n        resolve()\n      },\n    }),\n  )\n\nconst useEagerConnect = () => {\n  const { login } = useAuth()\n\n  useEffect(() => {\n    const connectorId = window.localStorage.getItem(connectorLocalStorageKey) as ConnectorNames\n\n    if (connectorId) {\n      const isConnectorBinanceChain = connectorId === ConnectorNames.BSC\n      const isBinanceChainDefined = Reflect.has(window, 'BinanceChain')\n\n      // Currently BSC extension doesn't always inject in time.\n      // We must check to see if it exists, and if not, wait for it before proceeding.\n      if (isConnectorBinanceChain && !isBinanceChainDefined) {\n        _binanceChainListener().then(() => login(connectorId))\n\n        return\n      }\n\n      login(connectorId)\n    }\n  }, [login])\n}\n\nexport default useEagerConnect\n"]},"metadata":{},"sourceType":"module"}