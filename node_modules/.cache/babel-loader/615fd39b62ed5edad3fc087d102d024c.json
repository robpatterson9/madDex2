{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Predictions/components/History/RoundsTab.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { orderBy } from 'lodash';\nimport { Box, Button, Flex, Heading, Text } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useAppDispatch } from 'state';\nimport { fetchNodeHistory } from 'state/predictions';\nimport { useGetCurrentHistoryPage, useGetHasHistoryLoaded, useGetIsFetchingHistory } from 'state/predictions/hooks';\nimport HistoricalBet from './HistoricalBet';\nimport V1ClaimCheck from '../v1/V1ClaimCheck';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst RoundsTab = ({\n  hasBetHistory,\n  bets\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  const hasHistoryLoaded = useGetHasHistoryLoaded();\n  const currentHistoryPage = useGetCurrentHistoryPage();\n  const isFetchingHistory = useGetIsFetchingHistory();\n\n  const handleClick = () => {\n    dispatch(fetchNodeHistory({\n      account,\n      page: currentHistoryPage + 1\n    }));\n  };\n\n  return hasBetHistory ? /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(V1ClaimCheck, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), orderBy(bets, ['round.epoch'], ['desc']).map(bet => /*#__PURE__*/_jsxDEV(HistoricalBet, {\n      bet: bet\n    }, bet.round.epoch, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)), hasBetHistory && !hasHistoryLoaded && /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      py: \"24px\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        scale: \"sm\",\n        onClick: handleClick,\n        disabled: isFetchingHistory,\n        children: t('View More')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(V1ClaimCheck, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      p: \"24px\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        size: \"lg\",\n        textAlign: \"center\",\n        mb: \"8px\",\n        children: t('No prediction history available')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        textAlign: \"center\",\n        children: t('If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(RoundsTab, \"uTPdI+dcS9EYe/ztS0QigSafg9c=\", false, function () {\n  return [useTranslation, useAppDispatch, useWeb3React, useGetHasHistoryLoaded, useGetCurrentHistoryPage, useGetIsFetchingHistory];\n});\n\n_c = RoundsTab;\nexport default RoundsTab;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoundsTab\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Predictions/components/History/RoundsTab.tsx"],"names":["React","useWeb3React","orderBy","Box","Button","Flex","Heading","Text","useTranslation","useAppDispatch","fetchNodeHistory","useGetCurrentHistoryPage","useGetHasHistoryLoaded","useGetIsFetchingHistory","HistoricalBet","V1ClaimCheck","RoundsTab","hasBetHistory","bets","t","dispatch","account","hasHistoryLoaded","currentHistoryPage","isFetchingHistory","handleClick","page","map","bet","round","epoch"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,GAAT,EAAcC,MAAd,EAAsBC,IAAtB,EAA4BC,OAA5B,EAAqCC,IAArC,QAAiD,oBAAjD;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,cAAT,QAA+B,OAA/B;AAEA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,SAASC,wBAAT,EAAmCC,sBAAnC,EAA2DC,uBAA3D,QAA0F,yBAA1F;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,YAAP,MAAyB,oBAAzB;;;;AAOA,MAAMC,SAAmC,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA;AAAjB,CAAD,KAA6B;AAAA;;AACvE,QAAM;AAAEC,IAAAA;AAAF,MAAQX,cAAc,EAA5B;AACA,QAAMY,QAAQ,GAAGX,cAAc,EAA/B;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAcpB,YAAY,EAAhC;AACA,QAAMqB,gBAAgB,GAAGV,sBAAsB,EAA/C;AACA,QAAMW,kBAAkB,GAAGZ,wBAAwB,EAAnD;AACA,QAAMa,iBAAiB,GAAGX,uBAAuB,EAAjD;;AAEA,QAAMY,WAAW,GAAG,MAAM;AACxBL,IAAAA,QAAQ,CAACV,gBAAgB,CAAC;AAAEW,MAAAA,OAAF;AAAWK,MAAAA,IAAI,EAAEH,kBAAkB,GAAG;AAAtC,KAAD,CAAjB,CAAR;AACD,GAFD;;AAIA,SAAON,aAAa,gBAClB;AAAA,4BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YADF,EAEGf,OAAO,CAACgB,IAAD,EAAO,CAAC,aAAD,CAAP,EAAwB,CAAC,MAAD,CAAxB,CAAP,CAAyCS,GAAzC,CAA8CC,GAAD,iBAC5C,QAAC,aAAD;AAAqC,MAAA,GAAG,EAAEA;AAA1C,OAAoBA,GAAG,CAACC,KAAJ,CAAUC,KAA9B;AAAA;AAAA;AAAA;AAAA,YADD,CAFH,EAKGb,aAAa,IAAI,CAACK,gBAAlB,iBACC,QAAC,IAAD;AAAM,MAAA,UAAU,EAAC,QAAjB;AAA0B,MAAA,cAAc,EAAC,QAAzC;AAAkD,MAAA,EAAE,EAAC,MAArD;AAAA,6BACE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,KAAK,EAAC,IAAlC;AAAuC,QAAA,OAAO,EAAEG,WAAhD;AAA6D,QAAA,QAAQ,EAAED,iBAAvE;AAAA,kBACGL,CAAC,CAAC,WAAD;AADJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA,kBADkB,gBAelB;AAAA,4BACE,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,GAAD;AAAK,MAAA,CAAC,EAAC,MAAP;AAAA,8BACE,QAAC,OAAD;AAAS,QAAA,IAAI,EAAC,IAAd;AAAmB,QAAA,SAAS,EAAC,QAA7B;AAAsC,QAAA,EAAE,EAAC,KAAzC;AAAA,kBACGA,CAAC,CAAC,iCAAD;AADJ;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,GAAT;AAAa,QAAA,SAAS,EAAC,QAAvB;AAAA,kBACGA,CAAC,CACA,8GADA;AADJ;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBAfF;AA6BD,CAzCD;;GAAMH,S;UACUR,c,EACGC,c,EACGR,Y,EACKW,sB,EACED,wB,EACDE,uB;;;KANtBG,S;AA2CN,eAAeA,SAAf","sourcesContent":["import React from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { orderBy } from 'lodash'\nimport { Box, Button, Flex, Heading, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { Bet } from 'state/types'\nimport { fetchNodeHistory } from 'state/predictions'\nimport { useGetCurrentHistoryPage, useGetHasHistoryLoaded, useGetIsFetchingHistory } from 'state/predictions/hooks'\nimport HistoricalBet from './HistoricalBet'\nimport V1ClaimCheck from '../v1/V1ClaimCheck'\n\ninterface RoundsTabProps {\n  hasBetHistory: boolean\n  bets: Bet[]\n}\n\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const hasHistoryLoaded = useGetHasHistoryLoaded()\n  const currentHistoryPage = useGetCurrentHistoryPage()\n  const isFetchingHistory = useGetIsFetchingHistory()\n\n  const handleClick = () => {\n    dispatch(fetchNodeHistory({ account, page: currentHistoryPage + 1 }))\n  }\n\n  return hasBetHistory ? (\n    <>\n      <V1ClaimCheck />\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\n        <HistoricalBet key={bet.round.epoch} bet={bet} />\n      ))}\n      {hasBetHistory && !hasHistoryLoaded && (\n        <Flex alignItems=\"center\" justifyContent=\"center\" py=\"24px\">\n          <Button variant=\"secondary\" scale=\"sm\" onClick={handleClick} disabled={isFetchingHistory}>\n            {t('View More')}\n          </Button>\n        </Flex>\n      )}\n    </>\n  ) : (\n    <>\n      <V1ClaimCheck />\n      <Box p=\"24px\">\n        <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\n          {t('No prediction history available')}\n        </Heading>\n        <Text as=\"p\" textAlign=\"center\">\n          {t(\n            'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\n          )}\n        </Text>\n      </Box>\n    </>\n  )\n}\n\nexport default RoundsTab\n"]},"metadata":{},"sourceType":"module"}