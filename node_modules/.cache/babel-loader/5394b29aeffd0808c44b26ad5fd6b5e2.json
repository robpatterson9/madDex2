{"ast":null,"code":"import { getUnixTime, subDays, subWeeks, startOfMinute } from 'date-fns';\nimport { request } from 'graphql-request';\n/**\n * Helper function to get large amount GraphQL subqueries\n * @param queryConstructor constructor function that combines subqueries\n * @param subqueries individual queries\n * @param endpoint GraphQL endpoint\n * @param skipCount how many subqueries to fire at a time\n * @returns\n */\n\nexport const multiQuery = async (queryConstructor, subqueries, endpoint, skipCount = 1000) => {\n  let fetchedData = {};\n  let allFound = false;\n  let skip = 0;\n\n  try {\n    while (!allFound) {\n      let end = subqueries.length;\n\n      if (skip + skipCount < subqueries.length) {\n        end = skip + skipCount;\n      }\n\n      const subqueriesSlice = subqueries.slice(skip, end); // eslint-disable-next-line no-await-in-loop\n\n      const result = await request(endpoint, queryConstructor(subqueriesSlice));\n      fetchedData = { ...fetchedData,\n        ...result\n      };\n      allFound = Object.keys(result).length < skipCount || skip + skipCount > subqueries.length;\n      skip += skipCount;\n    }\n\n    return fetchedData;\n  } catch (error) {\n    console.error('Failed to fetch info data', error);\n    return null;\n  }\n};\n/**\n * Returns UTC timestamps for 24h ago, 48h ago, 7d ago and 14d ago relative to current date and time\n */\n\nexport const getDeltaTimestamps = () => {\n  const utcCurrentTime = getUnixTime(new Date()) * 1000;\n  const t24h = getUnixTime(startOfMinute(subDays(utcCurrentTime, 1)));\n  const t48h = getUnixTime(startOfMinute(subDays(utcCurrentTime, 2)));\n  const t7d = getUnixTime(startOfMinute(subWeeks(utcCurrentTime, 1)));\n  const t14d = getUnixTime(startOfMinute(subWeeks(utcCurrentTime, 2)));\n  return [t24h, t48h, t7d, t14d];\n};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Info/utils/infoQueryHelpers.ts"],"names":["getUnixTime","subDays","subWeeks","startOfMinute","request","multiQuery","queryConstructor","subqueries","endpoint","skipCount","fetchedData","allFound","skip","end","length","subqueriesSlice","slice","result","Object","keys","error","console","getDeltaTimestamps","utcCurrentTime","Date","t24h","t48h","t7d","t14d"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,EAA+BC,QAA/B,EAAyCC,aAAzC,QAA8D,UAA9D;AACA,SAASC,OAAT,QAAwB,iBAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAG,OACxBC,gBADwB,EAExBC,UAFwB,EAGxBC,QAHwB,EAIxBC,SAAS,GAAG,IAJY,KAKrB;AACH,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIC,IAAI,GAAG,CAAX;;AACA,MAAI;AACF,WAAO,CAACD,QAAR,EAAkB;AAChB,UAAIE,GAAG,GAAGN,UAAU,CAACO,MAArB;;AACA,UAAIF,IAAI,GAAGH,SAAP,GAAmBF,UAAU,CAACO,MAAlC,EAA0C;AACxCD,QAAAA,GAAG,GAAGD,IAAI,GAAGH,SAAb;AACD;;AACD,YAAMM,eAAe,GAAGR,UAAU,CAACS,KAAX,CAAiBJ,IAAjB,EAAuBC,GAAvB,CAAxB,CALgB,CAMhB;;AACA,YAAMI,MAAM,GAAG,MAAMb,OAAO,CAACI,QAAD,EAAWF,gBAAgB,CAACS,eAAD,CAA3B,CAA5B;AACAL,MAAAA,WAAW,GAAG,EACZ,GAAGA,WADS;AAEZ,WAAGO;AAFS,OAAd;AAIAN,MAAAA,QAAQ,GAAGO,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBH,MAApB,GAA6BL,SAA7B,IAA0CG,IAAI,GAAGH,SAAP,GAAmBF,UAAU,CAACO,MAAnF;AACAF,MAAAA,IAAI,IAAIH,SAAR;AACD;;AACD,WAAOC,WAAP;AACD,GAjBD,CAiBE,OAAOU,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;AACA,WAAO,IAAP;AACD;AACF,CA9BM;AAgCP;AACA;AACA;;AACA,OAAO,MAAME,kBAAkB,GAAG,MAAwC;AACxE,QAAMC,cAAc,GAAGvB,WAAW,CAAC,IAAIwB,IAAJ,EAAD,CAAX,GAA0B,IAAjD;AACA,QAAMC,IAAI,GAAGzB,WAAW,CAACG,aAAa,CAACF,OAAO,CAACsB,cAAD,EAAiB,CAAjB,CAAR,CAAd,CAAxB;AACA,QAAMG,IAAI,GAAG1B,WAAW,CAACG,aAAa,CAACF,OAAO,CAACsB,cAAD,EAAiB,CAAjB,CAAR,CAAd,CAAxB;AACA,QAAMI,GAAG,GAAG3B,WAAW,CAACG,aAAa,CAACD,QAAQ,CAACqB,cAAD,EAAiB,CAAjB,CAAT,CAAd,CAAvB;AACA,QAAMK,IAAI,GAAG5B,WAAW,CAACG,aAAa,CAACD,QAAQ,CAACqB,cAAD,EAAiB,CAAjB,CAAT,CAAd,CAAxB;AACA,SAAO,CAACE,IAAD,EAAOC,IAAP,EAAaC,GAAb,EAAkBC,IAAlB,CAAP;AACD,CAPM","sourcesContent":["import { getUnixTime, subDays, subWeeks, startOfMinute } from 'date-fns'\nimport { request } from 'graphql-request'\n\n/**\n * Helper function to get large amount GraphQL subqueries\n * @param queryConstructor constructor function that combines subqueries\n * @param subqueries individual queries\n * @param endpoint GraphQL endpoint\n * @param skipCount how many subqueries to fire at a time\n * @returns\n */\nexport const multiQuery = async (\n  queryConstructor: (subqueries: string[]) => string,\n  subqueries: string[],\n  endpoint: string,\n  skipCount = 1000,\n) => {\n  let fetchedData = {}\n  let allFound = false\n  let skip = 0\n  try {\n    while (!allFound) {\n      let end = subqueries.length\n      if (skip + skipCount < subqueries.length) {\n        end = skip + skipCount\n      }\n      const subqueriesSlice = subqueries.slice(skip, end)\n      // eslint-disable-next-line no-await-in-loop\n      const result = await request(endpoint, queryConstructor(subqueriesSlice))\n      fetchedData = {\n        ...fetchedData,\n        ...result,\n      }\n      allFound = Object.keys(result).length < skipCount || skip + skipCount > subqueries.length\n      skip += skipCount\n    }\n    return fetchedData\n  } catch (error) {\n    console.error('Failed to fetch info data', error)\n    return null\n  }\n}\n\n/**\n * Returns UTC timestamps for 24h ago, 48h ago, 7d ago and 14d ago relative to current date and time\n */\nexport const getDeltaTimestamps = (): [number, number, number, number] => {\n  const utcCurrentTime = getUnixTime(new Date()) * 1000\n  const t24h = getUnixTime(startOfMinute(subDays(utcCurrentTime, 1)))\n  const t48h = getUnixTime(startOfMinute(subDays(utcCurrentTime, 2)))\n  const t7d = getUnixTime(startOfMinute(subWeeks(utcCurrentTime, 1)))\n  const t14d = getUnixTime(startOfMinute(subWeeks(utcCurrentTime, 2)))\n  return [t24h, t48h, t7d, t14d]\n}\n"]},"metadata":{},"sourceType":"module"}