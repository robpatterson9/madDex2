{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import BigNumber from'bignumber.js';import{BIG_ONE,BIG_ZERO}from'utils/bigNumber';import{filterFarmsByQuoteToken}from'utils/farmsPriceHelpers';import tokens from'config/constants/tokens';var getFarmFromTokenSymbol=function getFarmFromTokenSymbol(farms,tokenSymbol,preferredQuoteTokens){var farmsWithTokenSymbol=farms.filter(function(farm){return farm.token.symbol===tokenSymbol;});var filteredFarm=filterFarmsByQuoteToken(farmsWithTokenSymbol,preferredQuoteTokens);return filteredFarm;};var getFarmBaseTokenPrice=function getFarmBaseTokenPrice(farm,quoteTokenFarm,bnbPriceBusd){var hasTokenPriceVsQuote=Boolean(farm.tokenPriceVsQuote);if(farm.quoteToken.symbol===tokens.busd.symbol){return hasTokenPriceVsQuote?new BigNumber(farm.tokenPriceVsQuote):BIG_ZERO;}if(farm.quoteToken.symbol===tokens.wbnb.symbol){return hasTokenPriceVsQuote?bnbPriceBusd.times(farm.tokenPriceVsQuote):BIG_ZERO;}// We can only calculate profits without a quoteTokenFarm for BUSD/BNB farms\nif(!quoteTokenFarm){return BIG_ZERO;}// Possible alternative farm quoteTokens:\n// UST (i.e. MIR-UST), pBTC (i.e. PNT-pBTC), BTCB (i.e. bBADGER-BTCB), ETH (i.e. SUSHI-ETH)\n// If the farm's quote token isn't BUSD or WBNB, we then use the quote token, of the original farm's quote token\n// i.e. for farm PNT - pBTC we use the pBTC farm's quote token - BNB, (pBTC - BNB)\n// from the BNB - pBTC price, we can calculate the PNT - BUSD price\nif(quoteTokenFarm.quoteToken.symbol===tokens.wbnb.symbol){var quoteTokenInBusd=bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote);return hasTokenPriceVsQuote&&quoteTokenInBusd?new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd):BIG_ZERO;}if(quoteTokenFarm.quoteToken.symbol===tokens.busd.symbol){var _quoteTokenInBusd=quoteTokenFarm.tokenPriceVsQuote;return hasTokenPriceVsQuote&&_quoteTokenInBusd?new BigNumber(farm.tokenPriceVsQuote).times(_quoteTokenInBusd):BIG_ZERO;}// Catch in case token does not have immediate or once-removed BUSD/WBNB quoteToken\nreturn BIG_ZERO;};var getFarmQuoteTokenPrice=function getFarmQuoteTokenPrice(farm,quoteTokenFarm,bnbPriceBusd){if(farm.quoteToken.symbol==='BUSD'){return BIG_ONE;}if(farm.quoteToken.symbol==='WBNB'){return bnbPriceBusd;}if(!quoteTokenFarm){return BIG_ZERO;}if(quoteTokenFarm.quoteToken.symbol==='WBNB'){return quoteTokenFarm.tokenPriceVsQuote?bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote):BIG_ZERO;}if(quoteTokenFarm.quoteToken.symbol==='BUSD'){return quoteTokenFarm.tokenPriceVsQuote?new BigNumber(quoteTokenFarm.tokenPriceVsQuote):BIG_ZERO;}return BIG_ZERO;};var fetchFarmsPrices=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(farms){var bnbBusdFarm,bnbPriceBusd,farmsWithPrices;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:bnbBusdFarm=farms.find(function(farm){return farm.pid===252;});bnbPriceBusd=bnbBusdFarm.tokenPriceVsQuote?BIG_ONE.div(bnbBusdFarm.tokenPriceVsQuote):BIG_ZERO;farmsWithPrices=farms.map(function(farm){var quoteTokenFarm=getFarmFromTokenSymbol(farms,farm.quoteToken.symbol);var tokenPriceBusd=getFarmBaseTokenPrice(farm,quoteTokenFarm,bnbPriceBusd);var quoteTokenPriceBusd=getFarmQuoteTokenPrice(farm,quoteTokenFarm,bnbPriceBusd);return _objectSpread(_objectSpread({},farm),{},{tokenPriceBusd:tokenPriceBusd.toJSON(),quoteTokenPriceBusd:quoteTokenPriceBusd.toJSON()});});return _context.abrupt(\"return\",farmsWithPrices);case 4:case\"end\":return _context.stop();}}},_callee);}));return function fetchFarmsPrices(_x){return _ref.apply(this,arguments);};}();export default fetchFarmsPrices;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/farms/fetchFarmsPrices.ts"],"names":["BigNumber","BIG_ONE","BIG_ZERO","filterFarmsByQuoteToken","tokens","getFarmFromTokenSymbol","farms","tokenSymbol","preferredQuoteTokens","farmsWithTokenSymbol","filter","farm","token","symbol","filteredFarm","getFarmBaseTokenPrice","quoteTokenFarm","bnbPriceBusd","hasTokenPriceVsQuote","Boolean","tokenPriceVsQuote","quoteToken","busd","wbnb","times","quoteTokenInBusd","getFarmQuoteTokenPrice","fetchFarmsPrices","bnbBusdFarm","find","pid","div","farmsWithPrices","map","tokenPriceBusd","quoteTokenPriceBusd","toJSON"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { BIG_ONE, BIG_ZERO } from 'utils/bigNumber'\nimport { filterFarmsByQuoteToken } from 'utils/farmsPriceHelpers'\nimport { SerializedFarm } from 'state/types'\nimport tokens from 'config/constants/tokens'\n\nconst getFarmFromTokenSymbol = (\n  farms: SerializedFarm[],\n  tokenSymbol: string,\n  preferredQuoteTokens?: string[],\n): SerializedFarm => {\n  const farmsWithTokenSymbol = farms.filter((farm) => farm.token.symbol === tokenSymbol)\n  const filteredFarm = filterFarmsByQuoteToken(farmsWithTokenSymbol, preferredQuoteTokens)\n  return filteredFarm\n}\n\nconst getFarmBaseTokenPrice = (\n  farm: SerializedFarm,\n  quoteTokenFarm: SerializedFarm,\n  bnbPriceBusd: BigNumber,\n): BigNumber => {\n  const hasTokenPriceVsQuote = Boolean(farm.tokenPriceVsQuote)\n\n  if (farm.quoteToken.symbol === tokens.busd.symbol) {\n    return hasTokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : BIG_ZERO\n  }\n\n  if (farm.quoteToken.symbol === tokens.wbnb.symbol) {\n    return hasTokenPriceVsQuote ? bnbPriceBusd.times(farm.tokenPriceVsQuote) : BIG_ZERO\n  }\n\n  // We can only calculate profits without a quoteTokenFarm for BUSD/BNB farms\n  if (!quoteTokenFarm) {\n    return BIG_ZERO\n  }\n\n  // Possible alternative farm quoteTokens:\n  // UST (i.e. MIR-UST), pBTC (i.e. PNT-pBTC), BTCB (i.e. bBADGER-BTCB), ETH (i.e. SUSHI-ETH)\n  // If the farm's quote token isn't BUSD or WBNB, we then use the quote token, of the original farm's quote token\n  // i.e. for farm PNT - pBTC we use the pBTC farm's quote token - BNB, (pBTC - BNB)\n  // from the BNB - pBTC price, we can calculate the PNT - BUSD price\n  if (quoteTokenFarm.quoteToken.symbol === tokens.wbnb.symbol) {\n    const quoteTokenInBusd = bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote)\n    return hasTokenPriceVsQuote && quoteTokenInBusd\n      ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\n      : BIG_ZERO\n  }\n\n  if (quoteTokenFarm.quoteToken.symbol === tokens.busd.symbol) {\n    const quoteTokenInBusd = quoteTokenFarm.tokenPriceVsQuote\n    return hasTokenPriceVsQuote && quoteTokenInBusd\n      ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\n      : BIG_ZERO\n  }\n\n  // Catch in case token does not have immediate or once-removed BUSD/WBNB quoteToken\n  return BIG_ZERO\n}\n\nconst getFarmQuoteTokenPrice = (\n  farm: SerializedFarm,\n  quoteTokenFarm: SerializedFarm,\n  bnbPriceBusd: BigNumber,\n): BigNumber => {\n  if (farm.quoteToken.symbol === 'BUSD') {\n    return BIG_ONE\n  }\n\n  if (farm.quoteToken.symbol === 'WBNB') {\n    return bnbPriceBusd\n  }\n\n  if (!quoteTokenFarm) {\n    return BIG_ZERO\n  }\n\n  if (quoteTokenFarm.quoteToken.symbol === 'WBNB') {\n    return quoteTokenFarm.tokenPriceVsQuote ? bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO\n  }\n\n  if (quoteTokenFarm.quoteToken.symbol === 'BUSD') {\n    return quoteTokenFarm.tokenPriceVsQuote ? new BigNumber(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO\n  }\n\n  return BIG_ZERO\n}\n\nconst fetchFarmsPrices = async (farms: SerializedFarm[]) => {\n  const bnbBusdFarm = farms.find((farm) => farm.pid === 252)\n  const bnbPriceBusd = bnbBusdFarm.tokenPriceVsQuote ? BIG_ONE.div(bnbBusdFarm.tokenPriceVsQuote) : BIG_ZERO\n\n  const farmsWithPrices = farms.map((farm) => {\n    const quoteTokenFarm = getFarmFromTokenSymbol(farms, farm.quoteToken.symbol)\n    const tokenPriceBusd = getFarmBaseTokenPrice(farm, quoteTokenFarm, bnbPriceBusd)\n    const quoteTokenPriceBusd = getFarmQuoteTokenPrice(farm, quoteTokenFarm, bnbPriceBusd)\n\n    return {\n      ...farm,\n      tokenPriceBusd: tokenPriceBusd.toJSON(),\n      quoteTokenPriceBusd: quoteTokenPriceBusd.toJSON(),\n    }\n  })\n\n  return farmsWithPrices\n}\n\nexport default fetchFarmsPrices\n"]},"metadata":{},"sourceType":"module"}