{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _defineProperty from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{ONE_DAY_UNIX,PCS_V2_START}from'config/constants/info';import{getUnixTime}from'date-fns';import{TransactionType}from'state/info/types';export var mapMints=function mapMints(mint){return{type:TransactionType.MINT,hash:mint.id.split('-')[0],timestamp:mint.timestamp,sender:mint.to,token0Symbol:mint.pair.token0.symbol,token1Symbol:mint.pair.token1.symbol,token0Address:mint.pair.token0.id,token1Address:mint.pair.token1.id,amountUSD:parseFloat(mint.amountUSD),amountToken0:parseFloat(mint.amount0),amountToken1:parseFloat(mint.amount1)};};export var mapBurns=function mapBurns(burn){return{type:TransactionType.BURN,hash:burn.id.split('-')[0],timestamp:burn.timestamp,sender:burn.sender,token0Symbol:burn.pair.token0.symbol,token1Symbol:burn.pair.token1.symbol,token0Address:burn.pair.token0.id,token1Address:burn.pair.token1.id,amountUSD:parseFloat(burn.amountUSD),amountToken0:parseFloat(burn.amount0),amountToken1:parseFloat(burn.amount1)};};export var mapSwaps=function mapSwaps(swap){return{type:TransactionType.SWAP,hash:swap.id.split('-')[0],timestamp:swap.timestamp,sender:swap.from,token0Symbol:swap.pair.token0.symbol,token1Symbol:swap.pair.token1.symbol,token0Address:swap.pair.token0.id,token1Address:swap.pair.token1.id,amountUSD:parseFloat(swap.amountUSD),amountToken0:parseFloat(swap.amount0In)-parseFloat(swap.amount0Out),amountToken1:parseFloat(swap.amount1In)-parseFloat(swap.amount1Out)};};export var mapDayData=function mapDayData(tokenDayData){return{date:tokenDayData.date,volumeUSD:parseFloat(tokenDayData.dailyVolumeUSD),liquidityUSD:parseFloat(tokenDayData.totalLiquidityUSD)};};export var mapPairDayData=function mapPairDayData(pairDayData){return{date:pairDayData.date,volumeUSD:parseFloat(pairDayData.dailyVolumeUSD),liquidityUSD:parseFloat(pairDayData.reserveUSD)};};// Common helper function to retrieve chart data\n// Used for both Pool and Token charts\nexport var fetchChartData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(getEntityDayDatas,address){var _firstAvailableDayDat,_firstAvailableDayDat2;var chartEntries,error,skip,allFound,_yield$getEntityDayDa,data,fetchError,formattedDayDatas,availableDays,firstAvailableDayData,timestamp,latestLiquidityUSD,endTimestamp,dayOrdinal;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:chartEntries=[];error=false;skip=0;allFound=false;case 4:if(allFound){_context.next=16;break;}_context.next=7;return getEntityDayDatas(skip,address);case 7:_yield$getEntityDayDa=_context.sent;data=_yield$getEntityDayDa.data;fetchError=_yield$getEntityDayDa.error;skip+=1000;allFound=data.length<1000;error=fetchError;if(data){chartEntries=chartEntries.concat(data);}_context.next=4;break;case 16:if(!(error||chartEntries.length===0)){_context.next=18;break;}return _context.abrupt(\"return\",{error:true});case 18:formattedDayDatas=chartEntries.reduce(function(accum,dayData){// At this stage we track unix day ordinal for each data point to check for empty days later\nvar dayOrdinal=parseInt((dayData.date/ONE_DAY_UNIX).toFixed(0));return _objectSpread(_defineProperty({},dayOrdinal,dayData),accum);},{});availableDays=Object.keys(formattedDayDatas).map(function(dayOrdinal){return parseInt(dayOrdinal,10);});firstAvailableDayData=formattedDayDatas[availableDays[0]];// fill in empty days ( there will be no day datas if no trades made that day )\ntimestamp=(_firstAvailableDayDat=firstAvailableDayData===null||firstAvailableDayData===void 0?void 0:firstAvailableDayData.date)!==null&&_firstAvailableDayDat!==void 0?_firstAvailableDayDat:PCS_V2_START;latestLiquidityUSD=(_firstAvailableDayDat2=firstAvailableDayData===null||firstAvailableDayData===void 0?void 0:firstAvailableDayData.liquidityUSD)!==null&&_firstAvailableDayDat2!==void 0?_firstAvailableDayDat2:0;endTimestamp=getUnixTime(new Date());while(timestamp<endTimestamp-ONE_DAY_UNIX){timestamp+=ONE_DAY_UNIX;dayOrdinal=parseInt((timestamp/ONE_DAY_UNIX).toFixed(0),10);if(!Object.keys(formattedDayDatas).includes(dayOrdinal.toString())){formattedDayDatas[dayOrdinal]={date:timestamp,volumeUSD:0,liquidityUSD:latestLiquidityUSD};}else{latestLiquidityUSD=formattedDayDatas[dayOrdinal].liquidityUSD;}}return _context.abrupt(\"return\",{data:Object.values(formattedDayDatas),error:false});case 26:case\"end\":return _context.stop();}}},_callee);}));return function fetchChartData(_x,_x2){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/queries/helpers.ts"],"names":["ONE_DAY_UNIX","PCS_V2_START","getUnixTime","TransactionType","mapMints","mint","type","MINT","hash","id","split","timestamp","sender","to","token0Symbol","pair","token0","symbol","token1Symbol","token1","token0Address","token1Address","amountUSD","parseFloat","amountToken0","amount0","amountToken1","amount1","mapBurns","burn","BURN","mapSwaps","swap","SWAP","from","amount0In","amount0Out","amount1In","amount1Out","mapDayData","tokenDayData","date","volumeUSD","dailyVolumeUSD","liquidityUSD","totalLiquidityUSD","mapPairDayData","pairDayData","reserveUSD","fetchChartData","getEntityDayDatas","address","chartEntries","error","skip","allFound","data","fetchError","length","concat","formattedDayDatas","reduce","accum","dayData","dayOrdinal","parseInt","toFixed","availableDays","Object","keys","map","firstAvailableDayData","latestLiquidityUSD","endTimestamp","Date","includes","toString","values"],"mappings":"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","sourcesContent":["import { ONE_DAY_UNIX, PCS_V2_START } from 'config/constants/info'\nimport { getUnixTime } from 'date-fns'\nimport { TransactionType } from 'state/info/types'\nimport { ChartEntry } from '../types'\nimport { MintResponse, SwapResponse, BurnResponse, TokenDayData, PairDayData, PancakeDayData } from './types'\n\nexport const mapMints = (mint: MintResponse) => {\n  return {\n    type: TransactionType.MINT,\n    hash: mint.id.split('-')[0],\n    timestamp: mint.timestamp,\n    sender: mint.to,\n    token0Symbol: mint.pair.token0.symbol,\n    token1Symbol: mint.pair.token1.symbol,\n    token0Address: mint.pair.token0.id,\n    token1Address: mint.pair.token1.id,\n    amountUSD: parseFloat(mint.amountUSD),\n    amountToken0: parseFloat(mint.amount0),\n    amountToken1: parseFloat(mint.amount1),\n  }\n}\n\nexport const mapBurns = (burn: BurnResponse) => {\n  return {\n    type: TransactionType.BURN,\n    hash: burn.id.split('-')[0],\n    timestamp: burn.timestamp,\n    sender: burn.sender,\n    token0Symbol: burn.pair.token0.symbol,\n    token1Symbol: burn.pair.token1.symbol,\n    token0Address: burn.pair.token0.id,\n    token1Address: burn.pair.token1.id,\n    amountUSD: parseFloat(burn.amountUSD),\n    amountToken0: parseFloat(burn.amount0),\n    amountToken1: parseFloat(burn.amount1),\n  }\n}\n\nexport const mapSwaps = (swap: SwapResponse) => {\n  return {\n    type: TransactionType.SWAP,\n    hash: swap.id.split('-')[0],\n    timestamp: swap.timestamp,\n    sender: swap.from,\n    token0Symbol: swap.pair.token0.symbol,\n    token1Symbol: swap.pair.token1.symbol,\n    token0Address: swap.pair.token0.id,\n    token1Address: swap.pair.token1.id,\n    amountUSD: parseFloat(swap.amountUSD),\n    amountToken0: parseFloat(swap.amount0In) - parseFloat(swap.amount0Out),\n    amountToken1: parseFloat(swap.amount1In) - parseFloat(swap.amount1Out),\n  }\n}\n\nexport const mapDayData = (tokenDayData: TokenDayData | PancakeDayData): ChartEntry => ({\n  date: tokenDayData.date,\n  volumeUSD: parseFloat(tokenDayData.dailyVolumeUSD),\n  liquidityUSD: parseFloat(tokenDayData.totalLiquidityUSD),\n})\n\nexport const mapPairDayData = (pairDayData: PairDayData): ChartEntry => ({\n  date: pairDayData.date,\n  volumeUSD: parseFloat(pairDayData.dailyVolumeUSD),\n  liquidityUSD: parseFloat(pairDayData.reserveUSD),\n})\n\ntype PoolOrTokenFetchFn = (skip: number, address: string) => Promise<{ data?: ChartEntry[]; error: boolean }>\ntype OverviewFetchFn = (skip: number) => Promise<{ data?: ChartEntry[]; error: boolean }>\n\n// Common helper function to retrieve chart data\n// Used for both Pool and Token charts\nexport const fetchChartData = async (\n  getEntityDayDatas: PoolOrTokenFetchFn | OverviewFetchFn,\n  address?: string,\n): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  let chartEntries: ChartEntry[] = []\n  let error = false\n  let skip = 0\n  let allFound = false\n\n  while (!allFound) {\n    // eslint-disable-next-line no-await-in-loop\n    const { data, error: fetchError } = await getEntityDayDatas(skip, address)\n    skip += 1000\n    allFound = data.length < 1000\n    error = fetchError\n    if (data) {\n      chartEntries = chartEntries.concat(data)\n    }\n  }\n\n  if (error || chartEntries.length === 0) {\n    return {\n      error: true,\n    }\n  }\n\n  const formattedDayDatas = chartEntries.reduce((accum: { [date: number]: ChartEntry }, dayData) => {\n    // At this stage we track unix day ordinal for each data point to check for empty days later\n    const dayOrdinal = parseInt((dayData.date / ONE_DAY_UNIX).toFixed(0))\n    return {\n      [dayOrdinal]: dayData,\n      ...accum,\n    }\n  }, {})\n\n  const availableDays = Object.keys(formattedDayDatas).map((dayOrdinal) => parseInt(dayOrdinal, 10))\n\n  const firstAvailableDayData = formattedDayDatas[availableDays[0]]\n  // fill in empty days ( there will be no day datas if no trades made that day )\n  let timestamp = firstAvailableDayData?.date ?? PCS_V2_START\n  let latestLiquidityUSD = firstAvailableDayData?.liquidityUSD ?? 0\n  const endTimestamp = getUnixTime(new Date())\n  while (timestamp < endTimestamp - ONE_DAY_UNIX) {\n    timestamp += ONE_DAY_UNIX\n    const dayOrdinal = parseInt((timestamp / ONE_DAY_UNIX).toFixed(0), 10)\n    if (!Object.keys(formattedDayDatas).includes(dayOrdinal.toString())) {\n      formattedDayDatas[dayOrdinal] = {\n        date: timestamp,\n        volumeUSD: 0,\n        liquidityUSD: latestLiquidityUSD,\n      }\n    } else {\n      latestLiquidityUSD = formattedDayDatas[dayOrdinal].liquidityUSD\n    }\n  }\n\n  return {\n    data: Object.values(formattedDayDatas),\n    error: false,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}