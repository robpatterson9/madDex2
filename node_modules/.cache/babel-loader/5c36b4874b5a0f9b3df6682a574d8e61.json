{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { useAppDispatch } from 'state';\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions';\nimport { harvestFarm } from 'utils/calls';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport getGasPrice from 'utils/getGasPrice';\nimport { useMasterchef, useSousChef } from 'hooks/useContract';\nimport { DEFAULT_GAS_LIMIT } from 'config';\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT\n};\n\nconst harvestPool = async sousChefContract => {\n  const gasPrice = getGasPrice();\n  const tx = await sousChefContract.deposit('0', { ...options,\n    gasPrice\n  });\n  const receipt = await tx.wait();\n  return receipt.status;\n};\n\nconst harvestPoolBnb = async sousChefContract => {\n  const gasPrice = getGasPrice();\n  const tx = await sousChefContract.deposit({ ...options,\n    value: BIG_ZERO,\n    gasPrice\n  });\n  const receipt = await tx.wait();\n  return receipt.status;\n};\n\nconst useHarvestPool = (sousId, isUsingBnb = false) => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  const sousChefContract = useSousChef(sousId);\n  const masterChefContract = useMasterchef();\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvestFarm(masterChefContract, 0);\n    } else if (isUsingBnb) {\n      await harvestPoolBnb(sousChefContract);\n    } else {\n      await harvestPool(sousChefContract);\n    }\n\n    dispatch(updateUserPendingReward(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId]);\n  return {\n    onReward: handleHarvest\n  };\n};\n\n_s(useHarvestPool, \"CZpRWa4Ye7nHR4cIWJtVsGIiaUI=\", false, function () {\n  return [useAppDispatch, useWeb3React, useSousChef, useMasterchef];\n});\n\nexport default useHarvestPool;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/hooks/useHarvestPool.ts"],"names":["useCallback","useWeb3React","useAppDispatch","updateUserBalance","updateUserPendingReward","harvestFarm","BIG_ZERO","getGasPrice","useMasterchef","useSousChef","DEFAULT_GAS_LIMIT","options","gasLimit","harvestPool","sousChefContract","gasPrice","tx","deposit","receipt","wait","status","harvestPoolBnb","value","useHarvestPool","sousId","isUsingBnb","dispatch","account","masterChefContract","handleHarvest","onReward"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,iBAAT,EAA4BC,uBAA5B,QAA2D,eAA3D;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,mBAA3C;AACA,SAASC,iBAAT,QAAkC,QAAlC;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,QAAQ,EAAEF;AADI,CAAhB;;AAIA,MAAMG,WAAW,GAAG,MAAOC,gBAAP,IAA4B;AAC9C,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAMS,EAAE,GAAG,MAAMF,gBAAgB,CAACG,OAAjB,CAAyB,GAAzB,EAA8B,EAAE,GAAGN,OAAL;AAAcI,IAAAA;AAAd,GAA9B,CAAjB;AACA,QAAMG,OAAO,GAAG,MAAMF,EAAE,CAACG,IAAH,EAAtB;AACA,SAAOD,OAAO,CAACE,MAAf;AACD,CALD;;AAOA,MAAMC,cAAc,GAAG,MAAOP,gBAAP,IAA4B;AACjD,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAMS,EAAE,GAAG,MAAMF,gBAAgB,CAACG,OAAjB,CAAyB,EAAE,GAAGN,OAAL;AAAcW,IAAAA,KAAK,EAAEhB,QAArB;AAA+BS,IAAAA;AAA/B,GAAzB,CAAjB;AACA,QAAMG,OAAO,GAAG,MAAMF,EAAE,CAACG,IAAH,EAAtB;AACA,SAAOD,OAAO,CAACE,MAAf;AACD,CALD;;AAOA,MAAMG,cAAc,GAAG,CAACC,MAAD,EAASC,UAAU,GAAG,KAAtB,KAAgC;AAAA;;AACrD,QAAMC,QAAQ,GAAGxB,cAAc,EAA/B;AACA,QAAM;AAAEyB,IAAAA;AAAF,MAAc1B,YAAY,EAAhC;AACA,QAAMa,gBAAgB,GAAGL,WAAW,CAACe,MAAD,CAApC;AACA,QAAMI,kBAAkB,GAAGpB,aAAa,EAAxC;AAEA,QAAMqB,aAAa,GAAG7B,WAAW,CAAC,YAAY;AAC5C,QAAIwB,MAAM,KAAK,CAAf,EAAkB;AAChB,YAAMnB,WAAW,CAACuB,kBAAD,EAAqB,CAArB,CAAjB;AACD,KAFD,MAEO,IAAIH,UAAJ,EAAgB;AACrB,YAAMJ,cAAc,CAACP,gBAAD,CAApB;AACD,KAFM,MAEA;AACL,YAAMD,WAAW,CAACC,gBAAD,CAAjB;AACD;;AACDY,IAAAA,QAAQ,CAACtB,uBAAuB,CAACoB,MAAD,EAASG,OAAT,CAAxB,CAAR;AACAD,IAAAA,QAAQ,CAACvB,iBAAiB,CAACqB,MAAD,EAASG,OAAT,CAAlB,CAAR;AACD,GAVgC,EAU9B,CAACA,OAAD,EAAUD,QAAV,EAAoBD,UAApB,EAAgCG,kBAAhC,EAAoDd,gBAApD,EAAsEU,MAAtE,CAV8B,CAAjC;AAYA,SAAO;AAAEM,IAAAA,QAAQ,EAAED;AAAZ,GAAP;AACD,CAnBD;;GAAMN,c;UACarB,c,EACGD,Y,EACKQ,W,EACED,a;;;AAiB7B,eAAee,cAAf","sourcesContent":["import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { harvestFarm } from 'utils/calls'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport getGasPrice from 'utils/getGasPrice'\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\nimport { DEFAULT_GAS_LIMIT } from 'config'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nconst harvestPool = async (sousChefContract) => {\n  const gasPrice = getGasPrice()\n  const tx = await sousChefContract.deposit('0', { ...options, gasPrice })\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst harvestPoolBnb = async (sousChefContract) => {\n  const gasPrice = getGasPrice()\n  const tx = await sousChefContract.deposit({ ...options, value: BIG_ZERO, gasPrice })\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst useHarvestPool = (sousId, isUsingBnb = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const sousChefContract = useSousChef(sousId)\n  const masterChefContract = useMasterchef()\n\n  const handleHarvest = useCallback(async () => {\n    if (sousId === 0) {\n      await harvestFarm(masterChefContract, 0)\n    } else if (isUsingBnb) {\n      await harvestPoolBnb(sousChefContract)\n    } else {\n      await harvestPool(sousChefContract)\n    }\n    dispatch(updateUserPendingReward(sousId, account))\n    dispatch(updateUserBalance(sousId, account))\n  }, [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId])\n\n  return { onReward: handleHarvest }\n}\n\nexport default useHarvestPool\n"]},"metadata":{},"sourceType":"module"}