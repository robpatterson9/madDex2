{"ast":null,"code":"import BigNumber from'bignumber.js';import{getApy}from'utils/compoundApyHelpers';import{getBalanceNumber,getFullDisplayBalance,getDecimalAmount}from'utils/formatBalance';export var convertSharesToCake=function convertSharesToCake(shares,cakePerFullShare){var decimals=arguments.length>2&&arguments[2]!==undefined?arguments[2]:18;var decimalsToRound=arguments.length>3&&arguments[3]!==undefined?arguments[3]:3;var sharePriceNumber=getBalanceNumber(cakePerFullShare,decimals);var amountInCake=new BigNumber(shares.multipliedBy(sharePriceNumber));var cakeAsNumberBalance=getBalanceNumber(amountInCake,decimals);var cakeAsBigNumber=getDecimalAmount(new BigNumber(cakeAsNumberBalance),decimals);var cakeAsDisplayBalance=getFullDisplayBalance(amountInCake,decimals,decimalsToRound);return{cakeAsNumberBalance:cakeAsNumberBalance,cakeAsBigNumber:cakeAsBigNumber,cakeAsDisplayBalance:cakeAsDisplayBalance};};export var convertCakeToShares=function convertCakeToShares(cake,cakePerFullShare){var decimals=arguments.length>2&&arguments[2]!==undefined?arguments[2]:18;var decimalsToRound=arguments.length>3&&arguments[3]!==undefined?arguments[3]:3;var sharePriceNumber=getBalanceNumber(cakePerFullShare,decimals);var amountInShares=new BigNumber(cake.dividedBy(sharePriceNumber));var sharesAsNumberBalance=getBalanceNumber(amountInShares,decimals);var sharesAsBigNumber=getDecimalAmount(new BigNumber(sharesAsNumberBalance),decimals);var sharesAsDisplayBalance=getFullDisplayBalance(amountInShares,decimals,decimalsToRound);return{sharesAsNumberBalance:sharesAsNumberBalance,sharesAsBigNumber:sharesAsBigNumber,sharesAsDisplayBalance:sharesAsDisplayBalance};};var AUTO_VAULT_COMPOUND_FREQUENCY=5000;var MANUAL_POOL_AUTO_COMPOUND_FREQUENCY=0;export var getAprData=function getAprData(pool,performanceFee){var isAutoVault=pool.isAutoVault,apr=pool.apr;//   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\nvar autoCompoundFrequency=isAutoVault?AUTO_VAULT_COMPOUND_FREQUENCY:MANUAL_POOL_AUTO_COMPOUND_FREQUENCY;if(isAutoVault){var autoApr=getApy(apr,AUTO_VAULT_COMPOUND_FREQUENCY,365,performanceFee)*100;return{apr:autoApr,autoCompoundFrequency:autoCompoundFrequency};}return{apr:apr,autoCompoundFrequency:autoCompoundFrequency};};export var getCakeVaultEarnings=function getCakeVaultEarnings(account,cakeAtLastUserAction,userShares,pricePerFullShare,earningTokenPrice){var hasAutoEarnings=account&&cakeAtLastUserAction&&cakeAtLastUserAction.gt(0)&&userShares&&userShares.gt(0);var _convertSharesToCake=convertSharesToCake(userShares,pricePerFullShare),cakeAsBigNumber=_convertSharesToCake.cakeAsBigNumber;var autoCakeProfit=cakeAsBigNumber.minus(cakeAtLastUserAction);var autoCakeToDisplay=autoCakeProfit.gte(0)?getBalanceNumber(autoCakeProfit,18):0;var autoUsdProfit=autoCakeProfit.times(earningTokenPrice);var autoUsdToDisplay=autoUsdProfit.gte(0)?getBalanceNumber(autoUsdProfit,18):0;return{hasAutoEarnings:hasAutoEarnings,autoCakeToDisplay:autoCakeToDisplay,autoUsdToDisplay:autoUsdToDisplay};};export var getPoolBlockInfo=function getPoolBlockInfo(pool,currentBlock){var startBlock=pool.startBlock,endBlock=pool.endBlock,isFinished=pool.isFinished;var shouldShowBlockCountdown=Boolean(!isFinished&&startBlock&&endBlock);var blocksUntilStart=Math.max(startBlock-currentBlock,0);var blocksRemaining=Math.max(endBlock-currentBlock,0);var hasPoolStarted=blocksUntilStart===0&&blocksRemaining>0;var blocksToDisplay=hasPoolStarted?blocksRemaining:blocksUntilStart;return{shouldShowBlockCountdown:shouldShowBlockCountdown,blocksUntilStart:blocksUntilStart,blocksRemaining:blocksRemaining,hasPoolStarted:hasPoolStarted,blocksToDisplay:blocksToDisplay};};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/helpers.tsx"],"names":["BigNumber","getApy","getBalanceNumber","getFullDisplayBalance","getDecimalAmount","convertSharesToCake","shares","cakePerFullShare","decimals","decimalsToRound","sharePriceNumber","amountInCake","multipliedBy","cakeAsNumberBalance","cakeAsBigNumber","cakeAsDisplayBalance","convertCakeToShares","cake","amountInShares","dividedBy","sharesAsNumberBalance","sharesAsBigNumber","sharesAsDisplayBalance","AUTO_VAULT_COMPOUND_FREQUENCY","MANUAL_POOL_AUTO_COMPOUND_FREQUENCY","getAprData","pool","performanceFee","isAutoVault","apr","autoCompoundFrequency","autoApr","getCakeVaultEarnings","account","cakeAtLastUserAction","userShares","pricePerFullShare","earningTokenPrice","hasAutoEarnings","gt","autoCakeProfit","minus","autoCakeToDisplay","gte","autoUsdProfit","times","autoUsdToDisplay","getPoolBlockInfo","currentBlock","startBlock","endBlock","isFinished","shouldShowBlockCountdown","Boolean","blocksUntilStart","Math","max","blocksRemaining","hasPoolStarted","blocksToDisplay"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { DeserializedPool } from 'state/types'\nimport { getApy } from 'utils/compoundApyHelpers'\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance'\n\nexport const convertSharesToCake = (\n  shares: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber))\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals)\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals)\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound)\n  return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance }\n}\n\nexport const convertCakeToShares = (\n  cake: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber))\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals)\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals)\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound)\n  return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance }\n}\n\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 5000\nconst MANUAL_POOL_AUTO_COMPOUND_FREQUENCY = 0\n\nexport const getAprData = (pool: DeserializedPool, performanceFee: number) => {\n  const { isAutoVault, apr } = pool\n\n  //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\n  const autoCompoundFrequency = isAutoVault ? AUTO_VAULT_COMPOUND_FREQUENCY : MANUAL_POOL_AUTO_COMPOUND_FREQUENCY\n\n  if (isAutoVault) {\n    const autoApr = getApy(apr, AUTO_VAULT_COMPOUND_FREQUENCY, 365, performanceFee) * 100\n    return { apr: autoApr, autoCompoundFrequency }\n  }\n  return { apr, autoCompoundFrequency }\n}\n\nexport const getCakeVaultEarnings = (\n  account: string,\n  cakeAtLastUserAction: BigNumber,\n  userShares: BigNumber,\n  pricePerFullShare: BigNumber,\n  earningTokenPrice: number,\n) => {\n  const hasAutoEarnings =\n    account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0)\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\n  const autoCakeProfit = cakeAsBigNumber.minus(cakeAtLastUserAction)\n  const autoCakeToDisplay = autoCakeProfit.gte(0) ? getBalanceNumber(autoCakeProfit, 18) : 0\n\n  const autoUsdProfit = autoCakeProfit.times(earningTokenPrice)\n  const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0\n  return { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay }\n}\n\nexport const getPoolBlockInfo = (pool: DeserializedPool, currentBlock: number) => {\n  const { startBlock, endBlock, isFinished } = pool\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\n  const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart\n  return { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay }\n}\n"]},"metadata":{},"sourceType":"module"}