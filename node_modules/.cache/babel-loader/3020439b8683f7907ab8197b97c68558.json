{"ast":null,"code":"import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useRef,useState}from'react';var useIntersectionObserver=function useIntersectionObserver(){var observerRef=useRef(null);var intersectionObserverRef=useRef(null);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),observerIsSet=_useState2[0],setObserverIsSet=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isIntersecting=_useState4[0],setIsIntersecting=_useState4[1];useEffect(function(){var checkObserverIsIntersecting=function checkObserverIsIntersecting(_ref){var _ref2=_slicedToArray(_ref,1),entry=_ref2[0];setIsIntersecting(entry.isIntersecting);};if(!observerIsSet){intersectionObserverRef.current=new IntersectionObserver(checkObserverIsIntersecting,{rootMargin:'0px',threshold:1});intersectionObserverRef.current.observe(observerRef.current);setObserverIsSet(true);}return function(){if(intersectionObserverRef.current&&observerIsSet){intersectionObserverRef.current.disconnect();}};},[observerIsSet]);return{observerRef:observerRef,isIntersecting:isIntersecting};};export default useIntersectionObserver;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/hooks/useIntersectionObserver.ts"],"names":["useEffect","useRef","useState","useIntersectionObserver","observerRef","intersectionObserverRef","observerIsSet","setObserverIsSet","isIntersecting","setIsIntersecting","checkObserverIsIntersecting","entry","current","IntersectionObserver","rootMargin","threshold","observe","disconnect"],"mappings":"wJAAA,OAASA,SAAT,CAAoBC,MAApB,CAA4BC,QAA5B,KAA4C,OAA5C,CAEA,GAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,EAAM,CACpC,GAAMC,CAAAA,WAAW,CAAGH,MAAM,CAAiB,IAAjB,CAA1B,CACA,GAAMI,CAAAA,uBAAuB,CAAGJ,MAAM,CAAuB,IAAvB,CAAtC,CACA,cAA0CC,QAAQ,CAAC,KAAD,CAAlD,wCAAOI,aAAP,eAAsBC,gBAAtB,eACA,eAA4CL,QAAQ,CAAC,KAAD,CAApD,yCAAOM,cAAP,eAAuBC,iBAAvB,eAEAT,SAAS,CAAC,UAAM,CACd,GAAMU,CAAAA,2BAA2B,CAAG,QAA9BA,CAAAA,2BAA8B,MAA0C,kCAAxCC,KAAwC,UAC5EF,iBAAiB,CAACE,KAAK,CAACH,cAAP,CAAjB,CACD,CAFD,CAIA,GAAI,CAACF,aAAL,CAAoB,CAClBD,uBAAuB,CAACO,OAAxB,CAAkC,GAAIC,CAAAA,oBAAJ,CAAyBH,2BAAzB,CAAsD,CACtFI,UAAU,CAAE,KAD0E,CAEtFC,SAAS,CAAE,CAF2E,CAAtD,CAAlC,CAIAV,uBAAuB,CAACO,OAAxB,CAAgCI,OAAhC,CAAwCZ,WAAW,CAACQ,OAApD,EACAL,gBAAgB,CAAC,IAAD,CAAhB,CACD,CAED,MAAO,WAAM,CACX,GAAIF,uBAAuB,CAACO,OAAxB,EAAmCN,aAAvC,CAAsD,CACpDD,uBAAuB,CAACO,OAAxB,CAAgCK,UAAhC,GACD,CACF,CAJD,CAKD,CAnBQ,CAmBN,CAACX,aAAD,CAnBM,CAAT,CAqBA,MAAO,CAAEF,WAAW,CAAXA,WAAF,CAAeI,cAAc,CAAdA,cAAf,CAAP,CACD,CA5BD,CA8BA,cAAeL,CAAAA,uBAAf","sourcesContent":["import { useEffect, useRef, useState } from 'react'\n\nconst useIntersectionObserver = () => {\n  const observerRef = useRef<HTMLDivElement>(null)\n  const intersectionObserverRef = useRef<IntersectionObserver>(null)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const [isIntersecting, setIsIntersecting] = useState(false)\n\n  useEffect(() => {\n    const checkObserverIsIntersecting = ([entry]: IntersectionObserverEntry[]) => {\n      setIsIntersecting(entry.isIntersecting)\n    }\n\n    if (!observerIsSet) {\n      intersectionObserverRef.current = new IntersectionObserver(checkObserverIsIntersecting, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      intersectionObserverRef.current.observe(observerRef.current)\n      setObserverIsSet(true)\n    }\n\n    return () => {\n      if (intersectionObserverRef.current && observerIsSet) {\n        intersectionObserverRef.current.disconnect()\n      }\n    }\n  }, [observerIsSet])\n\n  return { observerRef, isIntersecting }\n}\n\nexport default useIntersectionObserver\n"]},"metadata":{},"sourceType":"module"}