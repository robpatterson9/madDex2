{"ast":null,"code":"import { request, gql } from 'graphql-request';\nimport { INFO_CLIENT } from 'config/constants/endpoints';\nimport { TOKEN_BLACKLIST } from 'config/constants/info';\n/**\n * Data for showing Pools table on the Token page\n */\n\nconst POOLS_FOR_TOKEN = gql`\n  query poolsForToken($address: Bytes!, $blacklist: [String!]) {\n    asToken0: pairs(\n      first: 15\n      orderBy: trackedReserveBNB\n      orderDirection: desc\n      where: { totalTransactions_gt: 100, token0: $address, token1_not_in: $blacklist }\n    ) {\n      id\n    }\n    asToken1: pairs(\n      first: 15\n      orderBy: trackedReserveBNB\n      orderDirection: desc\n      where: { totalTransactions_gt: 100, token1: $address, token0_not_in: $blacklist }\n    ) {\n      id\n    }\n  }\n`;\n\nconst fetchPoolsForToken = async address => {\n  try {\n    const data = await request(INFO_CLIENT, POOLS_FOR_TOKEN, {\n      address,\n      blacklist: TOKEN_BLACKLIST\n    });\n    return {\n      error: false,\n      addresses: data.asToken0.concat(data.asToken1).map(p => p.id)\n    };\n  } catch (error) {\n    console.error(`Failed to fetch pools for token ${address}`, error);\n    return {\n      error: true\n    };\n  }\n};\n\nexport default fetchPoolsForToken;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/queries/tokens/poolsForToken.ts"],"names":["request","gql","INFO_CLIENT","TOKEN_BLACKLIST","POOLS_FOR_TOKEN","fetchPoolsForToken","address","data","blacklist","error","addresses","asToken0","concat","asToken1","map","p","id","console"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,eAAT,QAAgC,uBAAhC;AAEA;AACA;AACA;;AACA,MAAMC,eAAe,GAAGH,GAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAnBA;;AA8BA,MAAMI,kBAAkB,GAAG,MACzBC,OADyB,IAKrB;AACJ,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMP,OAAO,CAAwBE,WAAxB,EAAqCE,eAArC,EAAsD;AAC9EE,MAAAA,OAD8E;AAE9EE,MAAAA,SAAS,EAAEL;AAFmE,KAAtD,CAA1B;AAIA,WAAO;AACLM,MAAAA,KAAK,EAAE,KADF;AAELC,MAAAA,SAAS,EAAEH,IAAI,CAACI,QAAL,CAAcC,MAAd,CAAqBL,IAAI,CAACM,QAA1B,EAAoCC,GAApC,CAAyCC,CAAD,IAAOA,CAAC,CAACC,EAAjD;AAFN,KAAP;AAID,GATD,CASE,OAAOP,KAAP,EAAc;AACdQ,IAAAA,OAAO,CAACR,KAAR,CAAe,mCAAkCH,OAAQ,EAAzD,EAA4DG,KAA5D;AACA,WAAO;AACLA,MAAAA,KAAK,EAAE;AADF,KAAP;AAGD;AACF,CArBD;;AAuBA,eAAeJ,kBAAf","sourcesContent":["import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\n\n/**\n * Data for showing Pools table on the Token page\n */\nconst POOLS_FOR_TOKEN = gql`\n  query poolsForToken($address: Bytes!, $blacklist: [String!]) {\n    asToken0: pairs(\n      first: 15\n      orderBy: trackedReserveBNB\n      orderDirection: desc\n      where: { totalTransactions_gt: 100, token0: $address, token1_not_in: $blacklist }\n    ) {\n      id\n    }\n    asToken1: pairs(\n      first: 15\n      orderBy: trackedReserveBNB\n      orderDirection: desc\n      where: { totalTransactions_gt: 100, token1: $address, token0_not_in: $blacklist }\n    ) {\n      id\n    }\n  }\n`\n\ninterface PoolsForTokenResponse {\n  asToken0: {\n    id: string\n  }[]\n  asToken1: {\n    id: string\n  }[]\n}\n\nconst fetchPoolsForToken = async (\n  address: string,\n): Promise<{\n  error: boolean\n  addresses?: string[]\n}> => {\n  try {\n    const data = await request<PoolsForTokenResponse>(INFO_CLIENT, POOLS_FOR_TOKEN, {\n      address,\n      blacklist: TOKEN_BLACKLIST,\n    })\n    return {\n      error: false,\n      addresses: data.asToken0.concat(data.asToken1).map((p) => p.id),\n    }\n  } catch (error) {\n    console.error(`Failed to fetch pools for token ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchPoolsForToken\n"]},"metadata":{},"sourceType":"module"}