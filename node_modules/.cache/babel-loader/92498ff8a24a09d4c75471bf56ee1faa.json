{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import React,{useState,useRef,useEffect}from'react';import styled from'styled-components';import{Card,Text,Skeleton,CardHeader,Box}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{useAppDispatch}from'state';import{useLottery}from'state/lottery/hooks';import{fetchLottery}from'state/lottery/helpers';import{LotteryStatus}from'config/constants/types';import RoundSwitcher from'./RoundSwitcher';import{getDrawnDate,processLotteryResponse}from'../../helpers';import PreviousRoundCardBody from'../PreviousRoundCard/Body';import PreviousRoundCardFooter from'../PreviousRoundCard/Footer';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var StyledCard=styled(Card)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  width: 100%;\\n\\n  \",\" {\\n    width: 756px;\\n  }\\n\"])),function(_ref){var theme=_ref.theme;return theme.mediaQueries.md;});var StyledCardHeader=styled(CardHeader)(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  z-index: 2;\\n  background: none;\\n  border-bottom: 1px \",\" solid;\\n\"])),function(_ref2){var theme=_ref2.theme;return theme.colors.cardBorder;});var AllHistoryCard=function AllHistoryCard(){var _useTranslation=useTranslation(),t=_useTranslation.t;var dispatch=useAppDispatch();var _useLottery=useLottery(),currentLotteryId=_useLottery.currentLotteryId,lotteriesData=_useLottery.lotteriesData,_useLottery$currentRo=_useLottery.currentRound,status=_useLottery$currentRo.status,isLoading=_useLottery$currentRo.isLoading;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),latestRoundId=_useState2[0],setLatestRoundId=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),selectedRoundId=_useState4[0],setSelectedRoundId=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),selectedLotteryNodeData=_useState6[0],setSelectedLotteryNodeData=_useState6[1];var timer=useRef(null);var numRoundsFetched=lotteriesData===null||lotteriesData===void 0?void 0:lotteriesData.length;useEffect(function(){if(currentLotteryId){var currentLotteryIdAsInt=currentLotteryId?parseInt(currentLotteryId):null;var mostRecentFinishedRoundId=status===LotteryStatus.CLAIMABLE?currentLotteryIdAsInt:currentLotteryIdAsInt-1;setLatestRoundId(mostRecentFinishedRoundId);setSelectedRoundId(mostRecentFinishedRoundId.toString());}},[currentLotteryId,status]);useEffect(function(){setSelectedLotteryNodeData(null);var fetchLotteryData=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var lotteryData,processedLotteryData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchLottery(selectedRoundId);case 2:lotteryData=_context.sent;processedLotteryData=processLotteryResponse(lotteryData);setSelectedLotteryNodeData(processedLotteryData);case 5:case\"end\":return _context.stop();}}},_callee);}));return function fetchLotteryData(){return _ref3.apply(this,arguments);};}();timer.current=setInterval(function(){if(selectedRoundId){fetchLotteryData();}clearInterval(timer.current);},1000);return function(){return clearInterval(timer.current);};},[selectedRoundId,currentLotteryId,numRoundsFetched,dispatch]);var handleInputChange=function handleInputChange(event){var value=event.target.value;if(value){setSelectedRoundId(value);if(parseInt(value,10)<=0){setSelectedRoundId('');}if(parseInt(value,10)>=latestRoundId){setSelectedRoundId(latestRoundId.toString());}}else{setSelectedRoundId('');}};var handleArrowButtonPress=function handleArrowButtonPress(targetRound){if(targetRound){setSelectedRoundId(targetRound.toString());}else{// targetRound is NaN when the input is empty, the only button press that will trigger this func is 'forward one'\nsetSelectedRoundId('1');}};return/*#__PURE__*/_jsxs(StyledCard,{children:[/*#__PURE__*/_jsxs(StyledCardHeader,{children:[/*#__PURE__*/_jsx(RoundSwitcher,{isLoading:isLoading,selectedRoundId:selectedRoundId,mostRecentRound:latestRoundId,handleInputChange:handleInputChange,handleArrowButtonPress:handleArrowButtonPress}),/*#__PURE__*/_jsx(Box,{mt:\"8px\",children:(selectedLotteryNodeData===null||selectedLotteryNodeData===void 0?void 0:selectedLotteryNodeData.endTime)?/*#__PURE__*/_jsxs(Text,{fontSize:\"14px\",children:[t('Drawn'),\" \",getDrawnDate(selectedLotteryNodeData.endTime)]}):/*#__PURE__*/_jsx(Skeleton,{width:\"185px\",height:\"21px\"})})]}),/*#__PURE__*/_jsx(PreviousRoundCardBody,{lotteryNodeData:selectedLotteryNodeData,lotteryId:selectedRoundId}),/*#__PURE__*/_jsx(PreviousRoundCardFooter,{lotteryNodeData:selectedLotteryNodeData,lotteryId:selectedRoundId})]});};export default AllHistoryCard;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Lottery/components/AllHistoryCard/index.tsx"],"names":["React","useState","useRef","useEffect","styled","Card","Text","Skeleton","CardHeader","Box","useTranslation","useAppDispatch","useLottery","fetchLottery","LotteryStatus","RoundSwitcher","getDrawnDate","processLotteryResponse","PreviousRoundCardBody","PreviousRoundCardFooter","StyledCard","theme","mediaQueries","md","StyledCardHeader","colors","cardBorder","AllHistoryCard","t","dispatch","currentLotteryId","lotteriesData","currentRound","status","isLoading","latestRoundId","setLatestRoundId","selectedRoundId","setSelectedRoundId","selectedLotteryNodeData","setSelectedLotteryNodeData","timer","numRoundsFetched","length","currentLotteryIdAsInt","parseInt","mostRecentFinishedRoundId","CLAIMABLE","toString","fetchLotteryData","lotteryData","processedLotteryData","current","setInterval","clearInterval","handleInputChange","event","value","target","handleArrowButtonPress","targetRound","endTime"],"mappings":"kpBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,MAA1B,CAAkCC,SAAlC,KAAmD,OAAnD,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,IAAT,CAAeC,IAAf,CAAqBC,QAArB,CAA+BC,UAA/B,CAA2CC,GAA3C,KAAsD,oBAAtD,CACA,OAASC,cAAT,KAA+B,uBAA/B,CACA,OAASC,cAAT,KAA+B,OAA/B,CACA,OAASC,UAAT,KAA2B,qBAA3B,CACA,OAASC,YAAT,KAA6B,uBAA7B,CACA,OAASC,aAAT,KAA8B,wBAA9B,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CACA,OAASC,YAAT,CAAuBC,sBAAvB,KAAqD,eAArD,CACA,MAAOC,CAAAA,qBAAP,KAAkC,2BAAlC,CACA,MAAOC,CAAAA,uBAAP,KAAoC,6BAApC,C,wFAEA,GAAMC,CAAAA,UAAU,CAAGhB,MAAM,CAACC,IAAD,CAAT,sHAGZ,kBAAGgB,CAAAA,KAAH,MAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACC,YAAN,CAAmBC,EAAlC,EAHY,CAAhB,CAQA,GAAMC,CAAAA,gBAAgB,CAAGpB,MAAM,CAACI,UAAD,CAAT,0IAGC,mBAAGa,CAAAA,KAAH,OAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACI,MAAN,CAAaC,UAA5B,EAHD,CAAtB,CAMA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3B,oBAAcjB,cAAc,EAA5B,CAAQkB,CAAR,iBAAQA,CAAR,CACA,GAAMC,CAAAA,QAAQ,CAAGlB,cAAc,EAA/B,CACA,gBAIIC,UAAU,EAJd,CACEkB,gBADF,aACEA,gBADF,CAEEC,aAFF,aAEEA,aAFF,mCAGEC,YAHF,CAGkBC,MAHlB,uBAGkBA,MAHlB,CAG0BC,SAH1B,uBAG0BA,SAH1B,CAKA,cAA0CjC,QAAQ,CAAC,IAAD,CAAlD,wCAAOkC,aAAP,eAAsBC,gBAAtB,eACA,eAA8CnC,QAAQ,CAAC,EAAD,CAAtD,yCAAOoC,eAAP,eAAwBC,kBAAxB,eACA,eAA8DrC,QAAQ,CAAC,IAAD,CAAtE,yCAAOsC,uBAAP,eAAgCC,0BAAhC,eACA,GAAMC,CAAAA,KAAK,CAAGvC,MAAM,CAAC,IAAD,CAApB,CAEA,GAAMwC,CAAAA,gBAAgB,CAAGX,aAAH,SAAGA,aAAH,iBAAGA,aAAa,CAAEY,MAAxC,CAEAxC,SAAS,CAAC,UAAM,CACd,GAAI2B,gBAAJ,CAAsB,CACpB,GAAMc,CAAAA,qBAAqB,CAAGd,gBAAgB,CAAGe,QAAQ,CAACf,gBAAD,CAAX,CAAgC,IAA9E,CACA,GAAMgB,CAAAA,yBAAyB,CAC7Bb,MAAM,GAAKnB,aAAa,CAACiC,SAAzB,CAAqCH,qBAArC,CAA6DA,qBAAqB,CAAG,CADvF,CAEAR,gBAAgB,CAACU,yBAAD,CAAhB,CACAR,kBAAkB,CAACQ,yBAAyB,CAACE,QAA1B,EAAD,CAAlB,CACD,CACF,CARQ,CAQN,CAAClB,gBAAD,CAAmBG,MAAnB,CARM,CAAT,CAUA9B,SAAS,CAAC,UAAM,CACdqC,0BAA0B,CAAC,IAAD,CAA1B,CAEA,GAAMS,CAAAA,gBAAgB,2FAAG,8LACGpC,CAAAA,YAAY,CAACwB,eAAD,CADf,QACjBa,WADiB,eAEjBC,oBAFiB,CAEMlC,sBAAsB,CAACiC,WAAD,CAF5B,CAGvBV,0BAA0B,CAACW,oBAAD,CAA1B,CAHuB,sDAAH,kBAAhBF,CAAAA,gBAAgB,2CAAtB,CAMAR,KAAK,CAACW,OAAN,CAAgBC,WAAW,CAAC,UAAM,CAChC,GAAIhB,eAAJ,CAAqB,CACnBY,gBAAgB,GACjB,CACDK,aAAa,CAACb,KAAK,CAACW,OAAP,CAAb,CACD,CAL0B,CAKxB,IALwB,CAA3B,CAOA,MAAO,kBAAME,CAAAA,aAAa,CAACb,KAAK,CAACW,OAAP,CAAnB,EAAP,CACD,CAjBQ,CAiBN,CAACf,eAAD,CAAkBP,gBAAlB,CAAoCY,gBAApC,CAAsDb,QAAtD,CAjBM,CAAT,CAmBA,GAAM0B,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,KAAD,CAAW,CACnC,GACYC,CAAAA,KADZ,CAEID,KAFJ,CACEE,MADF,CACYD,KADZ,CAGA,GAAIA,KAAJ,CAAW,CACTnB,kBAAkB,CAACmB,KAAD,CAAlB,CACA,GAAIZ,QAAQ,CAACY,KAAD,CAAQ,EAAR,CAAR,EAAuB,CAA3B,CAA8B,CAC5BnB,kBAAkB,CAAC,EAAD,CAAlB,CACD,CACD,GAAIO,QAAQ,CAACY,KAAD,CAAQ,EAAR,CAAR,EAAuBtB,aAA3B,CAA0C,CACxCG,kBAAkB,CAACH,aAAa,CAACa,QAAd,EAAD,CAAlB,CACD,CACF,CARD,IAQO,CACLV,kBAAkB,CAAC,EAAD,CAAlB,CACD,CACF,CAfD,CAiBA,GAAMqB,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACC,WAAD,CAAiB,CAC9C,GAAIA,WAAJ,CAAiB,CACftB,kBAAkB,CAACsB,WAAW,CAACZ,QAAZ,EAAD,CAAlB,CACD,CAFD,IAEO,CACL;AACAV,kBAAkB,CAAC,GAAD,CAAlB,CACD,CACF,CAPD,CASA,mBACE,MAAC,UAAD,yBACE,MAAC,gBAAD,yBACE,KAAC,aAAD,EACE,SAAS,CAAEJ,SADb,CAEE,eAAe,CAAEG,eAFnB,CAGE,eAAe,CAAEF,aAHnB,CAIE,iBAAiB,CAAEoB,iBAJrB,CAKE,sBAAsB,CAAEI,sBAL1B,EADF,cAQE,KAAC,GAAD,EAAK,EAAE,CAAC,KAAR,UACG,CAAApB,uBAAuB,OAAvB,EAAAA,uBAAuB,SAAvB,QAAAA,uBAAuB,CAAEsB,OAAzB,eACC,MAAC,IAAD,EAAM,QAAQ,CAAC,MAAf,WACGjC,CAAC,CAAC,OAAD,CADJ,KACgBZ,YAAY,CAACuB,uBAAuB,CAACsB,OAAzB,CAD5B,GADD,cAKC,KAAC,QAAD,EAAU,KAAK,CAAC,OAAhB,CAAwB,MAAM,CAAC,MAA/B,EANJ,EARF,GADF,cAmBE,KAAC,qBAAD,EAAuB,eAAe,CAAEtB,uBAAxC,CAAiE,SAAS,CAAEF,eAA5E,EAnBF,cAoBE,KAAC,uBAAD,EAAyB,eAAe,CAAEE,uBAA1C,CAAmE,SAAS,CAAEF,eAA9E,EApBF,GADF,CAwBD,CA9FD,CAgGA,cAAeV,CAAAA,cAAf","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Card, Text, Skeleton, CardHeader, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { useLottery } from 'state/lottery/hooks'\nimport { fetchLottery } from 'state/lottery/helpers'\nimport { LotteryStatus } from 'config/constants/types'\nimport RoundSwitcher from './RoundSwitcher'\nimport { getDrawnDate, processLotteryResponse } from '../../helpers'\nimport PreviousRoundCardBody from '../PreviousRoundCard/Body'\nimport PreviousRoundCardFooter from '../PreviousRoundCard/Footer'\n\nconst StyledCard = styled(Card)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: 756px;\n  }\n`\n\nconst StyledCardHeader = styled(CardHeader)`\n  z-index: 2;\n  background: none;\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\n`\n\nconst AllHistoryCard = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const {\n    currentLotteryId,\n    lotteriesData,\n    currentRound: { status, isLoading },\n  } = useLottery()\n  const [latestRoundId, setLatestRoundId] = useState(null)\n  const [selectedRoundId, setSelectedRoundId] = useState('')\n  const [selectedLotteryNodeData, setSelectedLotteryNodeData] = useState(null)\n  const timer = useRef(null)\n\n  const numRoundsFetched = lotteriesData?.length\n\n  useEffect(() => {\n    if (currentLotteryId) {\n      const currentLotteryIdAsInt = currentLotteryId ? parseInt(currentLotteryId) : null\n      const mostRecentFinishedRoundId =\n        status === LotteryStatus.CLAIMABLE ? currentLotteryIdAsInt : currentLotteryIdAsInt - 1\n      setLatestRoundId(mostRecentFinishedRoundId)\n      setSelectedRoundId(mostRecentFinishedRoundId.toString())\n    }\n  }, [currentLotteryId, status])\n\n  useEffect(() => {\n    setSelectedLotteryNodeData(null)\n\n    const fetchLotteryData = async () => {\n      const lotteryData = await fetchLottery(selectedRoundId)\n      const processedLotteryData = processLotteryResponse(lotteryData)\n      setSelectedLotteryNodeData(processedLotteryData)\n    }\n\n    timer.current = setInterval(() => {\n      if (selectedRoundId) {\n        fetchLotteryData()\n      }\n      clearInterval(timer.current)\n    }, 1000)\n\n    return () => clearInterval(timer.current)\n  }, [selectedRoundId, currentLotteryId, numRoundsFetched, dispatch])\n\n  const handleInputChange = (event) => {\n    const {\n      target: { value },\n    } = event\n    if (value) {\n      setSelectedRoundId(value)\n      if (parseInt(value, 10) <= 0) {\n        setSelectedRoundId('')\n      }\n      if (parseInt(value, 10) >= latestRoundId) {\n        setSelectedRoundId(latestRoundId.toString())\n      }\n    } else {\n      setSelectedRoundId('')\n    }\n  }\n\n  const handleArrowButtonPress = (targetRound) => {\n    if (targetRound) {\n      setSelectedRoundId(targetRound.toString())\n    } else {\n      // targetRound is NaN when the input is empty, the only button press that will trigger this func is 'forward one'\n      setSelectedRoundId('1')\n    }\n  }\n\n  return (\n    <StyledCard>\n      <StyledCardHeader>\n        <RoundSwitcher\n          isLoading={isLoading}\n          selectedRoundId={selectedRoundId}\n          mostRecentRound={latestRoundId}\n          handleInputChange={handleInputChange}\n          handleArrowButtonPress={handleArrowButtonPress}\n        />\n        <Box mt=\"8px\">\n          {selectedLotteryNodeData?.endTime ? (\n            <Text fontSize=\"14px\">\n              {t('Drawn')} {getDrawnDate(selectedLotteryNodeData.endTime)}\n            </Text>\n          ) : (\n            <Skeleton width=\"185px\" height=\"21px\" />\n          )}\n        </Box>\n      </StyledCardHeader>\n      <PreviousRoundCardBody lotteryNodeData={selectedLotteryNodeData} lotteryId={selectedRoundId} />\n      <PreviousRoundCardFooter lotteryNodeData={selectedLotteryNodeData} lotteryId={selectedRoundId} />\n    </StyledCard>\n  )\n}\n\nexport default AllHistoryCard\n"]},"metadata":{},"sourceType":"module"}