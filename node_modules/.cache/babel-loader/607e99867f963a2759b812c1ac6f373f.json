{"ast":null,"code":"import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React from'react';import{CardHeader,Heading,Text,Flex}from'@pancakeswap/uikit';import styled from'styled-components';import{useTranslation}from'contexts/Localization';import{TokenPairImage}from'components/TokenImage';import CakeVaultTokenPairImage from'../CakeVaultCard/CakeVaultTokenPairImage';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Wrapper=styled(CardHeader)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  background: \",\";\\n  border-radius: \",\";\\n\"])),function(_ref){var isFinished=_ref.isFinished,background=_ref.background,theme=_ref.theme;return isFinished?theme.colors.backgroundDisabled:theme.colors.gradients[background];},function(_ref2){var theme=_ref2.theme;return\"\".concat(theme.radii.card,\" \").concat(theme.radii.card,\" 0 0\");});var StyledCardHeader=function StyledCardHeader(_ref3){var earningToken=_ref3.earningToken,stakingToken=_ref3.stakingToken,_ref3$isFinished=_ref3.isFinished,isFinished=_ref3$isFinished===void 0?false:_ref3$isFinished,_ref3$isAutoVault=_ref3.isAutoVault,isAutoVault=_ref3$isAutoVault===void 0?false:_ref3$isAutoVault,_ref3$isStaking=_ref3.isStaking,isStaking=_ref3$isStaking===void 0?false:_ref3$isStaking;var _useTranslation=useTranslation(),t=_useTranslation.t;var isCakePool=earningToken.symbol==='CAKE'&&stakingToken.symbol==='CAKE';var background=isStaking?'bubblegum':'cardHeader';var getHeadingPrefix=function getHeadingPrefix(){if(isAutoVault){// vault\nreturn t('Auto');}if(isCakePool){// manual cake\nreturn t('Manual');}// all other pools\nreturn t('Earn');};var getSubHeading=function getSubHeading(){if(isAutoVault){return t('Automatic restaking');}if(isCakePool){return t('Earn CAKE, stake CAKE');}return t('Stake %symbol%',{symbol:stakingToken.symbol});};return/*#__PURE__*/_jsx(Wrapper,{isFinished:isFinished,background:background,children:/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",justifyContent:\"space-between\",children:[/*#__PURE__*/_jsxs(Flex,{flexDirection:\"column\",children:[/*#__PURE__*/_jsx(Heading,{color:isFinished?'textDisabled':'body',scale:\"lg\",children:\"\".concat(getHeadingPrefix(),\" \").concat(earningToken.symbol)}),/*#__PURE__*/_jsx(Text,{color:isFinished?'textDisabled':'textSubtle',children:getSubHeading()})]}),isAutoVault?/*#__PURE__*/_jsx(CakeVaultTokenPairImage,{width:64,height:64}):/*#__PURE__*/_jsx(TokenPairImage,{primaryToken:earningToken,secondaryToken:stakingToken,width:64,height:64})]})});};export default StyledCardHeader;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolCard/StyledCardHeader.tsx"],"names":["React","CardHeader","Heading","Text","Flex","styled","useTranslation","TokenPairImage","CakeVaultTokenPairImage","Wrapper","isFinished","background","theme","colors","backgroundDisabled","gradients","radii","card","StyledCardHeader","earningToken","stakingToken","isAutoVault","isStaking","t","isCakePool","symbol","getHeadingPrefix","getSubHeading"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { CardHeader, Heading, Text, Flex } from '@pancakeswap/uikit'\nimport { Token } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { TokenPairImage } from 'components/TokenImage'\nimport CakeVaultTokenPairImage from '../CakeVaultCard/CakeVaultTokenPairImage'\n\nconst Wrapper = styled(CardHeader)<{ isFinished?: boolean; background?: string }>`\n  background: ${({ isFinished, background, theme }) =>\n    isFinished ? theme.colors.backgroundDisabled : theme.colors.gradients[background]};\n  border-radius: ${({ theme }) => `${theme.radii.card} ${theme.radii.card} 0 0`};\n`\n\nconst StyledCardHeader: React.FC<{\n  earningToken: Token\n  stakingToken: Token\n  isAutoVault?: boolean\n  isFinished?: boolean\n  isStaking?: boolean\n}> = ({ earningToken, stakingToken, isFinished = false, isAutoVault = false, isStaking = false }) => {\n  const { t } = useTranslation()\n  const isCakePool = earningToken.symbol === 'CAKE' && stakingToken.symbol === 'CAKE'\n  const background = isStaking ? 'bubblegum' : 'cardHeader'\n\n  const getHeadingPrefix = () => {\n    if (isAutoVault) {\n      // vault\n      return t('Auto')\n    }\n    if (isCakePool) {\n      // manual cake\n      return t('Manual')\n    }\n    // all other pools\n    return t('Earn')\n  }\n\n  const getSubHeading = () => {\n    if (isAutoVault) {\n      return t('Automatic restaking')\n    }\n    if (isCakePool) {\n      return t('Earn CAKE, stake CAKE')\n    }\n    return t('Stake %symbol%', { symbol: stakingToken.symbol })\n  }\n\n  return (\n    <Wrapper isFinished={isFinished} background={background}>\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\n        <Flex flexDirection=\"column\">\n          <Heading color={isFinished ? 'textDisabled' : 'body'} scale=\"lg\">\n            {`${getHeadingPrefix()} ${earningToken.symbol}`}\n          </Heading>\n          <Text color={isFinished ? 'textDisabled' : 'textSubtle'}>{getSubHeading()}</Text>\n        </Flex>\n        {isAutoVault ? (\n          <CakeVaultTokenPairImage width={64} height={64} />\n        ) : (\n          <TokenPairImage primaryToken={earningToken} secondaryToken={stakingToken} width={64} height={64} />\n        )}\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default StyledCardHeader\n"]},"metadata":{},"sourceType":"module"}