{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$(),\n    _s6 = $RefreshSig$(),\n    _s7 = $RefreshSig$(),\n    _s8 = $RefreshSig$(),\n    _s9 = $RefreshSig$(),\n    _s10 = $RefreshSig$();\n\nimport { useEffect, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useAppDispatch } from 'state';\nimport { useWeb3React } from '@web3-react/core';\nimport BigNumber from 'bignumber.js';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { getBalanceAmount } from 'utils/formatBalance';\nimport { farmsConfig } from 'config/constants';\nimport useRefresh from 'hooks/useRefresh';\nimport { deserializeToken } from 'state/user/hooks/helpers';\nimport { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync, nonArchivedFarms } from '.';\n\nconst deserializeFarmUserData = farm => {\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO\n  };\n};\n\nconst deserializeFarm = farm => {\n  const {\n    lpAddresses,\n    lpSymbol,\n    pid,\n    dual,\n    multiplier,\n    isCommunity,\n    quoteTokenPriceBusd,\n    tokenPriceBusd\n  } = farm;\n  return {\n    lpAddresses,\n    lpSymbol,\n    pid,\n    dual,\n    multiplier,\n    isCommunity,\n    quoteTokenPriceBusd,\n    tokenPriceBusd,\n    token: deserializeToken(farm.token),\n    quoteToken: deserializeToken(farm.quoteToken),\n    userData: deserializeFarmUserData(farm),\n    tokenAmountTotal: farm.tokenAmountTotal ? new BigNumber(farm.tokenAmountTotal) : BIG_ZERO,\n    lpTotalInQuoteToken: farm.lpTotalInQuoteToken ? new BigNumber(farm.lpTotalInQuoteToken) : BIG_ZERO,\n    lpTotalSupply: farm.lpTotalSupply ? new BigNumber(farm.lpTotalSupply) : BIG_ZERO,\n    tokenPriceVsQuote: farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : BIG_ZERO,\n    poolWeight: farm.poolWeight ? new BigNumber(farm.poolWeight) : BIG_ZERO\n  };\n};\n\nexport const usePollFarmsPublicData = (includeArchive = false) => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const {\n    slowRefresh\n  } = useRefresh();\n  useEffect(() => {\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms;\n    const pids = farmsToFetch.map(farmToFetch => farmToFetch.pid);\n    dispatch(fetchFarmsPublicDataAsync(pids));\n  }, [includeArchive, dispatch, slowRefresh]);\n};\n\n_s(usePollFarmsPublicData, \"wXP7/5vEIZ/qynMYpAGvmXRZfss=\", false, function () {\n  return [useAppDispatch, useRefresh];\n});\n\nexport const usePollFarmsWithUserData = (includeArchive = false) => {\n  _s2();\n\n  const dispatch = useAppDispatch();\n  const {\n    slowRefresh\n  } = useRefresh();\n  const {\n    account\n  } = useWeb3React();\n  useEffect(() => {\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms;\n    const pids = farmsToFetch.map(farmToFetch => farmToFetch.pid);\n    dispatch(fetchFarmsPublicDataAsync(pids));\n\n    if (account) {\n      dispatch(fetchFarmUserDataAsync({\n        account,\n        pids\n      }));\n    }\n  }, [includeArchive, dispatch, slowRefresh, account]);\n};\n/**\n * Fetches the \"core\" farm data used globally\n * 251 = CAKE-BNB LP\n * 252 = BUSD-BNB LP\n */\n\n_s2(usePollFarmsWithUserData, \"GA0abdQx+3VL0XheKTRFc99Dfws=\", false, function () {\n  return [useAppDispatch, useRefresh, useWeb3React];\n});\n\nexport const usePollCoreFarmData = () => {\n  _s3();\n\n  const dispatch = useAppDispatch();\n  const {\n    fastRefresh\n  } = useRefresh();\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync([251, 252]));\n  }, [dispatch, fastRefresh]);\n};\n\n_s3(usePollCoreFarmData, \"ioW+pQi/3pF1VdJGlRLsvLuQtVc=\", false, function () {\n  return [useAppDispatch, useRefresh];\n});\n\nexport const useFarms = () => {\n  _s4();\n\n  const farms = useSelector(state => state.farms);\n  const deserializedFarmsData = farms.data.map(deserializeFarm);\n  const {\n    loadArchivedFarmsData,\n    userDataLoaded\n  } = farms;\n  return {\n    loadArchivedFarmsData,\n    userDataLoaded,\n    data: deserializedFarmsData\n  };\n};\n\n_s4(useFarms, \"40tjDYBLbzKzCIdd0cwm+UIfe9E=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmFromPid = pid => {\n  _s5();\n\n  const farm = useSelector(state => state.farms.data.find(f => f.pid === pid));\n  return deserializeFarm(farm);\n};\n\n_s5(useFarmFromPid, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmFromLpSymbol = lpSymbol => {\n  _s6();\n\n  const farm = useSelector(state => state.farms.data.find(f => f.lpSymbol === lpSymbol));\n  return deserializeFarm(farm);\n};\n\n_s6(useFarmFromLpSymbol, \"TOdL9+Oz8AEj+wmjEA7Olv/caxU=\", false, function () {\n  return [useSelector];\n});\n\nexport const useFarmUser = pid => {\n  _s7();\n\n  const {\n    userData\n  } = useFarmFromPid(pid);\n  const {\n    allowance,\n    tokenBalance,\n    stakedBalance,\n    earnings\n  } = userData;\n  return {\n    allowance,\n    tokenBalance,\n    stakedBalance,\n    earnings\n  };\n}; // Return the base token price for a farm, from a given pid\n\n_s7(useFarmUser, \"fIpQ5hn5/wFPTh6CGBDeDKNzsRQ=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const useBusdPriceFromPid = pid => {\n  _s8();\n\n  const farm = useFarmFromPid(pid);\n  return farm && new BigNumber(farm.tokenPriceBusd);\n};\n\n_s8(useBusdPriceFromPid, \"kxbBDHm0i5EJweIp+RPzOgw8PRU=\", false, function () {\n  return [useFarmFromPid];\n});\n\nexport const useLpTokenPrice = symbol => {\n  _s9();\n\n  const farm = useFarmFromLpSymbol(symbol);\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid);\n  let lpTokenPrice = BIG_ZERO;\n\n  if (farm.lpTotalSupply.gt(0) && farm.lpTotalInQuoteToken.gt(0)) {\n    // Total value of base token in LP\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal); // Double it to get overall value in LP\n\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2); // Divide total value of all tokens, by the number of LP tokens\n\n    const totalLpTokens = getBalanceAmount(farm.lpTotalSupply);\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens);\n  }\n\n  return lpTokenPrice;\n}; // /!\\ Deprecated , use the BUSD hook in /hooks\n\n_s9(useLpTokenPrice, \"+hyoswFTXS+XugOwGpb7EaPFmo4=\", false, function () {\n  return [useFarmFromLpSymbol, useBusdPriceFromPid];\n});\n\nexport const usePriceCakeBusd = () => {\n  _s10();\n\n  const cakeBnbFarm = useFarmFromPid(251);\n  const cakePriceBusdAsString = cakeBnbFarm.tokenPriceBusd;\n  const cakePriceBusd = useMemo(() => {\n    return new BigNumber(cakePriceBusdAsString);\n  }, [cakePriceBusdAsString]);\n  return cakePriceBusd;\n};\n\n_s10(usePriceCakeBusd, \"kcWwi+8tt05xa8Puqd+9ZW2RR2A=\", false, function () {\n  return [useFarmFromPid];\n});","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/farms/hooks.ts"],"names":["useEffect","useMemo","useSelector","useAppDispatch","useWeb3React","BigNumber","BIG_ZERO","getBalanceAmount","farmsConfig","useRefresh","deserializeToken","fetchFarmsPublicDataAsync","fetchFarmUserDataAsync","nonArchivedFarms","deserializeFarmUserData","farm","allowance","userData","tokenBalance","stakedBalance","earnings","deserializeFarm","lpAddresses","lpSymbol","pid","dual","multiplier","isCommunity","quoteTokenPriceBusd","tokenPriceBusd","token","quoteToken","tokenAmountTotal","lpTotalInQuoteToken","lpTotalSupply","tokenPriceVsQuote","poolWeight","usePollFarmsPublicData","includeArchive","dispatch","slowRefresh","farmsToFetch","pids","map","farmToFetch","usePollFarmsWithUserData","account","usePollCoreFarmData","fastRefresh","useFarms","farms","state","deserializedFarmsData","data","loadArchivedFarmsData","userDataLoaded","useFarmFromPid","find","f","useFarmFromLpSymbol","useFarmUser","useBusdPriceFromPid","useLpTokenPrice","symbol","farmTokenPriceInUsd","lpTokenPrice","gt","valueOfBaseTokenInFarm","times","overallValueOfAllTokensInFarm","totalLpTokens","div","usePriceCakeBusd","cakeBnbFarm","cakePriceBusdAsString","cakePriceBusd"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from 'hooks/useRefresh'\nimport { deserializeToken } from 'state/user/hooks/helpers'\nimport { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync, nonArchivedFarms } from '.'\nimport { State, SerializedFarm, DeserializedFarmUserData, DeserializedFarm, DeserializedFarmsState } from '../types'\n\nconst deserializeFarmUserData = (farm: SerializedFarm): DeserializedFarmUserData => {\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO,\n  }\n}\n\nconst deserializeFarm = (farm: SerializedFarm): DeserializedFarm => {\n  const { lpAddresses, lpSymbol, pid, dual, multiplier, isCommunity, quoteTokenPriceBusd, tokenPriceBusd } = farm\n\n  return {\n    lpAddresses,\n    lpSymbol,\n    pid,\n    dual,\n    multiplier,\n    isCommunity,\n    quoteTokenPriceBusd,\n    tokenPriceBusd,\n    token: deserializeToken(farm.token),\n    quoteToken: deserializeToken(farm.quoteToken),\n    userData: deserializeFarmUserData(farm),\n    tokenAmountTotal: farm.tokenAmountTotal ? new BigNumber(farm.tokenAmountTotal) : BIG_ZERO,\n    lpTotalInQuoteToken: farm.lpTotalInQuoteToken ? new BigNumber(farm.lpTotalInQuoteToken) : BIG_ZERO,\n    lpTotalSupply: farm.lpTotalSupply ? new BigNumber(farm.lpTotalSupply) : BIG_ZERO,\n    tokenPriceVsQuote: farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : BIG_ZERO,\n    poolWeight: farm.poolWeight ? new BigNumber(farm.poolWeight) : BIG_ZERO,\n  }\n}\n\nexport const usePollFarmsPublicData = (includeArchive = false) => {\n  const dispatch = useAppDispatch()\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\n    const pids = farmsToFetch.map((farmToFetch) => farmToFetch.pid)\n\n    dispatch(fetchFarmsPublicDataAsync(pids))\n  }, [includeArchive, dispatch, slowRefresh])\n}\n\nexport const usePollFarmsWithUserData = (includeArchive = false) => {\n  const dispatch = useAppDispatch()\n  const { slowRefresh } = useRefresh()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\n    const pids = farmsToFetch.map((farmToFetch) => farmToFetch.pid)\n\n    dispatch(fetchFarmsPublicDataAsync(pids))\n\n    if (account) {\n      dispatch(fetchFarmUserDataAsync({ account, pids }))\n    }\n  }, [includeArchive, dispatch, slowRefresh, account])\n}\n\n/**\n * Fetches the \"core\" farm data used globally\n * 251 = CAKE-BNB LP\n * 252 = BUSD-BNB LP\n */\nexport const usePollCoreFarmData = () => {\n  const dispatch = useAppDispatch()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync([251, 252]))\n  }, [dispatch, fastRefresh])\n}\n\nexport const useFarms = (): DeserializedFarmsState => {\n  const farms = useSelector((state: State) => state.farms)\n  const deserializedFarmsData = farms.data.map(deserializeFarm)\n  const { loadArchivedFarmsData, userDataLoaded } = farms\n  return {\n    loadArchivedFarmsData,\n    userDataLoaded,\n    data: deserializedFarmsData,\n  }\n}\n\nexport const useFarmFromPid = (pid: number): DeserializedFarm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return deserializeFarm(farm)\n}\n\nexport const useFarmFromLpSymbol = (lpSymbol: string): DeserializedFarm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return deserializeFarm(farm)\n}\n\nexport const useFarmUser = (pid): DeserializedFarmUserData => {\n  const { userData } = useFarmFromPid(pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = userData\n  return {\n    allowance,\n    tokenBalance,\n    stakedBalance,\n    earnings,\n  }\n}\n\n// Return the base token price for a farm, from a given pid\nexport const useBusdPriceFromPid = (pid: number): BigNumber => {\n  const farm = useFarmFromPid(pid)\n  return farm && new BigNumber(farm.tokenPriceBusd)\n}\n\nexport const useLpTokenPrice = (symbol: string) => {\n  const farm = useFarmFromLpSymbol(symbol)\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid)\n  let lpTokenPrice = BIG_ZERO\n\n  if (farm.lpTotalSupply.gt(0) && farm.lpTotalInQuoteToken.gt(0)) {\n    // Total value of base token in LP\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal)\n    // Double it to get overall value in LP\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2)\n    // Divide total value of all tokens, by the number of LP tokens\n    const totalLpTokens = getBalanceAmount(farm.lpTotalSupply)\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens)\n  }\n\n  return lpTokenPrice\n}\n\n// /!\\ Deprecated , use the BUSD hook in /hooks\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  const cakeBnbFarm = useFarmFromPid(251)\n\n  const cakePriceBusdAsString = cakeBnbFarm.tokenPriceBusd\n\n  const cakePriceBusd = useMemo(() => {\n    return new BigNumber(cakePriceBusdAsString)\n  }, [cakePriceBusdAsString])\n\n  return cakePriceBusd\n}\n"]},"metadata":{},"sourceType":"module"}