{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import Cookies from'js-cookie';import{getProfileContract}from'utils/contractHelpers';import{getTeam}from'state/teams/helpers';import{getNftApi}from'state/nftMarket/helpers';var transformProfileResponse=function transformProfileResponse(profileResponse){var userId=profileResponse[0],numberPoints=profileResponse[1],teamId=profileResponse[2],collectionAddress=profileResponse[3],tokenId=profileResponse[4],isActive=profileResponse[5];return{userId:userId.toNumber(),points:numberPoints.toNumber(),teamId:teamId.toNumber(),tokenId:tokenId.toNumber(),collectionAddress:collectionAddress,isActive:isActive};};var profileContract=getProfileContract();var profileApi=process.env.REACT_APP_API_PROFILE;export var getUsername=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(address){var response,_yield$response$json,_yield$response$json$,username;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch(\"\".concat(profileApi,\"/api/users/\").concat(address.toLowerCase()));case 3:response=_context.sent;if(response.ok){_context.next=6;break;}return _context.abrupt(\"return\",'');case 6:_context.next=8;return response.json();case 8:_yield$response$json=_context.sent;_yield$response$json$=_yield$response$json.username;username=_yield$response$json$===void 0?'':_yield$response$json$;return _context.abrupt(\"return\",username);case 14:_context.prev=14;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",'');case 17:case\"end\":return _context.stop();}}},_callee,null,[[0,14]]);}));return function getUsername(_x){return _ref.apply(this,arguments);};}();/**\n * Intended to be used for getting a profile avatar\n */export var getProfileAvatar=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address){var hasRegistered,profileResponse,_transformProfileResp,tokenId,collectionAddress,isActive,nft,_apiRes$image,_apiRes$image2,apiRes;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return profileContract.hasRegistered(address);case 3:hasRegistered=_context2.sent;if(hasRegistered){_context2.next=6;break;}return _context2.abrupt(\"return\",null);case 6:_context2.next=8;return profileContract.getUserProfile(address);case 8:profileResponse=_context2.sent;_transformProfileResp=transformProfileResponse(profileResponse),tokenId=_transformProfileResp.tokenId,collectionAddress=_transformProfileResp.collectionAddress,isActive=_transformProfileResp.isActive;nft=null;if(!isActive){_context2.next=16;break;}_context2.next=14;return getNftApi(collectionAddress,tokenId.toString());case 14:apiRes=_context2.sent;nft={tokenId:apiRes.tokenId,name:apiRes.name,collectionName:apiRes.collection.name,collectionAddress:collectionAddress,description:apiRes.description,attributes:apiRes.attributes,createdAt:apiRes.createdAt,updatedAt:apiRes.updatedAt,image:{original:(_apiRes$image=apiRes.image)===null||_apiRes$image===void 0?void 0:_apiRes$image.original,thumbnail:(_apiRes$image2=apiRes.image)===null||_apiRes$image2===void 0?void 0:_apiRes$image2.thumbnail}};case 16:return _context2.abrupt(\"return\",{nft:nft,hasRegistered:hasRegistered});case 19:_context2.prev=19;_context2.t0=_context2[\"catch\"](0);return _context2.abrupt(\"return\",{nft:null,hasRegistered:false});case 22:case\"end\":return _context2.stop();}}},_callee2,null,[[0,19]]);}));return function getProfileAvatar(_x2){return _ref2.apply(this,arguments);};}();export var getProfile=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(address){var hasRegistered,profileResponse,_transformProfileResp2,userId,points,teamId,tokenId,collectionAddress,isActive,team,username,nftToken,_apiRes$image3,_apiRes$image4,apiRes,profile;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return profileContract.hasRegistered(address);case 3:hasRegistered=_context3.sent;if(hasRegistered){_context3.next=6;break;}return _context3.abrupt(\"return\",{hasRegistered:hasRegistered,profile:null});case 6:_context3.next=8;return profileContract.getUserProfile(address);case 8:profileResponse=_context3.sent;_transformProfileResp2=transformProfileResponse(profileResponse),userId=_transformProfileResp2.userId,points=_transformProfileResp2.points,teamId=_transformProfileResp2.teamId,tokenId=_transformProfileResp2.tokenId,collectionAddress=_transformProfileResp2.collectionAddress,isActive=_transformProfileResp2.isActive;_context3.next=12;return getTeam(teamId);case 12:team=_context3.sent;_context3.next=15;return getUsername(address);case 15:username=_context3.sent;if(!isActive){_context3.next=22;break;}_context3.next=19;return getNftApi(collectionAddress,tokenId.toString());case 19:apiRes=_context3.sent;nftToken={tokenId:apiRes.tokenId,name:apiRes.name,collectionName:apiRes.collection.name,collectionAddress:collectionAddress,description:apiRes.description,attributes:apiRes.attributes,createdAt:apiRes.createdAt,updatedAt:apiRes.updatedAt,image:{original:(_apiRes$image3=apiRes.image)===null||_apiRes$image3===void 0?void 0:_apiRes$image3.original,thumbnail:(_apiRes$image4=apiRes.image)===null||_apiRes$image4===void 0?void 0:_apiRes$image4.thumbnail}};// Save the preview image in a cookie so it can be used on the exchange\nCookies.set(\"profile_\".concat(address),{username:username,avatar:\"\".concat(nftToken.image.thumbnail)},{domain:'pancakeswap.finance',secure:true,expires:30});case 22:profile={userId:userId,points:points,teamId:teamId,tokenId:tokenId,username:username,collectionAddress:collectionAddress,isActive:isActive,nft:nftToken,team:team};return _context3.abrupt(\"return\",{hasRegistered:hasRegistered,profile:profile});case 26:_context3.prev=26;_context3.t0=_context3[\"catch\"](0);console.error(_context3.t0);return _context3.abrupt(\"return\",null);case 30:case\"end\":return _context3.stop();}}},_callee3,null,[[0,26]]);}));return function getProfile(_x3){return _ref3.apply(this,arguments);};}();","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/profile/helpers.ts"],"names":["Cookies","getProfileContract","getTeam","getNftApi","transformProfileResponse","profileResponse","userId","numberPoints","teamId","collectionAddress","tokenId","isActive","toNumber","points","profileContract","profileApi","process","env","REACT_APP_API_PROFILE","getUsername","address","fetch","toLowerCase","response","ok","json","username","getProfileAvatar","hasRegistered","getUserProfile","nft","toString","apiRes","name","collectionName","collection","description","attributes","createdAt","updatedAt","image","original","thumbnail","getProfile","profile","team","nftToken","set","avatar","domain","secure","expires","console","error"],"mappings":"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","sourcesContent":["import Cookies from 'js-cookie'\nimport { Profile } from 'state/types'\nimport { GetUserProfileResponse } from 'utils/types'\nimport { getProfileContract } from 'utils/contractHelpers'\nimport { getTeam } from 'state/teams/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport { getNftApi } from 'state/nftMarket/helpers'\n\nexport interface GetProfileResponse {\n  hasRegistered: boolean\n  profile?: Profile\n}\n\nconst transformProfileResponse = (profileResponse: GetUserProfileResponse): Partial<Profile> => {\n  const { 0: userId, 1: numberPoints, 2: teamId, 3: collectionAddress, 4: tokenId, 5: isActive } = profileResponse\n\n  return {\n    userId: userId.toNumber(),\n    points: numberPoints.toNumber(),\n    teamId: teamId.toNumber(),\n    tokenId: tokenId.toNumber(),\n    collectionAddress,\n    isActive,\n  }\n}\n\nconst profileContract = getProfileContract()\nconst profileApi = process.env.REACT_APP_API_PROFILE\n\nexport const getUsername = async (address: string): Promise<string> => {\n  try {\n    const response = await fetch(`${profileApi}/api/users/${address.toLowerCase()}`)\n\n    if (!response.ok) {\n      return ''\n    }\n\n    const { username = '' } = await response.json()\n\n    return username\n  } catch (error) {\n    return ''\n  }\n}\n\n/**\n * Intended to be used for getting a profile avatar\n */\nexport const getProfileAvatar = async (address: string) => {\n  try {\n    const hasRegistered = await profileContract.hasRegistered(address)\n\n    if (!hasRegistered) {\n      return null\n    }\n\n    const profileResponse = await profileContract.getUserProfile(address)\n    const { tokenId, collectionAddress, isActive } = transformProfileResponse(profileResponse)\n\n    let nft = null\n    if (isActive) {\n      const apiRes = await getNftApi(collectionAddress, tokenId.toString())\n\n      nft = {\n        tokenId: apiRes.tokenId,\n        name: apiRes.name,\n        collectionName: apiRes.collection.name,\n        collectionAddress,\n        description: apiRes.description,\n        attributes: apiRes.attributes,\n        createdAt: apiRes.createdAt,\n        updatedAt: apiRes.updatedAt,\n        image: {\n          original: apiRes.image?.original,\n          thumbnail: apiRes.image?.thumbnail,\n        },\n      }\n    }\n\n    return { nft, hasRegistered }\n  } catch {\n    return { nft: null, hasRegistered: false }\n  }\n}\n\nexport const getProfile = async (address: string): Promise<GetProfileResponse> => {\n  try {\n    const hasRegistered = await profileContract.hasRegistered(address)\n\n    if (!hasRegistered) {\n      return { hasRegistered, profile: null }\n    }\n\n    const profileResponse = await profileContract.getUserProfile(address)\n    const { userId, points, teamId, tokenId, collectionAddress, isActive } = transformProfileResponse(profileResponse)\n    const team = await getTeam(teamId)\n    const username = await getUsername(address)\n    let nftToken: NftToken\n\n    // If the profile is not active the tokenId returns 0, which is still a valid token id\n    // so only fetch the nft data if active\n    if (isActive) {\n      const apiRes = await getNftApi(collectionAddress, tokenId.toString())\n\n      nftToken = {\n        tokenId: apiRes.tokenId,\n        name: apiRes.name,\n        collectionName: apiRes.collection.name,\n        collectionAddress,\n        description: apiRes.description,\n        attributes: apiRes.attributes,\n        createdAt: apiRes.createdAt,\n        updatedAt: apiRes.updatedAt,\n        image: {\n          original: apiRes.image?.original,\n          thumbnail: apiRes.image?.thumbnail,\n        },\n      }\n\n      // Save the preview image in a cookie so it can be used on the exchange\n      Cookies.set(\n        `profile_${address}`,\n        {\n          username,\n          avatar: `${nftToken.image.thumbnail}`,\n        },\n        { domain: 'pancakeswap.finance', secure: true, expires: 30 },\n      )\n    }\n\n    const profile = {\n      userId,\n      points,\n      teamId,\n      tokenId,\n      username,\n      collectionAddress,\n      isActive,\n      nft: nftToken,\n      team,\n    } as Profile\n\n    return { hasRegistered, profile }\n  } catch (e) {\n    console.error(e)\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"module"}