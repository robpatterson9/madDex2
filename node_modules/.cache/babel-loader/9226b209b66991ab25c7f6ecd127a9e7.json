{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Lottery/components/PreviousRoundCard/FooterExpanded.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport BigNumber from 'bignumber.js';\nimport { Flex, Skeleton, Heading, Box, Text } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport { useGetLotteryGraphDataById } from 'state/lottery/hooks';\nimport { getGraphLotteries } from 'state/lottery/getLotteriesData';\nimport { formatNumber, getBalanceNumber } from 'utils/formatBalance';\nimport Balance from 'components/Balance';\nimport RewardBrackets from '../RewardBrackets';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NextDrawWrapper = styled(Flex)`\n  background: ${({\n  theme\n}) => theme.colors.background};\n  padding: 24px;\n  flex-direction: column;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    flex-direction: row;\n  }\n`;\n_c = NextDrawWrapper;\n\nconst PreviousRoundCardFooter = ({\n  lotteryNodeData,\n  lotteryId\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [fetchedLotteryGraphData, setFetchedLotteryGraphData] = useState();\n  const lotteryGraphDataFromState = useGetLotteryGraphDataById(lotteryId);\n  const cakePriceBusd = usePriceCakeBusd();\n  useEffect(() => {\n    const getGraphData = async () => {\n      const fetchedGraphData = await getGraphLotteries(undefined, undefined, {\n        id_in: [lotteryId]\n      });\n      setFetchedLotteryGraphData(fetchedGraphData[0]);\n    };\n\n    if (!lotteryGraphDataFromState) {\n      getGraphData();\n    }\n  }, [lotteryGraphDataFromState, lotteryId]);\n  let prizeInBusd = new BigNumber(NaN);\n\n  if (lotteryNodeData) {\n    const {\n      amountCollectedInCake\n    } = lotteryNodeData;\n    prizeInBusd = amountCollectedInCake.times(cakePriceBusd);\n  }\n\n  const getTotalUsers = () => {\n    if (!lotteryGraphDataFromState && fetchedLotteryGraphData) {\n      var _fetchedLotteryGraphD;\n\n      return fetchedLotteryGraphData === null || fetchedLotteryGraphData === void 0 ? void 0 : (_fetchedLotteryGraphD = fetchedLotteryGraphData.totalUsers) === null || _fetchedLotteryGraphD === void 0 ? void 0 : _fetchedLotteryGraphD.toLocaleString();\n    }\n\n    if (lotteryGraphDataFromState) {\n      var _lotteryGraphDataFrom;\n\n      return lotteryGraphDataFromState === null || lotteryGraphDataFromState === void 0 ? void 0 : (_lotteryGraphDataFrom = lotteryGraphDataFromState.totalUsers) === null || _lotteryGraphDataFrom === void 0 ? void 0 : _lotteryGraphDataFrom.toLocaleString();\n    }\n\n    return null;\n  };\n\n  const getPrizeBalances = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [prizeInBusd.isNaN() ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        my: \"7px\",\n        height: 40,\n        width: 200\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Heading, {\n        scale: \"xl\",\n        lineHeight: \"1\",\n        color: \"secondary\",\n        children: [\"~$\", formatNumber(getBalanceNumber(prizeInBusd), 0, 0)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), prizeInBusd.isNaN() ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        my: \"2px\",\n        height: 14,\n        width: 90\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Balance, {\n        fontSize: \"14px\",\n        color: \"textSubtle\",\n        unit: \" CAKE\",\n        value: getBalanceNumber(lotteryNodeData === null || lotteryNodeData === void 0 ? void 0 : lotteryNodeData.amountCollectedInCake),\n        decimals: 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(NextDrawWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      mr: \"24px\",\n      flexDirection: \"column\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          children: t('Prize pot')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), getPrizeBalances()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mb: \"24px\",\n        children: /*#__PURE__*/_jsxDEV(Flex, {\n          children: /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"14px\",\n            display: \"inline\",\n            children: [t('Total players this round'), \":\", ' ', lotteryNodeData && (lotteryGraphDataFromState || fetchedLotteryGraphData) ? getTotalUsers() : /*#__PURE__*/_jsxDEV(Skeleton, {\n              height: 14,\n              width: 31\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RewardBrackets, {\n      lotteryNodeData: lotteryNodeData,\n      isHistoricRound: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PreviousRoundCardFooter, \"IS1IiAlpMcRc6bN1nRWHk5hVoM4=\", false, function () {\n  return [useTranslation, useGetLotteryGraphDataById, usePriceCakeBusd];\n});\n\n_c2 = PreviousRoundCardFooter;\nexport default PreviousRoundCardFooter;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"NextDrawWrapper\");\n$RefreshReg$(_c2, \"PreviousRoundCardFooter\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Lottery/components/PreviousRoundCard/FooterExpanded.tsx"],"names":["React","useState","useEffect","styled","BigNumber","Flex","Skeleton","Heading","Box","Text","useTranslation","usePriceCakeBusd","useGetLotteryGraphDataById","getGraphLotteries","formatNumber","getBalanceNumber","Balance","RewardBrackets","NextDrawWrapper","theme","colors","background","mediaQueries","sm","PreviousRoundCardFooter","lotteryNodeData","lotteryId","t","fetchedLotteryGraphData","setFetchedLotteryGraphData","lotteryGraphDataFromState","cakePriceBusd","getGraphData","fetchedGraphData","undefined","id_in","prizeInBusd","NaN","amountCollectedInCake","times","getTotalUsers","totalUsers","toLocaleString","getPrizeBalances","isNaN"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Flex, Skeleton, Heading, Box, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryRound, LotteryRoundGraphEntity } from 'state/types'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useGetLotteryGraphDataById } from 'state/lottery/hooks'\nimport { getGraphLotteries } from 'state/lottery/getLotteriesData'\nimport { formatNumber, getBalanceNumber } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport RewardBrackets from '../RewardBrackets'\n\nconst NextDrawWrapper = styled(Flex)`\n  background: ${({ theme }) => theme.colors.background};\n  padding: 24px;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n  }\n`\n\nconst PreviousRoundCardFooter: React.FC<{ lotteryNodeData: LotteryRound; lotteryId: string }> = ({\n  lotteryNodeData,\n  lotteryId,\n}) => {\n  const { t } = useTranslation()\n  const [fetchedLotteryGraphData, setFetchedLotteryGraphData] = useState<LotteryRoundGraphEntity>()\n  const lotteryGraphDataFromState = useGetLotteryGraphDataById(lotteryId)\n  const cakePriceBusd = usePriceCakeBusd()\n\n  useEffect(() => {\n    const getGraphData = async () => {\n      const fetchedGraphData = await getGraphLotteries(undefined, undefined, { id_in: [lotteryId] })\n      setFetchedLotteryGraphData(fetchedGraphData[0])\n    }\n    if (!lotteryGraphDataFromState) {\n      getGraphData()\n    }\n  }, [lotteryGraphDataFromState, lotteryId])\n\n  let prizeInBusd = new BigNumber(NaN)\n  if (lotteryNodeData) {\n    const { amountCollectedInCake } = lotteryNodeData\n    prizeInBusd = amountCollectedInCake.times(cakePriceBusd)\n  }\n\n  const getTotalUsers = (): string => {\n    if (!lotteryGraphDataFromState && fetchedLotteryGraphData) {\n      return fetchedLotteryGraphData?.totalUsers?.toLocaleString()\n    }\n\n    if (lotteryGraphDataFromState) {\n      return lotteryGraphDataFromState?.totalUsers?.toLocaleString()\n    }\n\n    return null\n  }\n\n  const getPrizeBalances = () => {\n    return (\n      <>\n        {prizeInBusd.isNaN() ? (\n          <Skeleton my=\"7px\" height={40} width={200} />\n        ) : (\n          <Heading scale=\"xl\" lineHeight=\"1\" color=\"secondary\">\n            ~${formatNumber(getBalanceNumber(prizeInBusd), 0, 0)}\n          </Heading>\n        )}\n        {prizeInBusd.isNaN() ? (\n          <Skeleton my=\"2px\" height={14} width={90} />\n        ) : (\n          <Balance\n            fontSize=\"14px\"\n            color=\"textSubtle\"\n            unit=\" CAKE\"\n            value={getBalanceNumber(lotteryNodeData?.amountCollectedInCake)}\n            decimals={0}\n          />\n        )}\n      </>\n    )\n  }\n\n  return (\n    <NextDrawWrapper>\n      <Flex mr=\"24px\" flexDirection=\"column\" justifyContent=\"space-between\">\n        <Box>\n          <Heading>{t('Prize pot')}</Heading>\n          {getPrizeBalances()}\n        </Box>\n        <Box mb=\"24px\">\n          <Flex>\n            <Text fontSize=\"14px\" display=\"inline\">\n              {t('Total players this round')}:{' '}\n              {lotteryNodeData && (lotteryGraphDataFromState || fetchedLotteryGraphData) ? (\n                getTotalUsers()\n              ) : (\n                <Skeleton height={14} width={31} />\n              )}\n            </Text>\n          </Flex>\n        </Box>\n      </Flex>\n      <RewardBrackets lotteryNodeData={lotteryNodeData} isHistoricRound />\n    </NextDrawWrapper>\n  )\n}\n\nexport default PreviousRoundCardFooter\n"]},"metadata":{},"sourceType":"module"}