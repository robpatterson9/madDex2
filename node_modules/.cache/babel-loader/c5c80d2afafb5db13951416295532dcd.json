{"ast":null,"code":"import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React from'react';import{Flex,Text,Button,IconButton,AddIcon,MinusIcon,useModal,Skeleton,useTooltip}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{getBalanceNumber}from'utils/formatBalance';import Balance from'components/Balance';import NotEnoughTokensModal from'../Modals/NotEnoughTokensModal';import StakeModal from'../Modals/StakeModal';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var StakeAction=function StakeAction(_ref){var pool=_ref.pool,stakingTokenBalance=_ref.stakingTokenBalance,stakedBalance=_ref.stakedBalance,isBnbPool=_ref.isBnbPool,isStaked=_ref.isStaked,_ref$isLoading=_ref.isLoading,isLoading=_ref$isLoading===void 0?false:_ref$isLoading;var stakingToken=pool.stakingToken,stakingTokenPrice=pool.stakingTokenPrice,stakingLimit=pool.stakingLimit,isFinished=pool.isFinished,userData=pool.userData;var _useTranslation=useTranslation(),t=_useTranslation.t;var stakedTokenBalance=getBalanceNumber(stakedBalance,stakingToken.decimals);var stakedTokenDollarBalance=getBalanceNumber(stakedBalance.multipliedBy(stakingTokenPrice),stakingToken.decimals);var _useModal=useModal(/*#__PURE__*/_jsx(NotEnoughTokensModal,{tokenSymbol:stakingToken.symbol})),_useModal2=_slicedToArray(_useModal,1),onPresentTokenRequired=_useModal2[0];var _useModal3=useModal(/*#__PURE__*/_jsx(StakeModal,{isBnbPool:isBnbPool,pool:pool,stakingTokenBalance:stakingTokenBalance,stakingTokenPrice:stakingTokenPrice})),_useModal4=_slicedToArray(_useModal3,1),onPresentStake=_useModal4[0];var _useModal5=useModal(/*#__PURE__*/_jsx(StakeModal,{stakingTokenBalance:stakingTokenBalance,isBnbPool:isBnbPool,pool:pool,stakingTokenPrice:stakingTokenPrice,isRemovingStake:true})),_useModal6=_slicedToArray(_useModal5,1),onPresentUnstake=_useModal6[0];var _useTooltip=useTooltip(t('You’ve already staked the maximum amount you can stake in this pool!'),{placement:'bottom'}),targetRef=_useTooltip.targetRef,tooltip=_useTooltip.tooltip,tooltipVisible=_useTooltip.tooltipVisible;var reachStakingLimit=stakingLimit.gt(0)&&userData.stakedBalance.gte(stakingLimit);var renderStakeAction=function renderStakeAction(){return isStaked?/*#__PURE__*/_jsxs(Flex,{justifyContent:\"space-between\",alignItems:\"center\",children:[/*#__PURE__*/_jsx(Flex,{flexDirection:\"column\",children:/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Balance,{bold:true,fontSize:\"20px\",decimals:3,value:stakedTokenBalance}),stakingTokenPrice!==0&&/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",color:\"textSubtle\",children:/*#__PURE__*/_jsx(Balance,{fontSize:\"12px\",color:\"textSubtle\",decimals:2,value:stakedTokenDollarBalance,prefix:\"~\",unit:\" USD\"})})]})}),/*#__PURE__*/_jsxs(Flex,{children:[/*#__PURE__*/_jsx(IconButton,{variant:\"secondary\",onClick:onPresentUnstake,mr:\"6px\",children:/*#__PURE__*/_jsx(MinusIcon,{color:\"primary\",width:\"24px\"})}),reachStakingLimit?/*#__PURE__*/_jsx(\"span\",{ref:targetRef,children:/*#__PURE__*/_jsx(IconButton,{variant:\"secondary\",disabled:true,children:/*#__PURE__*/_jsx(AddIcon,{color:\"textDisabled\",width:\"24px\",height:\"24px\"})})}):/*#__PURE__*/_jsx(IconButton,{variant:\"secondary\",onClick:stakingTokenBalance.gt(0)?onPresentStake:onPresentTokenRequired,disabled:isFinished,children:/*#__PURE__*/_jsx(AddIcon,{color:\"primary\",width:\"24px\",height:\"24px\"})})]}),tooltipVisible&&tooltip]}):/*#__PURE__*/_jsx(Button,{disabled:isFinished,onClick:stakingTokenBalance.gt(0)?onPresentStake:onPresentTokenRequired,children:t('Stake')});};return/*#__PURE__*/_jsx(Flex,{flexDirection:\"column\",children:isLoading?/*#__PURE__*/_jsx(Skeleton,{width:\"100%\",height:\"52px\"}):renderStakeAction()});};export default StakeAction;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolCard/CardActions/StakeActions.tsx"],"names":["React","Flex","Text","Button","IconButton","AddIcon","MinusIcon","useModal","Skeleton","useTooltip","useTranslation","getBalanceNumber","Balance","NotEnoughTokensModal","StakeModal","StakeAction","pool","stakingTokenBalance","stakedBalance","isBnbPool","isStaked","isLoading","stakingToken","stakingTokenPrice","stakingLimit","isFinished","userData","t","stakedTokenBalance","decimals","stakedTokenDollarBalance","multipliedBy","symbol","onPresentTokenRequired","onPresentStake","onPresentUnstake","placement","targetRef","tooltip","tooltipVisible","reachStakingLimit","gt","gte","renderStakeAction"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Flex, Text, Button, IconButton, AddIcon, MinusIcon, useModal, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { DeserializedPool } from 'state/types'\nimport Balance from 'components/Balance'\nimport NotEnoughTokensModal from '../Modals/NotEnoughTokensModal'\nimport StakeModal from '../Modals/StakeModal'\n\ninterface StakeActionsProps {\n  pool: DeserializedPool\n  stakingTokenBalance: BigNumber\n  stakedBalance: BigNumber\n  isBnbPool: boolean\n  isStaked: ConstrainBoolean\n  isLoading?: boolean\n}\n\nconst StakeAction: React.FC<StakeActionsProps> = ({\n  pool,\n  stakingTokenBalance,\n  stakedBalance,\n  isBnbPool,\n  isStaked,\n  isLoading = false,\n}) => {\n  const { stakingToken, stakingTokenPrice, stakingLimit, isFinished, userData } = pool\n  const { t } = useTranslation()\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t('You’ve already staked the maximum amount you can stake in this pool!'),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  const renderStakeAction = () => {\n    return isStaked ? (\n      <Flex justifyContent=\"space-between\" alignItems=\"center\">\n        <Flex flexDirection=\"column\">\n          <>\n            <Balance bold fontSize=\"20px\" decimals={3} value={stakedTokenBalance} />\n            {stakingTokenPrice !== 0 && (\n              <Text fontSize=\"12px\" color=\"textSubtle\">\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={stakedTokenDollarBalance}\n                  prefix=\"~\"\n                  unit=\" USD\"\n                />\n              </Text>\n            )}\n          </>\n        </Flex>\n        <Flex>\n          <IconButton variant=\"secondary\" onClick={onPresentUnstake} mr=\"6px\">\n            <MinusIcon color=\"primary\" width=\"24px\" />\n          </IconButton>\n          {reachStakingLimit ? (\n            <span ref={targetRef}>\n              <IconButton variant=\"secondary\" disabled>\n                <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n              </IconButton>\n            </span>\n          ) : (\n            <IconButton\n              variant=\"secondary\"\n              onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}\n              disabled={isFinished}\n            >\n              <AddIcon color=\"primary\" width=\"24px\" height=\"24px\" />\n            </IconButton>\n          )}\n        </Flex>\n        {tooltipVisible && tooltip}\n      </Flex>\n    ) : (\n      <Button disabled={isFinished} onClick={stakingTokenBalance.gt(0) ? onPresentStake : onPresentTokenRequired}>\n        {t('Stake')}\n      </Button>\n    )\n  }\n\n  return <Flex flexDirection=\"column\">{isLoading ? <Skeleton width=\"100%\" height=\"52px\" /> : renderStakeAction()}</Flex>\n}\n\nexport default StakeAction\n"]},"metadata":{},"sourceType":"module"}