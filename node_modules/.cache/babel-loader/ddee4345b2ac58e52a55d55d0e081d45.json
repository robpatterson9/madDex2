{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Farms/Farms.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback, useState, useMemo, useRef } from 'react';\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport { Image, Heading, Toggle, Text, Flex } from '@pancakeswap/uikit';\nimport { ChainId } from '@pancakeswap/sdk';\nimport styled from 'styled-components';\nimport FlexLayout from 'components/Layout/Flex';\nimport Page from 'components/Layout/Page';\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks';\nimport useIntersectionObserver from 'hooks/useIntersectionObserver';\nimport { useTranslation } from 'contexts/Localization';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { getFarmApr } from 'utils/apr';\nimport { orderBy } from 'lodash';\nimport isArchivedPid from 'utils/farmHelpers';\nimport { latinise } from 'utils/latinise';\nimport { useUserFarmStakedOnly, useUserFarmsViewMode } from 'state/user/hooks';\nimport { ViewMode } from 'state/user/actions';\nimport PageHeader from 'components/PageHeader';\nimport SearchInput from 'components/SearchInput';\nimport Select from 'components/Select/Select';\nimport Loading from 'components/Loading';\nimport FarmCard from './components/FarmCard/FarmCard';\nimport Table from './components/FarmTable/FarmTable';\nimport FarmTabButtons from './components/FarmTabButtons';\nimport ToggleView from './components/ToggleView/ToggleView';\nimport { DesktopColumnSchema } from './components/types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`;\n_c = ControlContainer;\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`;\n_c2 = ToggleWrapper;\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`;\n_c3 = LabelWrapper;\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`;\n_c4 = FilterContainer;\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`;\n_c5 = ViewControls;\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`;\n_c6 = StyledImage;\nconst NUMBER_OF_FARMS_VISIBLE = 12;\n\nconst getDisplayApr = (cakeRewardsApr, lpRewardsApr) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', {\n      maximumFractionDigits: 2\n    });\n  }\n\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', {\n      maximumFractionDigits: 2\n    });\n  }\n\n  return null;\n};\n\nconst Farms = () => {\n  _s();\n\n  const {\n    path\n  } = useRouteMatch();\n  const {\n    pathname\n  } = useLocation();\n  const {\n    t\n  } = useTranslation();\n  const {\n    data: farmsLP,\n    userDataLoaded\n  } = useFarms();\n  const cakePrice = usePriceCakeBusd();\n  const [query, setQuery] = useState('');\n  const [viewMode, setViewMode] = useUserFarmsViewMode();\n  const {\n    account\n  } = useWeb3React();\n  const [sortOption, setSortOption] = useState('hot');\n  const {\n    observerRef,\n    isIntersecting\n  } = useIntersectionObserver();\n  const chosenFarmsLength = useRef(0);\n  const isArchived = pathname.includes('archived');\n  const isInactive = pathname.includes('history');\n  const isActive = !isInactive && !isArchived;\n  usePollFarmsWithUserData(isArchived); // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n\n  const userDataReady = !account || !!account && userDataLoaded;\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive);\n  const activeFarms = farmsLP.filter(farm => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid));\n  const inactiveFarms = farmsLP.filter(farm => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid));\n  const archivedFarms = farmsLP.filter(farm => isArchivedPid(farm.pid));\n  const stakedOnlyFarms = activeFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const stakedInactiveFarms = inactiveFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const stakedArchivedFarms = archivedFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const farmsList = useCallback(farmsToDisplay => {\n    let farmsToDisplayWithAPR = farmsToDisplay.map(farm => {\n      if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\n        return farm;\n      }\n\n      const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd);\n      const {\n        cakeRewardsApr,\n        lpRewardsApr\n      } = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET]) : {\n        cakeRewardsApr: 0,\n        lpRewardsApr: 0\n      };\n      return { ...farm,\n        apr: cakeRewardsApr,\n        lpRewardsApr,\n        liquidity: totalLiquidity\n      };\n    });\n\n    if (query) {\n      const lowercaseQuery = latinise(query.toLowerCase());\n      farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter(farm => {\n        return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery);\n      });\n    }\n\n    return farmsToDisplayWithAPR;\n  }, [cakePrice, query, isActive]);\n\n  const handleChangeQuery = event => {\n    setQuery(event.target.value);\n  };\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE);\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = [];\n\n    const sortFarms = farms => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, farm => farm.apr + farm.lpRewardsApr, 'desc');\n\n        case 'multiplier':\n          return orderBy(farms, farm => farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0, 'desc');\n\n        case 'earned':\n          return orderBy(farms, farm => farm.userData ? Number(farm.userData.earnings) : 0, 'desc');\n\n        case 'liquidity':\n          return orderBy(farms, farm => Number(farm.liquidity), 'desc');\n\n        default:\n          return farms;\n      }\n    };\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms);\n    }\n\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms);\n    }\n\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms);\n    }\n\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible);\n  }, [sortOption, activeFarms, farmsList, inactiveFarms, archivedFarms, isActive, isInactive, isArchived, stakedArchivedFarms, stakedInactiveFarms, stakedOnly, stakedOnlyFarms, numberOfFarmsVisible]);\n  chosenFarmsLength.current = chosenFarmsMemoized.length;\n  useEffect(() => {\n    if (isIntersecting) {\n      setNumberOfFarmsVisible(farmsCurrentlyVisible => {\n        if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\n          return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE;\n        }\n\n        return farmsCurrentlyVisible;\n      });\n    }\n  }, [isIntersecting]);\n  const rowData = chosenFarmsMemoized.map(farm => {\n    const {\n      token,\n      quoteToken\n    } = farm;\n    const tokenAddress = token.address;\n    const quoteTokenAddress = quoteToken.address;\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '');\n    const row = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        pid: farm.pid,\n        multiplier: farm.multiplier,\n        lpLabel,\n        lpSymbol: farm.lpSymbol,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid\n      },\n      liquidity: {\n        liquidity: farm.liquidity\n      },\n      multiplier: {\n        multiplier: farm.multiplier\n      },\n      details: farm\n    };\n    return row;\n  });\n\n  const renderContent = () => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema;\n      const columns = columnSchema.map(column => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a, b) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id;\n\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value);\n              }\n\n              return 0;\n\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings;\n\n            default:\n              return 1;\n          }\n        },\n        sortable: column.sortable\n      }));\n      return /*#__PURE__*/_jsxDEV(Table, {\n        data: rowData,\n        columns: columns,\n        userDataReady: userDataReady\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(FlexLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}`,\n        children: chosenFarmsMemoized.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n          farm: farm,\n          displayApr: getDisplayApr(farm.apr, farm.lpRewardsApr),\n          cakePrice: cakePrice,\n          account: account,\n          removed: false\n        }, farm.pid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}/history`,\n        children: chosenFarmsMemoized.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n          farm: farm,\n          displayApr: getDisplayApr(farm.apr, farm.lpRewardsApr),\n          cakePrice: cakePrice,\n          account: account,\n          removed: true\n        }, farm.pid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}/archived`,\n        children: chosenFarmsMemoized.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n          farm: farm,\n          displayApr: getDisplayApr(farm.apr, farm.lpRewardsApr),\n          cakePrice: cakePrice,\n          account: account,\n          removed: true\n        }, farm.pid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this);\n  };\n\n  const handleSortOptionChange = option => {\n    setSortOption(option.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        as: \"h1\",\n        scale: \"xxl\",\n        color: \"secondary\",\n        mb: \"14px\",\n        children: t('Farms')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Heading, {\n        scale: \"lg\",\n        color: \"text\",\n        children: t('Stake LP tokens to earn.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NavLink, {\n        exact: true,\n        activeClassName: \"active\",\n        to: \"/farms/auction\",\n        id: \"lottery-pot-banner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Page, {\n      children: [/*#__PURE__*/_jsxDEV(ControlContainer, {\n        children: [/*#__PURE__*/_jsxDEV(ViewControls, {\n          children: [/*#__PURE__*/_jsxDEV(ToggleView, {\n            viewMode: viewMode,\n            onToggle: mode => setViewMode(mode)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ToggleWrapper, {\n            children: [/*#__PURE__*/_jsxDEV(Toggle, {\n              id: \"staked-only-farms\",\n              checked: stakedOnly,\n              onChange: () => setStakedOnly(!stakedOnly),\n              scale: \"sm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              children: [\" \", t('Staked only')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FarmTabButtons, {\n            hasStakeInFinishedFarms: stakedInactiveFarms.length > 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FilterContainer, {\n          children: [/*#__PURE__*/_jsxDEV(LabelWrapper, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              textTransform: \"uppercase\",\n              children: t('Sort by')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 402,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              options: [{\n                label: t('Hot'),\n                value: 'hot'\n              }, {\n                label: t('APR'),\n                value: 'apr'\n              }, {\n                label: t('Multiplier'),\n                value: 'multiplier'\n              }, {\n                label: t('Earned'),\n                value: 'earned'\n              }, {\n                label: t('Liquidity'),\n                value: 'liquidity'\n              }],\n              onOptionChange: handleSortOptionChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LabelWrapper, {\n            style: {\n              marginLeft: 16\n            },\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              textTransform: \"uppercase\",\n              children: t('Search')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SearchInput, {\n              onChange: handleChangeQuery,\n              placeholder: \"Search Farms\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this), renderContent(), account && !userDataLoaded && stakedOnly && /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 438,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: observerRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledImage, {\n        src: \"/images/decorations/3dpan.png\",\n        alt: \"Pancake illustration\",\n        width: 120,\n        height: 103\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Farms, \"WPUaxtgQB3Y6oPyWy030uzuRTO8=\", false, function () {\n  return [useRouteMatch, useLocation, useTranslation, useFarms, usePriceCakeBusd, useUserFarmsViewMode, useWeb3React, useIntersectionObserver, usePollFarmsWithUserData, useUserFarmStakedOnly];\n});\n\n_c7 = Farms;\nexport default Farms;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"ControlContainer\");\n$RefreshReg$(_c2, \"ToggleWrapper\");\n$RefreshReg$(_c3, \"LabelWrapper\");\n$RefreshReg$(_c4, \"FilterContainer\");\n$RefreshReg$(_c5, \"ViewControls\");\n$RefreshReg$(_c6, \"StyledImage\");\n$RefreshReg$(_c7, \"Farms\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Farms/Farms.tsx"],"names":["React","useEffect","useCallback","useState","useMemo","useRef","Route","useRouteMatch","useLocation","NavLink","BigNumber","useWeb3React","Image","Heading","Toggle","Text","Flex","ChainId","styled","FlexLayout","Page","useFarms","usePollFarmsWithUserData","usePriceCakeBusd","useIntersectionObserver","useTranslation","getBalanceNumber","getFarmApr","orderBy","isArchivedPid","latinise","useUserFarmStakedOnly","useUserFarmsViewMode","ViewMode","PageHeader","SearchInput","Select","Loading","FarmCard","Table","FarmTabButtons","ToggleView","DesktopColumnSchema","ControlContainer","div","theme","mediaQueries","sm","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","NUMBER_OF_FARMS_VISIBLE","getDisplayApr","cakeRewardsApr","lpRewardsApr","toLocaleString","maximumFractionDigits","Farms","path","pathname","t","data","farmsLP","userDataLoaded","cakePrice","query","setQuery","viewMode","setViewMode","account","sortOption","setSortOption","observerRef","isIntersecting","chosenFarmsLength","isArchived","includes","isInactive","isActive","userDataReady","stakedOnly","setStakedOnly","activeFarms","filter","farm","pid","multiplier","inactiveFarms","archivedFarms","stakedOnlyFarms","userData","stakedBalance","isGreaterThan","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","map","lpTotalInQuoteToken","quoteTokenPriceBusd","totalLiquidity","times","poolWeight","lpAddresses","MAINNET","apr","liquidity","lowercaseQuery","toLowerCase","lpSymbol","handleChangeQuery","event","target","value","numberOfFarmsVisible","setNumberOfFarmsVisible","chosenFarmsMemoized","chosenFarms","sortFarms","farms","Number","slice","earnings","current","length","farmsCurrentlyVisible","rowData","token","quoteToken","tokenAddress","address","quoteTokenAddress","lpLabel","split","toUpperCase","replace","row","originalValue","label","earned","details","renderContent","TABLE","columnSchema","columns","column","id","name","sort","a","b","original","sortable","handleSortOptionChange","option","mode","marginLeft"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit'\nimport { ChainId } from '@pancakeswap/sdk'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport { useFarms, usePollFarmsWithUserData, usePriceCakeBusd } from 'state/farms/hooks'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport { DeserializedFarm } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApr } from 'utils/apr'\nimport { orderBy } from 'lodash'\nimport isArchivedPid from 'utils/farmHelpers'\nimport { latinise } from 'utils/latinise'\nimport { useUserFarmStakedOnly, useUserFarmsViewMode } from 'state/user/hooks'\nimport { ViewMode } from 'state/user/actions'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport Loading from 'components/Loading'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema } from './components/types'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\nconst NUMBER_OF_FARMS_VISIBLE = 12\n\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\n  if (cakeRewardsApr && lpRewardsApr) {\n    return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }\n  return null\n}\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const { data: farmsLP, userDataLoaded } = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = useUserFarmsViewMode()\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const chosenFarmsLength = useRef(0)\n\n  const isArchived = pathname.includes('archived')\n  const isInactive = pathname.includes('history')\n  const isActive = !isInactive && !isArchived\n\n  usePollFarmsWithUserData(isArchived)\n\n  // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n  const userDataReady = !account || (!!account && userDataLoaded)\n\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedArchivedFarms = archivedFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const farmsList = useCallback(\n    (farmsToDisplay: DeserializedFarm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !farm.quoteTokenPriceBusd) {\n          return farm\n        }\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteTokenPriceBusd)\n        const { cakeRewardsApr, lpRewardsApr } = isActive\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET])\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\n\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = latinise(query.toLowerCase())\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPR\n    },\n    [cakePrice, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = []\n\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\n        case 'multiplier':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n            'desc',\n          )\n        case 'earned':\n          return orderBy(\n            farms,\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\n            'desc',\n          )\n        case 'liquidity':\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n        default:\n          return farms\n      }\n    }\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n    }\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n    }\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\n    }\n\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\n  }, [\n    sortOption,\n    activeFarms,\n    farmsList,\n    inactiveFarms,\n    archivedFarms,\n    isActive,\n    isInactive,\n    isArchived,\n    stakedArchivedFarms,\n    stakedInactiveFarms,\n    stakedOnly,\n    stakedOnlyFarms,\n    numberOfFarmsVisible,\n  ])\n\n  chosenFarmsLength.current = chosenFarmsMemoized.length\n\n  useEffect(() => {\n    if (isIntersecting) {\n      setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\n        if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\n          return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\n        }\n        return farmsCurrentlyVisible\n      })\n    }\n  }, [isIntersecting])\n\n  const rowData = chosenFarmsMemoized.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        pid: farm.pid,\n        multiplier: farm.multiplier,\n        lpLabel,\n        lpSymbol: farm.lpSymbol,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr,\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\n    }\n\n    return (\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed={false}\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/history`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n        <Route exact path={`${path}/archived`}>\n          {chosenFarmsMemoized.map((farm) => (\n            <FarmCard\n              key={farm.pid}\n              farm={farm}\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\n              cakePrice={cakePrice}\n              account={account}\n              removed\n            />\n          ))}\n        </Route>\n      </FlexLayout>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <PageHeader>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"14px\">\n          {t('Farms')}\n        </Heading>\n        <Heading scale=\"lg\" color=\"text\">\n          {t('Stake LP tokens to earn.')}\n        </Heading>\n        <NavLink exact activeClassName=\"active\" to=\"/farms/auction\" id=\"lottery-pot-banner\" />\n\n          \n     \n      \n      </PageHeader>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle\n                id=\"staked-only-farms\"\n                checked={stakedOnly}\n                onChange={() => setStakedOnly(!stakedOnly)}\n                scale=\"sm\"\n              />\n              <Text> {t('Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\n              <Select\n                options={[\n                  {\n                    label: t('Hot'),\n                    value: 'hot',\n                  },\n                  {\n                    label: t('APR'),\n                    value: 'apr',\n                  },\n                  {\n                    label: t('Multiplier'),\n                    value: 'multiplier',\n                  },\n                  {\n                    label: t('Earned'),\n                    value: 'earned',\n                  },\n                  {\n                    label: t('Liquidity'),\n                    value: 'liquidity',\n                  },\n                ]}\n                onOptionChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        {account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\">\n            <Loading />\n          </Flex>\n        )}\n        <div ref={observerRef} />\n        <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n"]},"metadata":{},"sourceType":"module"}