{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _defineProperty from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState,useCallback}from'react';import BigNumber from'bignumber.js';import{BSC_BLOCK_TIME}from'config';import{PoolIds}from'config/constants/types';import{useBlock}from'state/block/hooks';import{useLpTokenPrice}from'state/farms/hooks';import{BIG_ZERO}from'utils/bigNumber';import{multicallv2}from'utils/multicall';import ifoV1Abi from'config/abi/ifoV1.json';import{getStatus}from'../helpers';/**\n * Gets all public data of an IFO\n */var useGetPublicIfoData=function useGetPublicIfoData(ifo){var address=ifo.address,releaseBlockNumber=ifo.releaseBlockNumber;var lpTokenPriceInUsd=useLpTokenPrice(ifo.currency.symbol);var _useState=useState(_defineProperty({status:'idle',blocksRemaining:0,secondsUntilStart:0,progress:5,secondsUntilEnd:0,startBlockNum:0,endBlockNum:0,numberPoints:null},PoolIds.poolUnlimited,{raisingAmountPool:BIG_ZERO,totalAmountPool:BIG_ZERO,offeringAmountPool:BIG_ZERO,// Not know\nlimitPerUserInLP:BIG_ZERO,//  Not used\ntaxRate:0,//  Not used\nsumTaxesOverflow:BIG_ZERO//  Not used\n})),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var _useBlock=useBlock(),currentBlock=_useBlock.currentBlock;var fetchIfoData=useCallback(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var ifoCalls,_yield$multicallv,_yield$multicallv2,startBlock,endBlock,raisingAmount,totalAmount,startBlockNum,endBlockNum,status,totalBlocks,blocksRemaining,progress;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:ifoCalls=['startBlock','endBlock','raisingAmount','totalAmount'].map(function(method){return{address:address,name:method};});_context.next=3;return multicallv2(ifoV1Abi,ifoCalls);case 3:_yield$multicallv=_context.sent;_yield$multicallv2=_slicedToArray(_yield$multicallv,4);startBlock=_yield$multicallv2[0];endBlock=_yield$multicallv2[1];raisingAmount=_yield$multicallv2[2];totalAmount=_yield$multicallv2[3];startBlockNum=startBlock?startBlock[0].toNumber():0;endBlockNum=endBlock?endBlock[0].toNumber():0;status=getStatus(currentBlock,startBlockNum,endBlockNum);totalBlocks=endBlockNum-startBlockNum;blocksRemaining=endBlockNum-currentBlock;// Calculate the total progress until finished or until start\nprogress=currentBlock>startBlockNum?(currentBlock-startBlockNum)/totalBlocks*100:(currentBlock-releaseBlockNumber)/(startBlockNum-releaseBlockNumber)*100;setState(function(prev){return _defineProperty({status:status,blocksRemaining:blocksRemaining,secondsUntilStart:(startBlockNum-currentBlock)*BSC_BLOCK_TIME,progress:progress,secondsUntilEnd:blocksRemaining*BSC_BLOCK_TIME,startBlockNum:startBlockNum,endBlockNum:endBlockNum,currencyPriceInUSD:null,numberPoints:null},PoolIds.poolUnlimited,_objectSpread(_objectSpread({},prev.poolUnlimited),{},{raisingAmountPool:raisingAmount?new BigNumber(raisingAmount[0].toString()):BIG_ZERO,totalAmountPool:totalAmount?new BigNumber(totalAmount[0].toString()):BIG_ZERO}));});case 16:case\"end\":return _context.stop();}}},_callee);})),[address,currentBlock,releaseBlockNumber]);useEffect(function(){fetchIfoData();},[fetchIfoData]);return _objectSpread(_objectSpread({},state),{},{currencyPriceInUSD:lpTokenPriceInUsd,fetchIfoData:fetchIfoData});};export default useGetPublicIfoData;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Ifos/hooks/v1/useGetPublicIfoData.ts"],"names":["useEffect","useState","useCallback","BigNumber","BSC_BLOCK_TIME","PoolIds","useBlock","useLpTokenPrice","BIG_ZERO","multicallv2","ifoV1Abi","getStatus","useGetPublicIfoData","ifo","address","releaseBlockNumber","lpTokenPriceInUsd","currency","symbol","status","blocksRemaining","secondsUntilStart","progress","secondsUntilEnd","startBlockNum","endBlockNum","numberPoints","poolUnlimited","raisingAmountPool","totalAmountPool","offeringAmountPool","limitPerUserInLP","taxRate","sumTaxesOverflow","state","setState","currentBlock","fetchIfoData","ifoCalls","map","method","name","startBlock","endBlock","raisingAmount","totalAmount","toNumber","totalBlocks","prev","currencyPriceInUSD","toString"],"mappings":"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","sourcesContent":["import { useEffect, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { BSC_BLOCK_TIME } from 'config'\nimport { Ifo, IfoStatus, PoolIds } from 'config/constants/types'\nimport { useBlock } from 'state/block/hooks'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { multicallv2 } from 'utils/multicall'\nimport ifoV1Abi from 'config/abi/ifoV1.json'\nimport { PublicIfoData } from '../../types'\nimport { getStatus } from '../helpers'\n\n/**\n * Gets all public data of an IFO\n */\nconst useGetPublicIfoData = (ifo: Ifo): PublicIfoData => {\n  const { address, releaseBlockNumber } = ifo\n  const lpTokenPriceInUsd = useLpTokenPrice(ifo.currency.symbol)\n  const [state, setState] = useState({\n    status: 'idle' as IfoStatus,\n    blocksRemaining: 0,\n    secondsUntilStart: 0,\n    progress: 5,\n    secondsUntilEnd: 0,\n    startBlockNum: 0,\n    endBlockNum: 0,\n    numberPoints: null,\n    [PoolIds.poolUnlimited]: {\n      raisingAmountPool: BIG_ZERO,\n      totalAmountPool: BIG_ZERO,\n      offeringAmountPool: BIG_ZERO, // Not know\n      limitPerUserInLP: BIG_ZERO, //  Not used\n      taxRate: 0, //  Not used\n      sumTaxesOverflow: BIG_ZERO, //  Not used\n    },\n  })\n  const { currentBlock } = useBlock()\n  const fetchIfoData = useCallback(async () => {\n    const ifoCalls = ['startBlock', 'endBlock', 'raisingAmount', 'totalAmount'].map((method) => ({\n      address,\n      name: method,\n    }))\n\n    const [startBlock, endBlock, raisingAmount, totalAmount] = await multicallv2(ifoV1Abi, ifoCalls)\n\n    const startBlockNum = startBlock ? startBlock[0].toNumber() : 0\n    const endBlockNum = endBlock ? endBlock[0].toNumber() : 0\n\n    const status = getStatus(currentBlock, startBlockNum, endBlockNum)\n    const totalBlocks = endBlockNum - startBlockNum\n    const blocksRemaining = endBlockNum - currentBlock\n\n    // Calculate the total progress until finished or until start\n    const progress =\n      currentBlock > startBlockNum\n        ? ((currentBlock - startBlockNum) / totalBlocks) * 100\n        : ((currentBlock - releaseBlockNumber) / (startBlockNum - releaseBlockNumber)) * 100\n\n    setState((prev) => ({\n      status,\n      blocksRemaining,\n      secondsUntilStart: (startBlockNum - currentBlock) * BSC_BLOCK_TIME,\n      progress,\n      secondsUntilEnd: blocksRemaining * BSC_BLOCK_TIME,\n      startBlockNum,\n      endBlockNum,\n      currencyPriceInUSD: null,\n      numberPoints: null,\n      [PoolIds.poolUnlimited]: {\n        ...prev.poolUnlimited,\n        raisingAmountPool: raisingAmount ? new BigNumber(raisingAmount[0].toString()) : BIG_ZERO,\n        totalAmountPool: totalAmount ? new BigNumber(totalAmount[0].toString()) : BIG_ZERO,\n      },\n    }))\n  }, [address, currentBlock, releaseBlockNumber])\n\n  useEffect(() => {\n    fetchIfoData()\n  }, [fetchIfoData])\n\n  return { ...state, currencyPriceInUSD: lpTokenPriceInUsd, fetchIfoData }\n}\n\nexport default useGetPublicIfoData\n"]},"metadata":{},"sourceType":"module"}