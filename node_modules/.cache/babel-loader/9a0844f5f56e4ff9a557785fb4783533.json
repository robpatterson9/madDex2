{"ast":null,"code":"import numeral from'numeral';// Returns first 2 digits after first non-zero decimal\n// i.e. 0.001286 -> 0.0012, 0.9845 -> 0.98, 0.0102 -> 0.010, etc\n// Intended to be used for tokens whose value is less than $1\n// https://stackoverflow.com/a/23887837\nexport var getFirstThreeNonZeroDecimals=function getFirstThreeNonZeroDecimals(value){return value.toFixed(9).match(/^-?\\d*\\.?0*\\d{0,2}/)[0];};/**\n * This function is used to format token prices, liquidity, amount of tokens in TX, and in general any numbers on info section\n * @param amount - amount to be formatted\n * @param notation - whether to show 1M or 1,000,000\n * @param displayThreshold - threshold below which it will return simply <displayThreshold instead of actual value, e.g. if 0.001 -> returns <0.001 for 0.0005\n * @param tokenPrecision - set to true when you want precision to be 3 decimals for values < 1 and 2 decimals for values > 1\n * @param isInteger - if true the values will contain decimal part only if the amount is > 1000\n * @returns formatted string ready to be displayed\n */export var formatAmount=function formatAmount(amount,options){var _ref=options||{notation:'compact'},_ref$notation=_ref.notation,notation=_ref$notation===void 0?'compact':_ref$notation,displayThreshold=_ref.displayThreshold,tokenPrecision=_ref.tokenPrecision,isInteger=_ref.isInteger;if(amount===0){if(isInteger){return'0';}return'0.00';}if(!amount)return'-';if(displayThreshold&&amount<displayThreshold){return\"<\".concat(displayThreshold);}if(amount<1&&!tokenPrecision){return getFirstThreeNonZeroDecimals(amount);}var precision=2;if(tokenPrecision){precision=amount<1?3:2;}var format=\"0.\".concat('0'.repeat(precision),\"a\");if(notation==='standard'){format=\"0,0.\".concat('0'.repeat(precision));}if(isInteger&&amount<1000){format='0';}var amountWithPrecision=parseFloat(amount.toFixed(precision));// toUpperCase is needed cause numeral doesn't have support for capital K M B out of the box\nreturn numeral(amountWithPrecision).format(format).toUpperCase();};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Info/utils/formatInfoNumbers.ts"],"names":["numeral","getFirstThreeNonZeroDecimals","value","toFixed","match","formatAmount","amount","options","notation","displayThreshold","tokenPrecision","isInteger","precision","format","repeat","amountWithPrecision","parseFloat","toUpperCase"],"mappings":"AAAA,MAAOA,CAAAA,OAAP,KAAoB,SAApB,CAEA;AACA;AACA;AACA;AACA,MAAO,IAAMC,CAAAA,4BAA4B,CAAG,QAA/BA,CAAAA,4BAA+B,CAACC,KAAD,CAAmB,CAC7D,MAAOA,CAAAA,KAAK,CAACC,OAAN,CAAc,CAAd,EAAiBC,KAAjB,CAAuB,oBAAvB,EAA6C,CAA7C,CAAP,CACD,CAFM,CAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAC1BC,MAD0B,CAE1BC,OAF0B,CAQvB,CACH,SAA8EA,OAAO,EAAI,CAAEC,QAAQ,CAAE,SAAZ,CAAzF,oBAAQA,QAAR,CAAQA,QAAR,wBAAmB,SAAnB,eAA8BC,gBAA9B,MAA8BA,gBAA9B,CAAgDC,cAAhD,MAAgDA,cAAhD,CAAgEC,SAAhE,MAAgEA,SAAhE,CACA,GAAIL,MAAM,GAAK,CAAf,CAAkB,CAChB,GAAIK,SAAJ,CAAe,CACb,MAAO,GAAP,CACD,CACD,MAAO,MAAP,CACD,CACD,GAAI,CAACL,MAAL,CAAa,MAAO,GAAP,CACb,GAAIG,gBAAgB,EAAIH,MAAM,CAAGG,gBAAjC,CAAmD,CACjD,iBAAWA,gBAAX,EACD,CACD,GAAIH,MAAM,CAAG,CAAT,EAAc,CAACI,cAAnB,CAAmC,CACjC,MAAOT,CAAAA,4BAA4B,CAACK,MAAD,CAAnC,CACD,CAED,GAAIM,CAAAA,SAAS,CAAG,CAAhB,CACA,GAAIF,cAAJ,CAAoB,CAClBE,SAAS,CAAGN,MAAM,CAAG,CAAT,CAAa,CAAb,CAAiB,CAA7B,CACD,CAED,GAAIO,CAAAA,MAAM,aAAQ,IAAIC,MAAJ,CAAWF,SAAX,CAAR,KAAV,CAEA,GAAIJ,QAAQ,GAAK,UAAjB,CAA6B,CAC3BK,MAAM,eAAU,IAAIC,MAAJ,CAAWF,SAAX,CAAV,CAAN,CACD,CAED,GAAID,SAAS,EAAIL,MAAM,CAAG,IAA1B,CAAgC,CAC9BO,MAAM,CAAG,GAAT,CACD,CAED,GAAME,CAAAA,mBAAmB,CAAGC,UAAU,CAACV,MAAM,CAACH,OAAP,CAAeS,SAAf,CAAD,CAAtC,CAEA;AACA,MAAOZ,CAAAA,OAAO,CAACe,mBAAD,CAAP,CAA6BF,MAA7B,CAAoCA,MAApC,EAA4CI,WAA5C,EAAP,CACD,CA3CM","sourcesContent":["import numeral from 'numeral'\n\n// Returns first 2 digits after first non-zero decimal\n// i.e. 0.001286 -> 0.0012, 0.9845 -> 0.98, 0.0102 -> 0.010, etc\n// Intended to be used for tokens whose value is less than $1\n// https://stackoverflow.com/a/23887837\nexport const getFirstThreeNonZeroDecimals = (value: number) => {\n  return value.toFixed(9).match(/^-?\\d*\\.?0*\\d{0,2}/)[0]\n}\n\n/**\n * This function is used to format token prices, liquidity, amount of tokens in TX, and in general any numbers on info section\n * @param amount - amount to be formatted\n * @param notation - whether to show 1M or 1,000,000\n * @param displayThreshold - threshold below which it will return simply <displayThreshold instead of actual value, e.g. if 0.001 -> returns <0.001 for 0.0005\n * @param tokenPrecision - set to true when you want precision to be 3 decimals for values < 1 and 2 decimals for values > 1\n * @param isInteger - if true the values will contain decimal part only if the amount is > 1000\n * @returns formatted string ready to be displayed\n */\nexport const formatAmount = (\n  amount: number | undefined,\n  options?: {\n    notation?: 'compact' | 'standard'\n    displayThreshold?: number\n    tokenPrecision?: boolean\n    isInteger?: boolean\n  },\n) => {\n  const { notation = 'compact', displayThreshold, tokenPrecision, isInteger } = options || { notation: 'compact' }\n  if (amount === 0) {\n    if (isInteger) {\n      return '0'\n    }\n    return '0.00'\n  }\n  if (!amount) return '-'\n  if (displayThreshold && amount < displayThreshold) {\n    return `<${displayThreshold}`\n  }\n  if (amount < 1 && !tokenPrecision) {\n    return getFirstThreeNonZeroDecimals(amount)\n  }\n\n  let precision = 2\n  if (tokenPrecision) {\n    precision = amount < 1 ? 3 : 2\n  }\n\n  let format = `0.${'0'.repeat(precision)}a`\n\n  if (notation === 'standard') {\n    format = `0,0.${'0'.repeat(precision)}`\n  }\n\n  if (isInteger && amount < 1000) {\n    format = '0'\n  }\n\n  const amountWithPrecision = parseFloat(amount.toFixed(precision))\n\n  // toUpperCase is needed cause numeral doesn't have support for capital K M B out of the box\n  return numeral(amountWithPrecision).format(format).toUpperCase()\n}\n"]},"metadata":{},"sourceType":"module"}