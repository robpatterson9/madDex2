{"ast":null,"code":"import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import BigNumber from'bignumber.js';/**\n * Remove the '1' and reverse the digits in a lottery number retrieved from the smart contract\n */export var parseRetrievedNumber=function parseRetrievedNumber(number){var numberAsArray=number.split('');numberAsArray.splice(0,1);numberAsArray.reverse();return numberAsArray.join('');};export var getDrawnDate=function getDrawnDate(endTime){var endTimeInMs=parseInt(endTime,10)*1000;var endTimeAsDate=new Date(endTimeInMs);return endTimeAsDate.toLocaleDateString(undefined,dateTimeOptions);};export var dateOptions={year:'numeric',month:'short',day:'numeric'};export var timeOptions={hour:'numeric',minute:'numeric'};export var dateTimeOptions=_objectSpread(_objectSpread({},dateOptions),timeOptions);export var processLotteryResponse=function processLotteryResponse(lotteryData){var priceTicketInCakeAsString=lotteryData.priceTicketInCake,discountDivisorAsString=lotteryData.discountDivisor,amountCollectedInCakeAsString=lotteryData.amountCollectedInCake;var discountDivisor=new BigNumber(discountDivisorAsString);var priceTicketInCake=new BigNumber(priceTicketInCakeAsString);var amountCollectedInCake=new BigNumber(amountCollectedInCakeAsString);return{isLoading:lotteryData.isLoading,lotteryId:lotteryData.lotteryId,userTickets:lotteryData.userTickets,status:lotteryData.status,startTime:lotteryData.startTime,endTime:lotteryData.endTime,priceTicketInCake:priceTicketInCake,discountDivisor:discountDivisor,treasuryFee:lotteryData.treasuryFee,firstTicketId:lotteryData.firstTicketId,lastTicketId:lotteryData.lastTicketId,amountCollectedInCake:amountCollectedInCake,finalNumber:lotteryData.finalNumber,cakePerBracket:lotteryData.cakePerBracket,countWinnersPerBracket:lotteryData.countWinnersPerBracket,rewardsBreakdown:lotteryData.rewardsBreakdown};};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Lottery/helpers.tsx"],"names":["BigNumber","parseRetrievedNumber","number","numberAsArray","split","splice","reverse","join","getDrawnDate","endTime","endTimeInMs","parseInt","endTimeAsDate","Date","toLocaleDateString","undefined","dateTimeOptions","dateOptions","year","month","day","timeOptions","hour","minute","processLotteryResponse","lotteryData","priceTicketInCakeAsString","priceTicketInCake","discountDivisorAsString","discountDivisor","amountCollectedInCakeAsString","amountCollectedInCake","isLoading","lotteryId","userTickets","status","startTime","treasuryFee","firstTicketId","lastTicketId","finalNumber","cakePerBracket","countWinnersPerBracket","rewardsBreakdown"],"mappings":"uJAAA,MAAOA,CAAAA,SAAP,KAAsB,cAAtB,CAGA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,CAACC,MAAD,CAA4B,CAC9D,GAAMC,CAAAA,aAAa,CAAGD,MAAM,CAACE,KAAP,CAAa,EAAb,CAAtB,CACAD,aAAa,CAACE,MAAd,CAAqB,CAArB,CAAwB,CAAxB,EACAF,aAAa,CAACG,OAAd,GACA,MAAOH,CAAAA,aAAa,CAACI,IAAd,CAAmB,EAAnB,CAAP,CACD,CALM,CAOP,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,OAAD,CAAqB,CAC/C,GAAMC,CAAAA,WAAW,CAAGC,QAAQ,CAACF,OAAD,CAAU,EAAV,CAAR,CAAwB,IAA5C,CACA,GAAMG,CAAAA,aAAa,CAAG,GAAIC,CAAAA,IAAJ,CAASH,WAAT,CAAtB,CACA,MAAOE,CAAAA,aAAa,CAACE,kBAAd,CAAiCC,SAAjC,CAA4CC,eAA5C,CAAP,CACD,CAJM,CAMP,MAAO,IAAMC,CAAAA,WAAuC,CAAG,CACrDC,IAAI,CAAE,SAD+C,CAErDC,KAAK,CAAE,OAF8C,CAGrDC,GAAG,CAAE,SAHgD,CAAhD,CAMP,MAAO,IAAMC,CAAAA,WAAuC,CAAG,CACrDC,IAAI,CAAE,SAD+C,CAErDC,MAAM,CAAE,SAF6C,CAAhD,CAKP,MAAO,IAAMP,CAAAA,eAA2C,gCACnDC,WADmD,EAEnDI,WAFmD,CAAjD,CAKP,MAAO,IAAMG,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CACpCC,WADoC,CAEnB,CACjB,GACqBC,CAAAA,yBADrB,CAIID,WAJJ,CACEE,iBADF,CAEmBC,uBAFnB,CAIIH,WAJJ,CAEEI,eAFF,CAGyBC,6BAHzB,CAIIL,WAJJ,CAGEM,qBAHF,CAMA,GAAMF,CAAAA,eAAe,CAAG,GAAI7B,CAAAA,SAAJ,CAAc4B,uBAAd,CAAxB,CACA,GAAMD,CAAAA,iBAAiB,CAAG,GAAI3B,CAAAA,SAAJ,CAAc0B,yBAAd,CAA1B,CACA,GAAMK,CAAAA,qBAAqB,CAAG,GAAI/B,CAAAA,SAAJ,CAAc8B,6BAAd,CAA9B,CAEA,MAAO,CACLE,SAAS,CAAEP,WAAW,CAACO,SADlB,CAELC,SAAS,CAAER,WAAW,CAACQ,SAFlB,CAGLC,WAAW,CAAET,WAAW,CAACS,WAHpB,CAILC,MAAM,CAAEV,WAAW,CAACU,MAJf,CAKLC,SAAS,CAAEX,WAAW,CAACW,SALlB,CAML3B,OAAO,CAAEgB,WAAW,CAAChB,OANhB,CAOLkB,iBAAiB,CAAjBA,iBAPK,CAQLE,eAAe,CAAfA,eARK,CASLQ,WAAW,CAAEZ,WAAW,CAACY,WATpB,CAULC,aAAa,CAAEb,WAAW,CAACa,aAVtB,CAWLC,YAAY,CAAEd,WAAW,CAACc,YAXrB,CAYLR,qBAAqB,CAArBA,qBAZK,CAaLS,WAAW,CAAEf,WAAW,CAACe,WAbpB,CAcLC,cAAc,CAAEhB,WAAW,CAACgB,cAdvB,CAeLC,sBAAsB,CAAEjB,WAAW,CAACiB,sBAf/B,CAgBLC,gBAAgB,CAAElB,WAAW,CAACkB,gBAhBzB,CAAP,CAkBD,CA/BM","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { LotteryResponse, LotteryRound, LotteryRoundUserTickets } from 'state/types'\n\n/**\n * Remove the '1' and reverse the digits in a lottery number retrieved from the smart contract\n */\nexport const parseRetrievedNumber = (number: string): string => {\n  const numberAsArray = number.split('')\n  numberAsArray.splice(0, 1)\n  numberAsArray.reverse()\n  return numberAsArray.join('')\n}\n\nexport const getDrawnDate = (endTime: string) => {\n  const endTimeInMs = parseInt(endTime, 10) * 1000\n  const endTimeAsDate = new Date(endTimeInMs)\n  return endTimeAsDate.toLocaleDateString(undefined, dateTimeOptions)\n}\n\nexport const dateOptions: Intl.DateTimeFormatOptions = {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric',\n}\n\nexport const timeOptions: Intl.DateTimeFormatOptions = {\n  hour: 'numeric',\n  minute: 'numeric',\n}\n\nexport const dateTimeOptions: Intl.DateTimeFormatOptions = {\n  ...dateOptions,\n  ...timeOptions,\n}\n\nexport const processLotteryResponse = (\n  lotteryData: LotteryResponse & { userTickets?: LotteryRoundUserTickets },\n): LotteryRound => {\n  const {\n    priceTicketInCake: priceTicketInCakeAsString,\n    discountDivisor: discountDivisorAsString,\n    amountCollectedInCake: amountCollectedInCakeAsString,\n  } = lotteryData\n\n  const discountDivisor = new BigNumber(discountDivisorAsString)\n  const priceTicketInCake = new BigNumber(priceTicketInCakeAsString)\n  const amountCollectedInCake = new BigNumber(amountCollectedInCakeAsString)\n\n  return {\n    isLoading: lotteryData.isLoading,\n    lotteryId: lotteryData.lotteryId,\n    userTickets: lotteryData.userTickets,\n    status: lotteryData.status,\n    startTime: lotteryData.startTime,\n    endTime: lotteryData.endTime,\n    priceTicketInCake,\n    discountDivisor,\n    treasuryFee: lotteryData.treasuryFee,\n    firstTicketId: lotteryData.firstTicketId,\n    lastTicketId: lotteryData.lastTicketId,\n    amountCollectedInCake,\n    finalNumber: lotteryData.finalNumber,\n    cakePerBracket: lotteryData.cakePerBracket,\n    countWinnersPerBracket: lotteryData.countWinnersPerBracket,\n    rewardsBreakdown: lotteryData.rewardsBreakdown,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}