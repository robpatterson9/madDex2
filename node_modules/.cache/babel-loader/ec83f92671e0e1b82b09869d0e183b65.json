{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Predictions/components/RoundCard/SetPositionCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { ArrowBackIcon, Card, CardBody, CardHeader, Flex, Heading, IconButton, Button, BinanceIcon, Text, BalanceInput, Slider, Box, AutoRenewIcon } from '@pancakeswap/uikit';\nimport { ethers } from 'ethers';\nimport { parseUnits } from 'ethers/lib/utils';\nimport { useWeb3React } from '@web3-react/core';\nimport { useGetMinBetAmount } from 'state/predictions/hooks';\nimport { useTranslation } from 'contexts/Localization';\nimport { usePredictionsContract } from 'hooks/useContract';\nimport { useGetBnbBalance } from 'hooks/useTokenBalance';\nimport useToast from 'hooks/useToast';\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice';\nimport { BetPosition } from 'state/types';\nimport { formatBigNumber, formatFixedNumber } from 'utils/formatBalance';\nimport ConnectWalletButton from 'components/ConnectWalletButton';\nimport PositionTag from '../PositionTag';\nimport useSwiper from '../../hooks/useSwiper';\nimport FlexRow from '../FlexRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dust = parseUnits('0.01', 18);\nconst percentShortcuts = [10, 25, 50, 75];\n\nconst getButtonProps = (value, bnbBalance, minBetAmountBalance) => {\n  const hasSufficientBalance = () => {\n    if (value.gt(0)) {\n      return value.lte(bnbBalance);\n    }\n\n    return bnbBalance.gt(0);\n  };\n\n  if (!hasSufficientBalance()) {\n    return {\n      key: 'Insufficient BNB balance',\n      disabled: true\n    };\n  }\n\n  if (value.eq(0)) {\n    return {\n      key: 'Enter an amount',\n      disabled: true\n    };\n  }\n\n  return {\n    key: 'Confirm',\n    disabled: value.lt(minBetAmountBalance)\n  };\n};\n\nconst getValueAsEthersBn = value => {\n  const valueAsFloat = parseFloat(value);\n  return Number.isNaN(valueAsFloat) ? ethers.BigNumber.from(0) : parseUnits(value);\n};\n\nconst SetPositionCard = ({\n  position,\n  togglePosition,\n  epoch,\n  onBack,\n  onSuccess\n}) => {\n  _s();\n\n  const [value, setValue] = useState('');\n  const [isTxPending, setIsTxPending] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [percent, setPercent] = useState(0);\n  const {\n    account\n  } = useWeb3React();\n  const {\n    swiper\n  } = useSwiper();\n  const {\n    balance: bnbBalance\n  } = useGetBnbBalance();\n  const minBetAmount = useGetMinBetAmount();\n  const {\n    t\n  } = useTranslation();\n  const {\n    toastError\n  } = useToast();\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n  const predictionsContract = usePredictionsContract();\n  const maxBalance = useMemo(() => {\n    return bnbBalance.gt(dust) ? bnbBalance.sub(dust) : dust;\n  }, [bnbBalance]);\n  const balanceDisplay = formatBigNumber(bnbBalance);\n  const valueAsBn = getValueAsEthersBn(value);\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null;\n\n  const handleInputChange = input => {\n    const inputAsBn = getValueAsEthersBn(input);\n\n    if (inputAsBn.eq(0)) {\n      setPercent(0);\n    } else {\n      const inputAsFn = ethers.FixedNumber.from(inputAsBn);\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance);\n      const hundredAsFn = ethers.FixedNumber.from(100);\n      const percentage = inputAsFn.divUnsafe(maxValueAsFn).mulUnsafe(hundredAsFn);\n      const percentageAsFloat = percentage.toUnsafeFloat();\n      setPercent(percentageAsFloat > 100 ? 100 : percentageAsFloat);\n    }\n\n    setValue(input);\n  };\n\n  const handlePercentChange = sliderPercent => {\n    if (sliderPercent > 0) {\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance);\n      const hundredAsFn = ethers.FixedNumber.from(100);\n      const sliderPercentAsFn = ethers.FixedNumber.from(sliderPercent.toFixed(18)).divUnsafe(hundredAsFn);\n      const balancePercentage = maxValueAsFn.mulUnsafe(sliderPercentAsFn);\n      setValue(formatFixedNumber(balancePercentage));\n    } else {\n      setValue('');\n    }\n\n    setPercent(sliderPercent);\n  }; // Clear value\n\n\n  const handleGoBack = () => {\n    setValue('');\n    setPercent(0);\n    onBack();\n  }; // Disable the swiper events to avoid conflicts\n\n\n  const handleMouseOver = () => {\n    swiper.keyboard.disable();\n    swiper.mousewheel.disable();\n    swiper.detachEvents();\n  };\n\n  const handleMouseOut = () => {\n    swiper.keyboard.enable();\n    swiper.mousewheel.enable();\n    swiper.attachEvents();\n  };\n\n  const {\n    key,\n    disabled\n  } = getButtonProps(valueAsBn, maxBalance, minBetAmount);\n\n  const handleEnterPosition = async () => {\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear';\n\n    try {\n      const tx = await callWithGasPrice(predictionsContract, betMethod, [epoch], {\n        value: valueAsBn.toString()\n      });\n      setIsTxPending(true);\n      const receipt = await tx.wait();\n      onSuccess(receipt.transactionHash);\n    } catch {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n    } finally {\n      setIsTxPending(false);\n    }\n  }; // Warnings\n\n\n  useEffect(() => {\n    const inputAmount = getValueAsEthersBn(value);\n    const hasSufficientBalance = inputAmount.gt(0) && inputAmount.lte(maxBalance);\n\n    if (!hasSufficientBalance) {\n      setErrorMessage({\n        key: 'Insufficient BNB balance'\n      });\n    } else if (inputAmount.gt(0) && inputAmount.lt(minBetAmount)) {\n      setErrorMessage({\n        key: 'A minimum amount of %num% %token% is required',\n        data: {\n          num: formatBigNumber(minBetAmount),\n          token: 'BNB'\n        }\n      });\n    } else {\n      setErrorMessage(null);\n    }\n  }, [value, maxBalance, minBetAmount, setErrorMessage]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    onMouseOver: handleMouseOver,\n    onMouseOut: handleMouseOut,\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      p: \"16px\",\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          variant: \"text\",\n          scale: \"sm\",\n          onClick: handleGoBack,\n          mr: \"8px\",\n          children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {\n            width: \"24px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FlexRow, {\n          children: /*#__PURE__*/_jsxDEV(Heading, {\n            scale: \"md\",\n            children: t('Set Position')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PositionTag, {\n          betPosition: position,\n          onClick: togglePosition,\n          children: position === BetPosition.BULL ? t('Up') : t('Down')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n      py: \"16px\",\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        mb: \"8px\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          textAlign: \"right\",\n          color: \"textSubtle\",\n          children: [t('Commit'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(BinanceIcon, {\n            mr: \"4px  \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            bold: true,\n            textTransform: \"uppercase\",\n            children: \"BNB\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BalanceInput, {\n        value: value,\n        onUserInput: handleInputChange,\n        isWarning: showFieldWarning,\n        inputProps: {\n          disabled: !account || isTxPending\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), showFieldWarning && /*#__PURE__*/_jsxDEV(Text, {\n        color: \"failure\",\n        fontSize: \"12px\",\n        mt: \"4px\",\n        textAlign: \"right\",\n        children: t(errorMessage.key, errorMessage.data)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        textAlign: \"right\",\n        mb: \"16px\",\n        color: \"textSubtle\",\n        fontSize: \"12px\",\n        style: {\n          height: '18px'\n        },\n        children: account && t('Balance: %balance%', {\n          balance: balanceDisplay\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Slider, {\n        name: \"balance\",\n        min: 0,\n        max: 100,\n        value: percent,\n        onValueChanged: handlePercentChange,\n        valueLabel: account ? `${percent.toFixed(percent > 0 ? 1 : 0)}%` : '',\n        step: 0.01,\n        disabled: !account || isTxPending,\n        mb: \"4px\",\n        className: !account || isTxPending ? '' : 'swiper-no-swiping'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        mb: \"16px\",\n        children: [percentShortcuts.map(percentShortcut => {\n          const handleClick = () => {\n            handlePercentChange(percentShortcut);\n          };\n\n          return /*#__PURE__*/_jsxDEV(Button, {\n            scale: \"xs\",\n            variant: \"tertiary\",\n            onClick: handleClick,\n            disabled: !account || isTxPending,\n            style: {\n              flex: 1\n            },\n            children: `${percentShortcut}%`\n          }, percentShortcut, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 15\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(Button, {\n          scale: \"xs\",\n          variant: \"tertiary\",\n          onClick: () => handlePercentChange(100),\n          disabled: !account || isTxPending,\n          children: t('Max')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mb: \"8px\",\n        children: account ? /*#__PURE__*/_jsxDEV(Button, {\n          width: \"100%\",\n          disabled: !account || disabled,\n          onClick: handleEnterPosition,\n          isLoading: isTxPending,\n          endIcon: isTxPending ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n            color: \"currentColor\",\n            spin: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 38\n          }, this) : null,\n          children: t(key)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(ConnectWalletButton, {\n          width: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        fontSize: \"12px\",\n        lineHeight: 1,\n        color: \"textSubtle\",\n        children: t('You won’t be able to remove or change your position once you enter it.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SetPositionCard, \"PYwatxUp8j8SWyHnZG9jbO5Jw1Y=\", false, function () {\n  return [useWeb3React, useSwiper, useGetBnbBalance, useGetMinBetAmount, useTranslation, useToast, useCallWithGasPrice, usePredictionsContract];\n});\n\n_c = SetPositionCard;\nexport default SetPositionCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"SetPositionCard\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Predictions/components/RoundCard/SetPositionCard.tsx"],"names":["React","useEffect","useMemo","useState","ArrowBackIcon","Card","CardBody","CardHeader","Flex","Heading","IconButton","Button","BinanceIcon","Text","BalanceInput","Slider","Box","AutoRenewIcon","ethers","parseUnits","useWeb3React","useGetMinBetAmount","useTranslation","usePredictionsContract","useGetBnbBalance","useToast","useCallWithGasPrice","BetPosition","formatBigNumber","formatFixedNumber","ConnectWalletButton","PositionTag","useSwiper","FlexRow","dust","percentShortcuts","getButtonProps","value","bnbBalance","minBetAmountBalance","hasSufficientBalance","gt","lte","key","disabled","eq","lt","getValueAsEthersBn","valueAsFloat","parseFloat","Number","isNaN","BigNumber","from","SetPositionCard","position","togglePosition","epoch","onBack","onSuccess","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","percent","setPercent","account","swiper","balance","minBetAmount","t","toastError","callWithGasPrice","predictionsContract","maxBalance","sub","balanceDisplay","valueAsBn","showFieldWarning","handleInputChange","input","inputAsBn","inputAsFn","FixedNumber","maxValueAsFn","hundredAsFn","percentage","divUnsafe","mulUnsafe","percentageAsFloat","toUnsafeFloat","handlePercentChange","sliderPercent","sliderPercentAsFn","toFixed","balancePercentage","handleGoBack","handleMouseOver","keyboard","disable","mousewheel","detachEvents","handleMouseOut","enable","attachEvents","handleEnterPosition","betMethod","BULL","tx","toString","receipt","wait","transactionHash","inputAmount","data","num","token","height","map","percentShortcut","handleClick","flex"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react'\nimport {\n  ArrowBackIcon,\n  Card,\n  CardBody,\n  CardHeader,\n  Flex,\n  Heading,\n  IconButton,\n  Button,\n  BinanceIcon,\n  Text,\n  BalanceInput,\n  Slider,\n  Box,\n  AutoRenewIcon,\n} from '@pancakeswap/uikit'\nimport { ethers } from 'ethers'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { useWeb3React } from '@web3-react/core'\nimport { useGetMinBetAmount } from 'state/predictions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePredictionsContract } from 'hooks/useContract'\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport useToast from 'hooks/useToast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { BetPosition } from 'state/types'\nimport { formatBigNumber, formatFixedNumber } from 'utils/formatBalance'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport PositionTag from '../PositionTag'\nimport useSwiper from '../../hooks/useSwiper'\nimport FlexRow from '../FlexRow'\n\ninterface SetPositionCardProps {\n  position: BetPosition\n  togglePosition: () => void\n  epoch: number\n  onBack: () => void\n  onSuccess: (hash: string) => Promise<void>\n}\n\nconst dust = parseUnits('0.01', 18)\nconst percentShortcuts = [10, 25, 50, 75]\n\nconst getButtonProps = (\n  value: ethers.BigNumber,\n  bnbBalance: ethers.BigNumber,\n  minBetAmountBalance: ethers.BigNumber,\n) => {\n  const hasSufficientBalance = () => {\n    if (value.gt(0)) {\n      return value.lte(bnbBalance)\n    }\n    return bnbBalance.gt(0)\n  }\n\n  if (!hasSufficientBalance()) {\n    return { key: 'Insufficient BNB balance', disabled: true }\n  }\n\n  if (value.eq(0)) {\n    return { key: 'Enter an amount', disabled: true }\n  }\n\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\n}\n\nconst getValueAsEthersBn = (value: string) => {\n  const valueAsFloat = parseFloat(value)\n  return Number.isNaN(valueAsFloat) ? ethers.BigNumber.from(0) : parseUnits(value)\n}\n\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, epoch, onBack, onSuccess }) => {\n  const [value, setValue] = useState('')\n  const [isTxPending, setIsTxPending] = useState(false)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [percent, setPercent] = useState(0)\n\n  const { account } = useWeb3React()\n  const { swiper } = useSwiper()\n  const { balance: bnbBalance } = useGetBnbBalance()\n  const minBetAmount = useGetMinBetAmount()\n  const { t } = useTranslation()\n  const { toastError } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const predictionsContract = usePredictionsContract()\n\n  const maxBalance = useMemo(() => {\n    return bnbBalance.gt(dust) ? bnbBalance.sub(dust) : dust\n  }, [bnbBalance])\n  const balanceDisplay = formatBigNumber(bnbBalance)\n\n  const valueAsBn = getValueAsEthersBn(value)\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\n\n  const handleInputChange = (input: string) => {\n    const inputAsBn = getValueAsEthersBn(input)\n\n    if (inputAsBn.eq(0)) {\n      setPercent(0)\n    } else {\n      const inputAsFn = ethers.FixedNumber.from(inputAsBn)\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\n      const hundredAsFn = ethers.FixedNumber.from(100)\n      const percentage = inputAsFn.divUnsafe(maxValueAsFn).mulUnsafe(hundredAsFn)\n      const percentageAsFloat = percentage.toUnsafeFloat()\n\n      setPercent(percentageAsFloat > 100 ? 100 : percentageAsFloat)\n    }\n    setValue(input)\n  }\n\n  const handlePercentChange = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\n      const hundredAsFn = ethers.FixedNumber.from(100)\n      const sliderPercentAsFn = ethers.FixedNumber.from(sliderPercent.toFixed(18)).divUnsafe(hundredAsFn)\n      const balancePercentage = maxValueAsFn.mulUnsafe(sliderPercentAsFn)\n      setValue(formatFixedNumber(balancePercentage))\n    } else {\n      setValue('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  // Clear value\n  const handleGoBack = () => {\n    setValue('')\n    setPercent(0)\n    onBack()\n  }\n\n  // Disable the swiper events to avoid conflicts\n  const handleMouseOver = () => {\n    swiper.keyboard.disable()\n    swiper.mousewheel.disable()\n    swiper.detachEvents()\n  }\n\n  const handleMouseOut = () => {\n    swiper.keyboard.enable()\n    swiper.mousewheel.enable()\n    swiper.attachEvents()\n  }\n\n  const { key, disabled } = getButtonProps(valueAsBn, maxBalance, minBetAmount)\n\n  const handleEnterPosition = async () => {\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\n\n    try {\n      const tx = await callWithGasPrice(predictionsContract, betMethod, [epoch], { value: valueAsBn.toString() })\n      setIsTxPending(true)\n      const receipt = await tx.wait()\n      onSuccess(receipt.transactionHash)\n    } catch {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n    } finally {\n      setIsTxPending(false)\n    }\n  }\n\n  // Warnings\n  useEffect(() => {\n    const inputAmount = getValueAsEthersBn(value)\n    const hasSufficientBalance = inputAmount.gt(0) && inputAmount.lte(maxBalance)\n\n    if (!hasSufficientBalance) {\n      setErrorMessage({ key: 'Insufficient BNB balance' })\n    } else if (inputAmount.gt(0) && inputAmount.lt(minBetAmount)) {\n      setErrorMessage({\n        key: 'A minimum amount of %num% %token% is required',\n        data: { num: formatBigNumber(minBetAmount), token: 'BNB' },\n      })\n    } else {\n      setErrorMessage(null)\n    }\n  }, [value, maxBalance, minBetAmount, setErrorMessage])\n\n  return (\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\n      <CardHeader p=\"16px\">\n        <Flex alignItems=\"center\">\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\n            <ArrowBackIcon width=\"24px\" />\n          </IconButton>\n          <FlexRow>\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\n          </FlexRow>\n          <PositionTag betPosition={position} onClick={togglePosition}>\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\n          </PositionTag>\n        </Flex>\n      </CardHeader>\n      <CardBody py=\"16px\">\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n          <Text textAlign=\"right\" color=\"textSubtle\">\n            {t('Commit')}:\n          </Text>\n          <Flex alignItems=\"center\">\n            <BinanceIcon mr=\"4px  \" />\n            <Text bold textTransform=\"uppercase\">\n              BNB\n            </Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          onUserInput={handleInputChange}\n          isWarning={showFieldWarning}\n          inputProps={{ disabled: !account || isTxPending }}\n        />\n        {showFieldWarning && (\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\n            {t(errorMessage.key, errorMessage.data)}\n          </Text>\n        )}\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\n        </Text>\n        <Slider\n          name=\"balance\"\n          min={0}\n          max={100}\n          value={percent}\n          onValueChanged={handlePercentChange}\n          valueLabel={account ? `${percent.toFixed(percent > 0 ? 1 : 0)}%` : ''}\n          step={0.01}\n          disabled={!account || isTxPending}\n          mb=\"4px\"\n          className={!account || isTxPending ? '' : 'swiper-no-swiping'}\n        />\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\n          {percentShortcuts.map((percentShortcut) => {\n            const handleClick = () => {\n              handlePercentChange(percentShortcut)\n            }\n\n            return (\n              <Button\n                key={percentShortcut}\n                scale=\"xs\"\n                variant=\"tertiary\"\n                onClick={handleClick}\n                disabled={!account || isTxPending}\n                style={{ flex: 1 }}\n              >\n                {`${percentShortcut}%`}\n              </Button>\n            )\n          })}\n          <Button\n            scale=\"xs\"\n            variant=\"tertiary\"\n            onClick={() => handlePercentChange(100)}\n            disabled={!account || isTxPending}\n          >\n            {t('Max')}\n          </Button>\n        </Flex>\n        <Box mb=\"8px\">\n          {account ? (\n            <Button\n              width=\"100%\"\n              disabled={!account || disabled}\n              onClick={handleEnterPosition}\n              isLoading={isTxPending}\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n            >\n              {t(key)}\n            </Button>\n          ) : (\n            <ConnectWalletButton width=\"100%\" />\n          )}\n        </Box>\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\n          {t('You won’t be able to remove or change your position once you enter it.')}\n        </Text>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default SetPositionCard\n"]},"metadata":{},"sourceType":"module"}