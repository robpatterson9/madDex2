{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{Button,Heading,Skeleton,Text}from'@pancakeswap/uikit';import BigNumber from'bignumber.js';import{useWeb3React}from'@web3-react/core';import Balance from'components/Balance';import{BIG_ZERO}from'utils/bigNumber';import{getBalanceAmount}from'utils/formatBalance';import{useAppDispatch}from'state';import{fetchFarmUserDataAsync}from'state/farms';import{usePriceCakeBusd}from'state/farms/hooks';import useToast from'hooks/useToast';import{useTranslation}from'contexts/Localization';import useHarvestFarm from'../../../hooks/useHarvestFarm';import{ActionContainer,ActionTitles,ActionContent}from'./styles';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var HarvestAction=function HarvestAction(_ref){var pid=_ref.pid,userData=_ref.userData,userDataReady=_ref.userDataReady;var _useToast=useToast(),toastSuccess=_useToast.toastSuccess,toastError=_useToast.toastError;var earningsBigNumber=new BigNumber(userData.earnings);var cakePrice=usePriceCakeBusd();var earnings=BIG_ZERO;var earningsBusd=0;var displayBalance=userDataReady?earnings.toLocaleString():/*#__PURE__*/_jsx(Skeleton,{width:60});// If user didn't connect wallet default balance will be 0\nif(!earningsBigNumber.isZero()){earnings=getBalanceAmount(earningsBigNumber);earningsBusd=earnings.multipliedBy(cakePrice).toNumber();displayBalance=earnings.toFixed(3,BigNumber.ROUND_DOWN);}var _useState=useState(false),_useState2=_slicedToArray(_useState,2),pendingTx=_useState2[0],setPendingTx=_useState2[1];var _useHarvestFarm=useHarvestFarm(pid),onReward=_useHarvestFarm.onReward;var _useTranslation=useTranslation(),t=_useTranslation.t;var dispatch=useAppDispatch();var _useWeb3React=useWeb3React(),account=_useWeb3React.account;return/*#__PURE__*/_jsxs(ActionContainer,{children:[/*#__PURE__*/_jsxs(ActionTitles,{children:[/*#__PURE__*/_jsx(Text,{bold:true,textTransform:\"uppercase\",color:\"secondary\",fontSize:\"12px\",pr:\"4px\",children:\"CAKE\"}),/*#__PURE__*/_jsx(Text,{bold:true,textTransform:\"uppercase\",color:\"textSubtle\",fontSize:\"12px\",children:t('Earned')})]}),/*#__PURE__*/_jsxs(ActionContent,{children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Heading,{children:displayBalance}),earningsBusd>0&&/*#__PURE__*/_jsx(Balance,{fontSize:\"12px\",color:\"textSubtle\",decimals:2,value:earningsBusd,unit:\" USD\",prefix:\"~\"})]}),/*#__PURE__*/_jsx(Button,{disabled:earnings.eq(0)||pendingTx||!userDataReady,onClick:/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setPendingTx(true);_context.prev=1;_context.next=4;return onReward();case 4:toastSuccess(\"\".concat(t('Harvested'),\"!\"),t('Your %symbol% earnings have been sent to your wallet!',{symbol:'CAKE'}));_context.next=11;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](1);toastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));console.error(_context.t0);case 11:_context.prev=11;setPendingTx(false);return _context.finish(11);case 14:dispatch(fetchFarmUserDataAsync({account:account,pids:[pid]}));case 15:case\"end\":return _context.stop();}}},_callee,null,[[1,7,11,14]]);})),ml:\"4px\",children:t('Harvest')})]})]});};export default HarvestAction;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Farms/components/FarmTable/Actions/HarvestAction.tsx"],"names":["React","useState","Button","Heading","Skeleton","Text","BigNumber","useWeb3React","Balance","BIG_ZERO","getBalanceAmount","useAppDispatch","fetchFarmUserDataAsync","usePriceCakeBusd","useToast","useTranslation","useHarvestFarm","ActionContainer","ActionTitles","ActionContent","HarvestAction","pid","userData","userDataReady","toastSuccess","toastError","earningsBigNumber","earnings","cakePrice","earningsBusd","displayBalance","toLocaleString","isZero","multipliedBy","toNumber","toFixed","ROUND_DOWN","pendingTx","setPendingTx","onReward","t","dispatch","account","eq","symbol","console","error","pids"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport Balance from 'components/Balance'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\n\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\ninterface HarvestActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n}\n\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady }) => {\n  const { toastSuccess, toastError } = useToast()\n  const earningsBigNumber = new BigNumber(userData.earnings)\n  const cakePrice = usePriceCakeBusd()\n  let earnings = BIG_ZERO\n  let earningsBusd = 0\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\n\n  // If user didn't connect wallet default balance will be 0\n  if (!earningsBigNumber.isZero()) {\n    earnings = getBalanceAmount(earningsBigNumber)\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvestFarm(pid)\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Earned')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Heading>{displayBalance}</Heading>\n          {earningsBusd > 0 && (\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\n          )}\n        </div>\n        <Button\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\n          onClick={async () => {\n            setPendingTx(true)\n            try {\n              await onReward()\n              toastSuccess(\n                `${t('Harvested')}!`,\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\n              )\n            } catch (e) {\n              toastError(\n                t('Error'),\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\n              )\n              console.error(e)\n            } finally {\n              setPendingTx(false)\n            }\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n          }}\n          ml=\"4px\"\n        >\n          {t('Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n"]},"metadata":{},"sourceType":"module"}