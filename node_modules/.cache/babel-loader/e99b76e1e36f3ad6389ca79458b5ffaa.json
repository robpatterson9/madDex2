{"ast":null,"code":"import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState,useRef}from'react';import{useAppDispatch}from'state';import{useLottery}from'state/lottery/hooks';import{fetchCurrentLottery,setLotteryIsTransitioning}from'state/lottery';var useNextEventCountdown=function useNextEventCountdown(nextEventTime){var dispatch=useAppDispatch();var _useState=useState(null),_useState2=_slicedToArray(_useState,2),secondsRemaining=_useState2[0],setSecondsRemaining=_useState2[1];var timer=useRef(null);var _useLottery=useLottery(),currentLotteryId=_useLottery.currentLotteryId;useEffect(function(){dispatch(setLotteryIsTransitioning({isTransitioning:false}));var currentSeconds=Math.floor(Date.now()/1000);var secondsRemainingCalc=nextEventTime-currentSeconds;setSecondsRemaining(secondsRemainingCalc);timer.current=setInterval(function(){setSecondsRemaining(function(prevSecondsRemaining){// Clear current interval at end of countdown and fetch current lottery to get updated state\nif(prevSecondsRemaining<=1){clearInterval(timer.current);dispatch(setLotteryIsTransitioning({isTransitioning:true}));dispatch(fetchCurrentLottery({currentLotteryId:currentLotteryId}));}return prevSecondsRemaining-1;});},1000);return function(){return clearInterval(timer.current);};},[setSecondsRemaining,nextEventTime,currentLotteryId,timer,dispatch]);return secondsRemaining;};export default useNextEventCountdown;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Lottery/hooks/useNextEventCountdown.ts"],"names":["useEffect","useState","useRef","useAppDispatch","useLottery","fetchCurrentLottery","setLotteryIsTransitioning","useNextEventCountdown","nextEventTime","dispatch","secondsRemaining","setSecondsRemaining","timer","currentLotteryId","isTransitioning","currentSeconds","Math","floor","Date","now","secondsRemainingCalc","current","setInterval","prevSecondsRemaining","clearInterval"],"mappings":"wJAAA,OAASA,SAAT,CAAoBC,QAApB,CAA8BC,MAA9B,KAA4C,OAA5C,CACA,OAASC,cAAT,KAA+B,OAA/B,CACA,OAASC,UAAT,KAA2B,qBAA3B,CACA,OAASC,mBAAT,CAA8BC,yBAA9B,KAA+D,eAA/D,CAEA,GAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACC,aAAD,CAAmC,CAC/D,GAAMC,CAAAA,QAAQ,CAAGN,cAAc,EAA/B,CACA,cAAgDF,QAAQ,CAAC,IAAD,CAAxD,wCAAOS,gBAAP,eAAyBC,mBAAzB,eACA,GAAMC,CAAAA,KAAK,CAAGV,MAAM,CAAC,IAAD,CAApB,CACA,gBAA6BE,UAAU,EAAvC,CAAQS,gBAAR,aAAQA,gBAAR,CAEAb,SAAS,CAAC,UAAM,CACdS,QAAQ,CAACH,yBAAyB,CAAC,CAAEQ,eAAe,CAAE,KAAnB,CAAD,CAA1B,CAAR,CACA,GAAMC,CAAAA,cAAc,CAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,GAAa,IAAxB,CAAvB,CACA,GAAMC,CAAAA,oBAAoB,CAAGZ,aAAa,CAAGO,cAA7C,CACAJ,mBAAmB,CAACS,oBAAD,CAAnB,CAEAR,KAAK,CAACS,OAAN,CAAgBC,WAAW,CAAC,UAAM,CAChCX,mBAAmB,CAAC,SAACY,oBAAD,CAA0B,CAC5C;AACA,GAAIA,oBAAoB,EAAI,CAA5B,CAA+B,CAC7BC,aAAa,CAACZ,KAAK,CAACS,OAAP,CAAb,CACAZ,QAAQ,CAACH,yBAAyB,CAAC,CAAEQ,eAAe,CAAE,IAAnB,CAAD,CAA1B,CAAR,CACAL,QAAQ,CAACJ,mBAAmB,CAAC,CAAEQ,gBAAgB,CAAhBA,gBAAF,CAAD,CAApB,CAAR,CACD,CACD,MAAOU,CAAAA,oBAAoB,CAAG,CAA9B,CACD,CARkB,CAAnB,CASD,CAV0B,CAUxB,IAVwB,CAA3B,CAYA,MAAO,kBAAMC,CAAAA,aAAa,CAACZ,KAAK,CAACS,OAAP,CAAnB,EAAP,CACD,CAnBQ,CAmBN,CAACV,mBAAD,CAAsBH,aAAtB,CAAqCK,gBAArC,CAAuDD,KAAvD,CAA8DH,QAA9D,CAnBM,CAAT,CAqBA,MAAOC,CAAAA,gBAAP,CACD,CA5BD,CA8BA,cAAeH,CAAAA,qBAAf","sourcesContent":["import { useEffect, useState, useRef } from 'react'\nimport { useAppDispatch } from 'state'\nimport { useLottery } from 'state/lottery/hooks'\nimport { fetchCurrentLottery, setLotteryIsTransitioning } from 'state/lottery'\n\nconst useNextEventCountdown = (nextEventTime: number): number => {\n  const dispatch = useAppDispatch()\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\n  const timer = useRef(null)\n  const { currentLotteryId } = useLottery()\n\n  useEffect(() => {\n    dispatch(setLotteryIsTransitioning({ isTransitioning: false }))\n    const currentSeconds = Math.floor(Date.now() / 1000)\n    const secondsRemainingCalc = nextEventTime - currentSeconds\n    setSecondsRemaining(secondsRemainingCalc)\n\n    timer.current = setInterval(() => {\n      setSecondsRemaining((prevSecondsRemaining) => {\n        // Clear current interval at end of countdown and fetch current lottery to get updated state\n        if (prevSecondsRemaining <= 1) {\n          clearInterval(timer.current)\n          dispatch(setLotteryIsTransitioning({ isTransitioning: true }))\n          dispatch(fetchCurrentLottery({ currentLotteryId }))\n        }\n        return prevSecondsRemaining - 1\n      })\n    }, 1000)\n\n    return () => clearInterval(timer.current)\n  }, [setSecondsRemaining, nextEventTime, currentLotteryId, timer, dispatch])\n\n  return secondsRemaining\n}\n\nexport default useNextEventCountdown\n"]},"metadata":{},"sourceType":"module"}