{"ast":null,"code":"import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3;import React from'react';import styled from'styled-components';import{Card,CardBody,CardFooter,Flex,Skeleton,Button,LaurelLeftIcon,LaurelRightIcon,CheckmarkCircleIcon,useModal}from'@pancakeswap/uikit';import{CLAIM,OVER}from'config/constants/trading-competition/easterPhases';import ConnectWalletButton from'components/ConnectWalletButton';import{useTranslation}from'contexts/Localization';import UserPrizeGrid from'./UserPrizeGrid';import ClaimModal from'../ClaimModal';import CardUserInfo from'./CardUserInfo';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var StyledCard=styled(Card)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  \",\" {\\n    min-width: 380px;\\n  }\\n\"])),function(_ref){var theme=_ref.theme;return theme.mediaQueries.sm;});var StyledCardFooter=styled(CardFooter)(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  background: \",\";\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n\\n  svg {\\n    height: 32px;\\n    width: auto;\\n    fill: \",\";\\n  }\\n\"])),function(_ref2){var theme=_ref2.theme;return theme.card.cardHeaderBackground.default;},function(_ref3){var theme=_ref3.theme;return theme.colors.warning;});var StyledButton=styled(Button)(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  svg {\\n    margin-right: 4px;\\n    height: 20px;\\n    width: auto;\\n    fill: \",\";\\n  }\\n\"])),function(_ref4){var theme=_ref4.theme;return theme.colors.textDisabled;});var ScoreCard=function ScoreCard(_ref5){var hasRegistered=_ref5.hasRegistered,account=_ref5.account,userTradingInformation=_ref5.userTradingInformation,profile=_ref5.profile,isLoading=_ref5.isLoading,userLeaderboardInformation=_ref5.userLeaderboardInformation,currentPhase=_ref5.currentPhase,userCanClaimPrizes=_ref5.userCanClaimPrizes,finishedAndPrizesClaimed=_ref5.finishedAndPrizesClaimed,finishedAndNothingToClaim=_ref5.finishedAndNothingToClaim,onClaimSuccess=_ref5.onClaimSuccess;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useModal=useModal(/*#__PURE__*/_jsx(ClaimModal,{userTradingInformation:userTradingInformation,onClaimSuccess:onClaimSuccess}),false),_useModal2=_slicedToArray(_useModal,1),onPresentClaimModal=_useModal2[0];var isClaimButtonDisabled=Boolean(isLoading||finishedAndPrizesClaimed||finishedAndNothingToClaim);var hasUserClaimed=userTradingInformation.hasUserClaimed;var getClaimButtonText=function getClaimButtonText(){if(userCanClaimPrizes){return t('Claim prizes');}// User has already claimed prizes\nif(hasUserClaimed){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(CheckmarkCircleIcon,{}),\" \",t('Prizes Claimed!')]});}// User has nothing to claim\nreturn t('Nothing to claim');};return/*#__PURE__*/_jsxs(StyledCard,{mt:\"24px\",children:[/*#__PURE__*/_jsx(CardBody,{children:isLoading?/*#__PURE__*/_jsx(Flex,{mt:\"24px\",justifyContent:\"center\",alignItems:\"center\",children:/*#__PURE__*/_jsx(Skeleton,{width:\"100%\",height:\"60px\"})}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(CardUserInfo,{hasRegistered:hasRegistered,account:account,profile:profile,userLeaderboardInformation:userLeaderboardInformation,currentPhase:currentPhase}),hasRegistered&&(currentPhase.state===CLAIM||currentPhase.state===OVER)&&/*#__PURE__*/_jsx(UserPrizeGrid,{userTradingInformation:userTradingInformation}),!account&&/*#__PURE__*/_jsx(Flex,{mt:\"24px\",justifyContent:\"center\",children:/*#__PURE__*/_jsx(ConnectWalletButton,{})})]})}),hasRegistered&&currentPhase.state===CLAIM&&/*#__PURE__*/_jsxs(StyledCardFooter,{children:[/*#__PURE__*/_jsx(LaurelLeftIcon,{}),/*#__PURE__*/_jsx(StyledButton,{disabled:isClaimButtonDisabled,mx:\"18px\",onClick:function onClick(){return onPresentClaimModal();},children:getClaimButtonText()}),/*#__PURE__*/_jsx(LaurelRightIcon,{})]})]});};export default ScoreCard;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/TradingCompetition/components/YourScore/ScoreCard.tsx"],"names":["React","styled","Card","CardBody","CardFooter","Flex","Skeleton","Button","LaurelLeftIcon","LaurelRightIcon","CheckmarkCircleIcon","useModal","CLAIM","OVER","ConnectWalletButton","useTranslation","UserPrizeGrid","ClaimModal","CardUserInfo","StyledCard","theme","mediaQueries","sm","StyledCardFooter","card","cardHeaderBackground","default","colors","warning","StyledButton","textDisabled","ScoreCard","hasRegistered","account","userTradingInformation","profile","isLoading","userLeaderboardInformation","currentPhase","userCanClaimPrizes","finishedAndPrizesClaimed","finishedAndNothingToClaim","onClaimSuccess","t","onPresentClaimModal","isClaimButtonDisabled","Boolean","hasUserClaimed","getClaimButtonText","state"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  CardFooter,\n  Flex,\n  Skeleton,\n  Button,\n  LaurelLeftIcon,\n  LaurelRightIcon,\n  CheckmarkCircleIcon,\n  useModal,\n} from '@pancakeswap/uikit'\nimport { CLAIM, OVER } from 'config/constants/trading-competition/easterPhases'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useTranslation } from 'contexts/Localization'\nimport UserPrizeGrid from './UserPrizeGrid'\nimport ClaimModal from '../ClaimModal'\nimport { YourScoreProps } from '../../types'\nimport CardUserInfo from './CardUserInfo'\n\nconst StyledCard = styled(Card)`\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 380px;\n  }\n`\n\nconst StyledCardFooter = styled(CardFooter)`\n  background: ${({ theme }) => theme.card.cardHeaderBackground.default};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  svg {\n    height: 32px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.warning};\n  }\n`\n\nconst StyledButton = styled(Button)`\n  svg {\n    margin-right: 4px;\n    height: 20px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.textDisabled};\n  }\n`\n\nconst ScoreCard: React.FC<YourScoreProps> = ({\n  hasRegistered,\n  account,\n  userTradingInformation,\n  profile,\n  isLoading,\n  userLeaderboardInformation,\n  currentPhase,\n  userCanClaimPrizes,\n  finishedAndPrizesClaimed,\n  finishedAndNothingToClaim,\n  onClaimSuccess,\n}) => {\n  const { t } = useTranslation()\n  const [onPresentClaimModal] = useModal(\n    <ClaimModal userTradingInformation={userTradingInformation} onClaimSuccess={onClaimSuccess} />,\n    false,\n  )\n  const isClaimButtonDisabled = Boolean(isLoading || finishedAndPrizesClaimed || finishedAndNothingToClaim)\n  const { hasUserClaimed } = userTradingInformation\n\n  const getClaimButtonText = () => {\n    if (userCanClaimPrizes) {\n      return t('Claim prizes')\n    }\n    // User has already claimed prizes\n    if (hasUserClaimed) {\n      return (\n        <>\n          <CheckmarkCircleIcon /> {t('Prizes Claimed!')}\n        </>\n      )\n    }\n    // User has nothing to claim\n    return t('Nothing to claim')\n  }\n\n  return (\n    <StyledCard mt=\"24px\">\n      <CardBody>\n        {isLoading ? (\n          <Flex mt=\"24px\" justifyContent=\"center\" alignItems=\"center\">\n            <Skeleton width=\"100%\" height=\"60px\" />\n          </Flex>\n        ) : (\n          <>\n            <CardUserInfo\n              hasRegistered={hasRegistered}\n              account={account}\n              profile={profile}\n              userLeaderboardInformation={userLeaderboardInformation}\n              currentPhase={currentPhase}\n            />\n            {hasRegistered && (currentPhase.state === CLAIM || currentPhase.state === OVER) && (\n              <UserPrizeGrid userTradingInformation={userTradingInformation} />\n            )}\n            {!account && (\n              <Flex mt=\"24px\" justifyContent=\"center\">\n                <ConnectWalletButton />\n              </Flex>\n            )}\n          </>\n        )}\n      </CardBody>\n      {hasRegistered && currentPhase.state === CLAIM && (\n        <StyledCardFooter>\n          <LaurelLeftIcon />\n          <StyledButton disabled={isClaimButtonDisabled} mx=\"18px\" onClick={() => onPresentClaimModal()}>\n            {getClaimButtonText()}\n          </StyledButton>\n          <LaurelRightIcon />\n        </StyledCardFooter>\n      )}\n    </StyledCard>\n  )\n}\n\nexport default ScoreCard\n"]},"metadata":{},"sourceType":"module"}