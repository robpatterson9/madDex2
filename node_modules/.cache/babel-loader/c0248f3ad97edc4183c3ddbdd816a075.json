{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Lottery/components/ClaimPrizesModal/ClaimPrizesInner.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { Flex, Button, Text, AutoRenewIcon, PresentWonIcon } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { getBalanceAmount } from 'utils/formatBalance';\nimport { callWithEstimateGas } from 'utils/calls';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport { useLottery } from 'state/lottery/hooks';\nimport { fetchUserLotteries } from 'state/lottery';\nimport { useGasPrice } from 'state/user/hooks';\nimport { useAppDispatch } from 'state';\nimport Balance from 'components/Balance';\nimport { ToastDescriptionWithTx } from 'components/Toast';\nimport useToast from 'hooks/useToast';\nimport { useLotteryV2Contract } from 'hooks/useContract';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ClaimInnerContainer = ({\n  onSuccess,\n  roundsToClaim\n}) => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const {\n    t\n  } = useTranslation();\n  const dispatch = useAppDispatch();\n  const {\n    maxNumberTicketsPerBuyOrClaim,\n    currentLotteryId\n  } = useLottery();\n  const gasPrice = useGasPrice();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const [activeClaimIndex, setActiveClaimIndex] = useState(0);\n  const [pendingTx, setPendingTx] = useState(false);\n  const [pendingBatchClaims, setPendingBatchClaims] = useState(Math.ceil(roundsToClaim[activeClaimIndex].ticketsWithUnclaimedRewards.length / maxNumberTicketsPerBuyOrClaim.toNumber()));\n  const lotteryContract = useLotteryV2Contract();\n  const activeClaimData = roundsToClaim[activeClaimIndex];\n  const cakePriceBusd = usePriceCakeBusd();\n  const cakeReward = activeClaimData.cakeTotal;\n  const dollarReward = cakeReward.times(cakePriceBusd);\n  const rewardAsBalance = getBalanceAmount(cakeReward).toNumber();\n  const dollarRewardAsBalance = getBalanceAmount(dollarReward).toNumber();\n\n  const parseUnclaimedTicketDataForClaimCall = (ticketsWithUnclaimedRewards, lotteryId) => {\n    const ticketIds = ticketsWithUnclaimedRewards.map(ticket => {\n      return ticket.id;\n    });\n    const brackets = ticketsWithUnclaimedRewards.map(ticket => {\n      return ticket.rewardBracket;\n    });\n    return {\n      lotteryId,\n      ticketIds,\n      brackets\n    };\n  };\n\n  const claimTicketsCallData = parseUnclaimedTicketDataForClaimCall(activeClaimData.ticketsWithUnclaimedRewards, activeClaimData.roundId);\n  const shouldBatchRequest = maxNumberTicketsPerBuyOrClaim.lt(claimTicketsCallData.ticketIds.length);\n\n  const handleProgressToNextClaim = () => {\n    if (roundsToClaim.length > activeClaimIndex + 1) {\n      // If there are still rounds to claim, move onto the next claim\n      setActiveClaimIndex(activeClaimIndex + 1);\n      dispatch(fetchUserLotteries({\n        account,\n        currentLotteryId\n      }));\n    } else {\n      onSuccess();\n    }\n  };\n\n  const getTicketBatches = (ticketIds, brackets) => {\n    const requests = [];\n    const maxAsNumber = maxNumberTicketsPerBuyOrClaim.toNumber();\n\n    for (let i = 0; i < ticketIds.length; i += maxAsNumber) {\n      const ticketIdsSlice = ticketIds.slice(i, maxAsNumber + i);\n      const bracketsSlice = brackets.slice(i, maxAsNumber + i);\n      requests.push({\n        ticketIds: ticketIdsSlice,\n        brackets: bracketsSlice\n      });\n    }\n\n    return requests;\n  };\n\n  const handleClaim = async () => {\n    const {\n      lotteryId,\n      ticketIds,\n      brackets\n    } = claimTicketsCallData;\n    setPendingTx(true);\n\n    try {\n      const tx = await callWithEstimateGas(lotteryContract, 'claimTickets', [lotteryId, ticketIds, brackets], {\n        gasPrice\n      });\n      const receipt = await tx.wait();\n\n      if (receipt.status) {\n        toastSuccess(t('Prizes Collected!'), /*#__PURE__*/_jsxDEV(ToastDescriptionWithTx, {\n          txHash: receipt.transactionHash,\n          children: t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', {\n            lotteryId\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this));\n        setPendingTx(false);\n        handleProgressToNextClaim();\n      }\n    } catch (error) {\n      console.error(error);\n      toastError(t('Error'), t('%error% - Please try again.', {\n        error: error.message\n      }));\n      setPendingTx(false);\n    }\n  };\n\n  const handleBatchClaim = async () => {\n    const {\n      lotteryId,\n      ticketIds,\n      brackets\n    } = claimTicketsCallData;\n    const ticketBatches = getTicketBatches(ticketIds, brackets);\n    const transactionsToFire = ticketBatches.length;\n    const receipts = [];\n    setPendingTx(true); // eslint-disable-next-line no-restricted-syntax\n\n    for (const ticketBatch of ticketBatches) {\n      try {\n        /* eslint-disable no-await-in-loop */\n        const tx = await callWithEstimateGas(lotteryContract, 'claimTickets', [lotteryId, ticketBatch.ticketIds, ticketBatch.brackets], {\n          gasPrice\n        });\n        const receipt = await tx.wait();\n        /* eslint-enable no-await-in-loop */\n\n        if (receipt.status) {\n          // One transaction within batch has succeeded\n          receipts.push(receipt);\n          setPendingBatchClaims(transactionsToFire - receipts.length); // More transactions are to be done within the batch. Issue toast to give user feedback.\n\n          if (receipts.length !== transactionsToFire) {\n            toastSuccess(t('Prizes Collected!'), /*#__PURE__*/_jsxDEV(ToastDescriptionWithTx, {\n              txHash: receipt.transactionHash,\n              children: t('Claim %claimNum% of %claimTotal% for round %lotteryId% was successful. Please confirm the next transaction', {\n                claimNum: receipts.length,\n                claimTotal: transactionsToFire,\n                lotteryId\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this));\n          }\n        }\n      } catch (error) {\n        console.error(error);\n        setPendingTx(false);\n        toastError(t('Error'), t('%error% - Please try again.', {\n          error: error.message\n        }));\n        break;\n      }\n    } // Batch is finished\n\n\n    if (receipts.length === transactionsToFire) {\n      setPendingTx(false);\n      toastSuccess(t('Prizes Collected!'), t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', {\n        lotteryId\n      }));\n      handleProgressToNextClaim();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        mb: \"4px\",\n        textAlign: ['center', null, 'left'],\n        children: t('You won')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: ['flex-start', null, 'center'],\n        justifyContent: ['flex-start', null, 'space-between'],\n        flexDirection: ['column', null, 'row'],\n        children: [/*#__PURE__*/_jsxDEV(Balance, {\n          textAlign: ['center', null, 'left'],\n          lineHeight: \"1.1\",\n          value: rewardAsBalance,\n          fontSize: \"44px\",\n          bold: true,\n          color: \"secondary\",\n          unit: \" CAKE!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PresentWonIcon, {\n          ml: ['0', null, '12px'],\n          width: \"64px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Balance, {\n        mt: ['12px', null, '0'],\n        textAlign: ['center', null, 'left'],\n        value: dollarRewardAsBalance,\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        unit: \" USD\",\n        prefix: \"~\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        mt: \"8px\",\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        children: [t('Round'), \" #\", activeClaimData.roundId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        isLoading: pendingTx,\n        endIcon: pendingTx ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n          spin: true,\n          color: \"currentColor\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 32\n        }, this) : null,\n        mt: \"20px\",\n        width: \"100%\",\n        onClick: () => shouldBatchRequest ? handleBatchClaim() : handleClaim(),\n        children: [pendingTx ? t('Claiming') : t('Claim'), \" \", pendingBatchClaims > 1 ? `(${pendingBatchClaims})` : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ClaimInnerContainer, \"I8DFtGgBFTIUeVT8PuHkNmnwZXg=\", false, function () {\n  return [useWeb3React, useTranslation, useAppDispatch, useLottery, useGasPrice, useToast, useLotteryV2Contract, usePriceCakeBusd];\n});\n\n_c = ClaimInnerContainer;\nexport default ClaimInnerContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimInnerContainer\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Lottery/components/ClaimPrizesModal/ClaimPrizesInner.tsx"],"names":["React","useState","useWeb3React","Flex","Button","Text","AutoRenewIcon","PresentWonIcon","useTranslation","getBalanceAmount","callWithEstimateGas","usePriceCakeBusd","useLottery","fetchUserLotteries","useGasPrice","useAppDispatch","Balance","ToastDescriptionWithTx","useToast","useLotteryV2Contract","ClaimInnerContainer","onSuccess","roundsToClaim","account","t","dispatch","maxNumberTicketsPerBuyOrClaim","currentLotteryId","gasPrice","toastSuccess","toastError","activeClaimIndex","setActiveClaimIndex","pendingTx","setPendingTx","pendingBatchClaims","setPendingBatchClaims","Math","ceil","ticketsWithUnclaimedRewards","length","toNumber","lotteryContract","activeClaimData","cakePriceBusd","cakeReward","cakeTotal","dollarReward","times","rewardAsBalance","dollarRewardAsBalance","parseUnclaimedTicketDataForClaimCall","lotteryId","ticketIds","map","ticket","id","brackets","rewardBracket","claimTicketsCallData","roundId","shouldBatchRequest","lt","handleProgressToNextClaim","getTicketBatches","requests","maxAsNumber","i","ticketIdsSlice","slice","bracketsSlice","push","handleClaim","tx","receipt","wait","status","transactionHash","error","console","message","handleBatchClaim","ticketBatches","transactionsToFire","receipts","ticketBatch","claimNum","claimTotal"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex, Button, Text, AutoRenewIcon, PresentWonIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryTicket, LotteryTicketClaimData } from 'config/constants/types'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { callWithEstimateGas } from 'utils/calls'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useLottery } from 'state/lottery/hooks'\nimport { fetchUserLotteries } from 'state/lottery'\nimport { useGasPrice } from 'state/user/hooks'\nimport { useAppDispatch } from 'state'\nimport Balance from 'components/Balance'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport useToast from 'hooks/useToast'\nimport { useLotteryV2Contract } from 'hooks/useContract'\n\ninterface ClaimInnerProps {\n  roundsToClaim: LotteryTicketClaimData[]\n  onSuccess?: () => void\n}\n\nconst ClaimInnerContainer: React.FC<ClaimInnerProps> = ({ onSuccess, roundsToClaim }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { maxNumberTicketsPerBuyOrClaim, currentLotteryId } = useLottery()\n  const gasPrice = useGasPrice()\n  const { toastSuccess, toastError } = useToast()\n  const [activeClaimIndex, setActiveClaimIndex] = useState(0)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [pendingBatchClaims, setPendingBatchClaims] = useState(\n    Math.ceil(\n      roundsToClaim[activeClaimIndex].ticketsWithUnclaimedRewards.length / maxNumberTicketsPerBuyOrClaim.toNumber(),\n    ),\n  )\n  const lotteryContract = useLotteryV2Contract()\n  const activeClaimData = roundsToClaim[activeClaimIndex]\n\n  const cakePriceBusd = usePriceCakeBusd()\n  const cakeReward = activeClaimData.cakeTotal\n  const dollarReward = cakeReward.times(cakePriceBusd)\n  const rewardAsBalance = getBalanceAmount(cakeReward).toNumber()\n  const dollarRewardAsBalance = getBalanceAmount(dollarReward).toNumber()\n\n  const parseUnclaimedTicketDataForClaimCall = (ticketsWithUnclaimedRewards: LotteryTicket[], lotteryId: string) => {\n    const ticketIds = ticketsWithUnclaimedRewards.map((ticket) => {\n      return ticket.id\n    })\n    const brackets = ticketsWithUnclaimedRewards.map((ticket) => {\n      return ticket.rewardBracket\n    })\n    return { lotteryId, ticketIds, brackets }\n  }\n\n  const claimTicketsCallData = parseUnclaimedTicketDataForClaimCall(\n    activeClaimData.ticketsWithUnclaimedRewards,\n    activeClaimData.roundId,\n  )\n\n  const shouldBatchRequest = maxNumberTicketsPerBuyOrClaim.lt(claimTicketsCallData.ticketIds.length)\n\n  const handleProgressToNextClaim = () => {\n    if (roundsToClaim.length > activeClaimIndex + 1) {\n      // If there are still rounds to claim, move onto the next claim\n      setActiveClaimIndex(activeClaimIndex + 1)\n      dispatch(fetchUserLotteries({ account, currentLotteryId }))\n    } else {\n      onSuccess()\n    }\n  }\n\n  const getTicketBatches = (ticketIds: string[], brackets: number[]): { ticketIds: string[]; brackets: number[] }[] => {\n    const requests = []\n    const maxAsNumber = maxNumberTicketsPerBuyOrClaim.toNumber()\n\n    for (let i = 0; i < ticketIds.length; i += maxAsNumber) {\n      const ticketIdsSlice = ticketIds.slice(i, maxAsNumber + i)\n      const bracketsSlice = brackets.slice(i, maxAsNumber + i)\n      requests.push({ ticketIds: ticketIdsSlice, brackets: bracketsSlice })\n    }\n\n    return requests\n  }\n\n  const handleClaim = async () => {\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\n    setPendingTx(true)\n    try {\n      const tx = await callWithEstimateGas(lotteryContract, 'claimTickets', [lotteryId, ticketIds, brackets], {\n        gasPrice,\n      })\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        toastSuccess(\n          t('Prizes Collected!'),\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n            {t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', { lotteryId })}\n          </ToastDescriptionWithTx>,\n        )\n        setPendingTx(false)\n        handleProgressToNextClaim()\n      }\n    } catch (error) {\n      console.error(error)\n      toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n      setPendingTx(false)\n    }\n  }\n\n  const handleBatchClaim = async () => {\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\n    const ticketBatches = getTicketBatches(ticketIds, brackets)\n    const transactionsToFire = ticketBatches.length\n    const receipts = []\n    setPendingTx(true)\n    // eslint-disable-next-line no-restricted-syntax\n    for (const ticketBatch of ticketBatches) {\n      try {\n        /* eslint-disable no-await-in-loop */\n        const tx = await callWithEstimateGas(\n          lotteryContract,\n          'claimTickets',\n          [lotteryId, ticketBatch.ticketIds, ticketBatch.brackets],\n          { gasPrice },\n        )\n        const receipt = await tx.wait()\n        /* eslint-enable no-await-in-loop */\n        if (receipt.status) {\n          // One transaction within batch has succeeded\n          receipts.push(receipt)\n          setPendingBatchClaims(transactionsToFire - receipts.length)\n\n          // More transactions are to be done within the batch. Issue toast to give user feedback.\n          if (receipts.length !== transactionsToFire) {\n            toastSuccess(\n              t('Prizes Collected!'),\n              <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n                {t(\n                  'Claim %claimNum% of %claimTotal% for round %lotteryId% was successful. Please confirm the next transaction',\n                  {\n                    claimNum: receipts.length,\n                    claimTotal: transactionsToFire,\n                    lotteryId,\n                  },\n                )}\n              </ToastDescriptionWithTx>,\n            )\n          }\n        }\n      } catch (error) {\n        console.error(error)\n        setPendingTx(false)\n        toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n        break\n      }\n    }\n\n    // Batch is finished\n    if (receipts.length === transactionsToFire) {\n      setPendingTx(false)\n      toastSuccess(\n        t('Prizes Collected!'),\n        t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', { lotteryId }),\n      )\n      handleProgressToNextClaim()\n    }\n  }\n\n  return (\n    <>\n      <Flex flexDirection=\"column\">\n        <Text mb=\"4px\" textAlign={['center', null, 'left']}>\n          {t('You won')}\n        </Text>\n        <Flex\n          alignItems={['flex-start', null, 'center']}\n          justifyContent={['flex-start', null, 'space-between']}\n          flexDirection={['column', null, 'row']}\n        >\n          <Balance\n            textAlign={['center', null, 'left']}\n            lineHeight=\"1.1\"\n            value={rewardAsBalance}\n            fontSize=\"44px\"\n            bold\n            color=\"secondary\"\n            unit=\" CAKE!\"\n          />\n          <PresentWonIcon ml={['0', null, '12px']} width=\"64px\" />\n        </Flex>\n        <Balance\n          mt={['12px', null, '0']}\n          textAlign={['center', null, 'left']}\n          value={dollarRewardAsBalance}\n          fontSize=\"12px\"\n          color=\"textSubtle\"\n          unit=\" USD\"\n          prefix=\"~\"\n        />\n      </Flex>\n\n      <Flex alignItems=\"center\" justifyContent=\"center\">\n        <Text mt=\"8px\" fontSize=\"12px\" color=\"textSubtle\">\n          {t('Round')} #{activeClaimData.roundId}\n        </Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"center\">\n        <Button\n          isLoading={pendingTx}\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          mt=\"20px\"\n          width=\"100%\"\n          onClick={() => (shouldBatchRequest ? handleBatchClaim() : handleClaim())}\n        >\n          {pendingTx ? t('Claiming') : t('Claim')} {pendingBatchClaims > 1 ? `(${pendingBatchClaims})` : ''}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default ClaimInnerContainer\n"]},"metadata":{},"sourceType":"module"}