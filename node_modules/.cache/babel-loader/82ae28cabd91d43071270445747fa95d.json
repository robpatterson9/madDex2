{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import React,{useState}from'react';import{useWeb3React}from'@web3-react/core';import styled from'styled-components';import{CardHeader,Card,CardBody,Text,CardFooter,ArrowBackIcon,Flex,Heading,Skeleton,Box}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{LotteryStatus}from'config/constants/types';import{useGetUserLotteriesGraphData,useLottery}from'state/lottery/hooks';import{fetchLottery}from'state/lottery/helpers';import ConnectWalletButton from'components/ConnectWalletButton';import FinishedRoundTable from'./FinishedRoundTable';import{WhiteBunny}from'../../svgs';import BuyTicketsButton from'../BuyTicketsButton';import PreviousRoundCardBody from'../PreviousRoundCard/Body';import{processLotteryResponse,getDrawnDate}from'../../helpers';import PreviousRoundCardFooter from'../PreviousRoundCard/Footer';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var StyledCard=styled(Card)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  width: 100%;\\n\\n  \",\" {\\n    width: 756px;\\n  }\\n\"])),function(_ref){var theme=_ref.theme;return theme.mediaQueries.md;});var StyledCardBody=styled(CardBody)(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n  min-height: 240px;\\n\"])));var YourHistoryCard=function YourHistoryCard(_ref2){var handleShowMoreClick=_ref2.handleShowMoreClick,numUserRoundsRequested=_ref2.numUserRoundsRequested;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),shouldShowRoundDetail=_useState2[0],setShouldShowRoundDetail=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),selectedLotteryNodeData=_useState4[0],setSelectedLotteryNodeData=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),selectedLotteryId=_useState6[0],setSelectedLotteryId=_useState6[1];var _useLottery=useLottery(),isTransitioning=_useLottery.isTransitioning,status=_useLottery.currentRound.status;var userLotteryData=useGetUserLotteriesGraphData();var ticketBuyIsDisabled=status!==LotteryStatus.OPEN||isTransitioning;var handleHistoryRowClick=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(lotteryId){var lotteryData,processedLotteryData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setShouldShowRoundDetail(true);setSelectedLotteryId(lotteryId);_context.next=4;return fetchLottery(lotteryId);case 4:lotteryData=_context.sent;processedLotteryData=processLotteryResponse(lotteryData);setSelectedLotteryNodeData(processedLotteryData);case 7:case\"end\":return _context.stop();}}},_callee);}));return function handleHistoryRowClick(_x){return _ref3.apply(this,arguments);};}();var clearState=function clearState(){setShouldShowRoundDetail(false);setSelectedLotteryNodeData(null);setSelectedLotteryId(null);};var getHeader=function getHeader(){if(shouldShowRoundDetail){return/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",children:[/*#__PURE__*/_jsx(ArrowBackIcon,{cursor:\"pointer\",onClick:function onClick(){return clearState();},mr:\"20px\"}),/*#__PURE__*/_jsxs(Flex,{flexDirection:\"column\",alignItems:\"flex-start\",justifyContent:\"center\",children:[/*#__PURE__*/_jsxs(Heading,{scale:\"md\",mb:\"4px\",children:[t('Round'),\" \",selectedLotteryId||'']}),(selectedLotteryNodeData===null||selectedLotteryNodeData===void 0?void 0:selectedLotteryNodeData.endTime)?/*#__PURE__*/_jsxs(Text,{fontSize:\"14px\",children:[t('Drawn'),\" \",getDrawnDate(selectedLotteryNodeData.endTime)]}):/*#__PURE__*/_jsx(Skeleton,{width:\"185px\",height:\"21px\"})]})]});}return/*#__PURE__*/_jsx(Heading,{scale:\"md\",children:t('Rounds')});};var getBody=function getBody(){if(shouldShowRoundDetail){return/*#__PURE__*/_jsx(PreviousRoundCardBody,{lotteryNodeData:selectedLotteryNodeData,lotteryId:selectedLotteryId});}var claimableRounds=userLotteryData===null||userLotteryData===void 0?void 0:userLotteryData.rounds.filter(function(round){return round.status.toLowerCase()===LotteryStatus.CLAIMABLE;});if(!account){return/*#__PURE__*/_jsxs(StyledCardBody,{children:[/*#__PURE__*/_jsx(Text,{textAlign:\"center\",color:\"textSubtle\",mb:\"16px\",children:t('Connect your wallet to check your history')}),/*#__PURE__*/_jsx(ConnectWalletButton,{})]});}if(claimableRounds.length===0){return/*#__PURE__*/_jsx(StyledCardBody,{children:/*#__PURE__*/_jsxs(Box,{maxWidth:\"280px\",children:[/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",justifyContent:\"center\",mb:\"16px\",children:[/*#__PURE__*/_jsx(WhiteBunny,{height:\"24px\",mr:\"8px\"}),\" \",/*#__PURE__*/_jsx(Text,{textAlign:\"left\",children:t('No lottery history found')})]}),/*#__PURE__*/_jsx(Text,{textAlign:\"center\",color:\"textSubtle\",mb:\"16px\",children:t('Buy tickets for the next round!')}),/*#__PURE__*/_jsx(BuyTicketsButton,{disabled:ticketBuyIsDisabled,width:\"100%\"})]})});}return/*#__PURE__*/_jsx(FinishedRoundTable,{handleHistoryRowClick:handleHistoryRowClick,handleShowMoreClick:handleShowMoreClick,numUserRoundsRequested:numUserRoundsRequested});};var getFooter=function getFooter(){if(selectedLotteryNodeData){return/*#__PURE__*/_jsx(PreviousRoundCardFooter,{lotteryNodeData:selectedLotteryNodeData,lotteryId:selectedLotteryId});}return/*#__PURE__*/_jsx(CardFooter,{children:/*#__PURE__*/_jsx(Flex,{flexDirection:\"column\",justifyContent:\"center\",alignItems:\"center\",children:/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",color:\"textSubtle\",children:t('Only showing data for Lottery V2')})})});};return/*#__PURE__*/_jsxs(StyledCard,{children:[/*#__PURE__*/_jsx(CardHeader,{children:getHeader()}),getBody(),getFooter()]});};export default YourHistoryCard;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Lottery/components/YourHistoryCard/index.tsx"],"names":["React","useState","useWeb3React","styled","CardHeader","Card","CardBody","Text","CardFooter","ArrowBackIcon","Flex","Heading","Skeleton","Box","useTranslation","LotteryStatus","useGetUserLotteriesGraphData","useLottery","fetchLottery","ConnectWalletButton","FinishedRoundTable","WhiteBunny","BuyTicketsButton","PreviousRoundCardBody","processLotteryResponse","getDrawnDate","PreviousRoundCardFooter","StyledCard","theme","mediaQueries","md","StyledCardBody","YourHistoryCard","handleShowMoreClick","numUserRoundsRequested","t","account","shouldShowRoundDetail","setShouldShowRoundDetail","selectedLotteryNodeData","setSelectedLotteryNodeData","selectedLotteryId","setSelectedLotteryId","isTransitioning","status","currentRound","userLotteryData","ticketBuyIsDisabled","OPEN","handleHistoryRowClick","lotteryId","lotteryData","processedLotteryData","clearState","getHeader","endTime","getBody","claimableRounds","rounds","filter","round","toLowerCase","CLAIMABLE","length","getFooter"],"mappings":"kpBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,YAAT,KAA6B,kBAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OACEC,UADF,CAEEC,IAFF,CAGEC,QAHF,CAIEC,IAJF,CAKEC,UALF,CAMEC,aANF,CAOEC,IAPF,CAQEC,OARF,CASEC,QATF,CAUEC,GAVF,KAWO,oBAXP,CAYA,OAASC,cAAT,KAA+B,uBAA/B,CACA,OAASC,aAAT,KAA8B,wBAA9B,CACA,OAASC,4BAAT,CAAuCC,UAAvC,KAAyD,qBAAzD,CACA,OAASC,YAAT,KAA6B,uBAA7B,CAEA,MAAOC,CAAAA,mBAAP,KAAgC,gCAAhC,CACA,MAAOC,CAAAA,kBAAP,KAA+B,sBAA/B,CACA,OAASC,UAAT,KAA2B,YAA3B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,qBAA7B,CACA,MAAOC,CAAAA,qBAAP,KAAkC,2BAAlC,CACA,OAASC,sBAAT,CAAiCC,YAAjC,KAAqD,eAArD,CACA,MAAOC,CAAAA,uBAAP,KAAoC,6BAApC,C,wFAOA,GAAMC,CAAAA,UAAU,CAAGxB,MAAM,CAACE,IAAD,CAAT,sHAGZ,kBAAGuB,CAAAA,KAAH,MAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACC,YAAN,CAAmBC,EAAlC,EAHY,CAAhB,CAQA,GAAMC,CAAAA,cAAc,CAAG5B,MAAM,CAACG,QAAD,CAAT,4LAApB,CAQA,GAAM0B,CAAAA,eAA+C,CAAG,QAAlDA,CAAAA,eAAkD,OAAqD,IAAlDC,CAAAA,mBAAkD,OAAlDA,mBAAkD,CAA7BC,sBAA6B,OAA7BA,sBAA6B,CAC3G,oBAAcpB,cAAc,EAA5B,CAAQqB,CAAR,iBAAQA,CAAR,CACA,kBAAoBjC,YAAY,EAAhC,CAAQkC,OAAR,eAAQA,OAAR,CACA,cAA0DnC,QAAQ,CAAC,KAAD,CAAlE,wCAAOoC,qBAAP,eAA8BC,wBAA9B,eACA,eAA8DrC,QAAQ,CAAe,IAAf,CAAtE,yCAAOsC,uBAAP,eAAgCC,0BAAhC,eACA,eAAkDvC,QAAQ,CAAS,IAAT,CAA1D,yCAAOwC,iBAAP,eAA0BC,oBAA1B,eAEA,gBAGIzB,UAAU,EAHd,CACE0B,eADF,aACEA,eADF,CAEkBC,MAFlB,aAEEC,YAFF,CAEkBD,MAFlB,CAIA,GAAME,CAAAA,eAAe,CAAG9B,4BAA4B,EAApD,CACA,GAAM+B,CAAAA,mBAAmB,CAAGH,MAAM,GAAK7B,aAAa,CAACiC,IAAzB,EAAiCL,eAA7D,CAEA,GAAMM,CAAAA,qBAAqB,2FAAG,iBAAOC,SAAP,uJAC5BZ,wBAAwB,CAAC,IAAD,CAAxB,CACAI,oBAAoB,CAACQ,SAAD,CAApB,CAF4B,sBAGFhC,CAAAA,YAAY,CAACgC,SAAD,CAHV,QAGtBC,WAHsB,eAItBC,oBAJsB,CAIC5B,sBAAsB,CAAC2B,WAAD,CAJvB,CAK5BX,0BAA0B,CAACY,oBAAD,CAA1B,CAL4B,sDAAH,kBAArBH,CAAAA,qBAAqB,6CAA3B,CAQA,GAAMI,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvBf,wBAAwB,CAAC,KAAD,CAAxB,CACAE,0BAA0B,CAAC,IAAD,CAA1B,CACAE,oBAAoB,CAAC,IAAD,CAApB,CACD,CAJD,CAMA,GAAMY,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB,GAAIjB,qBAAJ,CAA2B,CACzB,mBACE,MAAC,IAAD,EAAM,UAAU,CAAC,QAAjB,wBACE,KAAC,aAAD,EAAe,MAAM,CAAC,SAAtB,CAAgC,OAAO,CAAE,yBAAMgB,CAAAA,UAAU,EAAhB,EAAzC,CAA6D,EAAE,CAAC,MAAhE,EADF,cAEE,MAAC,IAAD,EAAM,aAAa,CAAC,QAApB,CAA6B,UAAU,CAAC,YAAxC,CAAqD,cAAc,CAAC,QAApE,wBACE,MAAC,OAAD,EAAS,KAAK,CAAC,IAAf,CAAoB,EAAE,CAAC,KAAvB,WACGlB,CAAC,CAAC,OAAD,CADJ,KACgBM,iBAAiB,EAAI,EADrC,GADF,CAIG,CAAAF,uBAAuB,OAAvB,EAAAA,uBAAuB,SAAvB,QAAAA,uBAAuB,CAAEgB,OAAzB,eACC,MAAC,IAAD,EAAM,QAAQ,CAAC,MAAf,WACGpB,CAAC,CAAC,OAAD,CADJ,KACgBV,YAAY,CAACc,uBAAuB,CAACgB,OAAzB,CAD5B,GADD,cAKC,KAAC,QAAD,EAAU,KAAK,CAAC,OAAhB,CAAwB,MAAM,CAAC,MAA/B,EATJ,GAFF,GADF,CAiBD,CAED,mBAAO,KAAC,OAAD,EAAS,KAAK,CAAC,IAAf,UAAqBpB,CAAC,CAAC,QAAD,CAAtB,EAAP,CACD,CAtBD,CAwBA,GAAMqB,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,CACpB,GAAInB,qBAAJ,CAA2B,CACzB,mBAAO,KAAC,qBAAD,EAAuB,eAAe,CAAEE,uBAAxC,CAAiE,SAAS,CAAEE,iBAA5E,EAAP,CACD,CAED,GAAMgB,CAAAA,eAAe,CAAGX,eAAH,SAAGA,eAAH,iBAAGA,eAAe,CAAEY,MAAjB,CAAwBC,MAAxB,CAA+B,SAACC,KAAD,CAAW,CAChE,MAAOA,CAAAA,KAAK,CAAChB,MAAN,CAAaiB,WAAb,KAA+B9C,aAAa,CAAC+C,SAApD,CACD,CAFuB,CAAxB,CAIA,GAAI,CAAC1B,OAAL,CAAc,CACZ,mBACE,MAAC,cAAD,yBACE,KAAC,IAAD,EAAM,SAAS,CAAC,QAAhB,CAAyB,KAAK,CAAC,YAA/B,CAA4C,EAAE,CAAC,MAA/C,UACGD,CAAC,CAAC,2CAAD,CADJ,EADF,cAIE,KAAC,mBAAD,IAJF,GADF,CAQD,CACD,GAAIsB,eAAe,CAACM,MAAhB,GAA2B,CAA/B,CAAkC,CAChC,mBACE,KAAC,cAAD,wBACE,MAAC,GAAD,EAAK,QAAQ,CAAC,OAAd,wBACE,MAAC,IAAD,EAAM,UAAU,CAAC,QAAjB,CAA0B,cAAc,CAAC,QAAzC,CAAkD,EAAE,CAAC,MAArD,wBACE,KAAC,UAAD,EAAY,MAAM,CAAC,MAAnB,CAA0B,EAAE,CAAC,KAA7B,EADF,kBACwC,KAAC,IAAD,EAAM,SAAS,CAAC,MAAhB,UAAwB5B,CAAC,CAAC,0BAAD,CAAzB,EADxC,GADF,cAIE,KAAC,IAAD,EAAM,SAAS,CAAC,QAAhB,CAAyB,KAAK,CAAC,YAA/B,CAA4C,EAAE,CAAC,MAA/C,UACGA,CAAC,CAAC,iCAAD,CADJ,EAJF,cAOE,KAAC,gBAAD,EAAkB,QAAQ,CAAEY,mBAA5B,CAAiD,KAAK,CAAC,MAAvD,EAPF,GADF,EADF,CAaD,CACD,mBACE,KAAC,kBAAD,EACE,qBAAqB,CAAEE,qBADzB,CAEE,mBAAmB,CAAEhB,mBAFvB,CAGE,sBAAsB,CAAEC,sBAH1B,EADF,CAOD,CAzCD,CA2CA,GAAM8B,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,EAAM,CACtB,GAAIzB,uBAAJ,CAA6B,CAC3B,mBAAO,KAAC,uBAAD,EAAyB,eAAe,CAAEA,uBAA1C,CAAmE,SAAS,CAAEE,iBAA9E,EAAP,CACD,CACD,mBACE,KAAC,UAAD,wBACE,KAAC,IAAD,EAAM,aAAa,CAAC,QAApB,CAA6B,cAAc,CAAC,QAA5C,CAAqD,UAAU,CAAC,QAAhE,uBACE,KAAC,IAAD,EAAM,QAAQ,CAAC,MAAf,CAAsB,KAAK,CAAC,YAA5B,UACGN,CAAC,CAAC,kCAAD,CADJ,EADF,EADF,EADF,CASD,CAbD,CAeA,mBACE,MAAC,UAAD,yBACE,KAAC,UAAD,WAAamB,SAAS,EAAtB,EADF,CAEGE,OAAO,EAFV,CAGGQ,SAAS,EAHZ,GADF,CAOD,CArHD,CAuHA,cAAehC,CAAAA,eAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport {\n  CardHeader,\n  Card,\n  CardBody,\n  Text,\n  CardFooter,\n  ArrowBackIcon,\n  Flex,\n  Heading,\n  Skeleton,\n  Box,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryStatus } from 'config/constants/types'\nimport { useGetUserLotteriesGraphData, useLottery } from 'state/lottery/hooks'\nimport { fetchLottery } from 'state/lottery/helpers'\nimport { LotteryRound } from 'state/types'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport FinishedRoundTable from './FinishedRoundTable'\nimport { WhiteBunny } from '../../svgs'\nimport BuyTicketsButton from '../BuyTicketsButton'\nimport PreviousRoundCardBody from '../PreviousRoundCard/Body'\nimport { processLotteryResponse, getDrawnDate } from '../../helpers'\nimport PreviousRoundCardFooter from '../PreviousRoundCard/Footer'\n\ninterface YourHistoryCardProps {\n  handleShowMoreClick: () => void\n  numUserRoundsRequested: number\n}\n\nconst StyledCard = styled(Card)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: 756px;\n  }\n`\n\nconst StyledCardBody = styled(CardBody)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 240px;\n`\n\nconst YourHistoryCard: React.FC<YourHistoryCardProps> = ({ handleShowMoreClick, numUserRoundsRequested }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [shouldShowRoundDetail, setShouldShowRoundDetail] = useState(false)\n  const [selectedLotteryNodeData, setSelectedLotteryNodeData] = useState<LotteryRound>(null)\n  const [selectedLotteryId, setSelectedLotteryId] = useState<string>(null)\n\n  const {\n    isTransitioning,\n    currentRound: { status },\n  } = useLottery()\n  const userLotteryData = useGetUserLotteriesGraphData()\n  const ticketBuyIsDisabled = status !== LotteryStatus.OPEN || isTransitioning\n\n  const handleHistoryRowClick = async (lotteryId: string) => {\n    setShouldShowRoundDetail(true)\n    setSelectedLotteryId(lotteryId)\n    const lotteryData = await fetchLottery(lotteryId)\n    const processedLotteryData = processLotteryResponse(lotteryData)\n    setSelectedLotteryNodeData(processedLotteryData)\n  }\n\n  const clearState = () => {\n    setShouldShowRoundDetail(false)\n    setSelectedLotteryNodeData(null)\n    setSelectedLotteryId(null)\n  }\n\n  const getHeader = () => {\n    if (shouldShowRoundDetail) {\n      return (\n        <Flex alignItems=\"center\">\n          <ArrowBackIcon cursor=\"pointer\" onClick={() => clearState()} mr=\"20px\" />\n          <Flex flexDirection=\"column\" alignItems=\"flex-start\" justifyContent=\"center\">\n            <Heading scale=\"md\" mb=\"4px\">\n              {t('Round')} {selectedLotteryId || ''}\n            </Heading>\n            {selectedLotteryNodeData?.endTime ? (\n              <Text fontSize=\"14px\">\n                {t('Drawn')} {getDrawnDate(selectedLotteryNodeData.endTime)}\n              </Text>\n            ) : (\n              <Skeleton width=\"185px\" height=\"21px\" />\n            )}\n          </Flex>\n        </Flex>\n      )\n    }\n\n    return <Heading scale=\"md\">{t('Rounds')}</Heading>\n  }\n\n  const getBody = () => {\n    if (shouldShowRoundDetail) {\n      return <PreviousRoundCardBody lotteryNodeData={selectedLotteryNodeData} lotteryId={selectedLotteryId} />\n    }\n\n    const claimableRounds = userLotteryData?.rounds.filter((round) => {\n      return round.status.toLowerCase() === LotteryStatus.CLAIMABLE\n    })\n\n    if (!account) {\n      return (\n        <StyledCardBody>\n          <Text textAlign=\"center\" color=\"textSubtle\" mb=\"16px\">\n            {t('Connect your wallet to check your history')}\n          </Text>\n          <ConnectWalletButton />\n        </StyledCardBody>\n      )\n    }\n    if (claimableRounds.length === 0) {\n      return (\n        <StyledCardBody>\n          <Box maxWidth=\"280px\">\n            <Flex alignItems=\"center\" justifyContent=\"center\" mb=\"16px\">\n              <WhiteBunny height=\"24px\" mr=\"8px\" /> <Text textAlign=\"left\">{t('No lottery history found')}</Text>\n            </Flex>\n            <Text textAlign=\"center\" color=\"textSubtle\" mb=\"16px\">\n              {t('Buy tickets for the next round!')}\n            </Text>\n            <BuyTicketsButton disabled={ticketBuyIsDisabled} width=\"100%\" />\n          </Box>\n        </StyledCardBody>\n      )\n    }\n    return (\n      <FinishedRoundTable\n        handleHistoryRowClick={handleHistoryRowClick}\n        handleShowMoreClick={handleShowMoreClick}\n        numUserRoundsRequested={numUserRoundsRequested}\n      />\n    )\n  }\n\n  const getFooter = () => {\n    if (selectedLotteryNodeData) {\n      return <PreviousRoundCardFooter lotteryNodeData={selectedLotteryNodeData} lotteryId={selectedLotteryId} />\n    }\n    return (\n      <CardFooter>\n        <Flex flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\n          <Text fontSize=\"12px\" color=\"textSubtle\">\n            {t('Only showing data for Lottery V2')}\n          </Text>\n        </Flex>\n      </CardFooter>\n    )\n  }\n\n  return (\n    <StyledCard>\n      <CardHeader>{getHeader()}</CardHeader>\n      {getBody()}\n      {getFooter()}\n    </StyledCard>\n  )\n}\n\nexport default YourHistoryCard\n"]},"metadata":{},"sourceType":"module"}