{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/components/AddressInputSelect/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Box, Text, Input } from '@pancakeswap/uikit';\nimport styled from 'styled-components';\nimport { isAddress } from 'utils';\nimport { useTranslation } from 'contexts/Localization';\nimport CircleLoader from 'components/Loader/CircleLoader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ResultStatus;\n\n(function (ResultStatus) {\n  ResultStatus[ResultStatus[\"NOT_VALID\"] = 0] = \"NOT_VALID\";\n  ResultStatus[ResultStatus[\"FOUND\"] = 1] = \"FOUND\";\n  ResultStatus[ResultStatus[\"NOT_FOUND\"] = 2] = \"NOT_FOUND\";\n})(ResultStatus || (ResultStatus = {}));\n\nconst SubMenu = styled.div`\n  align-items: center;\n  background: ${({\n  theme\n}) => theme.colors.input};\n  border: 1px solid ${({\n  theme\n}) => theme.colors.inputSecondary};\n  border-radius: 0 0 ${({\n  theme\n}) => theme.radii.default} ${({\n  theme\n}) => theme.radii.default};\n  left: 0;\n  padding-bottom: 8px;\n  padding-top: 16px;\n  position: absolute;\n  top: calc(100% - 12px);\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  width: 100%;\n  z-index: 15;\n\n  ${({\n  isOpen\n}) => isOpen && `\n    height: auto;\n    opacity: 1;\n    transform: scaleY(1);\n  `}\n`;\n_c = SubMenu;\nconst AddressLink = styled(Text)`\n  cursor: pointer;\n  overflow-wrap: break-word;\n  font-weight: bold;\n  padding-left: 16px;\n  padding-right: 16px;\n`;\n_c2 = AddressLink;\nconst initialState = {\n  isFetching: false,\n  resultFound: ResultStatus.NOT_VALID,\n  value: ''\n};\n\nconst defaultValidAddressHandler = () => Promise.resolve(true);\n\nconst AddressInputSelect = ({\n  onValidAddress = defaultValidAddressHandler,\n  onAddressClick,\n  ...props\n}) => {\n  _s();\n\n  const [state, setState] = useState(initialState);\n  const {\n    t\n  } = useTranslation();\n  const {\n    isFetching,\n    resultFound,\n    value\n  } = state;\n\n  const handleChange = evt => {\n    const {\n      value: newValue\n    } = evt.target;\n    setState(prevState => ({ ...prevState,\n      value: newValue\n    }));\n  };\n\n  const handleClick = () => {\n    setState(initialState);\n    onAddressClick(state.value);\n  }; // When we have a valid address fetch the data\n\n\n  useEffect(() => {\n    const isValidAddress = isAddress(value) !== false;\n\n    const validAddressHandler = async () => {\n      try {\n        setState(prevState => ({ ...prevState,\n          isFetching: true\n        }));\n        const hasResults = await onValidAddress(value);\n        setState(prevState => ({ ...prevState,\n          isFetching: false,\n          resultFound: hasResults ? ResultStatus.FOUND : ResultStatus.NOT_FOUND\n        }));\n      } catch {\n        setState(prevState => ({ ...prevState,\n          isFetching: false\n        }));\n      }\n    };\n\n    if (isValidAddress) {\n      validAddressHandler();\n    } else {\n      setState(prevState => ({ ...prevState,\n        resultFound: ResultStatus.NOT_VALID\n      }));\n    }\n  }, [value, onValidAddress, setState]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    position: \"relative\",\n    ...props,\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      placeholder: t('Search %subject%', {\n        subject: t('Address').toLowerCase()\n      }),\n      value: state.value,\n      onChange: handleChange,\n      style: {\n        position: 'relative',\n        zIndex: 16,\n        paddingRight: '40px'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), isFetching && /*#__PURE__*/_jsxDEV(Box, {\n      position: \"absolute\",\n      top: \"12px\",\n      right: \"16px\",\n      style: {\n        zIndex: 17\n      },\n      children: /*#__PURE__*/_jsxDEV(CircleLoader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(SubMenu, {\n      isOpen: resultFound !== ResultStatus.NOT_VALID,\n      children: resultFound === ResultStatus.FOUND ? /*#__PURE__*/_jsxDEV(AddressLink, {\n        onClick: handleClick,\n        children: state.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Text, {\n        px: \"16px\",\n        fontWeight: \"bold\",\n        children: t('No results found.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AddressInputSelect, \"/EQ6v1NRCBGJmpbsSg2voBl76xg=\", false, function () {\n  return [useTranslation];\n});\n\n_c3 = AddressInputSelect;\nexport default AddressInputSelect;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SubMenu\");\n$RefreshReg$(_c2, \"AddressLink\");\n$RefreshReg$(_c3, \"AddressInputSelect\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/components/AddressInputSelect/index.tsx"],"names":["React","useState","useEffect","Box","Text","Input","styled","isAddress","useTranslation","CircleLoader","ResultStatus","SubMenu","div","theme","colors","input","inputSecondary","radii","default","isOpen","AddressLink","initialState","isFetching","resultFound","NOT_VALID","value","defaultValidAddressHandler","Promise","resolve","AddressInputSelect","onValidAddress","onAddressClick","props","state","setState","t","handleChange","evt","newValue","target","prevState","handleClick","isValidAddress","validAddressHandler","hasResults","FOUND","NOT_FOUND","subject","toLowerCase","position","zIndex","paddingRight"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, useState, useEffect } from 'react'\nimport { Box, BoxProps, Text, Input } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { isAddress } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport CircleLoader from 'components/Loader/CircleLoader'\n\nenum ResultStatus {\n  NOT_VALID,\n  FOUND,\n  NOT_FOUND,\n}\n\ninterface AddressInputSelectProps extends BoxProps {\n  onValidAddress?: (value: string) => Promise<boolean>\n  onAddressClick: (value: string) => void\n}\n\nconst SubMenu = styled.div<{ isOpen: boolean }>`\n  align-items: center;\n  background: ${({ theme }) => theme.colors.input};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 0 0 ${({ theme }) => theme.radii.default} ${({ theme }) => theme.radii.default};\n  left: 0;\n  padding-bottom: 8px;\n  padding-top: 16px;\n  position: absolute;\n  top: calc(100% - 12px);\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  width: 100%;\n  z-index: 15;\n\n  ${({ isOpen }) =>\n    isOpen &&\n    `\n    height: auto;\n    opacity: 1;\n    transform: scaleY(1);\n  `}\n`\n\nconst AddressLink = styled(Text)`\n  cursor: pointer;\n  overflow-wrap: break-word;\n  font-weight: bold;\n  padding-left: 16px;\n  padding-right: 16px;\n`\n\nconst initialState = {\n  isFetching: false,\n  resultFound: ResultStatus.NOT_VALID,\n  value: '',\n}\n\nconst defaultValidAddressHandler = () => Promise.resolve(true)\n\nconst AddressInputSelect: React.FC<AddressInputSelectProps> = ({\n  onValidAddress = defaultValidAddressHandler,\n  onAddressClick,\n  ...props\n}) => {\n  const [state, setState] = useState(initialState)\n  const { t } = useTranslation()\n  const { isFetching, resultFound, value } = state\n\n  const handleChange = (evt: ChangeEvent<HTMLInputElement>) => {\n    const { value: newValue } = evt.target\n    setState((prevState) => ({\n      ...prevState,\n      value: newValue,\n    }))\n  }\n\n  const handleClick = () => {\n    setState(initialState)\n    onAddressClick(state.value)\n  }\n\n  // When we have a valid address fetch the data\n  useEffect(() => {\n    const isValidAddress = isAddress(value) !== false\n\n    const validAddressHandler = async () => {\n      try {\n        setState((prevState) => ({ ...prevState, isFetching: true }))\n        const hasResults = await onValidAddress(value)\n\n        setState((prevState) => ({\n          ...prevState,\n          isFetching: false,\n          resultFound: hasResults ? ResultStatus.FOUND : ResultStatus.NOT_FOUND,\n        }))\n      } catch {\n        setState((prevState) => ({ ...prevState, isFetching: false }))\n      }\n    }\n\n    if (isValidAddress) {\n      validAddressHandler()\n    } else {\n      setState((prevState) => ({ ...prevState, resultFound: ResultStatus.NOT_VALID }))\n    }\n  }, [value, onValidAddress, setState])\n\n  return (\n    <Box position=\"relative\" {...props}>\n      <Input\n        placeholder={t('Search %subject%', { subject: t('Address').toLowerCase() })}\n        value={state.value}\n        onChange={handleChange}\n        style={{ position: 'relative', zIndex: 16, paddingRight: '40px' }}\n      />\n      {isFetching && (\n        <Box position=\"absolute\" top=\"12px\" right=\"16px\" style={{ zIndex: 17 }}>\n          <CircleLoader />\n        </Box>\n      )}\n      <SubMenu isOpen={resultFound !== ResultStatus.NOT_VALID}>\n        {resultFound === ResultStatus.FOUND ? (\n          <AddressLink onClick={handleClick}>{state.value}</AddressLink>\n        ) : (\n          <Text px=\"16px\" fontWeight=\"bold\">\n            {t('No results found.')}\n          </Text>\n        )}\n      </SubMenu>\n    </Box>\n  )\n}\n\nexport default AddressInputSelect\n"]},"metadata":{},"sourceType":"module"}