{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { getAllPancakeBunniesLowestPrice, getAllPancakeBunniesRecentUpdatedAt, getNftsFromCollectionApi } from 'state/nftMarket/helpers';\nimport { pancakeBunniesAddress } from '../constants'; // If collection is PancakeBunnies - gets all available bunnies, otherwise - null\n\nconst useAllPancakeBunnyNfts = collectionAddress => {\n  _s();\n\n  const [allPancakeBunnyNfts, setAllPancakeBunnyNfts] = useState(null);\n  const isPBCollection = collectionAddress === pancakeBunniesAddress;\n  useEffect(() => {\n    const fetchPancakeBunnies = async () => {\n      // In order to not define special TS type just for PancakeBunnies display we're hacking a little bit into NftToken type.\n      // On this page we just want to display all bunnies with their lowest prices and updates on the market\n      // Since some bunnies might not be on the market at all, we don't refer to the redux nfts state (which stores NftToken with actual token ids)\n      // We merely request from API all available bunny ids with their metadata and query subgraph for lowest price and latest updates.\n      const {\n        data\n      } = await getNftsFromCollectionApi(pancakeBunniesAddress);\n      const bunnyIds = Object.keys(data);\n      const lowestPrices = await getAllPancakeBunniesLowestPrice(bunnyIds);\n      const latestUpdates = await getAllPancakeBunniesRecentUpdatedAt(bunnyIds);\n      const allBunnies = bunnyIds.map(bunnyId => {\n        return {\n          // tokenId here is just a dummy one to satisfy TS. TokenID does not play any role in gird display below\n          tokenId: data[bunnyId].name,\n          name: data[bunnyId].name,\n          description: data[bunnyId].description,\n          collectionAddress: pancakeBunniesAddress,\n          collectionName: data[bunnyId].collection.name,\n          image: data[bunnyId].image,\n          attributes: [{\n            traitType: 'bunnyId',\n            value: bunnyId,\n            displayType: null\n          }],\n          meta: {\n            currentAskPrice: lowestPrices[bunnyId],\n            updatedAt: latestUpdates[bunnyId]\n          }\n        };\n      });\n      setAllPancakeBunnyNfts(allBunnies);\n    };\n\n    if (isPBCollection && !allPancakeBunnyNfts) {\n      fetchPancakeBunnies();\n    }\n  }, [isPBCollection, allPancakeBunnyNfts]);\n  return allPancakeBunnyNfts;\n};\n\n_s(useAllPancakeBunnyNfts, \"oAm3ul58/ssE55+doeTCriFRMZg=\");\n\nexport default useAllPancakeBunnyNfts;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/hooks/useAllPancakeBunnyNfts.ts"],"names":["useState","useEffect","getAllPancakeBunniesLowestPrice","getAllPancakeBunniesRecentUpdatedAt","getNftsFromCollectionApi","pancakeBunniesAddress","useAllPancakeBunnyNfts","collectionAddress","allPancakeBunnyNfts","setAllPancakeBunnyNfts","isPBCollection","fetchPancakeBunnies","data","bunnyIds","Object","keys","lowestPrices","latestUpdates","allBunnies","map","bunnyId","tokenId","name","description","collectionName","collection","image","attributes","traitType","value","displayType","meta","currentAskPrice","updatedAt"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SACEC,+BADF,EAEEC,mCAFF,EAGEC,wBAHF,QAIO,yBAJP;AAMA,SAASC,qBAAT,QAAsC,cAAtC,C,CAEA;;AACA,MAAMC,sBAAsB,GAAIC,iBAAD,IAA+B;AAAA;;AAC5D,QAAM,CAACC,mBAAD,EAAsBC,sBAAtB,IAAgDT,QAAQ,CAAa,IAAb,CAA9D;AAEA,QAAMU,cAAc,GAAGH,iBAAiB,KAAKF,qBAA7C;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,mBAAmB,GAAG,YAAY;AACtC;AACA;AACA;AACA;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAW,MAAMR,wBAAwB,CAACC,qBAAD,CAA/C;AACA,YAAMQ,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYH,IAAZ,CAAjB;AACA,YAAMI,YAAY,GAAG,MAAMd,+BAA+B,CAACW,QAAD,CAA1D;AACA,YAAMI,aAAa,GAAG,MAAMd,mCAAmC,CAACU,QAAD,CAA/D;AACA,YAAMK,UAAsB,GAAGL,QAAQ,CAACM,GAAT,CAAcC,OAAD,IAAa;AACvD,eAAO;AACL;AACAC,UAAAA,OAAO,EAAET,IAAI,CAACQ,OAAD,CAAJ,CAAcE,IAFlB;AAGLA,UAAAA,IAAI,EAAEV,IAAI,CAACQ,OAAD,CAAJ,CAAcE,IAHf;AAILC,UAAAA,WAAW,EAAEX,IAAI,CAACQ,OAAD,CAAJ,CAAcG,WAJtB;AAKLhB,UAAAA,iBAAiB,EAAEF,qBALd;AAMLmB,UAAAA,cAAc,EAAEZ,IAAI,CAACQ,OAAD,CAAJ,CAAcK,UAAd,CAAyBH,IANpC;AAOLI,UAAAA,KAAK,EAAEd,IAAI,CAACQ,OAAD,CAAJ,CAAcM,KAPhB;AAQLC,UAAAA,UAAU,EAAE,CACV;AACEC,YAAAA,SAAS,EAAE,SADb;AAEEC,YAAAA,KAAK,EAAET,OAFT;AAGEU,YAAAA,WAAW,EAAE;AAHf,WADU,CARP;AAeLC,UAAAA,IAAI,EAAE;AACJC,YAAAA,eAAe,EAAEhB,YAAY,CAACI,OAAD,CADzB;AAEJa,YAAAA,SAAS,EAAEhB,aAAa,CAACG,OAAD;AAFpB;AAfD,SAAP;AAoBD,OArB8B,CAA/B;AAsBAX,MAAAA,sBAAsB,CAACS,UAAD,CAAtB;AACD,KAhCD;;AAiCA,QAAIR,cAAc,IAAI,CAACF,mBAAvB,EAA4C;AAC1CG,MAAAA,mBAAmB;AACpB;AACF,GArCQ,EAqCN,CAACD,cAAD,EAAiBF,mBAAjB,CArCM,CAAT;AAuCA,SAAOA,mBAAP;AACD,CA7CD;;GAAMF,sB;;AA+CN,eAAeA,sBAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport {\n  getAllPancakeBunniesLowestPrice,\n  getAllPancakeBunniesRecentUpdatedAt,\n  getNftsFromCollectionApi,\n} from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from '../constants'\n\n// If collection is PancakeBunnies - gets all available bunnies, otherwise - null\nconst useAllPancakeBunnyNfts = (collectionAddress: string) => {\n  const [allPancakeBunnyNfts, setAllPancakeBunnyNfts] = useState<NftToken[]>(null)\n\n  const isPBCollection = collectionAddress === pancakeBunniesAddress\n\n  useEffect(() => {\n    const fetchPancakeBunnies = async () => {\n      // In order to not define special TS type just for PancakeBunnies display we're hacking a little bit into NftToken type.\n      // On this page we just want to display all bunnies with their lowest prices and updates on the market\n      // Since some bunnies might not be on the market at all, we don't refer to the redux nfts state (which stores NftToken with actual token ids)\n      // We merely request from API all available bunny ids with their metadata and query subgraph for lowest price and latest updates.\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      const bunnyIds = Object.keys(data)\n      const lowestPrices = await getAllPancakeBunniesLowestPrice(bunnyIds)\n      const latestUpdates = await getAllPancakeBunniesRecentUpdatedAt(bunnyIds)\n      const allBunnies: NftToken[] = bunnyIds.map((bunnyId) => {\n        return {\n          // tokenId here is just a dummy one to satisfy TS. TokenID does not play any role in gird display below\n          tokenId: data[bunnyId].name,\n          name: data[bunnyId].name,\n          description: data[bunnyId].description,\n          collectionAddress: pancakeBunniesAddress,\n          collectionName: data[bunnyId].collection.name,\n          image: data[bunnyId].image,\n          attributes: [\n            {\n              traitType: 'bunnyId',\n              value: bunnyId,\n              displayType: null,\n            },\n          ],\n          meta: {\n            currentAskPrice: lowestPrices[bunnyId],\n            updatedAt: latestUpdates[bunnyId],\n          },\n        }\n      })\n      setAllPancakeBunnyNfts(allBunnies)\n    }\n    if (isPBCollection && !allPancakeBunnyNfts) {\n      fetchPancakeBunnies()\n    }\n  }, [isPBCollection, allPancakeBunnyNfts])\n\n  return allPancakeBunnyNfts\n}\n\nexport default useAllPancakeBunnyNfts\n"]},"metadata":{},"sourceType":"module"}