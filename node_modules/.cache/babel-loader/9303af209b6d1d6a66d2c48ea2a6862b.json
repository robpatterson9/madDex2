{"ast":null,"code":"import React from'react';import{Flex,Text}from'@pancakeswap/uikit';import{useWeb3React}from'@web3-react/core';import{useTranslation}from'contexts/Localization';import{usePriceCakeBusd}from'state/farms/hooks';import{useCakeVault}from'state/pools/hooks';import{getCakeVaultEarnings}from'views/Pools/helpers';import RecentCakeProfitBalance from'./RecentCakeProfitBalance';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var RecentCakeProfitCountdownRow=function RecentCakeProfitCountdownRow(){var _useTranslation=useTranslation(),t=_useTranslation.t;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var _useCakeVault=useCakeVault(),pricePerFullShare=_useCakeVault.pricePerFullShare,_useCakeVault$userDat=_useCakeVault.userData,cakeAtLastUserAction=_useCakeVault$userDat.cakeAtLastUserAction,userShares=_useCakeVault$userDat.userShares,lastUserActionTime=_useCakeVault$userDat.lastUserActionTime;var cakePriceBusd=usePriceCakeBusd();var _getCakeVaultEarnings=getCakeVaultEarnings(account,cakeAtLastUserAction,userShares,pricePerFullShare,cakePriceBusd.toNumber()),hasAutoEarnings=_getCakeVaultEarnings.hasAutoEarnings,autoCakeToDisplay=_getCakeVaultEarnings.autoCakeToDisplay,autoUsdToDisplay=_getCakeVaultEarnings.autoUsdToDisplay;var lastActionInMs=lastUserActionTime&&parseInt(lastUserActionTime)*1000;var dateTimeLastAction=new Date(lastActionInMs);var dateStringToDisplay=dateTimeLastAction.toLocaleString();return/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",justifyContent:\"space-between\",children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:\"\".concat(t('Recent CAKE profit'),\":\")}),hasAutoEarnings&&/*#__PURE__*/_jsx(RecentCakeProfitBalance,{cakeToDisplay:autoCakeToDisplay,dollarValueToDisplay:autoUsdToDisplay,dateStringToDisplay:dateStringToDisplay})]});};export default RecentCakeProfitCountdownRow;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/components/CakeVaultCard/RecentCakeProfitRow.tsx"],"names":["React","Flex","Text","useWeb3React","useTranslation","usePriceCakeBusd","useCakeVault","getCakeVaultEarnings","RecentCakeProfitBalance","RecentCakeProfitCountdownRow","t","account","pricePerFullShare","userData","cakeAtLastUserAction","userShares","lastUserActionTime","cakePriceBusd","toNumber","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","lastActionInMs","parseInt","dateTimeLastAction","Date","dateStringToDisplay","toLocaleString"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,CAAeC,IAAf,KAA2B,oBAA3B,CACA,OAASC,YAAT,KAA6B,kBAA7B,CACA,OAASC,cAAT,KAA+B,uBAA/B,CACA,OAASC,gBAAT,KAAiC,mBAAjC,CACA,OAASC,YAAT,KAA6B,mBAA7B,CACA,OAASC,oBAAT,KAAqC,qBAArC,CACA,MAAOC,CAAAA,uBAAP,KAAoC,2BAApC,C,wFAEA,GAAMC,CAAAA,4BAA4B,CAAG,QAA/BA,CAAAA,4BAA+B,EAAM,CACzC,oBAAcL,cAAc,EAA5B,CAAQM,CAAR,iBAAQA,CAAR,CACA,kBAAoBP,YAAY,EAAhC,CAAQQ,OAAR,eAAQA,OAAR,CACA,kBAGIL,YAAY,EAHhB,CACEM,iBADF,eACEA,iBADF,qCAEEC,QAFF,CAEcC,oBAFd,uBAEcA,oBAFd,CAEoCC,UAFpC,uBAEoCA,UAFpC,CAEgDC,kBAFhD,uBAEgDA,kBAFhD,CAIA,GAAMC,CAAAA,aAAa,CAAGZ,gBAAgB,EAAtC,CACA,0BAAiEE,oBAAoB,CACnFI,OADmF,CAEnFG,oBAFmF,CAGnFC,UAHmF,CAInFH,iBAJmF,CAKnFK,aAAa,CAACC,QAAd,EALmF,CAArF,CAAQC,eAAR,uBAAQA,eAAR,CAAyBC,iBAAzB,uBAAyBA,iBAAzB,CAA4CC,gBAA5C,uBAA4CA,gBAA5C,CAQA,GAAMC,CAAAA,cAAc,CAAGN,kBAAkB,EAAIO,QAAQ,CAACP,kBAAD,CAAR,CAA+B,IAA5E,CACA,GAAMQ,CAAAA,kBAAkB,CAAG,GAAIC,CAAAA,IAAJ,CAASH,cAAT,CAA3B,CACA,GAAMI,CAAAA,mBAAmB,CAAGF,kBAAkB,CAACG,cAAnB,EAA5B,CAEA,mBACE,MAAC,IAAD,EAAM,UAAU,CAAC,QAAjB,CAA0B,cAAc,CAAC,eAAzC,wBACE,KAAC,IAAD,EAAM,QAAQ,CAAC,MAAf,oBAA0BjB,CAAC,CAAC,oBAAD,CAA3B,OADF,CAEGS,eAAe,eACd,KAAC,uBAAD,EACE,aAAa,CAAEC,iBADjB,CAEE,oBAAoB,CAAEC,gBAFxB,CAGE,mBAAmB,CAAEK,mBAHvB,EAHJ,GADF,CAYD,CAhCD,CAkCA,cAAejB,CAAAA,4BAAf","sourcesContent":["import React from 'react'\nimport { Flex, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport RecentCakeProfitBalance from './RecentCakeProfitBalance'\n\nconst RecentCakeProfitCountdownRow = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    pricePerFullShare,\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n  } = useCakeVault()\n  const cakePriceBusd = usePriceCakeBusd()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    cakePriceBusd.toNumber(),\n  )\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      <Text fontSize=\"14px\">{`${t('Recent CAKE profit')}:`}</Text>\n      {hasAutoEarnings && (\n        <RecentCakeProfitBalance\n          cakeToDisplay={autoCakeToDisplay}\n          dollarValueToDisplay={autoUsdToDisplay}\n          dateStringToDisplay={dateStringToDisplay}\n        />\n      )}\n    </Flex>\n  )\n}\n\nexport default RecentCakeProfitCountdownRow\n"]},"metadata":{},"sourceType":"module"}