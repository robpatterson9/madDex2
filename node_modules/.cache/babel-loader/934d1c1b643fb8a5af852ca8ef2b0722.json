{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-param-reassign */\nimport { useState, useEffect } from 'react';\nimport { request, gql } from 'graphql-request';\nimport { INFO_CLIENT } from 'config/constants/endpoints';\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers';\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps';\nimport { getPercentChange, getChangeForPeriod, getAmountChange } from 'views/Info/utils/infoDataHelpers';\nimport { useBnbPrices } from 'views/Info/hooks/useBnbPrices';\n\n/**\n * Main token data to display on Token page\n */\nconst TOKEN_AT_BLOCK = (block, tokens) => {\n  const addressesString = `[\"${tokens.join('\",\"')}\"]`;\n  const blockString = block ? `block: {number: ${block}}` : ``;\n  return `tokens(\n      where: {id_in: ${addressesString}}\n      ${blockString}\n      orderBy: tradeVolumeUSD\n      orderDirection: desc\n    ) {\n      id\n      symbol\n      name\n      derivedBNB\n      derivedUSD\n      tradeVolumeUSD\n      totalTransactions\n      totalLiquidity\n    }\n  `;\n};\n\n_c = TOKEN_AT_BLOCK;\n\nconst fetchTokenData = async (block24h, block48h, block7d, block14d, tokenAddresses) => {\n  try {\n    const query = gql`\n      query tokens {\n        now: ${TOKEN_AT_BLOCK(null, tokenAddresses)}\n        oneDayAgo: ${TOKEN_AT_BLOCK(block24h, tokenAddresses)}\n        twoDaysAgo: ${TOKEN_AT_BLOCK(block48h, tokenAddresses)}\n        oneWeekAgo: ${TOKEN_AT_BLOCK(block7d, tokenAddresses)}\n        twoWeeksAgo: ${TOKEN_AT_BLOCK(block14d, tokenAddresses)}\n      }\n    `;\n    const data = await request(INFO_CLIENT, query);\n    return {\n      data,\n      error: false\n    };\n  } catch (error) {\n    console.error('Failed to fetch token data', error);\n    return {\n      error: true\n    };\n  }\n}; // Transforms tokens into \"0xADDRESS: { ...TokenFields }\" format and cast strings to numbers\n\n\nconst parseTokenData = tokens => {\n  if (!tokens) {\n    return {};\n  }\n\n  return tokens.reduce((accum, tokenData) => {\n    const {\n      derivedBNB,\n      derivedUSD,\n      tradeVolumeUSD,\n      totalTransactions,\n      totalLiquidity\n    } = tokenData;\n    accum[tokenData.id] = { ...tokenData,\n      derivedBNB: parseFloat(derivedBNB),\n      derivedUSD: parseFloat(derivedUSD),\n      tradeVolumeUSD: parseFloat(tradeVolumeUSD),\n      totalTransactions: parseFloat(totalTransactions),\n      totalLiquidity: parseFloat(totalLiquidity)\n    };\n    return accum;\n  }, {});\n};\n\n/**\n * Fetch top addresses by volume\n */\nconst useFetchedTokenDatas = tokenAddresses => {\n  _s();\n\n  const [fetchState, setFetchState] = useState({\n    error: false\n  });\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps();\n  const {\n    blocks,\n    error: blockError\n  } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d]);\n  const [block24h, block48h, block7d, block14d] = blocks !== null && blocks !== void 0 ? blocks : [];\n  const bnbPrices = useBnbPrices();\n  useEffect(() => {\n    const fetch = async () => {\n      const {\n        error,\n        data\n      } = await fetchTokenData(block24h.number, block48h.number, block7d.number, block14d.number, tokenAddresses);\n\n      if (error) {\n        setFetchState({\n          error: true\n        });\n      } else {\n        const parsed = parseTokenData(data === null || data === void 0 ? void 0 : data.now);\n        const parsed24 = parseTokenData(data === null || data === void 0 ? void 0 : data.oneDayAgo);\n        const parsed48 = parseTokenData(data === null || data === void 0 ? void 0 : data.twoDaysAgo);\n        const parsed7d = parseTokenData(data === null || data === void 0 ? void 0 : data.oneWeekAgo);\n        const parsed14d = parseTokenData(data === null || data === void 0 ? void 0 : data.twoWeeksAgo); // Calculate data and format\n\n        const formatted = tokenAddresses.reduce((accum, address) => {\n          const current = parsed[address];\n          const oneDay = parsed24[address];\n          const twoDays = parsed48[address];\n          const week = parsed7d[address];\n          const twoWeeks = parsed14d[address];\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(current === null || current === void 0 ? void 0 : current.tradeVolumeUSD, oneDay === null || oneDay === void 0 ? void 0 : oneDay.tradeVolumeUSD, twoDays === null || twoDays === void 0 ? void 0 : twoDays.tradeVolumeUSD);\n          const [volumeUSDWeek] = getChangeForPeriod(current === null || current === void 0 ? void 0 : current.tradeVolumeUSD, week === null || week === void 0 ? void 0 : week.tradeVolumeUSD, twoWeeks === null || twoWeeks === void 0 ? void 0 : twoWeeks.tradeVolumeUSD);\n          const liquidityUSD = current ? current.totalLiquidity * current.derivedUSD : 0;\n          const liquidityUSDOneDayAgo = oneDay ? oneDay.totalLiquidity * oneDay.derivedUSD : 0;\n          const liquidityUSDChange = getPercentChange(liquidityUSD, liquidityUSDOneDayAgo);\n          const liquidityToken = current ? current.totalLiquidity : 0; // Prices of tokens for now, 24h ago and 7d ago\n\n          const priceUSD = current ? current.derivedBNB * bnbPrices.current : 0;\n          const priceUSDOneDay = oneDay ? oneDay.derivedBNB * bnbPrices.oneDay : 0;\n          const priceUSDWeek = week ? week.derivedBNB * bnbPrices.week : 0;\n          const priceUSDChange = getPercentChange(priceUSD, priceUSDOneDay);\n          const priceUSDChangeWeek = getPercentChange(priceUSD, priceUSDWeek);\n          const txCount = getAmountChange(current === null || current === void 0 ? void 0 : current.totalTransactions, oneDay === null || oneDay === void 0 ? void 0 : oneDay.totalTransactions);\n          accum[address] = {\n            exists: !!current,\n            address,\n            name: current ? current.name : '',\n            symbol: current ? current.symbol : '',\n            volumeUSD,\n            volumeUSDChange,\n            volumeUSDWeek,\n            txCount,\n            liquidityUSD,\n            liquidityUSDChange,\n            liquidityToken,\n            priceUSD,\n            priceUSDChange,\n            priceUSDChangeWeek\n          };\n          return accum;\n        }, {});\n        setFetchState({\n          data: formatted,\n          error: false\n        });\n      }\n    };\n\n    const allBlocksAvailable = (block24h === null || block24h === void 0 ? void 0 : block24h.number) && (block48h === null || block48h === void 0 ? void 0 : block48h.number) && (block7d === null || block7d === void 0 ? void 0 : block7d.number) && (block14d === null || block14d === void 0 ? void 0 : block14d.number);\n\n    if (tokenAddresses.length > 0 && allBlocksAvailable && !blockError && bnbPrices) {\n      fetch();\n    }\n  }, [tokenAddresses, block24h, block48h, block7d, block14d, blockError, bnbPrices]);\n  return fetchState;\n};\n\n_s(useFetchedTokenDatas, \"+KKEjuNDdmg8BI3vbr0yXZh6iPg=\", false, function () {\n  return [useBlocksFromTimestamps, useBnbPrices];\n});\n\nexport default useFetchedTokenDatas;\n\nvar _c;\n\n$RefreshReg$(_c, \"TOKEN_AT_BLOCK\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/queries/tokens/tokenData.ts"],"names":["useState","useEffect","request","gql","INFO_CLIENT","getDeltaTimestamps","useBlocksFromTimestamps","getPercentChange","getChangeForPeriod","getAmountChange","useBnbPrices","TOKEN_AT_BLOCK","block","tokens","addressesString","join","blockString","fetchTokenData","block24h","block48h","block7d","block14d","tokenAddresses","query","data","error","console","parseTokenData","reduce","accum","tokenData","derivedBNB","derivedUSD","tradeVolumeUSD","totalTransactions","totalLiquidity","id","parseFloat","useFetchedTokenDatas","fetchState","setFetchState","t24h","t48h","t7d","t14d","blocks","blockError","bnbPrices","fetch","number","parsed","now","parsed24","oneDayAgo","parsed48","twoDaysAgo","parsed7d","oneWeekAgo","parsed14d","twoWeeksAgo","formatted","address","current","oneDay","twoDays","week","twoWeeks","volumeUSD","volumeUSDChange","volumeUSDWeek","liquidityUSD","liquidityUSDOneDayAgo","liquidityUSDChange","liquidityToken","priceUSD","priceUSDOneDay","priceUSDWeek","priceUSDChange","priceUSDChangeWeek","txCount","exists","name","symbol","allBlocksAvailable","length"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { getPercentChange, getChangeForPeriod, getAmountChange } from 'views/Info/utils/infoDataHelpers'\nimport { TokenData } from 'state/info/types'\nimport { useBnbPrices } from 'views/Info/hooks/useBnbPrices'\n\ninterface TokenFields {\n  id: string\n  symbol: string\n  name: string\n  derivedBNB: string // Price in BNB per token\n  derivedUSD: string // Price in USD per token\n  tradeVolumeUSD: string\n  totalTransactions: string\n  totalLiquidity: string\n}\n\ninterface FormattedTokenFields\n  extends Omit<TokenFields, 'derivedBNB' | 'derivedUSD' | 'tradeVolumeUSD' | 'totalTransactions' | 'totalLiquidity'> {\n  derivedBNB: number\n  derivedUSD: number\n  tradeVolumeUSD: number\n  totalTransactions: number\n  totalLiquidity: number\n}\n\ninterface TokenQueryResponse {\n  now: TokenFields[]\n  oneDayAgo: TokenFields[]\n  twoDaysAgo: TokenFields[]\n  oneWeekAgo: TokenFields[]\n  twoWeeksAgo: TokenFields[]\n}\n\n/**\n * Main token data to display on Token page\n */\nconst TOKEN_AT_BLOCK = (block: number | undefined, tokens: string[]) => {\n  const addressesString = `[\"${tokens.join('\",\"')}\"]`\n  const blockString = block ? `block: {number: ${block}}` : ``\n  return `tokens(\n      where: {id_in: ${addressesString}}\n      ${blockString}\n      orderBy: tradeVolumeUSD\n      orderDirection: desc\n    ) {\n      id\n      symbol\n      name\n      derivedBNB\n      derivedUSD\n      tradeVolumeUSD\n      totalTransactions\n      totalLiquidity\n    }\n  `\n}\n\nconst fetchTokenData = async (\n  block24h: number,\n  block48h: number,\n  block7d: number,\n  block14d: number,\n  tokenAddresses: string[],\n) => {\n  try {\n    const query = gql`\n      query tokens {\n        now: ${TOKEN_AT_BLOCK(null, tokenAddresses)}\n        oneDayAgo: ${TOKEN_AT_BLOCK(block24h, tokenAddresses)}\n        twoDaysAgo: ${TOKEN_AT_BLOCK(block48h, tokenAddresses)}\n        oneWeekAgo: ${TOKEN_AT_BLOCK(block7d, tokenAddresses)}\n        twoWeeksAgo: ${TOKEN_AT_BLOCK(block14d, tokenAddresses)}\n      }\n    `\n    const data = await request<TokenQueryResponse>(INFO_CLIENT, query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch token data', error)\n    return { error: true }\n  }\n}\n\n// Transforms tokens into \"0xADDRESS: { ...TokenFields }\" format and cast strings to numbers\nconst parseTokenData = (tokens?: TokenFields[]) => {\n  if (!tokens) {\n    return {}\n  }\n  return tokens.reduce((accum: { [address: string]: FormattedTokenFields }, tokenData) => {\n    const { derivedBNB, derivedUSD, tradeVolumeUSD, totalTransactions, totalLiquidity } = tokenData\n    accum[tokenData.id] = {\n      ...tokenData,\n      derivedBNB: parseFloat(derivedBNB),\n      derivedUSD: parseFloat(derivedUSD),\n      tradeVolumeUSD: parseFloat(tradeVolumeUSD),\n      totalTransactions: parseFloat(totalTransactions),\n      totalLiquidity: parseFloat(totalLiquidity),\n    }\n    return accum\n  }, {})\n}\n\ninterface TokenDatas {\n  error: boolean\n  data?: {\n    [address: string]: TokenData\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useFetchedTokenDatas = (tokenAddresses: string[]): TokenDatas => {\n  const [fetchState, setFetchState] = useState<TokenDatas>({ error: false })\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d])\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\n  const bnbPrices = useBnbPrices()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await fetchTokenData(\n        block24h.number,\n        block48h.number,\n        block7d.number,\n        block14d.number,\n        tokenAddresses,\n      )\n      if (error) {\n        setFetchState({ error: true })\n      } else {\n        const parsed = parseTokenData(data?.now)\n        const parsed24 = parseTokenData(data?.oneDayAgo)\n        const parsed48 = parseTokenData(data?.twoDaysAgo)\n        const parsed7d = parseTokenData(data?.oneWeekAgo)\n        const parsed14d = parseTokenData(data?.twoWeeksAgo)\n\n        // Calculate data and format\n        const formatted = tokenAddresses.reduce((accum: { [address: string]: TokenData }, address) => {\n          const current: FormattedTokenFields | undefined = parsed[address]\n          const oneDay: FormattedTokenFields | undefined = parsed24[address]\n          const twoDays: FormattedTokenFields | undefined = parsed48[address]\n          const week: FormattedTokenFields | undefined = parsed7d[address]\n          const twoWeeks: FormattedTokenFields | undefined = parsed14d[address]\n\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n            current?.tradeVolumeUSD,\n            oneDay?.tradeVolumeUSD,\n            twoDays?.tradeVolumeUSD,\n          )\n          const [volumeUSDWeek] = getChangeForPeriod(\n            current?.tradeVolumeUSD,\n            week?.tradeVolumeUSD,\n            twoWeeks?.tradeVolumeUSD,\n          )\n          const liquidityUSD = current ? current.totalLiquidity * current.derivedUSD : 0\n          const liquidityUSDOneDayAgo = oneDay ? oneDay.totalLiquidity * oneDay.derivedUSD : 0\n          const liquidityUSDChange = getPercentChange(liquidityUSD, liquidityUSDOneDayAgo)\n          const liquidityToken = current ? current.totalLiquidity : 0\n          // Prices of tokens for now, 24h ago and 7d ago\n          const priceUSD = current ? current.derivedBNB * bnbPrices.current : 0\n          const priceUSDOneDay = oneDay ? oneDay.derivedBNB * bnbPrices.oneDay : 0\n          const priceUSDWeek = week ? week.derivedBNB * bnbPrices.week : 0\n          const priceUSDChange = getPercentChange(priceUSD, priceUSDOneDay)\n          const priceUSDChangeWeek = getPercentChange(priceUSD, priceUSDWeek)\n          const txCount = getAmountChange(current?.totalTransactions, oneDay?.totalTransactions)\n\n          accum[address] = {\n            exists: !!current,\n            address,\n            name: current ? current.name : '',\n            symbol: current ? current.symbol : '',\n            volumeUSD,\n            volumeUSDChange,\n            volumeUSDWeek,\n            txCount,\n            liquidityUSD,\n            liquidityUSDChange,\n            liquidityToken,\n            priceUSD,\n            priceUSDChange,\n            priceUSDChangeWeek,\n          }\n\n          return accum\n        }, {})\n        setFetchState({ data: formatted, error: false })\n      }\n    }\n    const allBlocksAvailable = block24h?.number && block48h?.number && block7d?.number && block14d?.number\n    if (tokenAddresses.length > 0 && allBlocksAvailable && !blockError && bnbPrices) {\n      fetch()\n    }\n  }, [tokenAddresses, block24h, block48h, block7d, block14d, blockError, bnbPrices])\n\n  return fetchState\n}\n\nexport default useFetchedTokenDatas\n"]},"metadata":{},"sourceType":"module"}