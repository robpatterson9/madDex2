{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { request, gql } from 'graphql-request';\nimport { INFO_CLIENT } from 'config/constants/endpoints';\nimport { TOKEN_BLACKLIST } from 'config/constants/info';\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers';\n\n/**\n * Tokens to display on Home page\n * The actual data is later requested in tokenData.ts\n * Note: dailyTxns_gt: 300 is there to prevent fetching incorrectly priced tokens with high dailyVolumeUSD\n */\nconst fetchTopTokens = async timestamp24hAgo => {\n  try {\n    const query = gql`\n      query topTokens($blacklist: [String!], $timestamp24hAgo: Int) {\n        tokenDayDatas(\n          first: 30\n          where: { dailyTxns_gt: 300, id_not_in: $blacklist, date_gt: $timestamp24hAgo }\n          orderBy: dailyVolumeUSD\n          orderDirection: desc\n        ) {\n          id\n        }\n      }\n    `;\n    const data = await request(INFO_CLIENT, query, {\n      blacklist: TOKEN_BLACKLIST,\n      timestamp24hAgo\n    }); // tokenDayDatas id has compound id \"0xTOKENADDRESS-NUMBERS\", extracting token address with .split('-')\n\n    return data.tokenDayDatas.map(t => t.id.split('-')[0]);\n  } catch (error) {\n    console.error('Failed to fetch top tokens', error);\n    return [];\n  }\n};\n/**\n * Fetch top addresses by volume\n */\n\n\nconst useTopTokenAddresses = () => {\n  _s();\n\n  const [topTokenAddresses, setTopTokenAddresses] = useState([]);\n  const [timestamp24hAgo] = getDeltaTimestamps();\n  useEffect(() => {\n    const fetch = async () => {\n      const addresses = await fetchTopTokens(timestamp24hAgo);\n      setTopTokenAddresses(addresses);\n    };\n\n    if (topTokenAddresses.length === 0) {\n      fetch();\n    }\n  }, [topTokenAddresses, timestamp24hAgo]);\n  return topTokenAddresses;\n};\n\n_s(useTopTokenAddresses, \"Sge+oAEzfjQ/H1SMZkOYBHkwb+Y=\");\n\nexport default useTopTokenAddresses;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/queries/tokens/topTokens.ts"],"names":["useEffect","useState","request","gql","INFO_CLIENT","TOKEN_BLACKLIST","getDeltaTimestamps","fetchTopTokens","timestamp24hAgo","query","data","blacklist","tokenDayDatas","map","t","id","split","error","console","useTopTokenAddresses","topTokenAddresses","setTopTokenAddresses","fetch","addresses","length"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SAASC,kBAAT,QAAmC,mCAAnC;;AAQA;AACA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG,MAAOC,eAAP,IAAsD;AAC3E,MAAI;AACF,UAAMC,KAAK,GAAGN,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAXI;AAYA,UAAMO,IAAI,GAAG,MAAMR,OAAO,CAAoBE,WAApB,EAAiCK,KAAjC,EAAwC;AAAEE,MAAAA,SAAS,EAAEN,eAAb;AAA8BG,MAAAA;AAA9B,KAAxC,CAA1B,CAbE,CAcF;;AACA,WAAOE,IAAI,CAACE,aAAL,CAAmBC,GAAnB,CAAwBC,CAAD,IAAOA,CAAC,CAACC,EAAF,CAAKC,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAA9B,CAAP;AACD,GAhBD,CAgBE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,4BAAd,EAA4CA,KAA5C;AACA,WAAO,EAAP;AACD;AACF,CArBD;AAuBA;AACA;AACA;;;AACA,MAAME,oBAAoB,GAAG,MAAgB;AAAA;;AAC3C,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CpB,QAAQ,CAAC,EAAD,CAA1D;AACA,QAAM,CAACO,eAAD,IAAoBF,kBAAkB,EAA5C;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,KAAK,GAAG,YAAY;AACxB,YAAMC,SAAS,GAAG,MAAMhB,cAAc,CAACC,eAAD,CAAtC;AACAa,MAAAA,oBAAoB,CAACE,SAAD,CAApB;AACD,KAHD;;AAIA,QAAIH,iBAAiB,CAACI,MAAlB,KAA6B,CAAjC,EAAoC;AAClCF,MAAAA,KAAK;AACN;AACF,GARQ,EAQN,CAACF,iBAAD,EAAoBZ,eAApB,CARM,CAAT;AAUA,SAAOY,iBAAP;AACD,CAfD;;GAAMD,oB;;AAiBN,eAAeA,oBAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\n\ninterface TopTokensResponse {\n  tokenDayDatas: {\n    id: string\n  }[]\n}\n\n/**\n * Tokens to display on Home page\n * The actual data is later requested in tokenData.ts\n * Note: dailyTxns_gt: 300 is there to prevent fetching incorrectly priced tokens with high dailyVolumeUSD\n */\nconst fetchTopTokens = async (timestamp24hAgo: number): Promise<string[]> => {\n  try {\n    const query = gql`\n      query topTokens($blacklist: [String!], $timestamp24hAgo: Int) {\n        tokenDayDatas(\n          first: 30\n          where: { dailyTxns_gt: 300, id_not_in: $blacklist, date_gt: $timestamp24hAgo }\n          orderBy: dailyVolumeUSD\n          orderDirection: desc\n        ) {\n          id\n        }\n      }\n    `\n    const data = await request<TopTokensResponse>(INFO_CLIENT, query, { blacklist: TOKEN_BLACKLIST, timestamp24hAgo })\n    // tokenDayDatas id has compound id \"0xTOKENADDRESS-NUMBERS\", extracting token address with .split('-')\n    return data.tokenDayDatas.map((t) => t.id.split('-')[0])\n  } catch (error) {\n    console.error('Failed to fetch top tokens', error)\n    return []\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useTopTokenAddresses = (): string[] => {\n  const [topTokenAddresses, setTopTokenAddresses] = useState([])\n  const [timestamp24hAgo] = getDeltaTimestamps()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const addresses = await fetchTopTokens(timestamp24hAgo)\n      setTopTokenAddresses(addresses)\n    }\n    if (topTokenAddresses.length === 0) {\n      fetch()\n    }\n  }, [topTokenAddresses, timestamp24hAgo])\n\n  return topTokenAddresses\n}\n\nexport default useTopTokenAddresses\n"]},"metadata":{},"sourceType":"module"}