{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _defineProperty from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _connectorsByName;import{InjectedConnector}from'@web3-react/injected-connector';import{WalletConnectConnector}from'@web3-react/walletconnect-connector';import{BscConnector}from'@binance-chain/bsc-connector';import{ConnectorNames}from'@pancakeswap/uikit';import{ethers}from'ethers';import getNodeUrl from'./getRpcUrl';var POLLING_INTERVAL=12000;var rpcUrl=getNodeUrl();var chainId=parseInt(process.env.REACT_APP_CHAIN_ID,10);var injected=new InjectedConnector({supportedChainIds:[chainId]});var walletconnect=new WalletConnectConnector({rpc:_defineProperty({},chainId,rpcUrl),qrcode:true,pollingInterval:POLLING_INTERVAL});var bscConnector=new BscConnector({supportedChainIds:[chainId]});export var connectorsByName=(_connectorsByName={},_defineProperty(_connectorsByName,ConnectorNames.Injected,injected),_defineProperty(_connectorsByName,ConnectorNames.WalletConnect,walletconnect),_defineProperty(_connectorsByName,ConnectorNames.BSC,bscConnector),_connectorsByName);export var getLibrary=function getLibrary(provider){var library=new ethers.providers.Web3Provider(provider);library.pollingInterval=POLLING_INTERVAL;return library;};/**\n * BSC Wallet requires a different sign method\n * @see https://docs.binance.org/smart-chain/wallet/wallet_api.html#binancechainbnbsignaddress-string-message-string-promisepublickey-string-signature-string\n */export var signMessage=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(provider,account,message){var _provider$provider;var _yield$window$Binance,signature,_provider$provider2,wcMessage,_signature;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!window.BinanceChain){_context.next=6;break;}_context.next=3;return window.BinanceChain.bnbSign(account,message);case 3:_yield$window$Binance=_context.sent;signature=_yield$window$Binance.signature;return _context.abrupt(\"return\",signature);case 6:if(!((_provider$provider=provider.provider)===null||_provider$provider===void 0?void 0:_provider$provider.wc)){_context.next=12;break;}wcMessage=ethers.utils.hexlify(ethers.utils.toUtf8Bytes(message));_context.next=10;return(_provider$provider2=provider.provider)===null||_provider$provider2===void 0?void 0:_provider$provider2.wc.signPersonalMessage([wcMessage,account]);case 10:_signature=_context.sent;return _context.abrupt(\"return\",_signature);case 12:return _context.abrupt(\"return\",provider.getSigner(account).signMessage(message));case 13:case\"end\":return _context.stop();}}},_callee);}));return function signMessage(_x,_x2,_x3){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/utils/web3React.ts"],"names":["InjectedConnector","WalletConnectConnector","BscConnector","ConnectorNames","ethers","getNodeUrl","POLLING_INTERVAL","rpcUrl","chainId","parseInt","process","env","REACT_APP_CHAIN_ID","injected","supportedChainIds","walletconnect","rpc","qrcode","pollingInterval","bscConnector","connectorsByName","Injected","WalletConnect","BSC","getLibrary","provider","library","providers","Web3Provider","signMessage","account","message","window","BinanceChain","bnbSign","signature","wc","wcMessage","utils","hexlify","toUtf8Bytes","signPersonalMessage","getSigner"],"mappings":"6dAAA,OAASA,iBAAT,KAAkC,gCAAlC,CACA,OAASC,sBAAT,KAAuC,qCAAvC,CACA,OAASC,YAAT,KAA6B,8BAA7B,CACA,OAASC,cAAT,KAA+B,oBAA/B,CACA,OAASC,MAAT,KAAuB,QAAvB,CACA,MAAOC,CAAAA,UAAP,KAAuB,aAAvB,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,KAAzB,CACA,GAAMC,CAAAA,MAAM,CAAGF,UAAU,EAAzB,CACA,GAAMG,CAAAA,OAAO,CAAGC,QAAQ,CAACC,OAAO,CAACC,GAAR,CAAYC,kBAAb,CAAiC,EAAjC,CAAxB,CAEA,GAAMC,CAAAA,QAAQ,CAAG,GAAIb,CAAAA,iBAAJ,CAAsB,CAAEc,iBAAiB,CAAE,CAACN,OAAD,CAArB,CAAtB,CAAjB,CAEA,GAAMO,CAAAA,aAAa,CAAG,GAAId,CAAAA,sBAAJ,CAA2B,CAC/Ce,GAAG,oBAAKR,OAAL,CAAeD,MAAf,CAD4C,CAE/CU,MAAM,CAAE,IAFuC,CAG/CC,eAAe,CAAEZ,gBAH8B,CAA3B,CAAtB,CAMA,GAAMa,CAAAA,YAAY,CAAG,GAAIjB,CAAAA,YAAJ,CAAiB,CAAEY,iBAAiB,CAAE,CAACN,OAAD,CAArB,CAAjB,CAArB,CAEA,MAAO,IAAMY,CAAAA,gBAA4D,yDACtEjB,cAAc,CAACkB,QADuD,CAC5CR,QAD4C,oCAEtEV,cAAc,CAACmB,aAFuD,CAEvCP,aAFuC,oCAGtEZ,cAAc,CAACoB,GAHuD,CAGjDJ,YAHiD,oBAAlE,CAMP,MAAO,IAAMK,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,QAAD,CAA6C,CACrE,GAAMC,CAAAA,OAAO,CAAG,GAAItB,CAAAA,MAAM,CAACuB,SAAP,CAAiBC,YAArB,CAAkCH,QAAlC,CAAhB,CACAC,OAAO,CAACR,eAAR,CAA0BZ,gBAA1B,CACA,MAAOoB,CAAAA,OAAP,CACD,CAJM,CAMP;AACA;AACA;AACA,GACA,MAAO,IAAMG,CAAAA,WAAW,0FAAG,iBAAOJ,QAAP,CAAsBK,OAAtB,CAAuCC,OAAvC,0NACrBC,MAAM,CAACC,YADc,+CAEKD,CAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BJ,OAA5B,CAAqCC,OAArC,CAFL,4CAEfI,SAFe,uBAEfA,SAFe,iCAGhBA,SAHgB,kCAUrBV,QAAQ,CAACA,QAVY,6CAUrB,mBAAmBW,EAVE,2BAWjBC,SAXiB,CAWLjC,MAAM,CAACkC,KAAP,CAAaC,OAAb,CAAqBnC,MAAM,CAACkC,KAAP,CAAaE,WAAb,CAAyBT,OAAzB,CAArB,CAXK,6CAYCN,QAAQ,CAACA,QAZV,8CAYC,oBAAmBW,EAAnB,CAAsBK,mBAAtB,CAA0C,CAACJ,SAAD,CAAYP,OAAZ,CAA1C,CAZD,SAYjBK,UAZiB,+CAahBA,UAbgB,0CAgBlBV,QAAQ,CAACiB,SAAT,CAAmBZ,OAAnB,EAA4BD,WAA5B,CAAwCE,OAAxC,CAhBkB,yDAAH,kBAAXF,CAAAA,WAAW,oDAAjB","sourcesContent":["import { InjectedConnector } from '@web3-react/injected-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { BscConnector } from '@binance-chain/bsc-connector'\nimport { ConnectorNames } from '@pancakeswap/uikit'\nimport { ethers } from 'ethers'\nimport getNodeUrl from './getRpcUrl'\n\nconst POLLING_INTERVAL = 12000\nconst rpcUrl = getNodeUrl()\nconst chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\n\nconst injected = new InjectedConnector({ supportedChainIds: [chainId] })\n\nconst walletconnect = new WalletConnectConnector({\n  rpc: { [chainId]: rpcUrl },\n  qrcode: true,\n  pollingInterval: POLLING_INTERVAL,\n})\n\nconst bscConnector = new BscConnector({ supportedChainIds: [chainId] })\n\nexport const connectorsByName: { [connectorName in ConnectorNames]: any } = {\n  [ConnectorNames.Injected]: injected,\n  [ConnectorNames.WalletConnect]: walletconnect,\n  [ConnectorNames.BSC]: bscConnector,\n}\n\nexport const getLibrary = (provider): ethers.providers.Web3Provider => {\n  const library = new ethers.providers.Web3Provider(provider)\n  library.pollingInterval = POLLING_INTERVAL\n  return library\n}\n\n/**\n * BSC Wallet requires a different sign method\n * @see https://docs.binance.org/smart-chain/wallet/wallet_api.html#binancechainbnbsignaddress-string-message-string-promisepublickey-string-signature-string\n */\nexport const signMessage = async (provider: any, account: string, message: string): Promise<string> => {\n  if (window.BinanceChain) {\n    const { signature } = await window.BinanceChain.bnbSign(account, message)\n    return signature\n  }\n\n  /**\n   * Wallet Connect does not sign the message correctly unless you use their method\n   * @see https://github.com/WalletConnect/walletconnect-monorepo/issues/462\n   */\n  if (provider.provider?.wc) {\n    const wcMessage = ethers.utils.hexlify(ethers.utils.toUtf8Bytes(message))\n    const signature = await provider.provider?.wc.signPersonalMessage([wcMessage, account])\n    return signature\n  }\n\n  return provider.getSigner(account).signMessage(message)\n}\n"]},"metadata":{},"sourceType":"module"}