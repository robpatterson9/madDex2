{"ast":null,"code":"import React from'react';import{Flex,LinkExternal,Text,Tag,CheckmarkCircleIcon}from'@pancakeswap/uikit';import truncateHash from'utils/truncateHash';import{getBscScanLink}from'utils';import{useTranslation}from'contexts/Localization';import{IPFS_GATEWAY}from'../../config';import TextEllipsis from'../TextEllipsis';import Row,{AddressColumn,ChoiceColumn,VotingPowerColumn}from'./Row';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var VoteRow=function VoteRow(_ref){var _vote$metadata;var vote=_ref.vote,isVoter=_ref.isVoter;var _useTranslation=useTranslation(),t=_useTranslation.t;var hasVotingPower=!!((_vote$metadata=vote.metadata)===null||_vote$metadata===void 0?void 0:_vote$metadata.votingPower);var votingPower=hasVotingPower?parseFloat(vote.metadata.votingPower).toLocaleString(undefined,{minimumFractionDigits:0,maximumFractionDigits:3}):'--';return/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(AddressColumn,{children:/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",children:[/*#__PURE__*/_jsx(LinkExternal,{href:getBscScanLink(vote.voter,'address'),children:truncateHash(vote.voter)}),isVoter&&/*#__PURE__*/_jsxs(Tag,{variant:\"success\",outline:true,ml:\"8px\",children:[/*#__PURE__*/_jsx(CheckmarkCircleIcon,{mr:\"4px\"}),\" \",t('Voted')]})]})}),/*#__PURE__*/_jsx(ChoiceColumn,{children:/*#__PURE__*/_jsx(TextEllipsis,{title:vote.proposal.choices[vote.choice-1],children:vote.proposal.choices[vote.choice-1]})}),/*#__PURE__*/_jsx(VotingPowerColumn,{children:/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",justifyContent:\"end\",children:[/*#__PURE__*/_jsx(Text,{title:vote.metadata.votingPower,children:votingPower}),hasVotingPower&&/*#__PURE__*/_jsx(LinkExternal,{href:\"\".concat(IPFS_GATEWAY,\"/\").concat(vote.id)})]})})]});};export default VoteRow;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Voting/components/Proposal/VoteRow.tsx"],"names":["React","Flex","LinkExternal","Text","Tag","CheckmarkCircleIcon","truncateHash","getBscScanLink","useTranslation","IPFS_GATEWAY","TextEllipsis","Row","AddressColumn","ChoiceColumn","VotingPowerColumn","VoteRow","vote","isVoter","t","hasVotingPower","metadata","votingPower","parseFloat","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","voter","proposal","choices","choice","id"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,CAAeC,YAAf,CAA6BC,IAA7B,CAAmCC,GAAnC,CAAwCC,mBAAxC,KAAmE,oBAAnE,CACA,MAAOC,CAAAA,YAAP,KAAyB,oBAAzB,CACA,OAASC,cAAT,KAA+B,OAA/B,CACA,OAASC,cAAT,KAA+B,uBAA/B,CAEA,OAASC,YAAT,KAA6B,cAA7B,CACA,MAAOC,CAAAA,YAAP,KAAyB,iBAAzB,CACA,MAAOC,CAAAA,GAAP,EAAcC,aAAd,CAA6BC,YAA7B,CAA2CC,iBAA3C,KAAoE,OAApE,C,wFAOA,GAAMC,CAAAA,OAA+B,CAAG,QAAlCA,CAAAA,OAAkC,MAAuB,uBAApBC,CAAAA,IAAoB,MAApBA,IAAoB,CAAdC,OAAc,MAAdA,OAAc,CAC7D,oBAAcT,cAAc,EAA5B,CAAQU,CAAR,iBAAQA,CAAR,CACA,GAAMC,CAAAA,cAAc,CAAG,CAAC,kBAACH,IAAI,CAACI,QAAN,yCAAC,eAAeC,WAAhB,CAAxB,CACA,GAAMA,CAAAA,WAAW,CAAGF,cAAc,CAC9BG,UAAU,CAACN,IAAI,CAACI,QAAL,CAAcC,WAAf,CAAV,CAAsCE,cAAtC,CAAqDC,SAArD,CAAgE,CAC9DC,qBAAqB,CAAE,CADuC,CAE9DC,qBAAqB,CAAE,CAFuC,CAAhE,CAD8B,CAK9B,IALJ,CAOA,mBACE,MAAC,GAAD,yBACE,KAAC,aAAD,wBACE,MAAC,IAAD,EAAM,UAAU,CAAC,QAAjB,wBACE,KAAC,YAAD,EAAc,IAAI,CAAEnB,cAAc,CAACS,IAAI,CAACW,KAAN,CAAa,SAAb,CAAlC,UAA4DrB,YAAY,CAACU,IAAI,CAACW,KAAN,CAAxE,EADF,CAEGV,OAAO,eACN,MAAC,GAAD,EAAK,OAAO,CAAC,SAAb,CAAuB,OAAO,KAA9B,CAA+B,EAAE,CAAC,KAAlC,wBACE,KAAC,mBAAD,EAAqB,EAAE,CAAC,KAAxB,EADF,KACoCC,CAAC,CAAC,OAAD,CADrC,GAHJ,GADF,EADF,cAWE,KAAC,YAAD,wBACE,KAAC,YAAD,EAAc,KAAK,CAAEF,IAAI,CAACY,QAAL,CAAcC,OAAd,CAAsBb,IAAI,CAACc,MAAL,CAAc,CAApC,CAArB,UACGd,IAAI,CAACY,QAAL,CAAcC,OAAd,CAAsBb,IAAI,CAACc,MAAL,CAAc,CAApC,CADH,EADF,EAXF,cAgBE,KAAC,iBAAD,wBACE,MAAC,IAAD,EAAM,UAAU,CAAC,QAAjB,CAA0B,cAAc,CAAC,KAAzC,wBACE,KAAC,IAAD,EAAM,KAAK,CAAEd,IAAI,CAACI,QAAL,CAAcC,WAA3B,UAAyCA,WAAzC,EADF,CAEGF,cAAc,eAAI,KAAC,YAAD,EAAc,IAAI,WAAKV,YAAL,aAAqBO,IAAI,CAACe,EAA1B,CAAlB,EAFrB,GADF,EAhBF,GADF,CAyBD,CAnCD,CAqCA,cAAehB,CAAAA,OAAf","sourcesContent":["import React from 'react'\nimport { Flex, LinkExternal, Text, Tag, CheckmarkCircleIcon } from '@pancakeswap/uikit'\nimport truncateHash from 'utils/truncateHash'\nimport { getBscScanLink } from 'utils'\nimport { useTranslation } from 'contexts/Localization'\nimport { Vote } from 'state/types'\nimport { IPFS_GATEWAY } from '../../config'\nimport TextEllipsis from '../TextEllipsis'\nimport Row, { AddressColumn, ChoiceColumn, VotingPowerColumn } from './Row'\n\ninterface VoteRowProps {\n  vote: Vote\n  isVoter: boolean\n}\n\nconst VoteRow: React.FC<VoteRowProps> = ({ vote, isVoter }) => {\n  const { t } = useTranslation()\n  const hasVotingPower = !!vote.metadata?.votingPower\n  const votingPower = hasVotingPower\n    ? parseFloat(vote.metadata.votingPower).toLocaleString(undefined, {\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 3,\n      })\n    : '--'\n\n  return (\n    <Row>\n      <AddressColumn>\n        <Flex alignItems=\"center\">\n          <LinkExternal href={getBscScanLink(vote.voter, 'address')}>{truncateHash(vote.voter)}</LinkExternal>\n          {isVoter && (\n            <Tag variant=\"success\" outline ml=\"8px\">\n              <CheckmarkCircleIcon mr=\"4px\" /> {t('Voted')}\n            </Tag>\n          )}\n        </Flex>\n      </AddressColumn>\n      <ChoiceColumn>\n        <TextEllipsis title={vote.proposal.choices[vote.choice - 1]}>\n          {vote.proposal.choices[vote.choice - 1]}\n        </TextEllipsis>\n      </ChoiceColumn>\n      <VotingPowerColumn>\n        <Flex alignItems=\"center\" justifyContent=\"end\">\n          <Text title={vote.metadata.votingPower}>{votingPower}</Text>\n          {hasVotingPower && <LinkExternal href={`${IPFS_GATEWAY}/${vote.id}`} />}\n        </Flex>\n      </VotingPowerColumn>\n    </Row>\n  )\n}\n\nexport default VoteRow\n"]},"metadata":{},"sourceType":"module"}