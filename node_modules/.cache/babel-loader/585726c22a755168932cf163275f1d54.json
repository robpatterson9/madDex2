{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Pools/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { ethers } from 'ethers';\nimport { formatUnits } from 'ethers/lib/utils';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport { Heading, Flex, Image, Text } from '@pancakeswap/uikit';\nimport orderBy from 'lodash/orderBy';\nimport partition from 'lodash/partition';\nimport { useTranslation } from 'contexts/Localization';\nimport useIntersectionObserver from 'hooks/useIntersectionObserver';\nimport { useFetchPublicPoolsData, usePools, useFetchUserPools, useFetchCakeVault, useCakeVault } from 'state/pools/hooks';\nimport { usePollFarmsPublicData } from 'state/farms/hooks';\nimport { latinise } from 'utils/latinise';\nimport FlexLayout from 'components/Layout/Flex';\nimport Page from 'components/Layout/Page';\nimport PageHeader from 'components/PageHeader';\nimport SearchInput from 'components/SearchInput';\nimport Select from 'components/Select/Select';\nimport { useUserPoolStakedOnly, useUserPoolsViewMode } from 'state/user/hooks';\nimport { ViewMode } from 'state/user/actions';\nimport Loading from 'components/Loading';\nimport PoolCard from './components/PoolCard';\nimport CakeVaultCard from './components/CakeVaultCard';\nimport PoolTabButtons from './components/PoolTabButtons';\nimport BountyCard from './components/BountyCard';\nimport HelpButton from './components/HelpButton';\nimport PoolsTable from './components/PoolsTable/PoolsTable';\nimport { getAprData, getCakeVaultEarnings } from './helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CardLayout = styled(FlexLayout)`\n  justify-content: center;\n`;\n_c = CardLayout;\nconst PoolControls = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`;\n_c2 = PoolControls;\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`;\n_c3 = FilterContainer;\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`;\n_c4 = LabelWrapper;\nconst ControlStretch = styled(Flex)`\n  > div {\n    flex: 1;\n  }\n`;\n_c5 = ControlStretch;\nconst NUMBER_OF_POOLS_VISIBLE = 12;\n\nconst Pools = () => {\n  _s();\n\n  const location = useLocation();\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    pools: poolsWithoutAutoVault,\n    userDataLoaded\n  } = usePools();\n  const [stakedOnly, setStakedOnly] = useUserPoolStakedOnly();\n  const [viewMode, setViewMode] = useUserPoolsViewMode();\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE);\n  const {\n    observerRef,\n    isIntersecting\n  } = useIntersectionObserver();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [sortOption, setSortOption] = useState('hot');\n  const chosenPoolsLength = useRef(0);\n  const {\n    userData: {\n      cakeAtLastUserAction,\n      userShares\n    },\n    fees: {\n      performanceFee\n    },\n    pricePerFullShare,\n    totalCakeInVault\n  } = useCakeVault();\n  const accountHasVaultShares = userShares && userShares.gt(0);\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100;\n  const pools = useMemo(() => {\n    const cakePool = poolsWithoutAutoVault.find(pool => pool.sousId === 0);\n    const cakeAutoVault = { ...cakePool,\n      isAutoVault: true\n    };\n    return [cakeAutoVault, ...poolsWithoutAutoVault];\n  }, [poolsWithoutAutoVault]); // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\n\n  const [finishedPools, openPools] = useMemo(() => partition(pools, pool => pool.isFinished), [pools]);\n  const stakedOnlyFinishedPools = useMemo(() => finishedPools.filter(pool => {\n    if (pool.isAutoVault) {\n      return accountHasVaultShares;\n    }\n\n    return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0);\n  }), [finishedPools, accountHasVaultShares]);\n  const stakedOnlyOpenPools = useMemo(() => openPools.filter(pool => {\n    if (pool.isAutoVault) {\n      return accountHasVaultShares;\n    }\n\n    return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0);\n  }), [openPools, accountHasVaultShares]);\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0;\n  usePollFarmsPublicData();\n  useFetchCakeVault();\n  useFetchPublicPoolsData();\n  useFetchUserPools(account);\n  useEffect(() => {\n    if (isIntersecting) {\n      setNumberOfPoolsVisible(poolsCurrentlyVisible => {\n        if (poolsCurrentlyVisible <= chosenPoolsLength.current) {\n          return poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE;\n        }\n\n        return poolsCurrentlyVisible;\n      });\n    }\n  }, [isIntersecting]);\n  const showFinishedPools = location.pathname.includes('history');\n\n  const handleChangeSearchQuery = event => {\n    setSearchQuery(event.target.value);\n  };\n\n  const handleSortOptionChange = option => {\n    setSortOption(option.value);\n  };\n\n  const sortPools = poolsToSort => {\n    switch (sortOption) {\n      case 'apr':\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\n        return orderBy(poolsToSort, pool => pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0, 'desc');\n\n      case 'earned':\n        return orderBy(poolsToSort, pool => {\n          if (!pool.userData || !pool.earningTokenPrice) {\n            return 0;\n          }\n\n          return pool.isAutoVault ? getCakeVaultEarnings(account, cakeAtLastUserAction, userShares, pricePerFullShare, pool.earningTokenPrice).autoUsdToDisplay : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber();\n        }, 'desc');\n\n      case 'totalStaked':\n        return orderBy(poolsToSort, pool => {\n          var _pool$totalStaked2;\n\n          let totalStaked = Number.NaN;\n\n          if (pool.isAutoVault) {\n            if (totalCakeInVault.isFinite()) {\n              totalStaked = +formatUnits(ethers.BigNumber.from(totalCakeInVault.toString()), pool.stakingToken.decimals);\n            }\n          } else if (pool.sousId === 0) {\n            var _pool$totalStaked;\n\n            if (((_pool$totalStaked = pool.totalStaked) === null || _pool$totalStaked === void 0 ? void 0 : _pool$totalStaked.isFinite()) && totalCakeInVault.isFinite()) {\n              const manualCakeTotalMinusAutoVault = ethers.BigNumber.from(pool.totalStaked.toString()).sub(totalCakeInVault.toString());\n              totalStaked = +formatUnits(manualCakeTotalMinusAutoVault, pool.stakingToken.decimals);\n            }\n          } else if ((_pool$totalStaked2 = pool.totalStaked) === null || _pool$totalStaked2 === void 0 ? void 0 : _pool$totalStaked2.isFinite()) {\n            totalStaked = +formatUnits(ethers.BigNumber.from(pool.totalStaked.toString()), pool.stakingToken.decimals);\n          }\n\n          return Number.isFinite(totalStaked) ? totalStaked : 0;\n        }, 'desc');\n\n      default:\n        return poolsToSort;\n    }\n  };\n\n  let chosenPools;\n\n  if (showFinishedPools) {\n    chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools;\n  } else {\n    chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools;\n  }\n\n  if (searchQuery) {\n    const lowercaseQuery = latinise(searchQuery.toLowerCase());\n    chosenPools = chosenPools.filter(pool => latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery));\n  }\n\n  chosenPools = sortPools(chosenPools).slice(0, numberOfPoolsVisible);\n  chosenPoolsLength.current = chosenPools.length;\n\n  const cardLayout = /*#__PURE__*/_jsxDEV(CardLayout, {\n    children: chosenPools.map(pool => pool.isAutoVault ? /*#__PURE__*/_jsxDEV(CakeVaultCard, {\n      pool: pool,\n      showStakedOnly: stakedOnly\n    }, \"auto-cake\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(PoolCard, {\n      pool: pool,\n      account: account\n    }, pool.sousId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 241,\n    columnNumber: 5\n  }, this);\n\n  const tableLayout = /*#__PURE__*/_jsxDEV(PoolsTable, {\n    pools: chosenPools,\n    account: account,\n    userDataLoaded: userDataLoaded\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 23\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PageHeader, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        flexDirection: ['column', null, null, 'row'],\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          flex: \"1\",\n          flexDirection: \"column\",\n          mr: ['8px', 0],\n          children: [/*#__PURE__*/_jsxDEV(Heading, {\n            as: \"h1\",\n            scale: \"xxl\",\n            color: \"secondary\",\n            mb: \"24px\",\n            children: t('Syrup Pools')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Heading, {\n            scale: \"md\",\n            color: \"text\",\n            children: t('Just stake some tokens to earn.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Heading, {\n            scale: \"md\",\n            color: \"text\",\n            children: t('High APR, low risk.')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          flex: \"1\",\n          height: \"fit-content\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          mt: ['24px', null, '0'],\n          children: [/*#__PURE__*/_jsxDEV(HelpButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BountyCard, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Page, {\n      children: [/*#__PURE__*/_jsxDEV(PoolControls, {\n        children: [/*#__PURE__*/_jsxDEV(PoolTabButtons, {\n          stakedOnly: stakedOnly,\n          setStakedOnly: setStakedOnly,\n          hasStakeInFinishedPools: hasStakeInFinishedPools,\n          viewMode: viewMode,\n          setViewMode: setViewMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FilterContainer, {\n          children: [/*#__PURE__*/_jsxDEV(LabelWrapper, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              fontSize: \"12px\",\n              bold: true,\n              color: \"textSubtle\",\n              textTransform: \"uppercase\",\n              children: t('Sort by')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ControlStretch, {\n              children: /*#__PURE__*/_jsxDEV(Select, {\n                options: [{\n                  label: t('Hot'),\n                  value: 'hot'\n                }, {\n                  label: t('APR'),\n                  value: 'apr'\n                }, {\n                  label: t('Earned'),\n                  value: 'earned'\n                }, {\n                  label: t('Total staked'),\n                  value: 'totalStaked'\n                }],\n                onOptionChange: handleSortOptionChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 290,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LabelWrapper, {\n            style: {\n              marginLeft: 16\n            },\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              fontSize: \"12px\",\n              bold: true,\n              color: \"textSubtle\",\n              textTransform: \"uppercase\",\n              children: t('Search')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SearchInput, {\n              onChange: handleChangeSearchQuery,\n              placeholder: \"Search Pools\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), showFinishedPools && /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"20px\",\n        color: \"failure\",\n        pb: \"32px\",\n        children: t('These pools are no longer distributing rewards. Please unstake your tokens.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this), account && !userDataLoaded && stakedOnly && /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"center\",\n        mb: \"4px\",\n        children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 11\n      }, this), viewMode === ViewMode.CARD ? cardLayout : tableLayout, /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: observerRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Image, {\n        mx: \"auto\",\n        mt: \"12px\",\n        src: \"/images/decorations/3d-syrup-bunnies.png\",\n        alt: \"Pancake illustration\",\n        width: 192,\n        height: 184.5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Pools, \"4t2ZkkOmmJMdqN5ZKNo0QBVIj1c=\", false, function () {\n  return [useLocation, useTranslation, useWeb3React, usePools, useUserPoolStakedOnly, useUserPoolsViewMode, useIntersectionObserver, useCakeVault, usePollFarmsPublicData, useFetchCakeVault, useFetchPublicPoolsData, useFetchUserPools];\n});\n\n_c6 = Pools;\nexport default Pools;\n\nvar _c, _c2, _c3, _c4, _c5, _c6;\n\n$RefreshReg$(_c, \"CardLayout\");\n$RefreshReg$(_c2, \"PoolControls\");\n$RefreshReg$(_c3, \"FilterContainer\");\n$RefreshReg$(_c4, \"LabelWrapper\");\n$RefreshReg$(_c5, \"ControlStretch\");\n$RefreshReg$(_c6, \"Pools\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/index.tsx"],"names":["React","useEffect","useMemo","useRef","useState","useLocation","styled","ethers","formatUnits","BigNumber","useWeb3React","Heading","Flex","Image","Text","orderBy","partition","useTranslation","useIntersectionObserver","useFetchPublicPoolsData","usePools","useFetchUserPools","useFetchCakeVault","useCakeVault","usePollFarmsPublicData","latinise","FlexLayout","Page","PageHeader","SearchInput","Select","useUserPoolStakedOnly","useUserPoolsViewMode","ViewMode","Loading","PoolCard","CakeVaultCard","PoolTabButtons","BountyCard","HelpButton","PoolsTable","getAprData","getCakeVaultEarnings","CardLayout","PoolControls","div","theme","mediaQueries","sm","FilterContainer","LabelWrapper","ControlStretch","NUMBER_OF_POOLS_VISIBLE","Pools","location","t","account","pools","poolsWithoutAutoVault","userDataLoaded","stakedOnly","setStakedOnly","viewMode","setViewMode","numberOfPoolsVisible","setNumberOfPoolsVisible","observerRef","isIntersecting","searchQuery","setSearchQuery","sortOption","setSortOption","chosenPoolsLength","userData","cakeAtLastUserAction","userShares","fees","performanceFee","pricePerFullShare","totalCakeInVault","accountHasVaultShares","gt","performanceFeeAsDecimal","cakePool","find","pool","sousId","cakeAutoVault","isAutoVault","finishedPools","openPools","isFinished","stakedOnlyFinishedPools","filter","stakedBalance","isGreaterThan","stakedOnlyOpenPools","hasStakeInFinishedPools","length","poolsCurrentlyVisible","current","showFinishedPools","pathname","includes","handleChangeSearchQuery","event","target","value","handleSortOptionChange","option","sortPools","poolsToSort","apr","earningTokenPrice","autoUsdToDisplay","pendingReward","times","toNumber","totalStaked","Number","NaN","isFinite","from","toString","stakingToken","decimals","manualCakeTotalMinusAutoVault","sub","chosenPools","lowercaseQuery","toLowerCase","earningToken","symbol","slice","cardLayout","map","tableLayout","label","marginLeft","CARD"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useRef, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { ethers } from 'ethers'\nimport { formatUnits } from 'ethers/lib/utils'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Heading, Flex, Image, Text } from '@pancakeswap/uikit'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport { useTranslation } from 'contexts/Localization'\nimport useIntersectionObserver from 'hooks/useIntersectionObserver'\nimport {\n  useFetchPublicPoolsData,\n  usePools,\n  useFetchUserPools,\n  useFetchCakeVault,\n  useCakeVault,\n} from 'state/pools/hooks'\nimport { usePollFarmsPublicData } from 'state/farms/hooks'\nimport { latinise } from 'utils/latinise'\nimport FlexLayout from 'components/Layout/Flex'\nimport Page from 'components/Layout/Page'\nimport PageHeader from 'components/PageHeader'\nimport SearchInput from 'components/SearchInput'\nimport Select, { OptionProps } from 'components/Select/Select'\nimport { DeserializedPool } from 'state/types'\nimport { useUserPoolStakedOnly, useUserPoolsViewMode } from 'state/user/hooks'\nimport { ViewMode } from 'state/user/actions'\nimport Loading from 'components/Loading'\nimport PoolCard from './components/PoolCard'\nimport CakeVaultCard from './components/CakeVaultCard'\nimport PoolTabButtons from './components/PoolTabButtons'\nimport BountyCard from './components/BountyCard'\nimport HelpButton from './components/HelpButton'\nimport PoolsTable from './components/PoolsTable/PoolsTable'\nimport { getAprData, getCakeVaultEarnings } from './helpers'\n\nconst CardLayout = styled(FlexLayout)`\n  justify-content: center;\n`\n\nconst PoolControls = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst ControlStretch = styled(Flex)`\n  > div {\n    flex: 1;\n  }\n`\n\nconst NUMBER_OF_POOLS_VISIBLE = 12\n\nconst Pools: React.FC = () => {\n  const location = useLocation()\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const { pools: poolsWithoutAutoVault, userDataLoaded } = usePools()\n  const [stakedOnly, setStakedOnly] = useUserPoolStakedOnly()\n  const [viewMode, setViewMode] = useUserPoolsViewMode()\n  const [numberOfPoolsVisible, setNumberOfPoolsVisible] = useState(NUMBER_OF_POOLS_VISIBLE)\n  const { observerRef, isIntersecting } = useIntersectionObserver()\n  const [searchQuery, setSearchQuery] = useState('')\n  const [sortOption, setSortOption] = useState('hot')\n  const chosenPoolsLength = useRef(0)\n  const {\n    userData: { cakeAtLastUserAction, userShares },\n    fees: { performanceFee },\n    pricePerFullShare,\n    totalCakeInVault,\n  } = useCakeVault()\n  const accountHasVaultShares = userShares && userShares.gt(0)\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  const pools = useMemo(() => {\n    const cakePool = poolsWithoutAutoVault.find((pool) => pool.sousId === 0)\n    const cakeAutoVault = { ...cakePool, isAutoVault: true }\n    return [cakeAutoVault, ...poolsWithoutAutoVault]\n  }, [poolsWithoutAutoVault])\n\n  // TODO aren't arrays in dep array checked just by reference, i.e. it will rerender every time reference changes?\n  const [finishedPools, openPools] = useMemo(() => partition(pools, (pool) => pool.isFinished), [pools])\n  const stakedOnlyFinishedPools = useMemo(\n    () =>\n      finishedPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [finishedPools, accountHasVaultShares],\n  )\n  const stakedOnlyOpenPools = useMemo(\n    () =>\n      openPools.filter((pool) => {\n        if (pool.isAutoVault) {\n          return accountHasVaultShares\n        }\n        return pool.userData && new BigNumber(pool.userData.stakedBalance).isGreaterThan(0)\n      }),\n    [openPools, accountHasVaultShares],\n  )\n  const hasStakeInFinishedPools = stakedOnlyFinishedPools.length > 0\n\n  usePollFarmsPublicData()\n  useFetchCakeVault()\n  useFetchPublicPoolsData()\n  useFetchUserPools(account)\n\n  useEffect(() => {\n    if (isIntersecting) {\n      setNumberOfPoolsVisible((poolsCurrentlyVisible) => {\n        if (poolsCurrentlyVisible <= chosenPoolsLength.current) {\n          return poolsCurrentlyVisible + NUMBER_OF_POOLS_VISIBLE\n        }\n        return poolsCurrentlyVisible\n      })\n    }\n  }, [isIntersecting])\n\n  const showFinishedPools = location.pathname.includes('history')\n\n  const handleChangeSearchQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value)\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  const sortPools = (poolsToSort: DeserializedPool[]) => {\n    switch (sortOption) {\n      case 'apr':\n        // Ternary is needed to prevent pools without APR (like MIX) getting top spot\n        return orderBy(\n          poolsToSort,\n          (pool: DeserializedPool) => (pool.apr ? getAprData(pool, performanceFeeAsDecimal).apr : 0),\n          'desc',\n        )\n      case 'earned':\n        return orderBy(\n          poolsToSort,\n          (pool: DeserializedPool) => {\n            if (!pool.userData || !pool.earningTokenPrice) {\n              return 0\n            }\n            return pool.isAutoVault\n              ? getCakeVaultEarnings(\n                  account,\n                  cakeAtLastUserAction,\n                  userShares,\n                  pricePerFullShare,\n                  pool.earningTokenPrice,\n                ).autoUsdToDisplay\n              : pool.userData.pendingReward.times(pool.earningTokenPrice).toNumber()\n          },\n          'desc',\n        )\n      case 'totalStaked':\n        return orderBy(\n          poolsToSort,\n          (pool: DeserializedPool) => {\n            let totalStaked = Number.NaN\n            if (pool.isAutoVault) {\n              if (totalCakeInVault.isFinite()) {\n                totalStaked = +formatUnits(\n                  ethers.BigNumber.from(totalCakeInVault.toString()),\n                  pool.stakingToken.decimals,\n                )\n              }\n            } else if (pool.sousId === 0) {\n              if (pool.totalStaked?.isFinite() && totalCakeInVault.isFinite()) {\n                const manualCakeTotalMinusAutoVault = ethers.BigNumber.from(pool.totalStaked.toString()).sub(\n                  totalCakeInVault.toString(),\n                )\n                totalStaked = +formatUnits(manualCakeTotalMinusAutoVault, pool.stakingToken.decimals)\n              }\n            } else if (pool.totalStaked?.isFinite()) {\n              totalStaked = +formatUnits(ethers.BigNumber.from(pool.totalStaked.toString()), pool.stakingToken.decimals)\n            }\n            return Number.isFinite(totalStaked) ? totalStaked : 0\n          },\n          'desc',\n        )\n      default:\n        return poolsToSort\n    }\n  }\n\n  let chosenPools\n  if (showFinishedPools) {\n    chosenPools = stakedOnly ? stakedOnlyFinishedPools : finishedPools\n  } else {\n    chosenPools = stakedOnly ? stakedOnlyOpenPools : openPools\n  }\n\n  if (searchQuery) {\n    const lowercaseQuery = latinise(searchQuery.toLowerCase())\n    chosenPools = chosenPools.filter((pool) =>\n      latinise(pool.earningToken.symbol.toLowerCase()).includes(lowercaseQuery),\n    )\n  }\n\n  chosenPools = sortPools(chosenPools).slice(0, numberOfPoolsVisible)\n  chosenPoolsLength.current = chosenPools.length\n\n  const cardLayout = (\n    <CardLayout>\n      {chosenPools.map((pool) =>\n        pool.isAutoVault ? (\n          <CakeVaultCard key=\"auto-cake\" pool={pool} showStakedOnly={stakedOnly} />\n        ) : (\n          <PoolCard key={pool.sousId} pool={pool} account={account} />\n        ),\n      )}\n    </CardLayout>\n  )\n\n  const tableLayout = <PoolsTable pools={chosenPools} account={account} userDataLoaded={userDataLoaded} />\n\n  return (\n    <>\n      <PageHeader>\n        <Flex justifyContent=\"space-between\" flexDirection={['column', null, null, 'row']}>\n          <Flex flex=\"1\" flexDirection=\"column\" mr={['8px', 0]}>\n            <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\" mb=\"24px\">\n              {t('Syrup Pools')}\n            </Heading>\n            <Heading scale=\"md\" color=\"text\">\n              {t('Just stake some tokens to earn.')}\n            </Heading>\n            <Heading scale=\"md\" color=\"text\">\n              {t('High APR, low risk.')}\n            </Heading>\n          </Flex>\n          <Flex flex=\"1\" height=\"fit-content\" justifyContent=\"center\" alignItems=\"center\" mt={['24px', null, '0']}>\n            <HelpButton />\n            <BountyCard />\n          </Flex>\n        </Flex>\n      </PageHeader>\n      <Page>\n        <PoolControls>\n          <PoolTabButtons\n            stakedOnly={stakedOnly}\n            setStakedOnly={setStakedOnly}\n            hasStakeInFinishedPools={hasStakeInFinishedPools}\n            viewMode={viewMode}\n            setViewMode={setViewMode}\n          />\n          <FilterContainer>\n            <LabelWrapper>\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\n                {t('Sort by')}\n              </Text>\n              <ControlStretch>\n                <Select\n                  options={[\n                    {\n                      label: t('Hot'),\n                      value: 'hot',\n                    },\n                    {\n                      label: t('APR'),\n                      value: 'apr',\n                    },\n                    {\n                      label: t('Earned'),\n                      value: 'earned',\n                    },\n                    {\n                      label: t('Total staked'),\n                      value: 'totalStaked',\n                    },\n                  ]}\n                  onOptionChange={handleSortOptionChange}\n                />\n              </ControlStretch>\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\">\n                {t('Search')}\n              </Text>\n              <SearchInput onChange={handleChangeSearchQuery} placeholder=\"Search Pools\" />\n            </LabelWrapper>\n          </FilterContainer>\n        </PoolControls>\n        {showFinishedPools && (\n          <Text fontSize=\"20px\" color=\"failure\" pb=\"32px\">\n            {t('These pools are no longer distributing rewards. Please unstake your tokens.')}\n          </Text>\n        )}\n        {account && !userDataLoaded && stakedOnly && (\n          <Flex justifyContent=\"center\" mb=\"4px\">\n            <Loading />\n          </Flex>\n        )}\n        {viewMode === ViewMode.CARD ? cardLayout : tableLayout}\n        <div ref={observerRef} />\n        <Image\n          mx=\"auto\"\n          mt=\"12px\"\n          src=\"/images/decorations/3d-syrup-bunnies.png\"\n          alt=\"Pancake illustration\"\n          width={192}\n          height={184.5}\n        />\n      </Page>\n    </>\n  )\n}\n\nexport default Pools\n"]},"metadata":{},"sourceType":"module"}