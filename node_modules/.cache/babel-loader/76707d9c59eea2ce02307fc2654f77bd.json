{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Info/Overview/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Flex, Box, Text, Heading, Card, Skeleton } from '@pancakeswap/uikit';\nimport { format, fromUnixTime } from 'date-fns';\nimport { useTranslation } from 'contexts/Localization';\nimport Page from 'components/Layout/Page';\nimport LineChart from 'views/Info/components/InfoCharts/LineChart';\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable';\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable';\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers';\nimport BarChart from 'views/Info/components/InfoCharts/BarChart';\nimport { useAllPoolData, useAllTokenData, useProtocolChartData, useProtocolData, useProtocolTransactions } from 'state/info/hooks';\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ChartCardsContainer = styled(Flex)`\n  justify-content: space-between;\n  flex-direction: column;\n  width: 100%;\n  padding: 0;\n  gap: 1em;\n\n  & > * {\n    width: 100%;\n  }\n\n  ${({\n  theme\n}) => theme.mediaQueries.md} {\n    flex-direction: row;\n  } ;\n`;\n_c = ChartCardsContainer;\n\nconst Overview = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [liquidityHover, setLiquidityHover] = useState();\n  const [liquidityDateHover, setLiquidityDateHover] = useState();\n  const [volumeHover, setVolumeHover] = useState();\n  const [volumeDateHover, setVolumeDateHover] = useState();\n  const [protocolData] = useProtocolData();\n  const [chartData] = useProtocolChartData();\n  const [transactions] = useProtocolTransactions();\n  const currentDate = format(new Date(), 'MMM d, yyyy'); // Getting latest liquidity and volumeUSD to display on top of chart when not hovered\n\n  useEffect(() => {\n    if (volumeHover == null && protocolData) {\n      setVolumeHover(protocolData.volumeUSD);\n    }\n  }, [protocolData, volumeHover]);\n  useEffect(() => {\n    if (liquidityHover == null && protocolData) {\n      setLiquidityHover(protocolData.liquidityUSD);\n    }\n  }, [liquidityHover, protocolData]);\n  const formattedLiquidityData = useMemo(() => {\n    if (chartData) {\n      return chartData.map(day => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.liquidityUSD\n        };\n      });\n    }\n\n    return [];\n  }, [chartData]);\n  const formattedVolumeData = useMemo(() => {\n    if (chartData) {\n      return chartData.map(day => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.volumeUSD\n        };\n      });\n    }\n\n    return [];\n  }, [chartData]);\n  const allTokens = useAllTokenData();\n  const formattedTokens = useMemo(() => {\n    return Object.values(allTokens).map(token => token.data).filter(token => token);\n  }, [allTokens]);\n  const allPoolData = useAllPoolData();\n  const poolDatas = useMemo(() => {\n    return Object.values(allPoolData).map(pool => pool.data).filter(pool => pool);\n  }, [allPoolData]);\n  const somePoolsAreLoading = useMemo(() => {\n    return Object.values(allPoolData).some(pool => !pool.data);\n  }, [allPoolData]);\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(Heading, {\n      scale: \"lg\",\n      mb: \"16px\",\n      id: \"info-overview-title\",\n      children: t('PancakeSwap Info & Analytics')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChartCardsContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          p: ['16px', '16px', '24px'],\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            bold: true,\n            color: \"secondary\",\n            children: t('Liquidity')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), liquidityHover > 0 ? /*#__PURE__*/_jsxDEV(Text, {\n            bold: true,\n            fontSize: \"24px\",\n            children: [\"$\", formatAmount(liquidityHover)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n            width: \"128px\",\n            height: \"36px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            children: liquidityDateHover !== null && liquidityDateHover !== void 0 ? liquidityDateHover : currentDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            height: \"250px\",\n            children: /*#__PURE__*/_jsxDEV(LineChart, {\n              data: formattedLiquidityData,\n              setHoverValue: setLiquidityHover,\n              setHoverDate: setLiquidityDateHover\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          p: ['16px', '16px', '24px'],\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            bold: true,\n            color: \"secondary\",\n            children: t('Volume 24H')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), volumeHover > 0 ? /*#__PURE__*/_jsxDEV(Text, {\n            bold: true,\n            fontSize: \"24px\",\n            children: [\"$\", formatAmount(volumeHover)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n            width: \"128px\",\n            height: \"36px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            children: volumeDateHover !== null && volumeDateHover !== void 0 ? volumeDateHover : currentDate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            height: \"250px\",\n            children: /*#__PURE__*/_jsxDEV(BarChart, {\n              data: formattedVolumeData,\n              setHoverValue: setVolumeHover,\n              setHoverDate: setVolumeDateHover\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      scale: \"lg\",\n      mt: \"40px\",\n      mb: \"16px\",\n      children: t('Top Tokens')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TokenTable, {\n      tokenDatas: formattedTokens\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      scale: \"lg\",\n      mt: \"40px\",\n      mb: \"16px\",\n      children: t('Top Pools')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PoolTable, {\n      poolDatas: poolDatas,\n      loading: somePoolsAreLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      scale: \"lg\",\n      mt: \"40px\",\n      mb: \"16px\",\n      children: t('Transactions')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransactionTable, {\n      transactions: transactions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Overview, \"oPYugDbDfZ1EH/bWo7IJFlpMlxw=\", false, function () {\n  return [useTranslation, useProtocolData, useProtocolChartData, useProtocolTransactions, useAllTokenData, useAllPoolData];\n});\n\n_c2 = Overview;\nexport default Overview;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChartCardsContainer\");\n$RefreshReg$(_c2, \"Overview\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Info/Overview/index.tsx"],"names":["React","useState","useMemo","useEffect","styled","Flex","Box","Text","Heading","Card","Skeleton","format","fromUnixTime","useTranslation","Page","LineChart","TokenTable","PoolTable","formatAmount","BarChart","useAllPoolData","useAllTokenData","useProtocolChartData","useProtocolData","useProtocolTransactions","TransactionTable","ChartCardsContainer","theme","mediaQueries","md","Overview","t","liquidityHover","setLiquidityHover","liquidityDateHover","setLiquidityDateHover","volumeHover","setVolumeHover","volumeDateHover","setVolumeDateHover","protocolData","chartData","transactions","currentDate","Date","volumeUSD","liquidityUSD","formattedLiquidityData","map","day","time","date","value","formattedVolumeData","allTokens","formattedTokens","Object","values","token","data","filter","allPoolData","poolDatas","pool","somePoolsAreLoading","some"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Flex, Box, Text, Heading, Card, Skeleton } from '@pancakeswap/uikit'\nimport { format, fromUnixTime } from 'date-fns'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/Layout/Page'\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\nimport TokenTable from 'views/Info/components/InfoTables/TokensTable'\nimport PoolTable from 'views/Info/components/InfoTables/PoolsTable'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\nimport {\n  useAllPoolData,\n  useAllTokenData,\n  useProtocolChartData,\n  useProtocolData,\n  useProtocolTransactions,\n} from 'state/info/hooks'\nimport TransactionTable from 'views/Info/components/InfoTables/TransactionsTable'\n\nexport const ChartCardsContainer = styled(Flex)`\n  justify-content: space-between;\n  flex-direction: column;\n  width: 100%;\n  padding: 0;\n  gap: 1em;\n\n  & > * {\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex-direction: row;\n  } ;\n`\n\nconst Overview: React.FC = () => {\n  const { t } = useTranslation()\n  const [liquidityHover, setLiquidityHover] = useState<number | undefined>()\n  const [liquidityDateHover, setLiquidityDateHover] = useState<string | undefined>()\n  const [volumeHover, setVolumeHover] = useState<number | undefined>()\n  const [volumeDateHover, setVolumeDateHover] = useState<string | undefined>()\n\n  const [protocolData] = useProtocolData()\n  const [chartData] = useProtocolChartData()\n  const [transactions] = useProtocolTransactions()\n\n  const currentDate = format(new Date(), 'MMM d, yyyy')\n\n  // Getting latest liquidity and volumeUSD to display on top of chart when not hovered\n  useEffect(() => {\n    if (volumeHover == null && protocolData) {\n      setVolumeHover(protocolData.volumeUSD)\n    }\n  }, [protocolData, volumeHover])\n  useEffect(() => {\n    if (liquidityHover == null && protocolData) {\n      setLiquidityHover(protocolData.liquidityUSD)\n    }\n  }, [liquidityHover, protocolData])\n\n  const formattedLiquidityData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.liquidityUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const formattedVolumeData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.volumeUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const allTokens = useAllTokenData()\n\n  const formattedTokens = useMemo(() => {\n    return Object.values(allTokens)\n      .map((token) => token.data)\n      .filter((token) => token)\n  }, [allTokens])\n\n  const allPoolData = useAllPoolData()\n  const poolDatas = useMemo(() => {\n    return Object.values(allPoolData)\n      .map((pool) => pool.data)\n      .filter((pool) => pool)\n  }, [allPoolData])\n\n  const somePoolsAreLoading = useMemo(() => {\n    return Object.values(allPoolData).some((pool) => !pool.data)\n  }, [allPoolData])\n\n  return (\n    <Page>\n      <Heading scale=\"lg\" mb=\"16px\" id=\"info-overview-title\">\n        {t('PancakeSwap Info & Analytics')}\n      </Heading>\n      <ChartCardsContainer>\n        <Card>\n          <Box p={['16px', '16px', '24px']}>\n            <Text bold color=\"secondary\">\n              {t('Liquidity')}\n            </Text>\n            {liquidityHover > 0 ? (\n              <Text bold fontSize=\"24px\">\n                ${formatAmount(liquidityHover)}\n              </Text>\n            ) : (\n              <Skeleton width=\"128px\" height=\"36px\" />\n            )}\n            <Text>{liquidityDateHover ?? currentDate}</Text>\n            <Box height=\"250px\">\n              <LineChart\n                data={formattedLiquidityData}\n                setHoverValue={setLiquidityHover}\n                setHoverDate={setLiquidityDateHover}\n              />\n            </Box>\n          </Box>\n        </Card>\n        <Card>\n          <Box p={['16px', '16px', '24px']}>\n            <Text bold color=\"secondary\">\n              {t('Volume 24H')}\n            </Text>\n            {volumeHover > 0 ? (\n              <Text bold fontSize=\"24px\">\n                ${formatAmount(volumeHover)}\n              </Text>\n            ) : (\n              <Skeleton width=\"128px\" height=\"36px\" />\n            )}\n            <Text>{volumeDateHover ?? currentDate}</Text>\n            <Box height=\"250px\">\n              <BarChart data={formattedVolumeData} setHoverValue={setVolumeHover} setHoverDate={setVolumeDateHover} />\n            </Box>\n          </Box>\n        </Card>\n      </ChartCardsContainer>\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Tokens')}\n      </Heading>\n      <TokenTable tokenDatas={formattedTokens} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Top Pools')}\n      </Heading>\n      <PoolTable poolDatas={poolDatas} loading={somePoolsAreLoading} />\n      <Heading scale=\"lg\" mt=\"40px\" mb=\"16px\">\n        {t('Transactions')}\n      </Heading>\n      <TransactionTable transactions={transactions} />\n    </Page>\n  )\n}\n\nexport default Overview\n"]},"metadata":{},"sourceType":"module"}