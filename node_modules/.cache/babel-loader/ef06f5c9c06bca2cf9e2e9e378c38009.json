{"ast":null,"code":"import _toConsumableArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _defineProperty from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _templateObject,_templateObject2,_templateObject3;import request,{gql}from'graphql-request';import{SNAPSHOT_API,SNAPSHOT_VOTING_API}from'config/constants/endpoints';import{ProposalState}from'state/types';import{simpleRpcProvider}from'utils/providers';export var getProposals=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var first,skip,state,response,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:first=_args.length>0&&_args[0]!==undefined?_args[0]:5;skip=_args.length>1&&_args[1]!==undefined?_args[1]:0;state=_args.length>2&&_args[2]!==undefined?_args[2]:ProposalState.ACTIVE;_context.next=5;return request(SNAPSHOT_API,gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n      query getProposals($first: Int!, $skip: Int!, $state: String!) {\\n        proposals(\\n          first: $first\\n          skip: $skip\\n          orderBy: \\\"end\\\"\\n          orderDirection: desc\\n          where: { space_in: \\\"cake.eth\\\", state: $state }\\n        ) {\\n          id\\n          title\\n          body\\n          choices\\n          start\\n          end\\n          snapshot\\n          state\\n          author\\n          space {\\n            id\\n            name\\n          }\\n        }\\n      }\\n    \"]))),{first:first,skip:skip,state:state});case 5:response=_context.sent;return _context.abrupt(\"return\",response.proposals);case 7:case\"end\":return _context.stop();}}},_callee);}));return function getProposals(){return _ref.apply(this,arguments);};}();export var getProposal=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id){var response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return request(SNAPSHOT_API,gql(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n      query getProposal($id: String) {\\n        proposal(id: $id) {\\n          id\\n          title\\n          body\\n          choices\\n          start\\n          end\\n          snapshot\\n          state\\n          author\\n          space {\\n            id\\n            name\\n          }\\n        }\\n      }\\n    \"]))),{id:id});case 2:response=_context2.sent;return _context2.abrupt(\"return\",response.proposal);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function getProposal(_x){return _ref2.apply(this,arguments);};}();export var getVotes=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(first,skip,where){var response;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return request(SNAPSHOT_API,gql(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n      query getVotes($first: Int, $skip: Int, $where: VoteWhere) {\\n        votes(first: $first, skip: $skip, where: $where) {\\n          id\\n          voter\\n          created\\n          choice\\n          space {\\n            id\\n            name\\n          }\\n          proposal {\\n            choices\\n          }\\n          metadata\\n        }\\n      }\\n    \"]))),{first:first,skip:skip,where:where});case 2:response=_context3.sent;return _context3.abrupt(\"return\",response.votes);case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function getVotes(_x2,_x3,_x4){return _ref3.apply(this,arguments);};}();export var getVoteVerificationStatuses=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(votes,block){var blockNumber,votesToVerify,response,data;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.t0=block;if(_context4.t0){_context4.next=5;break;}_context4.next=4;return simpleRpcProvider.getBlockNumber();case 4:_context4.t0=_context4.sent;case 5:blockNumber=_context4.t0;votesToVerify=votes.map(function(vote){var _vote$metadata,_vote$metadata2;return{address:vote.voter,verificationHash:(_vote$metadata=vote.metadata)===null||_vote$metadata===void 0?void 0:_vote$metadata.verificationHash,total:(_vote$metadata2=vote.metadata)===null||_vote$metadata2===void 0?void 0:_vote$metadata2.votingPower};});_context4.next=9;return fetch(\"\".concat(SNAPSHOT_VOTING_API,\"/verify\"),{method:'post',headers:{'Content-Type':'application/json'},body:JSON.stringify({block:blockNumber,votes:votesToVerify})});case 9:response=_context4.sent;if(response.ok){_context4.next=12;break;}throw new Error(response.statusText);case 12:_context4.next=14;return response.json();case 14:data=_context4.sent;return _context4.abrupt(\"return\",votes.reduce(function(accum,vote){var _data$data$vote$voter;return _objectSpread(_objectSpread({},accum),{},_defineProperty({},vote.id,((_data$data$vote$voter=data.data[vote.voter.toLowerCase()])===null||_data$data$vote$voter===void 0?void 0:_data$data$vote$voter.isValid)===true));},{}));case 16:case\"end\":return _context4.stop();}}},_callee4);}));return function getVoteVerificationStatuses(_x5,_x6){return _ref4.apply(this,arguments);};}();export var getAllVotes=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(proposalId,block){var votesPerChunk,_args6=arguments;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:votesPerChunk=_args6.length>2&&_args6[2]!==undefined?_args6[2]:1000;return _context6.abrupt(\"return\",new Promise(function(resolve,reject){var votes=[];var fetchVoteChunk=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(newSkip){var voteChunk;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.prev=0;_context5.next=3;return getVotes(votesPerChunk,newSkip,{proposal:proposalId});case 3:voteChunk=_context5.sent;if(voteChunk.length===0){resolve(votes);}else{votes=[].concat(_toConsumableArray(votes),_toConsumableArray(voteChunk));fetchVoteChunk(newSkip+votesPerChunk);}_context5.next=10;break;case 7:_context5.prev=7;_context5.t0=_context5[\"catch\"](0);reject(_context5.t0);case 10:case\"end\":return _context5.stop();}}},_callee5,null,[[0,7]]);}));return function fetchVoteChunk(_x9){return _ref6.apply(this,arguments);};}();fetchVoteChunk(0);}));case 2:case\"end\":return _context6.stop();}}},_callee6);}));return function getAllVotes(_x7,_x8){return _ref5.apply(this,arguments);};}();","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/voting/helpers.ts"],"names":["request","gql","SNAPSHOT_API","SNAPSHOT_VOTING_API","ProposalState","simpleRpcProvider","getProposals","first","skip","state","ACTIVE","response","proposals","getProposal","id","proposal","getVotes","where","votes","getVoteVerificationStatuses","block","getBlockNumber","blockNumber","votesToVerify","map","vote","address","voter","verificationHash","metadata","total","votingPower","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","json","data","reduce","accum","toLowerCase","isValid","getAllVotes","proposalId","votesPerChunk","Promise","resolve","reject","fetchVoteChunk","newSkip","voteChunk","length"],"mappings":"49BAAA,MAAOA,CAAAA,OAAP,EAAkBC,GAAlB,KAA6B,iBAA7B,CACA,OAASC,YAAT,CAAuBC,mBAAvB,KAAkD,4BAAlD,CACA,OAAmBC,aAAnB,KAAyD,aAAzD,CACA,OAASC,iBAAT,KAAkC,iBAAlC,CAEA,MAAO,IAAMC,CAAAA,YAAY,0FAAG,iLAAOC,KAAP,+CAAe,CAAf,CAAkBC,IAAlB,+CAAyB,CAAzB,CAA4BC,KAA5B,+CAAoCL,aAAa,CAACM,MAAlD,uBACwBV,CAAAA,OAAO,CACvDE,YADuD,CAEvDD,GAFuD,wkBA2BvD,CAAEM,KAAK,CAALA,KAAF,CAASC,IAAI,CAAJA,IAAT,CAAeC,KAAK,CAALA,KAAf,CA3BuD,CAD/B,QACpBE,QADoB,+CA8BnBA,QAAQ,CAACC,SA9BU,wDAAH,kBAAZN,CAAAA,YAAY,0CAAlB,CAiCP,MAAO,IAAMO,CAAAA,WAAW,2FAAG,kBAAOC,EAAP,0JACsBd,CAAAA,OAAO,CACpDE,YADoD,CAEpDD,GAFoD,8XAqBpD,CAAEa,EAAE,CAAFA,EAAF,CArBoD,CAD7B,QACnBH,QADmB,iDAwBlBA,QAAQ,CAACI,QAxBS,0DAAH,kBAAXF,CAAAA,WAAW,6CAAjB,CA2BP,MAAO,IAAMG,CAAAA,QAAQ,2FAAG,kBAAOT,KAAP,CAAsBC,IAAtB,CAAoCS,KAApC,0JACoBjB,CAAAA,OAAO,CAC/CE,YAD+C,CAE/CD,GAF+C,gbAoB/C,CAAEM,KAAK,CAALA,KAAF,CAASC,IAAI,CAAJA,IAAT,CAAeS,KAAK,CAALA,KAAf,CApB+C,CAD3B,QAChBN,QADgB,iDAuBfA,QAAQ,CAACO,KAvBM,0DAAH,kBAARF,CAAAA,QAAQ,sDAAd,CA0BP,MAAO,IAAMG,CAAAA,2BAA2B,2FAAG,kBACzCD,KADyC,CAEzCE,KAFyC,+KAIrBA,KAJqB,iEAILf,CAAAA,iBAAiB,CAACgB,cAAlB,EAJK,2CAInCC,WAJmC,cAMnCC,aANmC,CAMnBL,KAAK,CAACM,GAAN,CAAU,SAACC,IAAD,2CAAW,CACzCC,OAAO,CAAED,IAAI,CAACE,KAD2B,CAEzCC,gBAAgB,iBAAEH,IAAI,CAACI,QAAP,yCAAE,eAAeD,gBAFQ,CAGzCE,KAAK,kBAAEL,IAAI,CAACI,QAAP,0CAAE,gBAAeE,WAHmB,CAAX,EAAV,CANmB,wBAWlBC,CAAAA,KAAK,WAAI7B,mBAAJ,YAAkC,CAC5D8B,MAAM,CAAE,MADoD,CAE5DC,OAAO,CAAE,CACP,eAAgB,kBADT,CAFmD,CAK5DC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,CACnBjB,KAAK,CAAEE,WADY,CAEnBJ,KAAK,CAAEK,aAFY,CAAf,CALsD,CAAlC,CAXa,QAWnCZ,QAXmC,mBAsBpCA,QAAQ,CAAC2B,EAtB2B,gCAuBjC,IAAIC,CAAAA,KAAJ,CAAU5B,QAAQ,CAAC6B,UAAnB,CAvBiC,iCA0BtB7B,CAAAA,QAAQ,CAAC8B,IAAT,EA1BsB,SA0BnCC,IA1BmC,iDA2BlCxB,KAAK,CAACyB,MAAN,CAAa,SAACC,KAAD,CAAQnB,IAAR,CAAiB,2BACnC,sCACKmB,KADL,wBAEGnB,IAAI,CAACX,EAFR,CAEa,wBAAA4B,IAAI,CAACA,IAAL,CAAUjB,IAAI,CAACE,KAAL,CAAWkB,WAAX,EAAV,uEAAqCC,OAArC,IAAiD,IAF9D,GAID,CALM,CAKJ,EALI,CA3BkC,2DAAH,kBAA3B3B,CAAAA,2BAA2B,kDAAjC,CAmCP,MAAO,IAAM4B,CAAAA,WAAW,2FAAG,kBAAOC,UAAP,CAA2B5B,KAA3B,yJAA2C6B,aAA3C,kDAA2D,IAA3D,kCAElB,GAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtC,GAAIlC,CAAAA,KAAa,CAAG,EAApB,CAEA,GAAMmC,CAAAA,cAAc,2FAAG,kBAAOC,OAAP,4KAEKtC,CAAAA,QAAQ,CAACiC,aAAD,CAAgBK,OAAhB,CAAyB,CAAEvC,QAAQ,CAAEiC,UAAZ,CAAzB,CAFb,QAEbO,SAFa,gBAInB,GAAIA,SAAS,CAACC,MAAV,GAAqB,CAAzB,CAA4B,CAC1BL,OAAO,CAACjC,KAAD,CAAP,CACD,CAFD,IAEO,CACLA,KAAK,8BAAOA,KAAP,qBAAiBqC,SAAjB,EAAL,CACAF,cAAc,CAACC,OAAO,CAAGL,aAAX,CAAd,CACD,CATkB,mFAWnBG,MAAM,cAAN,CAXmB,sEAAH,kBAAdC,CAAAA,cAAc,8CAApB,CAeAA,cAAc,CAAC,CAAD,CAAd,CACD,CAnBM,CAFkB,0DAAH,kBAAXN,CAAAA,WAAW,kDAAjB","sourcesContent":["import request, { gql } from 'graphql-request'\nimport { SNAPSHOT_API, SNAPSHOT_VOTING_API } from 'config/constants/endpoints'\nimport { Proposal, ProposalState, Vote, VoteWhere } from 'state/types'\nimport { simpleRpcProvider } from 'utils/providers'\n\nexport const getProposals = async (first = 5, skip = 0, state = ProposalState.ACTIVE): Promise<Proposal[]> => {\n  const response: { proposals: Proposal[] } = await request(\n    SNAPSHOT_API,\n    gql`\n      query getProposals($first: Int!, $skip: Int!, $state: String!) {\n        proposals(\n          first: $first\n          skip: $skip\n          orderBy: \"end\"\n          orderDirection: desc\n          where: { space_in: \"cake.eth\", state: $state }\n        ) {\n          id\n          title\n          body\n          choices\n          start\n          end\n          snapshot\n          state\n          author\n          space {\n            id\n            name\n          }\n        }\n      }\n    `,\n    { first, skip, state },\n  )\n  return response.proposals\n}\n\nexport const getProposal = async (id: string): Promise<Proposal> => {\n  const response: { proposal: Proposal } = await request(\n    SNAPSHOT_API,\n    gql`\n      query getProposal($id: String) {\n        proposal(id: $id) {\n          id\n          title\n          body\n          choices\n          start\n          end\n          snapshot\n          state\n          author\n          space {\n            id\n            name\n          }\n        }\n      }\n    `,\n    { id },\n  )\n  return response.proposal\n}\n\nexport const getVotes = async (first: number, skip: number, where: VoteWhere): Promise<Vote[]> => {\n  const response: { votes: Vote[] } = await request(\n    SNAPSHOT_API,\n    gql`\n      query getVotes($first: Int, $skip: Int, $where: VoteWhere) {\n        votes(first: $first, skip: $skip, where: $where) {\n          id\n          voter\n          created\n          choice\n          space {\n            id\n            name\n          }\n          proposal {\n            choices\n          }\n          metadata\n        }\n      }\n    `,\n    { first, skip, where },\n  )\n  return response.votes\n}\n\nexport const getVoteVerificationStatuses = async (\n  votes: Vote[],\n  block?: number,\n): Promise<{ [key: string]: boolean }> => {\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n\n  const votesToVerify = votes.map((vote) => ({\n    address: vote.voter,\n    verificationHash: vote.metadata?.verificationHash,\n    total: vote.metadata?.votingPower,\n  }))\n  const response = await fetch(`${SNAPSHOT_VOTING_API}/verify`, {\n    method: 'post',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      block: blockNumber,\n      votes: votesToVerify,\n    }),\n  })\n\n  if (!response.ok) {\n    throw new Error(response.statusText)\n  }\n\n  const data = await response.json()\n  return votes.reduce((accum, vote) => {\n    return {\n      ...accum,\n      [vote.id]: data.data[vote.voter.toLowerCase()]?.isValid === true,\n    }\n  }, {})\n}\n\nexport const getAllVotes = async (proposalId: string, block?: number, votesPerChunk = 1000): Promise<Vote[]> => {\n  // const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n  return new Promise((resolve, reject) => {\n    let votes: Vote[] = []\n\n    const fetchVoteChunk = async (newSkip: number) => {\n      try {\n        const voteChunk = await getVotes(votesPerChunk, newSkip, { proposal: proposalId })\n\n        if (voteChunk.length === 0) {\n          resolve(votes)\n        } else {\n          votes = [...votes, ...voteChunk]\n          fetchVoteChunk(newSkip + votesPerChunk)\n        }\n      } catch (error) {\n        reject(error)\n      }\n    }\n\n    fetchVoteChunk(0)\n  })\n}\n"]},"metadata":{},"sourceType":"module"}