{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { request, gql } from 'graphql-request';\nimport { INFO_CLIENT } from 'config/constants/endpoints';\nimport { TOKEN_BLACKLIST } from 'config/constants/info';\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers';\n\n/**\n * Initial pools to display on the home page\n */\nconst fetchTopPools = async timestamp24hAgo => {\n  try {\n    const query = gql`\n      query topPools($blacklist: [String!], $timestamp24hAgo: Int) {\n        pairDayDatas(\n          first: 30\n          where: { dailyTxns_gt: 300, token0_not_in: $blacklist, token1_not_in: $blacklist, date_gt: $timestamp24hAgo }\n          orderBy: dailyVolumeUSD\n          orderDirection: desc\n        ) {\n          id\n        }\n      }\n    `;\n    const data = await request(INFO_CLIENT, query, {\n      blacklist: TOKEN_BLACKLIST,\n      timestamp24hAgo\n    }); // pairDayDatas id has compound id \"0xPOOLADDRESS-NUMBERS\", extracting pool address with .split('-')\n\n    return data.pairDayDatas.map(p => p.id.split('-')[0]);\n  } catch (error) {\n    console.error('Failed to fetch top pools', error);\n    return [];\n  }\n};\n/**\n * Fetch top addresses by volume\n */\n\n\nconst useTopPoolAddresses = () => {\n  _s();\n\n  const [topPoolAddresses, setTopPoolAddresse] = useState([]);\n  const [timestamp24hAgo] = getDeltaTimestamps();\n  useEffect(() => {\n    const fetch = async () => {\n      const addresses = await fetchTopPools(timestamp24hAgo);\n      setTopPoolAddresse(addresses);\n    };\n\n    if (topPoolAddresses.length === 0) {\n      fetch();\n    }\n  }, [topPoolAddresses, timestamp24hAgo]);\n  return topPoolAddresses;\n};\n\n_s(useTopPoolAddresses, \"swYLTQeAxfOi4PC3SrH3vuaF8fY=\");\n\nexport default useTopPoolAddresses;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/queries/pools/topPools.ts"],"names":["useState","useEffect","request","gql","INFO_CLIENT","TOKEN_BLACKLIST","getDeltaTimestamps","fetchTopPools","timestamp24hAgo","query","data","blacklist","pairDayDatas","map","p","id","split","error","console","useTopPoolAddresses","topPoolAddresses","setTopPoolAddresse","fetch","addresses","length"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,SAASC,kBAAT,QAAmC,mCAAnC;;AAQA;AACA;AACA;AACA,MAAMC,aAAa,GAAG,MAAOC,eAAP,IAAsD;AAC1E,MAAI;AACF,UAAMC,KAAK,GAAGN,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAXI;AAYA,UAAMO,IAAI,GAAG,MAAMR,OAAO,CAAmBE,WAAnB,EAAgCK,KAAhC,EAAuC;AAAEE,MAAAA,SAAS,EAAEN,eAAb;AAA8BG,MAAAA;AAA9B,KAAvC,CAA1B,CAbE,CAcF;;AACA,WAAOE,IAAI,CAACE,YAAL,CAAkBC,GAAlB,CAAuBC,CAAD,IAAOA,CAAC,CAACC,EAAF,CAAKC,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAA7B,CAAP;AACD,GAhBD,CAgBE,OAAOC,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,2BAAd,EAA2CA,KAA3C;AACA,WAAO,EAAP;AACD;AACF,CArBD;AAuBA;AACA;AACA;;;AACA,MAAME,mBAAmB,GAAG,MAAgB;AAAA;;AAC1C,QAAM,CAACC,gBAAD,EAAmBC,kBAAnB,IAAyCrB,QAAQ,CAAC,EAAD,CAAvD;AACA,QAAM,CAACQ,eAAD,IAAoBF,kBAAkB,EAA5C;AAEAL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMqB,KAAK,GAAG,YAAY;AACxB,YAAMC,SAAS,GAAG,MAAMhB,aAAa,CAACC,eAAD,CAArC;AACAa,MAAAA,kBAAkB,CAACE,SAAD,CAAlB;AACD,KAHD;;AAIA,QAAIH,gBAAgB,CAACI,MAAjB,KAA4B,CAAhC,EAAmC;AACjCF,MAAAA,KAAK;AACN;AACF,GARQ,EAQN,CAACF,gBAAD,EAAmBZ,eAAnB,CARM,CAAT;AAUA,SAAOY,gBAAP;AACD,CAfD;;GAAMD,mB;;AAiBN,eAAeA,mBAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\n\ninterface TopPoolsResponse {\n  pairDayDatas: {\n    id: string\n  }[]\n}\n\n/**\n * Initial pools to display on the home page\n */\nconst fetchTopPools = async (timestamp24hAgo: number): Promise<string[]> => {\n  try {\n    const query = gql`\n      query topPools($blacklist: [String!], $timestamp24hAgo: Int) {\n        pairDayDatas(\n          first: 30\n          where: { dailyTxns_gt: 300, token0_not_in: $blacklist, token1_not_in: $blacklist, date_gt: $timestamp24hAgo }\n          orderBy: dailyVolumeUSD\n          orderDirection: desc\n        ) {\n          id\n        }\n      }\n    `\n    const data = await request<TopPoolsResponse>(INFO_CLIENT, query, { blacklist: TOKEN_BLACKLIST, timestamp24hAgo })\n    // pairDayDatas id has compound id \"0xPOOLADDRESS-NUMBERS\", extracting pool address with .split('-')\n    return data.pairDayDatas.map((p) => p.id.split('-')[0])\n  } catch (error) {\n    console.error('Failed to fetch top pools', error)\n    return []\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useTopPoolAddresses = (): string[] => {\n  const [topPoolAddresses, setTopPoolAddresse] = useState([])\n  const [timestamp24hAgo] = getDeltaTimestamps()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const addresses = await fetchTopPools(timestamp24hAgo)\n      setTopPoolAddresse(addresses)\n    }\n    if (topPoolAddresses.length === 0) {\n      fetch()\n    }\n  }, [topPoolAddresses, timestamp24hAgo])\n\n  return topPoolAddresses\n}\n\nexport default useTopPoolAddresses\n"]},"metadata":{},"sourceType":"module"}