{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport { useTranslation } from 'contexts/Localization';\nimport { multicallv2 } from 'utils/multicall';\nimport profileABI from 'config/abi/pancakeProfile.json';\nimport { getPancakeProfileAddress } from 'utils/addressHelpers';\nimport useToast from 'hooks/useToast';\n\nconst useGetProfileCosts = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [costs, setCosts] = useState({\n    numberCakeToReactivate: ethers.BigNumber.from(0),\n    numberCakeToRegister: ethers.BigNumber.from(0),\n    numberCakeToUpdate: ethers.BigNumber.from(0)\n  });\n  const {\n    toastError\n  } = useToast();\n  useEffect(() => {\n    const fetchCosts = async () => {\n      try {\n        const calls = ['numberCakeToReactivate', 'numberCakeToRegister', 'numberCakeToUpdate'].map(method => ({\n          address: getPancakeProfileAddress(),\n          name: method\n        }));\n        const [[numberCakeToReactivate], [numberCakeToRegister], [numberCakeToUpdate]] = await multicallv2(profileABI, calls);\n        setCosts({\n          numberCakeToReactivate,\n          numberCakeToRegister,\n          numberCakeToUpdate\n        });\n      } catch (error) {\n        toastError(t('Error'), t('Could not retrieve CAKE costs for profile'));\n      }\n    };\n\n    fetchCosts();\n  }, [setCosts, toastError, t]);\n  return costs;\n};\n\n_s(useGetProfileCosts, \"yxW55co5tS+vYdWESw60JHmkyBA=\", false, function () {\n  return [useTranslation, useToast];\n});\n\nexport default useGetProfileCosts;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Profile/hooks/useGetProfileCosts.ts"],"names":["useEffect","useState","ethers","useTranslation","multicallv2","profileABI","getPancakeProfileAddress","useToast","useGetProfileCosts","t","costs","setCosts","numberCakeToReactivate","BigNumber","from","numberCakeToRegister","numberCakeToUpdate","toastError","fetchCosts","calls","map","method","address","name","error"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AACA,OAAOC,QAAP,MAAqB,gBAArB;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAQN,cAAc,EAA5B;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC;AACjCW,IAAAA,sBAAsB,EAAEV,MAAM,CAACW,SAAP,CAAiBC,IAAjB,CAAsB,CAAtB,CADS;AAEjCC,IAAAA,oBAAoB,EAAEb,MAAM,CAACW,SAAP,CAAiBC,IAAjB,CAAsB,CAAtB,CAFW;AAGjCE,IAAAA,kBAAkB,EAAEd,MAAM,CAACW,SAAP,CAAiBC,IAAjB,CAAsB,CAAtB;AAHa,GAAD,CAAlC;AAKA,QAAM;AAAEG,IAAAA;AAAF,MAAiBV,QAAQ,EAA/B;AAEAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMkB,UAAU,GAAG,YAAY;AAC7B,UAAI;AACF,cAAMC,KAAK,GAAG,CAAC,wBAAD,EAA2B,sBAA3B,EAAmD,oBAAnD,EAAyEC,GAAzE,CAA8EC,MAAD,KAAa;AACtGC,UAAAA,OAAO,EAAEhB,wBAAwB,EADqE;AAEtGiB,UAAAA,IAAI,EAAEF;AAFgG,SAAb,CAA7E,CAAd;AAIA,cAAM,CAAC,CAACT,sBAAD,CAAD,EAA2B,CAACG,oBAAD,CAA3B,EAAmD,CAACC,kBAAD,CAAnD,IAA2E,MAAMZ,WAAW,CAEhGC,UAFgG,EAEpFc,KAFoF,CAAlG;AAIAR,QAAAA,QAAQ,CAAC;AACPC,UAAAA,sBADO;AAEPG,UAAAA,oBAFO;AAGPC,UAAAA;AAHO,SAAD,CAAR;AAKD,OAdD,CAcE,OAAOQ,KAAP,EAAc;AACdP,QAAAA,UAAU,CAACR,CAAC,CAAC,OAAD,CAAF,EAAaA,CAAC,CAAC,2CAAD,CAAd,CAAV;AACD;AACF,KAlBD;;AAoBAS,IAAAA,UAAU;AACX,GAtBQ,EAsBN,CAACP,QAAD,EAAWM,UAAX,EAAuBR,CAAvB,CAtBM,CAAT;AAwBA,SAAOC,KAAP;AACD,CAlCD;;GAAMF,kB;UACUL,c,EAMSI,Q;;;AA6BzB,eAAeC,kBAAf","sourcesContent":["import { useEffect, useState } from 'react'\nimport { ethers } from 'ethers'\nimport { useTranslation } from 'contexts/Localization'\nimport { multicallv2 } from 'utils/multicall'\nimport profileABI from 'config/abi/pancakeProfile.json'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport useToast from 'hooks/useToast'\n\nconst useGetProfileCosts = () => {\n  const { t } = useTranslation()\n  const [costs, setCosts] = useState({\n    numberCakeToReactivate: ethers.BigNumber.from(0),\n    numberCakeToRegister: ethers.BigNumber.from(0),\n    numberCakeToUpdate: ethers.BigNumber.from(0),\n  })\n  const { toastError } = useToast()\n\n  useEffect(() => {\n    const fetchCosts = async () => {\n      try {\n        const calls = ['numberCakeToReactivate', 'numberCakeToRegister', 'numberCakeToUpdate'].map((method) => ({\n          address: getPancakeProfileAddress(),\n          name: method,\n        }))\n        const [[numberCakeToReactivate], [numberCakeToRegister], [numberCakeToUpdate]] = await multicallv2<\n          [[ethers.BigNumber], [ethers.BigNumber], [ethers.BigNumber]]\n        >(profileABI, calls)\n\n        setCosts({\n          numberCakeToReactivate,\n          numberCakeToRegister,\n          numberCakeToUpdate,\n        })\n      } catch (error) {\n        toastError(t('Error'), t('Could not retrieve CAKE costs for profile'))\n      }\n    }\n\n    fetchCosts()\n  }, [setCosts, toastError, t])\n\n  return costs\n}\n\nexport default useGetProfileCosts\n"]},"metadata":{},"sourceType":"module"}