{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Profile/components/UserNfts.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Grid, useModal, Text, Flex } from '@pancakeswap/uikit';\nimport { useUserNfts } from 'state/nftMarket/hooks';\nimport { NftLocation, UserNftInitializationState } from 'state/nftMarket/types';\nimport { useTranslation } from 'contexts/Localization';\nimport { CollectibleActionCard } from '../../components/CollectibleCard';\nimport GridPlaceholder from '../../components/GridPlaceholder';\nimport ProfileNftModal from '../../components/ProfileNftModal';\nimport NoNftsImage from './NoNftsImage';\nimport SellModal from '../../components/BuySellModals/SellModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UserNfts = () => {\n  _s();\n\n  const {\n    nfts,\n    userNftsInitializationState\n  } = useUserNfts();\n  const [clickedProfileNft, setClickedProfileNft] = useState({\n    nft: null,\n    location: null\n  });\n  const [clickedSellNft, setClickedSellNft] = useState({\n    nft: null,\n    location: null,\n    variant: null\n  });\n  const [onPresentProfileNftModal] = useModal( /*#__PURE__*/_jsxDEV(ProfileNftModal, {\n    nft: clickedProfileNft.nft\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 47\n  }, this));\n  const [onPresentSellModal] = useModal( /*#__PURE__*/_jsxDEV(SellModal, {\n    variant: clickedSellNft.variant,\n    nftToSell: clickedSellNft.nft\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 41\n  }, this));\n  const {\n    t\n  } = useTranslation();\n\n  const handleCollectibleClick = (nft, location) => {\n    switch (location) {\n      case NftLocation.PROFILE:\n        setClickedProfileNft({\n          nft,\n          location\n        });\n        break;\n\n      case NftLocation.WALLET:\n        setClickedSellNft({\n          nft,\n          location,\n          variant: 'sell'\n        });\n        break;\n\n      case NftLocation.FORSALE:\n        setClickedSellNft({\n          nft,\n          location,\n          variant: 'edit'\n        });\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  useEffect(() => {\n    if (clickedProfileNft.nft) {\n      onPresentProfileNftModal();\n    } // exhaustive deps disabled as the useModal dep causes re-render loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [clickedProfileNft]);\n  useEffect(() => {\n    if (clickedSellNft.nft) {\n      onPresentSellModal();\n    } // exhaustive deps disabled as the useModal dep causes re-render loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [clickedSellNft]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: nfts.length === 0 && userNftsInitializationState === UserNftInitializationState.INITIALIZED ? /*#__PURE__*/_jsxDEV(Flex, {\n      p: \"24px\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(NoNftsImage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        pt: \"8px\",\n        bold: true,\n        children: t('No NFTs found')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this) : // User has NFTs and data has been fetched\n    nfts.length > 0 ? /*#__PURE__*/_jsxDEV(Grid, {\n      gridGap: \"16px\",\n      gridTemplateColumns: ['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)'],\n      alignItems: \"start\",\n      children: nfts.map(nft => {\n        const {\n          marketData,\n          location\n        } = nft;\n        return /*#__PURE__*/_jsxDEV(CollectibleActionCard, {\n          isUserNft: true,\n          onClick: () => handleCollectibleClick(nft, location),\n          nft: nft,\n          currentAskPrice: (marketData === null || marketData === void 0 ? void 0 : marketData.currentAskPrice) && (marketData === null || marketData === void 0 ? void 0 : marketData.isTradable) && parseFloat(marketData.currentAskPrice),\n          nftLocation: location\n        }, `${nft.tokenId}-${nft.collectionName}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // User NFT data hasn't been fetched\n    _jsxDEV(GridPlaceholder, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(UserNfts, \"a5B+1a6FKuyxyZfyrlwGBvRiOBE=\", false, function () {\n  return [useUserNfts, useModal, useModal, useTranslation];\n});\n\n_c = UserNfts;\nexport default UserNfts;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserNfts\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Profile/components/UserNfts.tsx"],"names":["React","useState","useEffect","Grid","useModal","Text","Flex","useUserNfts","NftLocation","UserNftInitializationState","useTranslation","CollectibleActionCard","GridPlaceholder","ProfileNftModal","NoNftsImage","SellModal","UserNfts","nfts","userNftsInitializationState","clickedProfileNft","setClickedProfileNft","nft","location","clickedSellNft","setClickedSellNft","variant","onPresentProfileNftModal","onPresentSellModal","t","handleCollectibleClick","PROFILE","WALLET","FORSALE","length","INITIALIZED","map","marketData","currentAskPrice","isTradable","parseFloat","tokenId","collectionName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Grid, useModal, Text, Flex } from '@pancakeswap/uikit'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { NftLocation, UserNftInitializationState, NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { CollectibleActionCard } from '../../components/CollectibleCard'\nimport GridPlaceholder from '../../components/GridPlaceholder'\nimport ProfileNftModal from '../../components/ProfileNftModal'\nimport NoNftsImage from './NoNftsImage'\nimport SellModal from '../../components/BuySellModals/SellModal'\n\ninterface ProfileNftProps {\n  nft: NftToken\n  location: NftLocation\n}\n\ninterface SellNftProps {\n  nft: NftToken\n  location: NftLocation\n  variant: 'sell' | 'edit'\n}\n\nconst UserNfts = () => {\n  const { nfts, userNftsInitializationState } = useUserNfts()\n  const [clickedProfileNft, setClickedProfileNft] = useState<ProfileNftProps>({ nft: null, location: null })\n  const [clickedSellNft, setClickedSellNft] = useState<SellNftProps>({ nft: null, location: null, variant: null })\n  const [onPresentProfileNftModal] = useModal(<ProfileNftModal nft={clickedProfileNft.nft} />)\n  const [onPresentSellModal] = useModal(<SellModal variant={clickedSellNft.variant} nftToSell={clickedSellNft.nft} />)\n  const { t } = useTranslation()\n\n  const handleCollectibleClick = (nft: NftToken, location: NftLocation) => {\n    switch (location) {\n      case NftLocation.PROFILE:\n        setClickedProfileNft({ nft, location })\n        break\n      case NftLocation.WALLET:\n        setClickedSellNft({ nft, location, variant: 'sell' })\n        break\n      case NftLocation.FORSALE:\n        setClickedSellNft({ nft, location, variant: 'edit' })\n        break\n      default:\n        break\n    }\n  }\n\n  useEffect(() => {\n    if (clickedProfileNft.nft) {\n      onPresentProfileNftModal()\n    }\n    // exhaustive deps disabled as the useModal dep causes re-render loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedProfileNft])\n\n  useEffect(() => {\n    if (clickedSellNft.nft) {\n      onPresentSellModal()\n    }\n    // exhaustive deps disabled as the useModal dep causes re-render loop\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clickedSellNft])\n\n  return (\n    <>\n      {/* User has no NFTs */}\n      {nfts.length === 0 && userNftsInitializationState === UserNftInitializationState.INITIALIZED ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFTs found')}\n          </Text>\n        </Flex>\n      ) : // User has NFTs and data has been fetched\n      nfts.length > 0 ? (\n        <Grid\n          gridGap=\"16px\"\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n          alignItems=\"start\"\n        >\n          {nfts.map((nft) => {\n            const { marketData, location } = nft\n\n            return (\n              <CollectibleActionCard\n                isUserNft\n                onClick={() => handleCollectibleClick(nft, location)}\n                key={`${nft.tokenId}-${nft.collectionName}`}\n                nft={nft}\n                currentAskPrice={\n                  marketData?.currentAskPrice && marketData?.isTradable && parseFloat(marketData.currentAskPrice)\n                }\n                nftLocation={location}\n              />\n            )\n          })}\n        </Grid>\n      ) : (\n        // User NFT data hasn't been fetched\n        <GridPlaceholder />\n      )}\n    </>\n  )\n}\n\nexport default UserNfts\n"]},"metadata":{},"sourceType":"module"}