{"ast":null,"code":"import{TOTAL_FEE,LP_HOLDERS_FEE,WEEKS_IN_YEAR}from'config/constants/info';/**\n * Get increase/decrease of value compared to the previous value (e.g. 24h volume compared to 24h volume the day before )\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */export var getAmountChange=function getAmountChange(valueNow,valueBefore){if(valueNow&&valueBefore){return valueNow-valueBefore;}if(valueNow){return valueNow;}return 0;};/**\n * Get increase/decrease of value compared to the previous value as a percentage\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */export var getPercentChange=function getPercentChange(valueNow,valueBefore){if(valueNow&&valueBefore){return(valueNow-valueBefore)/valueBefore*100;}return 0;};/**\n * Given current value and value 1 and 2 periods (e.g. 1day + 2days, 1week - 2weeks) returns the amount change for latest period\n * and percentage change compared to the previous period.\n * @param valueNow - current value\n * @param valueOnePeriodAgo - value 1 period ago (e.g. 1 day or 1 week ago), period unit must be same as valueTwoPeriodsAgo\n * @param valueTwoPeriodsAgo - value 2 periods ago (e.g. 2 days or 2 weeks ago), period unit must be same as valueOnePeriodAgo\n * @returns amount change for the latest period and percentage change compared to previous period\n */export var getChangeForPeriod=function getChangeForPeriod(valueNow,valueOnePeriodAgo,valueTwoPeriodsAgo){var currentPeriodAmount=getAmountChange(valueNow,valueOnePeriodAgo);var previousPeriodAmount=getAmountChange(valueOnePeriodAgo,valueTwoPeriodsAgo);var percentageChange=getPercentChange(currentPeriodAmount,previousPeriodAmount);return[currentPeriodAmount,percentageChange];};export var getLpFeesAndApr=function getLpFeesAndApr(volumeUSD,volumeUSDWeek,liquidityUSD){var totalFees24h=volumeUSD*TOTAL_FEE;var totalFees7d=volumeUSDWeek*TOTAL_FEE;var lpFees24h=volumeUSD*LP_HOLDERS_FEE;var lpFees7d=volumeUSDWeek*LP_HOLDERS_FEE;var lpApr7d=liquidityUSD>0?volumeUSDWeek*LP_HOLDERS_FEE*WEEKS_IN_YEAR*100/liquidityUSD:0;return{totalFees24h:totalFees24h,totalFees7d:totalFees7d,lpFees24h:lpFees24h,lpFees7d:lpFees7d,lpApr7d:lpApr7d!==Infinity?lpApr7d:0};};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Info/utils/infoDataHelpers.ts"],"names":["TOTAL_FEE","LP_HOLDERS_FEE","WEEKS_IN_YEAR","getAmountChange","valueNow","valueBefore","getPercentChange","getChangeForPeriod","valueOnePeriodAgo","valueTwoPeriodsAgo","currentPeriodAmount","previousPeriodAmount","percentageChange","getLpFeesAndApr","volumeUSD","volumeUSDWeek","liquidityUSD","totalFees24h","totalFees7d","lpFees24h","lpFees7d","lpApr7d","Infinity"],"mappings":"AAAA,OAASA,SAAT,CAAoBC,cAApB,CAAoCC,aAApC,KAAyD,uBAAzD,CAEA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,QAAD,CAAoBC,WAApB,CAA6C,CAC1E,GAAID,QAAQ,EAAIC,WAAhB,CAA6B,CAC3B,MAAOD,CAAAA,QAAQ,CAAGC,WAAlB,CACD,CACD,GAAID,QAAJ,CAAc,CACZ,MAAOA,CAAAA,QAAP,CACD,CACD,MAAO,EAAP,CACD,CARM,CAUP;AACA;AACA;AACA;AACA,GACA,MAAO,IAAME,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACF,QAAD,CAAoBC,WAApB,CAAqD,CACnF,GAAID,QAAQ,EAAIC,WAAhB,CAA6B,CAC3B,MAAQ,CAACD,QAAQ,CAAGC,WAAZ,EAA2BA,WAA5B,CAA2C,GAAlD,CACD,CACD,MAAO,EAAP,CACD,CALM,CAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAME,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,CAChCH,QADgC,CAEhCI,iBAFgC,CAGhCC,kBAHgC,CAIX,CACrB,GAAMC,CAAAA,mBAAmB,CAAGP,eAAe,CAACC,QAAD,CAAWI,iBAAX,CAA3C,CACA,GAAMG,CAAAA,oBAAoB,CAAGR,eAAe,CAACK,iBAAD,CAAoBC,kBAApB,CAA5C,CACA,GAAMG,CAAAA,gBAAgB,CAAGN,gBAAgB,CAACI,mBAAD,CAAsBC,oBAAtB,CAAzC,CACA,MAAO,CAACD,mBAAD,CAAsBE,gBAAtB,CAAP,CACD,CATM,CAWP,MAAO,IAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,SAAD,CAAoBC,aAApB,CAA2CC,YAA3C,CAAoE,CACjG,GAAMC,CAAAA,YAAY,CAAGH,SAAS,CAAGd,SAAjC,CACA,GAAMkB,CAAAA,WAAW,CAAGH,aAAa,CAAGf,SAApC,CACA,GAAMmB,CAAAA,SAAS,CAAGL,SAAS,CAAGb,cAA9B,CACA,GAAMmB,CAAAA,QAAQ,CAAGL,aAAa,CAAGd,cAAjC,CAEA,GAAMoB,CAAAA,OAAO,CAAGL,YAAY,CAAG,CAAf,CAAoBD,aAAa,CAAGd,cAAhB,CAAiCC,aAAjC,CAAiD,GAAlD,CAAyDc,YAA5E,CAA2F,CAA3G,CACA,MAAO,CACLC,YAAY,CAAZA,YADK,CAELC,WAAW,CAAXA,WAFK,CAGLC,SAAS,CAATA,SAHK,CAILC,QAAQ,CAARA,QAJK,CAKLC,OAAO,CAAEA,OAAO,GAAKC,QAAZ,CAAuBD,OAAvB,CAAiC,CALrC,CAAP,CAOD,CAdM","sourcesContent":["import { TOTAL_FEE, LP_HOLDERS_FEE, WEEKS_IN_YEAR } from 'config/constants/info'\n\n/**\n * Get increase/decrease of value compared to the previous value (e.g. 24h volume compared to 24h volume the day before )\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */\nexport const getAmountChange = (valueNow?: number, valueBefore?: number) => {\n  if (valueNow && valueBefore) {\n    return valueNow - valueBefore\n  }\n  if (valueNow) {\n    return valueNow\n  }\n  return 0\n}\n\n/**\n * Get increase/decrease of value compared to the previous value as a percentage\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */\nexport const getPercentChange = (valueNow?: number, valueBefore?: number): number => {\n  if (valueNow && valueBefore) {\n    return ((valueNow - valueBefore) / valueBefore) * 100\n  }\n  return 0\n}\n\n/**\n * Given current value and value 1 and 2 periods (e.g. 1day + 2days, 1week - 2weeks) returns the amount change for latest period\n * and percentage change compared to the previous period.\n * @param valueNow - current value\n * @param valueOnePeriodAgo - value 1 period ago (e.g. 1 day or 1 week ago), period unit must be same as valueTwoPeriodsAgo\n * @param valueTwoPeriodsAgo - value 2 periods ago (e.g. 2 days or 2 weeks ago), period unit must be same as valueOnePeriodAgo\n * @returns amount change for the latest period and percentage change compared to previous period\n */\nexport const getChangeForPeriod = (\n  valueNow?: number,\n  valueOnePeriodAgo?: number,\n  valueTwoPeriodsAgo?: number,\n): [number, number] => {\n  const currentPeriodAmount = getAmountChange(valueNow, valueOnePeriodAgo)\n  const previousPeriodAmount = getAmountChange(valueOnePeriodAgo, valueTwoPeriodsAgo)\n  const percentageChange = getPercentChange(currentPeriodAmount, previousPeriodAmount)\n  return [currentPeriodAmount, percentageChange]\n}\n\nexport const getLpFeesAndApr = (volumeUSD: number, volumeUSDWeek: number, liquidityUSD: number) => {\n  const totalFees24h = volumeUSD * TOTAL_FEE\n  const totalFees7d = volumeUSDWeek * TOTAL_FEE\n  const lpFees24h = volumeUSD * LP_HOLDERS_FEE\n  const lpFees7d = volumeUSDWeek * LP_HOLDERS_FEE\n\n  const lpApr7d = liquidityUSD > 0 ? (volumeUSDWeek * LP_HOLDERS_FEE * WEEKS_IN_YEAR * 100) / liquidityUSD : 0\n  return {\n    totalFees24h,\n    totalFees7d,\n    lpFees24h,\n    lpFees7d,\n    lpApr7d: lpApr7d !== Infinity ? lpApr7d : 0,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}