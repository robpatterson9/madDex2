{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Collection/IndividualNFTPage/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useParams } from 'react-router';\nimport { useWeb3React } from '@web3-react/core';\nimport { Flex } from '@pancakeswap/uikit';\nimport orderBy from 'lodash/orderBy';\nimport Page from 'components/Layout/Page';\nimport { useFetchByBunnyId, useGetAllBunniesByBunnyId } from 'state/nftMarket/hooks';\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers';\nimport PageLoader from 'components/Loader/PageLoader';\nimport usePreviousValue from 'hooks/usePreviousValue';\nimport useRefresh from 'hooks/useRefresh';\nimport MainNFTCard from './MainNFTCard';\nimport ManageCard from './ManageCard';\nimport PropertiesCard from './PropertiesCard';\nimport DetailsCard from './DetailsCard';\nimport MoreFromThisCollection from './MoreFromThisCollection';\nimport ForSaleTableCard from './ForSaleTableCard';\nimport { pancakeBunniesAddress } from '../../constants';\nimport { sortNFTsByPriceBuilder } from './ForSaleTableCard/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TwoColumnsContainer = styled(Flex)`\n  gap: 22px;\n  align-items: flex-start;\n  & > div:first-child {\n    flex: 1;\n    gap: 20px;\n  }\n  & > div:last-child {\n    flex: 2;\n  }\n`;\n_c = TwoColumnsContainer;\n\nconst IndividualNFTPage = () => {\n  _s();\n\n  var _cheapestBunny$market, _cheapestBunny$market2;\n\n  // For PancakeBunnies tokenId in url is really bunnyId\n  const {\n    account\n  } = useWeb3React();\n  const {\n    collectionAddress,\n    tokenId\n  } = useParams();\n  const [attributesDistribution, setAttributesDistribution] = useState(null);\n  const [nothingForSaleBunny, setNothingForSaleBunny] = useState(null);\n  const allBunnies = useGetAllBunniesByBunnyId(tokenId);\n  const [priceSort, setPriceSort] = useState('asc');\n  const previousPriceSort = usePreviousValue(priceSort);\n  const {\n    isFetchingMoreNfts,\n    latestFetchAt,\n    fetchMorePancakeBunnies\n  } = useFetchByBunnyId(tokenId);\n  const {\n    fastRefresh\n  } = useRefresh();\n  const bunniesSortedByPrice = orderBy(allBunnies, nft => parseFloat(nft.marketData.currentAskPrice));\n  const allBunniesFromOtherSellers = account ? bunniesSortedByPrice.filter(bunny => bunny.marketData.currentSeller !== account.toLowerCase()) : bunniesSortedByPrice;\n  const cheapestBunny = bunniesSortedByPrice[0];\n  const cheapestBunnyFromOtherSellers = allBunniesFromOtherSellers[0];\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase(); // useUpdateNftInfo(collectionAddress)\n\n  useEffect(() => {\n    // Fetch first 30 NFTs on page load\n    // And then query every 10 sec in case some new (cheaper) NFTs were listed\n    const msSinceLastUpdate = Date.now() - latestFetchAt; // Check for last update is here to prevent too many request due to fetchMorePancakeBunnies updating too often\n    // (it can't be reasonably wrapper in useCallback because the tokens are updated every time you call it, which is the whole point)\n\n    if (msSinceLastUpdate > 10000 && !isFetchingMoreNfts) {\n      fetchMorePancakeBunnies(priceSort);\n    }\n  }, [priceSort, fetchMorePancakeBunnies, isFetchingMoreNfts, latestFetchAt, fastRefresh]);\n  useEffect(() => {\n    const fetchTokens = async () => {\n      const apiResponse = await getNftsFromCollectionApi(collectionAddress);\n      setAttributesDistribution(apiResponse.attributesDistribution);\n    };\n\n    fetchTokens();\n  }, [collectionAddress, setAttributesDistribution]);\n  useEffect(() => {\n    // Fetch most expensive items if user selects other sorting\n    if (previousPriceSort && previousPriceSort !== priceSort) {\n      fetchMorePancakeBunnies(priceSort);\n    }\n  }, [fetchMorePancakeBunnies, priceSort, previousPriceSort]);\n  useEffect(() => {\n    const fetchBasicBunnyData = async () => {\n      const {\n        data\n      } = await getNftsFromCollectionApi(pancakeBunniesAddress);\n      setNothingForSaleBunny({\n        // In this case tokenId doesn't matter, this token can't be bought\n        tokenId: data[tokenId].name,\n        name: data[tokenId].name,\n        description: data[tokenId].description,\n        collectionName: data[tokenId].collection.name,\n        collectionAddress: pancakeBunniesAddress,\n        image: data[tokenId].image,\n        attributes: [{\n          traitType: 'bunnyId',\n          value: tokenId,\n          displayType: null\n        }]\n      });\n    }; // If bunny id has no listings on the market - get basic bunny info\n\n\n    if (isPBCollection && !cheapestBunny) {\n      fetchBasicBunnyData();\n    }\n  }, [cheapestBunny, tokenId, isPBCollection]);\n  const sortedNfts = useMemo(() => allBunnies.sort(sortNFTsByPriceBuilder({\n    priceSort\n  })), [allBunnies, priceSort]);\n\n  if (!cheapestBunny && !nothingForSaleBunny) {\n    // TODO redirect to nft market page if collection or bunny id does not exist (came here from some bad url)\n    // That would require tracking loading states and stuff...\n    // For now this if is used to show loading spinner while we're getting the data\n    return /*#__PURE__*/_jsxDEV(PageLoader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 12\n    }, this);\n  }\n\n  const togglePriceSort = () => {\n    setPriceSort(currentValue => currentValue === 'asc' ? 'desc' : 'asc');\n  };\n\n  const getBunnyIdRarity = () => {\n    if (attributesDistribution) {\n      const total = Object.values(attributesDistribution).reduce((acc, cur) => {\n        return acc + cur;\n      }, 0);\n      return (attributesDistribution[tokenId] / total * 100).toFixed(2);\n    }\n\n    return null;\n  };\n\n  const properties = isPBCollection ? (cheapestBunny === null || cheapestBunny === void 0 ? void 0 : cheapestBunny.attributes) || (nothingForSaleBunny === null || nothingForSaleBunny === void 0 ? void 0 : nothingForSaleBunny.attributes) : [];\n  const propertyRarity = isPBCollection ? {\n    bunnyId: getBunnyIdRarity()\n  } : {};\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(MainNFTCard, {\n      cheapestNft: cheapestBunny,\n      cheapestNftFromOtherSellers: cheapestBunnyFromOtherSellers,\n      nothingForSaleBunny: nothingForSaleBunny\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TwoColumnsContainer, {\n      flexDirection: ['column', 'column', 'row'],\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        flexDirection: \"column\",\n        width: \"100%\",\n        children: [/*#__PURE__*/_jsxDEV(ManageCard, {\n          bunnyId: tokenId,\n          lowestPrice: cheapestBunny === null || cheapestBunny === void 0 ? void 0 : (_cheapestBunny$market = cheapestBunny.marketData) === null || _cheapestBunny$market === void 0 ? void 0 : _cheapestBunny$market.currentAskPrice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PropertiesCard, {\n          properties: properties,\n          rarity: propertyRarity\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(DetailsCard, {\n          contractAddress: collectionAddress,\n          ipfsJson: cheapestBunny === null || cheapestBunny === void 0 ? void 0 : (_cheapestBunny$market2 = cheapestBunny.marketData) === null || _cheapestBunny$market2 === void 0 ? void 0 : _cheapestBunny$market2.metadataUrl\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ForSaleTableCard, {\n        nftsForSale: sortedNfts,\n        bunnyId: tokenId,\n        totalForSale: allBunnies.length,\n        loadMore: fetchMorePancakeBunnies,\n        priceSort: priceSort,\n        togglePriceSort: togglePriceSort,\n        isFetchingMoreNfts: isFetchingMoreNfts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MoreFromThisCollection, {\n      collectionAddress: collectionAddress,\n      currentTokenName: (cheapestBunny === null || cheapestBunny === void 0 ? void 0 : cheapestBunny.name) || (nothingForSaleBunny === null || nothingForSaleBunny === void 0 ? void 0 : nothingForSaleBunny.name)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n};\n\n_s(IndividualNFTPage, \"C34YtbJn5FWYZRUBcRfUYnYbmOs=\", false, function () {\n  return [useWeb3React, useParams, useGetAllBunniesByBunnyId, usePreviousValue, useFetchByBunnyId, useRefresh];\n});\n\n_c2 = IndividualNFTPage;\nexport default IndividualNFTPage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TwoColumnsContainer\");\n$RefreshReg$(_c2, \"IndividualNFTPage\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Collection/IndividualNFTPage/index.tsx"],"names":["React","useState","useEffect","useMemo","styled","useParams","useWeb3React","Flex","orderBy","Page","useFetchByBunnyId","useGetAllBunniesByBunnyId","getNftsFromCollectionApi","PageLoader","usePreviousValue","useRefresh","MainNFTCard","ManageCard","PropertiesCard","DetailsCard","MoreFromThisCollection","ForSaleTableCard","pancakeBunniesAddress","sortNFTsByPriceBuilder","TwoColumnsContainer","IndividualNFTPage","account","collectionAddress","tokenId","attributesDistribution","setAttributesDistribution","nothingForSaleBunny","setNothingForSaleBunny","allBunnies","priceSort","setPriceSort","previousPriceSort","isFetchingMoreNfts","latestFetchAt","fetchMorePancakeBunnies","fastRefresh","bunniesSortedByPrice","nft","parseFloat","marketData","currentAskPrice","allBunniesFromOtherSellers","filter","bunny","currentSeller","toLowerCase","cheapestBunny","cheapestBunnyFromOtherSellers","isPBCollection","msSinceLastUpdate","Date","now","fetchTokens","apiResponse","fetchBasicBunnyData","data","name","description","collectionName","collection","image","attributes","traitType","value","displayType","sortedNfts","sort","togglePriceSort","currentValue","getBunnyIdRarity","total","Object","values","reduce","acc","cur","toFixed","properties","propertyRarity","bunnyId","metadataUrl","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { useParams } from 'react-router'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex } from '@pancakeswap/uikit'\nimport orderBy from 'lodash/orderBy'\nimport Page from 'components/Layout/Page'\nimport { useFetchByBunnyId, useGetAllBunniesByBunnyId } from 'state/nftMarket/hooks'\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport PageLoader from 'components/Loader/PageLoader'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport useRefresh from 'hooks/useRefresh'\nimport MainNFTCard from './MainNFTCard'\nimport ManageCard from './ManageCard'\nimport PropertiesCard from './PropertiesCard'\nimport DetailsCard from './DetailsCard'\nimport MoreFromThisCollection from './MoreFromThisCollection'\nimport ForSaleTableCard from './ForSaleTableCard'\nimport { pancakeBunniesAddress } from '../../constants'\nimport { sortNFTsByPriceBuilder } from './ForSaleTableCard/utils'\nimport { SortType } from '../../types'\n\nconst TwoColumnsContainer = styled(Flex)`\n  gap: 22px;\n  align-items: flex-start;\n  & > div:first-child {\n    flex: 1;\n    gap: 20px;\n  }\n  & > div:last-child {\n    flex: 2;\n  }\n`\n\nconst IndividualNFTPage = () => {\n  // For PancakeBunnies tokenId in url is really bunnyId\n  const { account } = useWeb3React()\n  const { collectionAddress, tokenId } = useParams<{ collectionAddress: string; tokenId: string }>()\n  const [attributesDistribution, setAttributesDistribution] = useState<{ [key: string]: number }>(null)\n  const [nothingForSaleBunny, setNothingForSaleBunny] = useState<NftToken>(null)\n  const allBunnies = useGetAllBunniesByBunnyId(tokenId)\n  const [priceSort, setPriceSort] = useState<SortType>('asc')\n  const previousPriceSort = usePreviousValue(priceSort)\n  const { isFetchingMoreNfts, latestFetchAt, fetchMorePancakeBunnies } = useFetchByBunnyId(tokenId)\n  const { fastRefresh } = useRefresh()\n  const bunniesSortedByPrice = orderBy(allBunnies, (nft) => parseFloat(nft.marketData.currentAskPrice))\n  const allBunniesFromOtherSellers = account\n    ? bunniesSortedByPrice.filter((bunny) => bunny.marketData.currentSeller !== account.toLowerCase())\n    : bunniesSortedByPrice\n  const cheapestBunny = bunniesSortedByPrice[0]\n  const cheapestBunnyFromOtherSellers = allBunniesFromOtherSellers[0]\n\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\n\n  // useUpdateNftInfo(collectionAddress)\n\n  useEffect(() => {\n    // Fetch first 30 NFTs on page load\n    // And then query every 10 sec in case some new (cheaper) NFTs were listed\n    const msSinceLastUpdate = Date.now() - latestFetchAt\n    // Check for last update is here to prevent too many request due to fetchMorePancakeBunnies updating too often\n    // (it can't be reasonably wrapper in useCallback because the tokens are updated every time you call it, which is the whole point)\n    if (msSinceLastUpdate > 10000 && !isFetchingMoreNfts) {\n      fetchMorePancakeBunnies(priceSort)\n    }\n  }, [priceSort, fetchMorePancakeBunnies, isFetchingMoreNfts, latestFetchAt, fastRefresh])\n\n  useEffect(() => {\n    const fetchTokens = async () => {\n      const apiResponse = await getNftsFromCollectionApi(collectionAddress)\n      setAttributesDistribution(apiResponse.attributesDistribution)\n    }\n\n    fetchTokens()\n  }, [collectionAddress, setAttributesDistribution])\n\n  useEffect(() => {\n    // Fetch most expensive items if user selects other sorting\n    if (previousPriceSort && previousPriceSort !== priceSort) {\n      fetchMorePancakeBunnies(priceSort)\n    }\n  }, [fetchMorePancakeBunnies, priceSort, previousPriceSort])\n\n  useEffect(() => {\n    const fetchBasicBunnyData = async () => {\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      setNothingForSaleBunny({\n        // In this case tokenId doesn't matter, this token can't be bought\n        tokenId: data[tokenId].name,\n        name: data[tokenId].name,\n        description: data[tokenId].description,\n        collectionName: data[tokenId].collection.name,\n        collectionAddress: pancakeBunniesAddress,\n        image: data[tokenId].image,\n        attributes: [\n          {\n            traitType: 'bunnyId',\n            value: tokenId,\n            displayType: null,\n          },\n        ],\n      })\n    }\n    // If bunny id has no listings on the market - get basic bunny info\n    if (isPBCollection && !cheapestBunny) {\n      fetchBasicBunnyData()\n    }\n  }, [cheapestBunny, tokenId, isPBCollection])\n\n  const sortedNfts = useMemo(() => allBunnies.sort(sortNFTsByPriceBuilder({ priceSort })), [allBunnies, priceSort])\n\n  if (!cheapestBunny && !nothingForSaleBunny) {\n    // TODO redirect to nft market page if collection or bunny id does not exist (came here from some bad url)\n    // That would require tracking loading states and stuff...\n\n    // For now this if is used to show loading spinner while we're getting the data\n    return <PageLoader />\n  }\n\n  const togglePriceSort = () => {\n    setPriceSort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\n  }\n\n  const getBunnyIdRarity = () => {\n    if (attributesDistribution) {\n      const total = Object.values(attributesDistribution).reduce((acc, cur) => {\n        return acc + cur\n      }, 0)\n      return ((attributesDistribution[tokenId] / total) * 100).toFixed(2)\n    }\n    return null\n  }\n\n  const properties = isPBCollection ? cheapestBunny?.attributes || nothingForSaleBunny?.attributes : []\n\n  const propertyRarity = isPBCollection ? { bunnyId: getBunnyIdRarity() } : {}\n\n  return (\n    <Page>\n      <MainNFTCard\n        cheapestNft={cheapestBunny}\n        cheapestNftFromOtherSellers={cheapestBunnyFromOtherSellers}\n        nothingForSaleBunny={nothingForSaleBunny}\n      />\n      <TwoColumnsContainer flexDirection={['column', 'column', 'row']}>\n        <Flex flexDirection=\"column\" width=\"100%\">\n          <ManageCard bunnyId={tokenId} lowestPrice={cheapestBunny?.marketData?.currentAskPrice} />\n          <PropertiesCard properties={properties} rarity={propertyRarity} />\n          <DetailsCard contractAddress={collectionAddress} ipfsJson={cheapestBunny?.marketData?.metadataUrl} />\n        </Flex>\n        <ForSaleTableCard\n          nftsForSale={sortedNfts}\n          bunnyId={tokenId}\n          totalForSale={allBunnies.length}\n          loadMore={fetchMorePancakeBunnies}\n          priceSort={priceSort}\n          togglePriceSort={togglePriceSort}\n          isFetchingMoreNfts={isFetchingMoreNfts}\n        />\n      </TwoColumnsContainer>\n      <MoreFromThisCollection\n        collectionAddress={collectionAddress}\n        currentTokenName={cheapestBunny?.name || nothingForSaleBunny?.name}\n      />\n    </Page>\n  )\n}\n\nexport default IndividualNFTPage\n"]},"metadata":{},"sourceType":"module"}