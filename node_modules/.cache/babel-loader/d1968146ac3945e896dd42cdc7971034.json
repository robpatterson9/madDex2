{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolsTable/Cells/AutoAprCell.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit';\nimport { useCakeVault } from 'state/pools/hooks';\nimport { useTranslation } from 'contexts/Localization';\nimport BaseCell, { CellContent } from './BaseCell';\nimport Apr from '../Apr';\nimport { convertSharesToCake } from '../../../helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCell = styled(BaseCell)`\n  flex: 1 0 50px;\n  ${({\n  theme\n}) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n  }\n`;\n_c = StyledCell;\n\nconst AutoAprCell = ({\n  pool\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    isMobile\n  } = useMatchBreakpoints();\n  const {\n    userData: {\n      userShares\n    },\n    fees: {\n      performanceFee\n    },\n    pricePerFullShare\n  } = useCakeVault();\n  const {\n    cakeAsBigNumber\n  } = convertSharesToCake(userShares, pricePerFullShare);\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100;\n  return /*#__PURE__*/_jsxDEV(StyledCell, {\n    role: \"cell\",\n    children: /*#__PURE__*/_jsxDEV(CellContent, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        textAlign: \"left\",\n        children: t('APY')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Apr, {\n        pool: pool,\n        stakedBalance: cakeAsBigNumber,\n        performanceFee: performanceFeeAsDecimal,\n        showIcon: !isMobile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AutoAprCell, \"wjwFAdHMRauZi0r+NNsN/SoGpyo=\", false, function () {\n  return [useTranslation, useMatchBreakpoints, useCakeVault];\n});\n\n_c2 = AutoAprCell;\nexport default AutoAprCell;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledCell\");\n$RefreshReg$(_c2, \"AutoAprCell\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolsTable/Cells/AutoAprCell.tsx"],"names":["React","styled","Text","useMatchBreakpoints","useCakeVault","useTranslation","BaseCell","CellContent","Apr","convertSharesToCake","StyledCell","theme","mediaQueries","md","AutoAprCell","pool","t","isMobile","userData","userShares","fees","performanceFee","pricePerFullShare","cakeAsBigNumber","performanceFeeAsDecimal"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,EAAeC,mBAAf,QAA0C,oBAA1C;AAEA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAOC,QAAP,IAAmBC,WAAnB,QAAsC,YAAtC;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAASC,mBAAT,QAAoC,kBAApC;;AAMA,MAAMC,UAAU,GAAGT,MAAM,CAACK,QAAD,CAAW;AACpC;AACA,IAAI,CAAC;AAAEK,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,YAAN,CAAmBC,EAAG;AACzC;AACA;AACA,CALA;KAAMH,U;;AAON,MAAMI,WAAmC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AACxD,QAAM;AAAEC,IAAAA;AAAF,MAAQX,cAAc,EAA5B;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAed,mBAAmB,EAAxC;AAEA,QAAM;AACJe,IAAAA,QAAQ,EAAE;AAAEC,MAAAA;AAAF,KADN;AAEJC,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF,KAFF;AAGJC,IAAAA;AAHI,MAIFlB,YAAY,EAJhB;AAMA,QAAM;AAAEmB,IAAAA;AAAF,MAAsBd,mBAAmB,CAACU,UAAD,EAAaG,iBAAb,CAA/C;AACA,QAAME,uBAAuB,GAAGH,cAAc,IAAIA,cAAc,GAAG,GAAnE;AAEA,sBACE,QAAC,UAAD;AAAY,IAAA,IAAI,EAAC,MAAjB;AAAA,2BACE,QAAC,WAAD;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAC,MAAf;AAAsB,QAAA,KAAK,EAAC,YAA5B;AAAyC,QAAA,SAAS,EAAC,MAAnD;AAAA,kBACGL,CAAC,CAAC,KAAD;AADJ;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,GAAD;AACE,QAAA,IAAI,EAAED,IADR;AAEE,QAAA,aAAa,EAAEQ,eAFjB;AAGE,QAAA,cAAc,EAAEC,uBAHlB;AAIE,QAAA,QAAQ,EAAE,CAACP;AAJb;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CA5BD;;GAAMH,W;UACUT,c,EACOF,mB,EAMjBC,Y;;;MARAU,W;AA8BN,eAAeA,WAAf","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Text, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { DeserializedPool } from 'state/types'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell, { CellContent } from './BaseCell'\nimport Apr from '../Apr'\nimport { convertSharesToCake } from '../../../helpers'\n\ninterface AprCellProps {\n  pool: DeserializedPool\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 1 0 50px;\n  ${({ theme }) => theme.mediaQueries.md} {\n    flex: 0 0 120px;\n  }\n`\n\nconst AutoAprCell: React.FC<AprCellProps> = ({ pool }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n\n  const {\n    userData: { userShares },\n    fees: { performanceFee },\n    pricePerFullShare,\n  } = useCakeVault()\n\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {t('APY')}\n        </Text>\n        <Apr\n          pool={pool}\n          stakedBalance={cakeAsBigNumber}\n          performanceFee={performanceFeeAsDecimal}\n          showIcon={!isMobile}\n        />\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AutoAprCell\n"]},"metadata":{},"sourceType":"module"}