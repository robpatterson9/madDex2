{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { getApy } from 'utils/compoundApyHelpers';\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance';\nexport const convertSharesToCake = (shares, cakePerFullShare, decimals = 18, decimalsToRound = 3) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals);\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber));\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals);\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals);\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound);\n  return {\n    cakeAsNumberBalance,\n    cakeAsBigNumber,\n    cakeAsDisplayBalance\n  };\n};\nexport const convertCakeToShares = (cake, cakePerFullShare, decimals = 18, decimalsToRound = 3) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals);\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber));\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals);\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals);\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound);\n  return {\n    sharesAsNumberBalance,\n    sharesAsBigNumber,\n    sharesAsDisplayBalance\n  };\n};\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 5000;\nconst MANUAL_POOL_AUTO_COMPOUND_FREQUENCY = 0;\nexport const getAprData = (pool, performanceFee) => {\n  const {\n    isAutoVault,\n    apr\n  } = pool; //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\n\n  const autoCompoundFrequency = isAutoVault ? AUTO_VAULT_COMPOUND_FREQUENCY : MANUAL_POOL_AUTO_COMPOUND_FREQUENCY;\n\n  if (isAutoVault) {\n    const autoApr = getApy(apr, AUTO_VAULT_COMPOUND_FREQUENCY, 365, performanceFee) * 100;\n    return {\n      apr: autoApr,\n      autoCompoundFrequency\n    };\n  }\n\n  return {\n    apr,\n    autoCompoundFrequency\n  };\n};\nexport const getCakeVaultEarnings = (account, cakeAtLastUserAction, userShares, pricePerFullShare, earningTokenPrice) => {\n  const hasAutoEarnings = account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0);\n  const {\n    cakeAsBigNumber\n  } = convertSharesToCake(userShares, pricePerFullShare);\n  const autoCakeProfit = cakeAsBigNumber.minus(cakeAtLastUserAction);\n  const autoCakeToDisplay = autoCakeProfit.gte(0) ? getBalanceNumber(autoCakeProfit, 18) : 0;\n  const autoUsdProfit = autoCakeProfit.times(earningTokenPrice);\n  const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0;\n  return {\n    hasAutoEarnings,\n    autoCakeToDisplay,\n    autoUsdToDisplay\n  };\n};\nexport const getPoolBlockInfo = (pool, currentBlock) => {\n  const {\n    startBlock,\n    endBlock,\n    isFinished\n  } = pool;\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock);\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0);\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0);\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0;\n  const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart;\n  return {\n    shouldShowBlockCountdown,\n    blocksUntilStart,\n    blocksRemaining,\n    hasPoolStarted,\n    blocksToDisplay\n  };\n};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/helpers.tsx"],"names":["BigNumber","getApy","getBalanceNumber","getFullDisplayBalance","getDecimalAmount","convertSharesToCake","shares","cakePerFullShare","decimals","decimalsToRound","sharePriceNumber","amountInCake","multipliedBy","cakeAsNumberBalance","cakeAsBigNumber","cakeAsDisplayBalance","convertCakeToShares","cake","amountInShares","dividedBy","sharesAsNumberBalance","sharesAsBigNumber","sharesAsDisplayBalance","AUTO_VAULT_COMPOUND_FREQUENCY","MANUAL_POOL_AUTO_COMPOUND_FREQUENCY","getAprData","pool","performanceFee","isAutoVault","apr","autoCompoundFrequency","autoApr","getCakeVaultEarnings","account","cakeAtLastUserAction","userShares","pricePerFullShare","earningTokenPrice","hasAutoEarnings","gt","autoCakeProfit","minus","autoCakeToDisplay","gte","autoUsdProfit","times","autoUsdToDisplay","getPoolBlockInfo","currentBlock","startBlock","endBlock","isFinished","shouldShowBlockCountdown","Boolean","blocksUntilStart","Math","max","blocksRemaining","hasPoolStarted","blocksToDisplay"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AAEA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,gBAAT,EAA2BC,qBAA3B,EAAkDC,gBAAlD,QAA0E,qBAA1E;AAEA,OAAO,MAAMC,mBAAmB,GAAG,CACjCC,MADiC,EAEjCC,gBAFiC,EAGjCC,QAAQ,GAAG,EAHsB,EAIjCC,eAAe,GAAG,CAJe,KAK9B;AACH,QAAMC,gBAAgB,GAAGR,gBAAgB,CAACK,gBAAD,EAAmBC,QAAnB,CAAzC;AACA,QAAMG,YAAY,GAAG,IAAIX,SAAJ,CAAcM,MAAM,CAACM,YAAP,CAAoBF,gBAApB,CAAd,CAArB;AACA,QAAMG,mBAAmB,GAAGX,gBAAgB,CAACS,YAAD,EAAeH,QAAf,CAA5C;AACA,QAAMM,eAAe,GAAGV,gBAAgB,CAAC,IAAIJ,SAAJ,CAAca,mBAAd,CAAD,EAAqCL,QAArC,CAAxC;AACA,QAAMO,oBAAoB,GAAGZ,qBAAqB,CAACQ,YAAD,EAAeH,QAAf,EAAyBC,eAAzB,CAAlD;AACA,SAAO;AAAEI,IAAAA,mBAAF;AAAuBC,IAAAA,eAAvB;AAAwCC,IAAAA;AAAxC,GAAP;AACD,CAZM;AAcP,OAAO,MAAMC,mBAAmB,GAAG,CACjCC,IADiC,EAEjCV,gBAFiC,EAGjCC,QAAQ,GAAG,EAHsB,EAIjCC,eAAe,GAAG,CAJe,KAK9B;AACH,QAAMC,gBAAgB,GAAGR,gBAAgB,CAACK,gBAAD,EAAmBC,QAAnB,CAAzC;AACA,QAAMU,cAAc,GAAG,IAAIlB,SAAJ,CAAciB,IAAI,CAACE,SAAL,CAAeT,gBAAf,CAAd,CAAvB;AACA,QAAMU,qBAAqB,GAAGlB,gBAAgB,CAACgB,cAAD,EAAiBV,QAAjB,CAA9C;AACA,QAAMa,iBAAiB,GAAGjB,gBAAgB,CAAC,IAAIJ,SAAJ,CAAcoB,qBAAd,CAAD,EAAuCZ,QAAvC,CAA1C;AACA,QAAMc,sBAAsB,GAAGnB,qBAAqB,CAACe,cAAD,EAAiBV,QAAjB,EAA2BC,eAA3B,CAApD;AACA,SAAO;AAAEW,IAAAA,qBAAF;AAAyBC,IAAAA,iBAAzB;AAA4CC,IAAAA;AAA5C,GAAP;AACD,CAZM;AAcP,MAAMC,6BAA6B,GAAG,IAAtC;AACA,MAAMC,mCAAmC,GAAG,CAA5C;AAEA,OAAO,MAAMC,UAAU,GAAG,CAACC,IAAD,EAAyBC,cAAzB,KAAoD;AAC5E,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAuBH,IAA7B,CAD4E,CAG5E;;AACA,QAAMI,qBAAqB,GAAGF,WAAW,GAAGL,6BAAH,GAAmCC,mCAA5E;;AAEA,MAAII,WAAJ,EAAiB;AACf,UAAMG,OAAO,GAAG9B,MAAM,CAAC4B,GAAD,EAAMN,6BAAN,EAAqC,GAArC,EAA0CI,cAA1C,CAAN,GAAkE,GAAlF;AACA,WAAO;AAAEE,MAAAA,GAAG,EAAEE,OAAP;AAAgBD,MAAAA;AAAhB,KAAP;AACD;;AACD,SAAO;AAAED,IAAAA,GAAF;AAAOC,IAAAA;AAAP,GAAP;AACD,CAXM;AAaP,OAAO,MAAME,oBAAoB,GAAG,CAClCC,OADkC,EAElCC,oBAFkC,EAGlCC,UAHkC,EAIlCC,iBAJkC,EAKlCC,iBALkC,KAM/B;AACH,QAAMC,eAAe,GACnBL,OAAO,IAAIC,oBAAX,IAAmCA,oBAAoB,CAACK,EAArB,CAAwB,CAAxB,CAAnC,IAAiEJ,UAAjE,IAA+EA,UAAU,CAACI,EAAX,CAAc,CAAd,CADjF;AAEA,QAAM;AAAEzB,IAAAA;AAAF,MAAsBT,mBAAmB,CAAC8B,UAAD,EAAaC,iBAAb,CAA/C;AACA,QAAMI,cAAc,GAAG1B,eAAe,CAAC2B,KAAhB,CAAsBP,oBAAtB,CAAvB;AACA,QAAMQ,iBAAiB,GAAGF,cAAc,CAACG,GAAf,CAAmB,CAAnB,IAAwBzC,gBAAgB,CAACsC,cAAD,EAAiB,EAAjB,CAAxC,GAA+D,CAAzF;AAEA,QAAMI,aAAa,GAAGJ,cAAc,CAACK,KAAf,CAAqBR,iBAArB,CAAtB;AACA,QAAMS,gBAAgB,GAAGF,aAAa,CAACD,GAAd,CAAkB,CAAlB,IAAuBzC,gBAAgB,CAAC0C,aAAD,EAAgB,EAAhB,CAAvC,GAA6D,CAAtF;AACA,SAAO;AAAEN,IAAAA,eAAF;AAAmBI,IAAAA,iBAAnB;AAAsCI,IAAAA;AAAtC,GAAP;AACD,CAhBM;AAkBP,OAAO,MAAMC,gBAAgB,GAAG,CAACrB,IAAD,EAAyBsB,YAAzB,KAAkD;AAChF,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,QAAd;AAAwBC,IAAAA;AAAxB,MAAuCzB,IAA7C;AACA,QAAM0B,wBAAwB,GAAGC,OAAO,CAAC,CAACF,UAAD,IAAeF,UAAf,IAA6BC,QAA9B,CAAxC;AACA,QAAMI,gBAAgB,GAAGC,IAAI,CAACC,GAAL,CAASP,UAAU,GAAGD,YAAtB,EAAoC,CAApC,CAAzB;AACA,QAAMS,eAAe,GAAGF,IAAI,CAACC,GAAL,CAASN,QAAQ,GAAGF,YAApB,EAAkC,CAAlC,CAAxB;AACA,QAAMU,cAAc,GAAGJ,gBAAgB,KAAK,CAArB,IAA0BG,eAAe,GAAG,CAAnE;AACA,QAAME,eAAe,GAAGD,cAAc,GAAGD,eAAH,GAAqBH,gBAA3D;AACA,SAAO;AAAEF,IAAAA,wBAAF;AAA4BE,IAAAA,gBAA5B;AAA8CG,IAAAA,eAA9C;AAA+DC,IAAAA,cAA/D;AAA+EC,IAAAA;AAA/E,GAAP;AACD,CARM","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { DeserializedPool } from 'state/types'\nimport { getApy } from 'utils/compoundApyHelpers'\nimport { getBalanceNumber, getFullDisplayBalance, getDecimalAmount } from 'utils/formatBalance'\n\nexport const convertSharesToCake = (\n  shares: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInCake = new BigNumber(shares.multipliedBy(sharePriceNumber))\n  const cakeAsNumberBalance = getBalanceNumber(amountInCake, decimals)\n  const cakeAsBigNumber = getDecimalAmount(new BigNumber(cakeAsNumberBalance), decimals)\n  const cakeAsDisplayBalance = getFullDisplayBalance(amountInCake, decimals, decimalsToRound)\n  return { cakeAsNumberBalance, cakeAsBigNumber, cakeAsDisplayBalance }\n}\n\nexport const convertCakeToShares = (\n  cake: BigNumber,\n  cakePerFullShare: BigNumber,\n  decimals = 18,\n  decimalsToRound = 3,\n) => {\n  const sharePriceNumber = getBalanceNumber(cakePerFullShare, decimals)\n  const amountInShares = new BigNumber(cake.dividedBy(sharePriceNumber))\n  const sharesAsNumberBalance = getBalanceNumber(amountInShares, decimals)\n  const sharesAsBigNumber = getDecimalAmount(new BigNumber(sharesAsNumberBalance), decimals)\n  const sharesAsDisplayBalance = getFullDisplayBalance(amountInShares, decimals, decimalsToRound)\n  return { sharesAsNumberBalance, sharesAsBigNumber, sharesAsDisplayBalance }\n}\n\nconst AUTO_VAULT_COMPOUND_FREQUENCY = 5000\nconst MANUAL_POOL_AUTO_COMPOUND_FREQUENCY = 0\n\nexport const getAprData = (pool: DeserializedPool, performanceFee: number) => {\n  const { isAutoVault, apr } = pool\n\n  //   Estimate & manual for now. 288 = once every 5 mins. We can change once we have a better sense of this\n  const autoCompoundFrequency = isAutoVault ? AUTO_VAULT_COMPOUND_FREQUENCY : MANUAL_POOL_AUTO_COMPOUND_FREQUENCY\n\n  if (isAutoVault) {\n    const autoApr = getApy(apr, AUTO_VAULT_COMPOUND_FREQUENCY, 365, performanceFee) * 100\n    return { apr: autoApr, autoCompoundFrequency }\n  }\n  return { apr, autoCompoundFrequency }\n}\n\nexport const getCakeVaultEarnings = (\n  account: string,\n  cakeAtLastUserAction: BigNumber,\n  userShares: BigNumber,\n  pricePerFullShare: BigNumber,\n  earningTokenPrice: number,\n) => {\n  const hasAutoEarnings =\n    account && cakeAtLastUserAction && cakeAtLastUserAction.gt(0) && userShares && userShares.gt(0)\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\n  const autoCakeProfit = cakeAsBigNumber.minus(cakeAtLastUserAction)\n  const autoCakeToDisplay = autoCakeProfit.gte(0) ? getBalanceNumber(autoCakeProfit, 18) : 0\n\n  const autoUsdProfit = autoCakeProfit.times(earningTokenPrice)\n  const autoUsdToDisplay = autoUsdProfit.gte(0) ? getBalanceNumber(autoUsdProfit, 18) : 0\n  return { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay }\n}\n\nexport const getPoolBlockInfo = (pool: DeserializedPool, currentBlock: number) => {\n  const { startBlock, endBlock, isFinished } = pool\n  const shouldShowBlockCountdown = Boolean(!isFinished && startBlock && endBlock)\n  const blocksUntilStart = Math.max(startBlock - currentBlock, 0)\n  const blocksRemaining = Math.max(endBlock - currentBlock, 0)\n  const hasPoolStarted = blocksUntilStart === 0 && blocksRemaining > 0\n  const blocksToDisplay = hasPoolStarted ? blocksRemaining : blocksUntilStart\n  return { shouldShowBlockCountdown, blocksUntilStart, blocksRemaining, hasPoolStarted, blocksToDisplay }\n}\n"]},"metadata":{},"sourceType":"module"}