{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/components/RoundProgress.tsx\";\nimport React from 'react';\nimport { Progress } from '@pancakeswap/uikit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RoundProgress = ({\n  lockTimestamp,\n  closeTimestamp,\n  ...props\n}) => {\n  const startMs = lockTimestamp * 1000;\n  const endMs = closeTimestamp * 1000;\n  const now = Date.now();\n  const rawProgress = (now - startMs) / (endMs - startMs) * 100;\n  const progress = rawProgress <= 100 ? rawProgress : 100;\n  return /*#__PURE__*/_jsxDEV(Progress, {\n    primaryStep: progress,\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 10\n  }, this);\n};\n\n_c = RoundProgress;\nexport default RoundProgress;\n\nvar _c;\n\n$RefreshReg$(_c, \"RoundProgress\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/components/RoundProgress.tsx"],"names":["React","Progress","RoundProgress","lockTimestamp","closeTimestamp","props","startMs","endMs","now","Date","rawProgress","progress"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAwC,oBAAxC;;;AAOA,MAAMC,aAA2C,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,cAAjB;AAAiC,KAAGC;AAApC,CAAD,KAAiD;AACnG,QAAMC,OAAO,GAAGH,aAAa,GAAG,IAAhC;AACA,QAAMI,KAAK,GAAGH,cAAc,GAAG,IAA/B;AACA,QAAMI,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACA,QAAME,WAAW,GAAI,CAACF,GAAG,GAAGF,OAAP,KAAmBC,KAAK,GAAGD,OAA3B,CAAD,GAAwC,GAA5D;AACA,QAAMK,QAAQ,GAAGD,WAAW,IAAI,GAAf,GAAqBA,WAArB,GAAmC,GAApD;AAEA,sBAAO,QAAC,QAAD;AAAU,IAAA,WAAW,EAAEC,QAAvB;AAAA,OAAqCN;AAArC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CARD;;KAAMH,a;AAUN,eAAeA,aAAf","sourcesContent":["import React from 'react'\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\n\ninterface RoundProgressProps extends ProgressProps {\n  lockTimestamp: number\n  closeTimestamp: number\n}\n\nconst RoundProgress: React.FC<RoundProgressProps> = ({ lockTimestamp, closeTimestamp, ...props }) => {\n  const startMs = lockTimestamp * 1000\n  const endMs = closeTimestamp * 1000\n  const now = Date.now()\n  const rawProgress = ((now - startMs) / (endMs - startMs)) * 100\n  const progress = rawProgress <= 100 ? rawProgress : 100\n\n  return <Progress primaryStep={progress} {...props} />\n}\n\nexport default RoundProgress\n"]},"metadata":{},"sourceType":"module"}