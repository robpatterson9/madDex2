{"ast":null,"code":"import _defineProperty from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import merge from'lodash/merge';import teamsList from'config/constants/teams';import{getProfileContract}from'utils/contractHelpers';import{multicallv2}from'utils/multicall';import profileABI from'config/abi/pancakeProfile.json';import{getPancakeProfileAddress}from'utils/addressHelpers';var profileContract=getProfileContract();export var getTeam=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(teamId){var _yield$profileContrac,teamName,numberUsers,numberPoints,isJoinable,staticTeamInfo;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return profileContract.getTeamProfile(teamId);case 3:_yield$profileContrac=_context.sent;teamName=_yield$profileContrac[0];numberUsers=_yield$profileContrac[2];numberPoints=_yield$profileContrac[3];isJoinable=_yield$profileContrac[4];staticTeamInfo=teamsList.find(function(staticTeam){return staticTeam.id===teamId;});return _context.abrupt(\"return\",merge({},staticTeamInfo,{isJoinable:isJoinable,name:teamName,users:numberUsers.toNumber(),points:numberPoints.toNumber()}));case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",null);case 15:case\"end\":return _context.stop();}}},_callee,null,[[0,12]]);}));return function getTeam(_x){return _ref.apply(this,arguments);};}();/**\n * Gets on-chain data and merges it with the existing static list of teams\n */export var getTeams=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var teamsById,nbTeams,calls,i,teamData,onChainTeamData;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;teamsById=teamsList.reduce(function(accum,team){return _objectSpread(_objectSpread({},accum),{},_defineProperty({},team.id,team));},{});_context2.next=4;return profileContract.numberTeams();case 4:nbTeams=_context2.sent;calls=[];for(i=1;i<=nbTeams;i++){calls.push({address:getPancakeProfileAddress(),name:'getTeamProfile',params:[i]});}_context2.next=9;return multicallv2(profileABI,calls);case 9:teamData=_context2.sent;onChainTeamData=teamData.reduce(function(accum,team,index){var teamName=team[0],numberUsers=team[2],numberPoints=team[3],isJoinable=team[4];return _objectSpread(_objectSpread({},accum),{},_defineProperty({},index+1,{name:teamName,users:numberUsers.toNumber(),points:numberPoints.toNumber(),isJoinable:isJoinable}));},{});return _context2.abrupt(\"return\",merge({},teamsById,onChainTeamData));case 14:_context2.prev=14;_context2.t0=_context2[\"catch\"](0);return _context2.abrupt(\"return\",null);case 17:case\"end\":return _context2.stop();}}},_callee2,null,[[0,14]]);}));return function getTeams(){return _ref2.apply(this,arguments);};}();","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/teams/helpers.ts"],"names":["merge","teamsList","getProfileContract","multicallv2","profileABI","getPancakeProfileAddress","profileContract","getTeam","teamId","getTeamProfile","teamName","numberUsers","numberPoints","isJoinable","staticTeamInfo","find","staticTeam","id","name","users","toNumber","points","getTeams","teamsById","reduce","accum","team","numberTeams","nbTeams","calls","i","push","address","params","teamData","onChainTeamData","index"],"mappings":"8lBAAA,MAAOA,CAAAA,KAAP,KAAkB,cAAlB,CACA,MAAOC,CAAAA,SAAP,KAAsB,wBAAtB,CACA,OAASC,kBAAT,KAAmC,uBAAnC,CAEA,OAASC,WAAT,KAA4B,iBAA5B,CAEA,MAAOC,CAAAA,UAAP,KAAuB,gCAAvB,CACA,OAASC,wBAAT,KAAyC,sBAAzC,CAEA,GAAMC,CAAAA,eAAe,CAAGJ,kBAAkB,EAA1C,CAEA,MAAO,IAAMK,CAAAA,OAAO,0FAAG,iBAAOC,MAAP,8OAE2DF,CAAAA,eAAe,CAACG,cAAhB,CAA+BD,MAA/B,CAF3D,4CAERE,QAFQ,uBAEX,CAFW,EAEKC,WAFL,uBAEE,CAFF,EAEqBC,YAFrB,uBAEkB,CAFlB,EAEsCC,UAFtC,uBAEmC,CAFnC,EAGbC,cAHa,CAGIb,SAAS,CAACc,IAAV,CAAe,SAACC,UAAD,QAAgBA,CAAAA,UAAU,CAACC,EAAX,GAAkBT,MAAlC,EAAf,CAHJ,iCAKZR,KAAK,CAAC,EAAD,CAAKc,cAAL,CAAqB,CAC/BD,UAAU,CAAVA,UAD+B,CAE/BK,IAAI,CAAER,QAFyB,CAG/BS,KAAK,CAAER,WAAW,CAACS,QAAZ,EAHwB,CAI/BC,MAAM,CAAET,YAAY,CAACQ,QAAb,EAJuB,CAArB,CALO,4FAYZ,IAZY,uEAAH,kBAAPb,CAAAA,OAAO,4CAAb,CAgBP;AACA;AACA,GACA,MAAO,IAAMe,CAAAA,QAAQ,2FAAG,gNAEdC,SAFc,CAEFtB,SAAS,CAACuB,MAAV,CAAiB,SAACC,KAAD,CAAQC,IAAR,CAAiB,CAClD,sCACKD,KADL,wBAEGC,IAAI,CAACT,EAFR,CAEaS,IAFb,GAID,CALiB,CAKf,EALe,CAFE,wBAQEpB,CAAAA,eAAe,CAACqB,WAAhB,EARF,QAQdC,OARc,gBAUdC,KAVc,CAUN,EAVM,CAWpB,IAASC,CAAT,CAAa,CAAb,CAAgBA,CAAC,EAAIF,OAArB,CAA8BE,CAAC,EAA/B,CAAmC,CACjCD,KAAK,CAACE,IAAN,CAAW,CACTC,OAAO,CAAE3B,wBAAwB,EADxB,CAETa,IAAI,CAAE,gBAFG,CAGTe,MAAM,CAAE,CAACH,CAAD,CAHC,CAAX,EAKD,CAjBmB,uBAkBG3B,CAAAA,WAAW,CAACC,UAAD,CAAayB,KAAb,CAlBd,QAkBdK,QAlBc,gBAoBdC,eApBc,CAoBID,QAAQ,CAACV,MAAT,CAAgB,SAACC,KAAD,CAAQC,IAAR,CAAcU,KAAd,CAAwB,CAC9D,GAAW1B,CAAAA,QAAX,CAAwEgB,IAAxE,CAAQ,CAAR,EAAwBf,WAAxB,CAAwEe,IAAxE,CAAqB,CAArB,EAAwCd,YAAxC,CAAwEc,IAAxE,CAAqC,CAArC,EAAyDb,UAAzD,CAAwEa,IAAxE,CAAsD,CAAtD,EAEA,sCACKD,KADL,wBAEGW,KAAK,CAAG,CAFX,CAEe,CACXlB,IAAI,CAAER,QADK,CAEXS,KAAK,CAAER,WAAW,CAACS,QAAZ,EAFI,CAGXC,MAAM,CAAET,YAAY,CAACQ,QAAb,EAHG,CAIXP,UAAU,CAAVA,UAJW,CAFf,GASD,CAZuB,CAYrB,EAZqB,CApBJ,kCAkCbb,KAAK,CAAC,EAAD,CAAKuB,SAAL,CAAgBY,eAAhB,CAlCQ,gGAoCb,IApCa,yEAAH,kBAARb,CAAAA,QAAQ,2CAAd","sourcesContent":["import merge from 'lodash/merge'\nimport teamsList from 'config/constants/teams'\nimport { getProfileContract } from 'utils/contractHelpers'\nimport { Team } from 'config/constants/types'\nimport { multicallv2 } from 'utils/multicall'\nimport { TeamsById } from 'state/types'\nimport profileABI from 'config/abi/pancakeProfile.json'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\n\nconst profileContract = getProfileContract()\n\nexport const getTeam = async (teamId: number): Promise<Team> => {\n  try {\n    const { 0: teamName, 2: numberUsers, 3: numberPoints, 4: isJoinable } = await profileContract.getTeamProfile(teamId)\n    const staticTeamInfo = teamsList.find((staticTeam) => staticTeam.id === teamId)\n\n    return merge({}, staticTeamInfo, {\n      isJoinable,\n      name: teamName,\n      users: numberUsers.toNumber(),\n      points: numberPoints.toNumber(),\n    })\n  } catch (error) {\n    return null\n  }\n}\n\n/**\n * Gets on-chain data and merges it with the existing static list of teams\n */\nexport const getTeams = async (): Promise<TeamsById> => {\n  try {\n    const teamsById = teamsList.reduce((accum, team) => {\n      return {\n        ...accum,\n        [team.id]: team,\n      }\n    }, {})\n    const nbTeams = await profileContract.numberTeams()\n\n    const calls = []\n    for (let i = 1; i <= nbTeams; i++) {\n      calls.push({\n        address: getPancakeProfileAddress(),\n        name: 'getTeamProfile',\n        params: [i],\n      })\n    }\n    const teamData = await multicallv2(profileABI, calls)\n\n    const onChainTeamData = teamData.reduce((accum, team, index) => {\n      const { 0: teamName, 2: numberUsers, 3: numberPoints, 4: isJoinable } = team\n\n      return {\n        ...accum,\n        [index + 1]: {\n          name: teamName,\n          users: numberUsers.toNumber(),\n          points: numberPoints.toNumber(),\n          isJoinable,\n        },\n      }\n    }, {})\n\n    return merge({}, teamsById, onChainTeamData)\n  } catch (error) {\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"module"}