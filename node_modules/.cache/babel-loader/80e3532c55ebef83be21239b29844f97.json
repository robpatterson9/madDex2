{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Info/Tokens/redirects.tsx\";\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { isAddress } from 'ethers/lib/utils';\nimport TokenPage from './TokenPage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst RedirectInvalidToken = props => {\n  const {\n    match: {\n      params: {\n        address\n      }\n    }\n  } = props; // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n\n  if (!isAddress(address.toLowerCase())) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(TokenPage, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 10\n  }, this);\n};\n\n_c = RedirectInvalidToken;\nexport default RedirectInvalidToken;\n\nvar _c;\n\n$RefreshReg$(_c, \"RedirectInvalidToken\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Info/Tokens/redirects.tsx"],"names":["React","Redirect","isAddress","TokenPage","RedirectInvalidToken","props","match","params","address","toLowerCase"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAA8C,kBAA9C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;AAEA,MAAMC,oBAAoB,GAAIC,KAAD,IAAqD;AAChF,QAAM;AACJC,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE;AAAEC,QAAAA;AAAF;AADH;AADH,MAIFH,KAJJ,CADgF,CAOhF;;AACA,MAAI,CAACH,SAAS,CAACM,OAAO,CAACC,WAAR,EAAD,CAAd,EAAuC;AACrC,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,sBAAO,QAAC,SAAD,OAAeJ;AAAf;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAZD;;KAAMD,oB;AAcN,eAAeA,oBAAf","sourcesContent":["import React from 'react'\nimport { Redirect, RouteComponentProps } from 'react-router-dom'\nimport { isAddress } from 'ethers/lib/utils'\nimport TokenPage from './TokenPage'\n\nconst RedirectInvalidToken = (props: RouteComponentProps<{ address: string }>) => {\n  const {\n    match: {\n      params: { address },\n    },\n  } = props\n\n  // In case somebody pastes checksummed address into url (since GraphQL expects lowercase address)\n  if (!isAddress(address.toLowerCase())) {\n    return <Redirect to=\"/\" />\n  }\n  return <TokenPage {...props} />\n}\n\nexport default RedirectInvalidToken\n"]},"metadata":{},"sourceType":"module"}