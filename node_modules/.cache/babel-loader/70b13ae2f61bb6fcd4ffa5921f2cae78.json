{"ast":null,"code":"import React from'react';import{Grid,Text,Flex}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{CollectibleLinkCard}from'../../components/CollectibleCard';import GridPlaceholder from'../../components/GridPlaceholder';import NoNftsImage from'./NoNftsImage';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var UserNfts=function UserNfts(_ref){var nfts=_ref.nfts,isLoading=_ref.isLoading;var _useTranslation=useTranslation(),t=_useTranslation.t;return/*#__PURE__*/_jsx(_Fragment,{children:nfts.length===0&&!isLoading?/*#__PURE__*/_jsxs(Flex,{p:\"24px\",flexDirection:\"column\",alignItems:\"center\",children:[/*#__PURE__*/_jsx(NoNftsImage,{}),/*#__PURE__*/_jsx(Text,{pt:\"8px\",bold:true,children:t('No NFTs found')})]}):// User has NFTs and data has been fetched\nnfts.length>0?/*#__PURE__*/_jsx(Grid,{gridGap:\"16px\",gridTemplateColumns:['1fr','repeat(2, 1fr)','repeat(3, 1fr)',null,'repeat(4, 1fr)'],alignItems:\"start\",children:nfts.map(function(nft){var marketData=nft.marketData;return/*#__PURE__*/_jsx(CollectibleLinkCard,{nft:nft,currentAskPrice:(marketData===null||marketData===void 0?void 0:marketData.currentAskPrice)&&(marketData===null||marketData===void 0?void 0:marketData.isTradable)&&parseFloat(marketData.currentAskPrice)},\"\".concat(nft.tokenId,\"-\").concat(nft.collectionName));})}):/*#__PURE__*/ // User NFT data hasn't been fetched\n_jsx(GridPlaceholder,{})});};export default UserNfts;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Profile/components/UnconnectedProfileNfts.tsx"],"names":["React","Grid","Text","Flex","useTranslation","CollectibleLinkCard","GridPlaceholder","NoNftsImage","UserNfts","nfts","isLoading","t","length","map","nft","marketData","currentAskPrice","isTradable","parseFloat","tokenId","collectionName"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,CAAeC,IAAf,CAAqBC,IAArB,KAAiC,oBAAjC,CAEA,OAASC,cAAT,KAA+B,uBAA/B,CACA,OAASC,mBAAT,KAAoC,kCAApC,CACA,MAAOC,CAAAA,eAAP,KAA4B,kCAA5B,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,C,6IAEA,GAAMC,CAAAA,QAA4D,CAAG,QAA/DA,CAAAA,QAA+D,MAAyB,IAAtBC,CAAAA,IAAsB,MAAtBA,IAAsB,CAAhBC,SAAgB,MAAhBA,SAAgB,CAC5F,oBAAcN,cAAc,EAA5B,CAAQO,CAAR,iBAAQA,CAAR,CAEA,mBACE,yBAEGF,IAAI,CAACG,MAAL,GAAgB,CAAhB,EAAqB,CAACF,SAAtB,cACC,MAAC,IAAD,EAAM,CAAC,CAAC,MAAR,CAAe,aAAa,CAAC,QAA7B,CAAsC,UAAU,CAAC,QAAjD,wBACE,KAAC,WAAD,IADF,cAEE,KAAC,IAAD,EAAM,EAAE,CAAC,KAAT,CAAe,IAAI,KAAnB,UACGC,CAAC,CAAC,eAAD,CADJ,EAFF,GADD,CAOG;AACJF,IAAI,CAACG,MAAL,CAAc,CAAd,cACE,KAAC,IAAD,EACE,OAAO,CAAC,MADV,CAEE,mBAAmB,CAAE,CAAC,KAAD,CAAQ,gBAAR,CAA0B,gBAA1B,CAA4C,IAA5C,CAAkD,gBAAlD,CAFvB,CAGE,UAAU,CAAC,OAHb,UAKGH,IAAI,CAACI,GAAL,CAAS,SAACC,GAAD,CAAS,CACjB,GAAQC,CAAAA,UAAR,CAAuBD,GAAvB,CAAQC,UAAR,CAEA,mBACE,KAAC,mBAAD,EAEE,GAAG,CAAED,GAFP,CAGE,eAAe,CACb,CAAAC,UAAU,OAAV,EAAAA,UAAU,SAAV,QAAAA,UAAU,CAAEC,eAAZ,IAA+BD,UAA/B,SAA+BA,UAA/B,iBAA+BA,UAAU,CAAEE,UAA3C,GAAyDC,UAAU,CAACH,UAAU,CAACC,eAAZ,CAJvE,YACUF,GAAG,CAACK,OADd,aACyBL,GAAG,CAACM,cAD7B,EADF,CASD,CAZA,CALH,EADF,eAqBE;AACA,KAAC,eAAD,IAhCJ,EADF,CAqCD,CAxCD,CA0CA,cAAeZ,CAAAA,QAAf","sourcesContent":["import React from 'react'\nimport { Grid, Text, Flex } from '@pancakeswap/uikit'\nimport { NftToken } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\nimport GridPlaceholder from '../../components/GridPlaceholder'\nimport NoNftsImage from './NoNftsImage'\n\nconst UserNfts: React.FC<{ nfts: NftToken[]; isLoading: boolean }> = ({ nfts, isLoading }) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      {/* User has no NFTs */}\n      {nfts.length === 0 && !isLoading ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFTs found')}\n          </Text>\n        </Flex>\n      ) : // User has NFTs and data has been fetched\n      nfts.length > 0 ? (\n        <Grid\n          gridGap=\"16px\"\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n          alignItems=\"start\"\n        >\n          {nfts.map((nft) => {\n            const { marketData } = nft\n\n            return (\n              <CollectibleLinkCard\n                key={`${nft.tokenId}-${nft.collectionName}`}\n                nft={nft}\n                currentAskPrice={\n                  marketData?.currentAskPrice && marketData?.isTradable && parseFloat(marketData.currentAskPrice)\n                }\n              />\n            )\n          })}\n        </Grid>\n      ) : (\n        // User NFT data hasn't been fetched\n        <GridPlaceholder />\n      )}\n    </>\n  )\n}\n\nexport default UserNfts\n"]},"metadata":{},"sourceType":"module"}