{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from 'react';\nimport isEmpty from 'lodash/isEmpty';\nimport { useGetCollections } from 'state/nftMarket/hooks';\nimport { NftLocation } from 'state/nftMarket/types';\nimport { getCompleteAccountNftData } from 'state/nftMarket/helpers';\n\nconst useFetchUserNfts = (account, profile, isProfileFetching) => {\n  _s();\n\n  var _profile$tokenId;\n\n  const [combinedNfts, setCombinedNfts] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const collections = useGetCollections();\n  const hasProfileNft = profile === null || profile === void 0 ? void 0 : profile.tokenId;\n  const profileNftTokenId = profile === null || profile === void 0 ? void 0 : (_profile$tokenId = profile.tokenId) === null || _profile$tokenId === void 0 ? void 0 : _profile$tokenId.toString();\n  const profileNftCollectionAddress = profile === null || profile === void 0 ? void 0 : profile.collectionAddress;\n  const profileNftWithCollectionAddress = useMemo(() => {\n    if (hasProfileNft) {\n      return {\n        tokenId: profileNftTokenId,\n        collectionAddress: profileNftCollectionAddress,\n        nftLocation: NftLocation.PROFILE\n      };\n    }\n\n    return null;\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft]);\n  useEffect(() => {\n    const getNfts = async () => {\n      const completeNftData = await getCompleteAccountNftData(account, collections, profileNftWithCollectionAddress);\n      setCombinedNfts(completeNftData);\n      setIsLoading(false);\n    };\n\n    if (!isProfileFetching && !isEmpty(collections)) {\n      setIsLoading(true);\n      getNfts();\n    }\n  }, [account, collections, isProfileFetching, profileNftWithCollectionAddress]);\n  return {\n    nfts: combinedNfts,\n    isLoading\n  };\n};\n\n_s(useFetchUserNfts, \"dmRJzw/koF18o0u8FIHWJkMyVQ8=\", false, function () {\n  return [useGetCollections];\n});\n\nexport default useFetchUserNfts;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Profile/hooks/useGetNftsForAddress.tsx"],"names":["useEffect","useMemo","useState","isEmpty","useGetCollections","NftLocation","getCompleteAccountNftData","useFetchUserNfts","account","profile","isProfileFetching","combinedNfts","setCombinedNfts","isLoading","setIsLoading","collections","hasProfileNft","tokenId","profileNftTokenId","toString","profileNftCollectionAddress","collectionAddress","profileNftWithCollectionAddress","nftLocation","PROFILE","getNfts","completeNftData","nfts"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAASC,WAAT,QAAsC,uBAAtC;AAEA,SAASC,yBAAT,QAA0C,yBAA1C;;AAEA,MAAMC,gBAAgB,GAAG,CAACC,OAAD,EAAkBC,OAAlB,EAAoCC,iBAApC,KAAmE;AAAA;;AAAA;;AAC1F,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAAa,EAAb,CAAhD;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,IAAD,CAA1C;AACA,QAAMa,WAAW,GAAGX,iBAAiB,EAArC;AAEA,QAAMY,aAAa,GAAGP,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEQ,OAA/B;AACA,QAAMC,iBAAiB,GAAGT,OAAH,aAAGA,OAAH,2CAAGA,OAAO,CAAEQ,OAAZ,qDAAG,iBAAkBE,QAAlB,EAA1B;AACA,QAAMC,2BAA2B,GAAGX,OAAH,aAAGA,OAAH,uBAAGA,OAAO,CAAEY,iBAA7C;AAEA,QAAMC,+BAA+B,GAAGrB,OAAO,CAAC,MAAM;AACpD,QAAIe,aAAJ,EAAmB;AACjB,aAAO;AACLC,QAAAA,OAAO,EAAEC,iBADJ;AAELG,QAAAA,iBAAiB,EAAED,2BAFd;AAGLG,QAAAA,WAAW,EAAElB,WAAW,CAACmB;AAHpB,OAAP;AAKD;;AACD,WAAO,IAAP;AACD,GAT8C,EAS5C,CAACN,iBAAD,EAAoBE,2BAApB,EAAiDJ,aAAjD,CAT4C,CAA/C;AAWAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyB,OAAO,GAAG,YAAY;AAC1B,YAAMC,eAAe,GAAG,MAAMpB,yBAAyB,CAACE,OAAD,EAAUO,WAAV,EAAuBO,+BAAvB,CAAvD;AACAV,MAAAA,eAAe,CAACc,eAAD,CAAf;AACAZ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAJD;;AAMA,QAAI,CAACJ,iBAAD,IAAsB,CAACP,OAAO,CAACY,WAAD,CAAlC,EAAiD;AAC/CD,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAW,MAAAA,OAAO;AACR;AACF,GAXQ,EAWN,CAACjB,OAAD,EAAUO,WAAV,EAAuBL,iBAAvB,EAA0CY,+BAA1C,CAXM,CAAT;AAaA,SAAO;AAAEK,IAAAA,IAAI,EAAEhB,YAAR;AAAsBE,IAAAA;AAAtB,GAAP;AACD,CAlCD;;GAAMN,gB;UAGgBH,iB;;;AAiCtB,eAAeG,gBAAf","sourcesContent":["import { useEffect, useMemo, useState } from 'react'\nimport isEmpty from 'lodash/isEmpty'\nimport { useGetCollections } from 'state/nftMarket/hooks'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport { Profile } from 'state/types'\nimport { getCompleteAccountNftData } from 'state/nftMarket/helpers'\n\nconst useFetchUserNfts = (account: string, profile: Profile, isProfileFetching: boolean) => {\n  const [combinedNfts, setCombinedNfts] = useState<NftToken[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const collections = useGetCollections()\n\n  const hasProfileNft = profile?.tokenId\n  const profileNftTokenId = profile?.tokenId?.toString()\n  const profileNftCollectionAddress = profile?.collectionAddress\n\n  const profileNftWithCollectionAddress = useMemo(() => {\n    if (hasProfileNft) {\n      return {\n        tokenId: profileNftTokenId,\n        collectionAddress: profileNftCollectionAddress,\n        nftLocation: NftLocation.PROFILE,\n      }\n    }\n    return null\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\n\n  useEffect(() => {\n    const getNfts = async () => {\n      const completeNftData = await getCompleteAccountNftData(account, collections, profileNftWithCollectionAddress)\n      setCombinedNfts(completeNftData)\n      setIsLoading(false)\n    }\n\n    if (!isProfileFetching && !isEmpty(collections)) {\n      setIsLoading(true)\n      getNfts()\n    }\n  }, [account, collections, isProfileFetching, profileNftWithCollectionAddress])\n\n  return { nfts: combinedNfts, isLoading }\n}\n\nexport default useFetchUserNfts\n"]},"metadata":{},"sourceType":"module"}