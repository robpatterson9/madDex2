{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/state/transactions/updater.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Text, Flex, Link } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport { getBscScanLink } from 'utils';\nimport { useBlock } from 'state/block/hooks';\nimport useToast from 'hooks/useToast';\nimport { checkedTransaction, finalizeTransaction } from './actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function shouldCheck(currentBlock, tx) {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = currentBlock - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  }\n\n  if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } // otherwise every block\n\n\n  return true;\n}\nexport default function Updater() {\n  _s();\n\n  const {\n    library,\n    chainId\n  } = useActiveWeb3React();\n  const {\n    t\n  } = useTranslation();\n  const {\n    currentBlock\n  } = useBlock();\n  const dispatch = useDispatch();\n  const state = useSelector(s => s.transactions);\n  const transactions = useMemo(() => {\n    var _state$chainId;\n\n    return chainId ? (_state$chainId = state[chainId]) !== null && _state$chainId !== void 0 ? _state$chainId : {} : {};\n  }, [chainId, state]);\n  const {\n    toastError,\n    toastSuccess\n  } = useToast();\n  useEffect(() => {\n    if (!chainId || !library || !currentBlock) return;\n    Object.keys(transactions).filter(hash => shouldCheck(currentBlock, transactions[hash])).forEach(hash => {\n      library.getTransactionReceipt(hash).then(receipt => {\n        if (receipt) {\n          var _transactions$hash$su, _transactions$hash;\n\n          dispatch(finalizeTransaction({\n            chainId,\n            hash,\n            receipt: {\n              blockHash: receipt.blockHash,\n              blockNumber: receipt.blockNumber,\n              contractAddress: receipt.contractAddress,\n              from: receipt.from,\n              status: receipt.status,\n              to: receipt.to,\n              transactionHash: receipt.transactionHash,\n              transactionIndex: receipt.transactionIndex\n            }\n          }));\n          const toast = receipt.status === 1 ? toastSuccess : toastError;\n          toast(t('Transaction receipt'), /*#__PURE__*/_jsxDEV(Flex, {\n            flexDirection: \"column\",\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              children: (_transactions$hash$su = (_transactions$hash = transactions[hash]) === null || _transactions$hash === void 0 ? void 0 : _transactions$hash.summary) !== null && _transactions$hash$su !== void 0 ? _transactions$hash$su : `Hash: ${hash.slice(0, 8)}...${hash.slice(58, 65)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 19\n            }, this), chainId && /*#__PURE__*/_jsxDEV(Link, {\n              external: true,\n              href: getBscScanLink(hash, 'transaction', chainId),\n              children: t('View on BscScan')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this));\n        } else {\n          dispatch(checkedTransaction({\n            chainId,\n            hash,\n            blockNumber: currentBlock\n          }));\n        }\n      }).catch(error => {\n        console.error(`failed to check transaction hash: ${hash}`, error);\n      });\n    });\n  }, [chainId, library, transactions, currentBlock, dispatch, toastSuccess, toastError, t]);\n  return null;\n}\n\n_s(Updater, \"DVzKyhn5Cxn8dbXlAyxw8v29ULI=\", false, function () {\n  return [useActiveWeb3React, useTranslation, useBlock, useDispatch, useSelector, useToast];\n});\n\n_c = Updater;\n\nvar _c;\n\n$RefreshReg$(_c, \"Updater\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/transactions/updater.tsx"],"names":["React","useEffect","useMemo","useDispatch","useSelector","Text","Flex","Link","useTranslation","useActiveWeb3React","getBscScanLink","useBlock","useToast","checkedTransaction","finalizeTransaction","shouldCheck","currentBlock","tx","receipt","lastCheckedBlockNumber","blocksSinceCheck","minutesPending","Date","getTime","addedTime","Updater","library","chainId","t","dispatch","state","s","transactions","toastError","toastSuccess","Object","keys","filter","hash","forEach","getTransactionReceipt","then","blockHash","blockNumber","contractAddress","from","status","to","transactionHash","transactionIndex","toast","summary","slice","catch","error","console"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Text, Flex, Link } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { getBscScanLink } from 'utils'\nimport { useBlock } from 'state/block/hooks'\nimport useToast from 'hooks/useToast'\nimport { AppDispatch, AppState } from '../index'\nimport { checkedTransaction, finalizeTransaction } from './actions'\n\nexport function shouldCheck(\n  currentBlock: number,\n  tx: { addedTime: number; receipt?: any; lastCheckedBlockNumber?: number },\n): boolean {\n  if (tx.receipt) return false\n  if (!tx.lastCheckedBlockNumber) return true\n  const blocksSinceCheck = currentBlock - tx.lastCheckedBlockNumber\n  if (blocksSinceCheck < 1) return false\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9\n  }\n  if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2\n  }\n  // otherwise every block\n  return true\n}\n\nexport default function Updater(): null {\n  const { library, chainId } = useActiveWeb3React()\n  const { t } = useTranslation()\n\n  const { currentBlock } = useBlock()\n\n  const dispatch = useDispatch<AppDispatch>()\n  const state = useSelector<AppState, AppState['transactions']>((s) => s.transactions)\n\n  const transactions = useMemo(() => (chainId ? state[chainId] ?? {} : {}), [chainId, state])\n\n  const { toastError, toastSuccess } = useToast()\n\n  useEffect(() => {\n    if (!chainId || !library || !currentBlock) return\n\n    Object.keys(transactions)\n      .filter((hash) => shouldCheck(currentBlock, transactions[hash]))\n      .forEach((hash) => {\n        library\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                  },\n                }),\n              )\n\n              const toast = receipt.status === 1 ? toastSuccess : toastError\n              toast(\n                t('Transaction receipt'),\n                <Flex flexDirection=\"column\">\n                  <Text>{transactions[hash]?.summary ?? `Hash: ${hash.slice(0, 8)}...${hash.slice(58, 65)}`}</Text>\n                  {chainId && (\n                    <Link external href={getBscScanLink(hash, 'transaction', chainId)}>\n                      {t('View on BscScan')}\n                    </Link>\n                  )}\n                </Flex>,\n              )\n            } else {\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: currentBlock }))\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error)\n          })\n      })\n  }, [chainId, library, transactions, currentBlock, dispatch, toastSuccess, toastError, t])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}