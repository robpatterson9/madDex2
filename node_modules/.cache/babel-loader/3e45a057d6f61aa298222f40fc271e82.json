{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/ProfileCreation/ProfilePicture.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport styled from 'styled-components';\nimport { AutoRenewIcon, Button, Card, CardBody, Heading, Text } from '@pancakeswap/uikit';\nimport { useWeb3React } from '@web3-react/core';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { getPancakeProfileAddress } from 'utils/addressHelpers';\nimport { getErc721Contract } from 'utils/contractHelpers';\nimport { useTranslation } from 'contexts/Localization';\nimport { useUserNfts } from 'state/nftMarket/hooks';\nimport useToast from 'hooks/useToast';\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice';\nimport useFetchUserNfts from 'views/Nft/market/Profile/hooks/useFetchUserNfts';\nimport { nftsBaseUrl } from 'views/Nft/market/constants';\nimport { UserNftInitializationState } from 'state/nftMarket/types';\nimport SelectionCard from './SelectionCard';\nimport NextStepButton from './NextStepButton';\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Link = styled(RouterLink)`\n  color: ${({\n  theme\n}) => theme.colors.primary};\n`;\n_c = Link;\nconst NftWrapper = styled.div`\n  margin-bottom: 24px;\n`;\n_c2 = NftWrapper;\n\nconst ProfilePicture = () => {\n  _s();\n\n  const {\n    library,\n    account\n  } = useWeb3React();\n  const [isApproved, setIsApproved] = useState(false);\n  const [isApproving, setIsApproving] = useState(false);\n  const {\n    selectedNft,\n    actions\n  } = useContext(ProfileCreationContext);\n  const {\n    nfts,\n    userNftsInitializationState\n  } = useUserNfts();\n  useFetchUserNfts(account);\n  const {\n    t\n  } = useTranslation();\n  const {\n    toastError,\n    toastSuccess\n  } = useToast();\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n\n  const handleApprove = async () => {\n    const contract = getErc721Contract(selectedNft.collectionAddress, library.getSigner());\n    const tx = await callWithGasPrice(contract, 'approve', [getPancakeProfileAddress(), selectedNft.tokenId]);\n    setIsApproving(true);\n    const receipt = await tx.wait();\n\n    if (receipt.status) {\n      toastSuccess(t('Enabled'), t('Please progress to the next step.'));\n      setIsApproving(false);\n      setIsApproved(true);\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n      setIsApproving(false);\n    }\n  };\n\n  if (nfts.length === 0 && userNftsInitializationState === UserNftInitializationState.INITIALIZED) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        scale: \"xl\",\n        mb: \"24px\",\n        children: t('Oops!')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        fontSize: \"20px\",\n        mb: \"24px\",\n        children: t('We couldn’t find any Pancake Collectibles in your wallet.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        as: \"p\",\n        children: t('You need a Pancake Collectible to finish setting up your profile. If you sold or transferred your starter collectible to another wallet, you’ll need to get it back or acquire a new one somehow. You can’t make a new starter with this wallet address.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      fontSize: \"20px\",\n      color: \"textSubtle\",\n      bold: true,\n      children: t('Step %num%', {\n        num: 2\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h3\",\n      scale: \"xl\",\n      mb: \"24px\",\n      children: t('Set Profile Picture')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      mb: \"24px\",\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h4\",\n          scale: \"lg\",\n          mb: \"8px\",\n          children: t('Choose collectible')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          color: \"textSubtle\",\n          children: t('Choose a profile picture from the eligible collectibles (NFT) in your wallet, shown below.')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          color: \"textSubtle\",\n          mb: \"24px\",\n          children: [t('Only approved Pancake Collectibles can be used.'), /*#__PURE__*/_jsxDEV(Link, {\n            to: `${nftsBaseUrl}/collections`,\n            style: {\n              marginLeft: '4px'\n            },\n            children: t('See the list >')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(NftWrapper, {\n          children: nfts.map(walletNft => {\n            const firstTokenId = nfts[0].tokenId;\n            return /*#__PURE__*/_jsxDEV(SelectionCard, {\n              name: \"profilePicture\",\n              value: firstTokenId,\n              image: walletNft.image.thumbnail,\n              isChecked: firstTokenId === selectedNft.tokenId,\n              onChange: value => actions.setSelectedNft(value, walletNft.collectionAddress),\n              children: /*#__PURE__*/_jsxDEV(Text, {\n                bold: true,\n                children: walletNft.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 19\n              }, this)\n            }, walletNft.tokenId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h4\",\n          scale: \"lg\",\n          mb: \"8px\",\n          children: t('Allow collectible to be locked')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          color: \"textSubtle\",\n          mb: \"16px\",\n          children: t(\"The collectible you've chosen will be locked in a smart contract while it’s being used as your profile picture. Don't worry - you'll be able to get it back at any time.\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          isLoading: isApproving,\n          disabled: isApproved || isApproving || selectedNft.tokenId === null,\n          onClick: handleApprove,\n          endIcon: isApproving ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n            spin: true,\n            color: \"currentColor\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 36\n          }, this) : undefined,\n          id: \"approveStarterCollectible\",\n          children: t('Enable')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NextStepButton, {\n      onClick: actions.nextStep,\n      disabled: selectedNft.tokenId === null || !isApproved || isApproving,\n      children: t('Next Step')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ProfilePicture, \"V+vrU5YZQrmhK2iUwn+1LFwP4gk=\", false, function () {\n  return [useWeb3React, useUserNfts, useFetchUserNfts, useTranslation, useToast, useCallWithGasPrice];\n});\n\n_c3 = ProfilePicture;\nexport default ProfilePicture;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Link\");\n$RefreshReg$(_c2, \"NftWrapper\");\n$RefreshReg$(_c3, \"ProfilePicture\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/ProfileCreation/ProfilePicture.tsx"],"names":["React","useContext","useState","styled","AutoRenewIcon","Button","Card","CardBody","Heading","Text","useWeb3React","Link","RouterLink","getPancakeProfileAddress","getErc721Contract","useTranslation","useUserNfts","useToast","useCallWithGasPrice","useFetchUserNfts","nftsBaseUrl","UserNftInitializationState","SelectionCard","NextStepButton","ProfileCreationContext","theme","colors","primary","NftWrapper","div","ProfilePicture","library","account","isApproved","setIsApproved","isApproving","setIsApproving","selectedNft","actions","nfts","userNftsInitializationState","t","toastError","toastSuccess","callWithGasPrice","handleApprove","contract","collectionAddress","getSigner","tx","tokenId","receipt","wait","status","length","INITIALIZED","num","marginLeft","map","walletNft","firstTokenId","image","thumbnail","value","setSelectedNft","name","undefined","nextStep"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { getPancakeProfileAddress } from 'utils/addressHelpers'\nimport { getErc721Contract } from 'utils/contractHelpers'\nimport { useTranslation } from 'contexts/Localization'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport useToast from 'hooks/useToast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useFetchUserNfts from 'views/Nft/market/Profile/hooks/useFetchUserNfts'\nimport { nftsBaseUrl } from 'views/Nft/market/constants'\nimport { UserNftInitializationState } from 'state/nftMarket/types'\nimport SelectionCard from './SelectionCard'\nimport NextStepButton from './NextStepButton'\nimport { ProfileCreationContext } from './contexts/ProfileCreationProvider'\n\nconst Link = styled(RouterLink)`\n  color: ${({ theme }) => theme.colors.primary};\n`\n\nconst NftWrapper = styled.div`\n  margin-bottom: 24px;\n`\n\nconst ProfilePicture: React.FC = () => {\n  const { library, account } = useWeb3React()\n  const [isApproved, setIsApproved] = useState(false)\n  const [isApproving, setIsApproving] = useState(false)\n  const { selectedNft, actions } = useContext(ProfileCreationContext)\n\n  const { nfts, userNftsInitializationState } = useUserNfts()\n  useFetchUserNfts(account)\n\n  const { t } = useTranslation()\n  const { toastError, toastSuccess } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const handleApprove = async () => {\n    const contract = getErc721Contract(selectedNft.collectionAddress, library.getSigner())\n    const tx = await callWithGasPrice(contract, 'approve', [getPancakeProfileAddress(), selectedNft.tokenId])\n    setIsApproving(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      toastSuccess(t('Enabled'), t('Please progress to the next step.'))\n      setIsApproving(false)\n      setIsApproved(true)\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsApproving(false)\n    }\n  }\n\n  if (nfts.length === 0 && userNftsInitializationState === UserNftInitializationState.INITIALIZED) {\n    return (\n      <>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Oops!')}\n        </Heading>\n        <Text bold fontSize=\"20px\" mb=\"24px\">\n          {t('We couldn’t find any Pancake Collectibles in your wallet.')}\n        </Text>\n        <Text as=\"p\">\n          {t(\n            'You need a Pancake Collectible to finish setting up your profile. If you sold or transferred your starter collectible to another wallet, you’ll need to get it back or acquire a new one somehow. You can’t make a new starter with this wallet address.',\n          )}\n        </Text>\n      </>\n    )\n  }\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 2 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Set Profile Picture')}\n      </Heading>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Choose collectible')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {t('Choose a profile picture from the eligible collectibles (NFT) in your wallet, shown below.')}\n          </Text>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\n            {t('Only approved Pancake Collectibles can be used.')}\n            <Link to={`${nftsBaseUrl}/collections`} style={{ marginLeft: '4px' }}>\n              {t('See the list >')}\n            </Link>\n          </Text>\n          <NftWrapper>\n            {nfts.map((walletNft) => {\n              const firstTokenId = nfts[0].tokenId\n              return (\n                <SelectionCard\n                  name=\"profilePicture\"\n                  key={walletNft.tokenId}\n                  value={firstTokenId}\n                  image={walletNft.image.thumbnail}\n                  isChecked={firstTokenId === selectedNft.tokenId}\n                  onChange={(value: string) => actions.setSelectedNft(value, walletNft.collectionAddress)}\n                >\n                  <Text bold>{walletNft.name}</Text>\n                </SelectionCard>\n              )\n            })}\n          </NftWrapper>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Allow collectible to be locked')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\" mb=\"16px\">\n            {t(\n              \"The collectible you've chosen will be locked in a smart contract while it’s being used as your profile picture. Don't worry - you'll be able to get it back at any time.\",\n            )}\n          </Text>\n          <Button\n            isLoading={isApproving}\n            disabled={isApproved || isApproving || selectedNft.tokenId === null}\n            onClick={handleApprove}\n            endIcon={isApproving ? <AutoRenewIcon spin color=\"currentColor\" /> : undefined}\n            id=\"approveStarterCollectible\"\n          >\n            {t('Enable')}\n          </Button>\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={selectedNft.tokenId === null || !isApproved || isApproving}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default ProfilePicture\n"]},"metadata":{},"sourceType":"module"}