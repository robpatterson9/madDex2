{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { request, gql } from 'graphql-request';\nimport { INFO_CLIENT } from 'config/constants/endpoints';\nimport { getChangeForPeriod, getPercentChange } from 'views/Info/utils/infoDataHelpers';\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers';\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps';\n\n/**\n * Latest Liquidity, Volume and Transaction count\n */\nconst getOverviewData = async block => {\n  try {\n    const query = gql`query overview {\n      pancakeFactories(\n        ${block ? `block: { number: ${block}}` : ``} \n        first: 1) {\n        totalTransactions\n        totalVolumeUSD\n        totalLiquidityUSD\n      }\n    }`;\n    const data = await request(INFO_CLIENT, query);\n    return {\n      data,\n      error: false\n    };\n  } catch (error) {\n    console.error('Failed to fetch info overview', error);\n    return {\n      data: null,\n      error: true\n    };\n  }\n};\n\nconst formatPancakeFactoryResponse = rawPancakeFactory => {\n  if (rawPancakeFactory) {\n    return {\n      totalTransactions: parseFloat(rawPancakeFactory.totalTransactions),\n      totalVolumeUSD: parseFloat(rawPancakeFactory.totalVolumeUSD),\n      totalLiquidityUSD: parseFloat(rawPancakeFactory.totalLiquidityUSD)\n    };\n  }\n\n  return null;\n};\n\nconst useFetchProtocolData = () => {\n  _s();\n\n  const [fetchState, setFetchState] = useState({\n    error: false\n  });\n  const [t24, t48] = getDeltaTimestamps();\n  const {\n    blocks,\n    error: blockError\n  } = useBlocksFromTimestamps([t24, t48]);\n  const [block24, block48] = blocks !== null && blocks !== void 0 ? blocks : [];\n  useEffect(() => {\n    const fetch = async () => {\n      var _block24$number, _block48$number, _data$pancakeFactorie, _data24$pancakeFactor, _data48$pancakeFactor;\n\n      const {\n        error,\n        data\n      } = await getOverviewData();\n      const {\n        error: error24,\n        data: data24\n      } = await getOverviewData((_block24$number = block24 === null || block24 === void 0 ? void 0 : block24.number) !== null && _block24$number !== void 0 ? _block24$number : undefined);\n      const {\n        error: error48,\n        data: data48\n      } = await getOverviewData((_block48$number = block48 === null || block48 === void 0 ? void 0 : block48.number) !== null && _block48$number !== void 0 ? _block48$number : undefined);\n      const anyError = error || error24 || error48;\n      const overviewData = formatPancakeFactoryResponse(data === null || data === void 0 ? void 0 : (_data$pancakeFactorie = data.pancakeFactories) === null || _data$pancakeFactorie === void 0 ? void 0 : _data$pancakeFactorie[0]);\n      const overviewData24 = formatPancakeFactoryResponse(data24 === null || data24 === void 0 ? void 0 : (_data24$pancakeFactor = data24.pancakeFactories) === null || _data24$pancakeFactor === void 0 ? void 0 : _data24$pancakeFactor[0]);\n      const overviewData48 = formatPancakeFactoryResponse(data48 === null || data48 === void 0 ? void 0 : (_data48$pancakeFactor = data48.pancakeFactories) === null || _data48$pancakeFactor === void 0 ? void 0 : _data48$pancakeFactor[0]);\n      const allDataAvailable = overviewData && overviewData24 && overviewData48;\n\n      if (anyError || !allDataAvailable) {\n        setFetchState({\n          error: true\n        });\n      } else {\n        const [volumeUSD, volumeUSDChange] = getChangeForPeriod(overviewData.totalVolumeUSD, overviewData24.totalVolumeUSD, overviewData48.totalVolumeUSD);\n        const liquidityUSDChange = getPercentChange(overviewData.totalLiquidityUSD, overviewData24.totalLiquidityUSD); // 24H transactions\n\n        const [txCount, txCountChange] = getChangeForPeriod(overviewData.totalTransactions, overviewData24.totalTransactions, overviewData48.totalTransactions);\n        const protocolData = {\n          volumeUSD,\n          volumeUSDChange: typeof volumeUSDChange === 'number' ? volumeUSDChange : 0,\n          liquidityUSD: overviewData.totalLiquidityUSD,\n          liquidityUSDChange,\n          txCount,\n          txCountChange\n        };\n        setFetchState({\n          error: false,\n          data: protocolData\n        });\n      }\n    };\n\n    const allBlocksAvailable = (block24 === null || block24 === void 0 ? void 0 : block24.number) && (block48 === null || block48 === void 0 ? void 0 : block48.number);\n\n    if (allBlocksAvailable && !blockError && !fetchState.data) {\n      fetch();\n    }\n  }, [block24, block48, blockError, fetchState]);\n  return fetchState;\n};\n\n_s(useFetchProtocolData, \"Ipbab0gvEFwXj2mOTt5//xnNpJs=\", false, function () {\n  return [useBlocksFromTimestamps];\n});\n\nexport default useFetchProtocolData;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/queries/protocol/overview.ts"],"names":["useState","useEffect","request","gql","INFO_CLIENT","getChangeForPeriod","getPercentChange","getDeltaTimestamps","useBlocksFromTimestamps","getOverviewData","block","query","data","error","console","formatPancakeFactoryResponse","rawPancakeFactory","totalTransactions","parseFloat","totalVolumeUSD","totalLiquidityUSD","useFetchProtocolData","fetchState","setFetchState","t24","t48","blocks","blockError","block24","block48","fetch","error24","data24","number","undefined","error48","data48","anyError","overviewData","pancakeFactories","overviewData24","overviewData48","allDataAvailable","volumeUSD","volumeUSDChange","liquidityUSDChange","txCount","txCountChange","protocolData","liquidityUSD","allBlocksAvailable"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { getChangeForPeriod, getPercentChange } from 'views/Info/utils/infoDataHelpers'\nimport { ProtocolData } from 'state/info/types'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\n\ninterface PancakeFactory {\n  totalTransactions: string\n  totalVolumeUSD: string\n  totalLiquidityUSD: string\n}\n\ninterface OverviewResponse {\n  pancakeFactories: PancakeFactory[]\n}\n\n/**\n * Latest Liquidity, Volume and Transaction count\n */\nconst getOverviewData = async (block?: number): Promise<{ data?: OverviewResponse; error: boolean }> => {\n  try {\n    const query = gql`query overview {\n      pancakeFactories(\n        ${block ? `block: { number: ${block}}` : ``} \n        first: 1) {\n        totalTransactions\n        totalVolumeUSD\n        totalLiquidityUSD\n      }\n    }`\n    const data = await request<OverviewResponse>(INFO_CLIENT, query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch info overview', error)\n    return { data: null, error: true }\n  }\n}\n\nconst formatPancakeFactoryResponse = (rawPancakeFactory?: PancakeFactory) => {\n  if (rawPancakeFactory) {\n    return {\n      totalTransactions: parseFloat(rawPancakeFactory.totalTransactions),\n      totalVolumeUSD: parseFloat(rawPancakeFactory.totalVolumeUSD),\n      totalLiquidityUSD: parseFloat(rawPancakeFactory.totalLiquidityUSD),\n    }\n  }\n  return null\n}\n\ninterface ProtocolFetchState {\n  error: boolean\n  data?: ProtocolData\n}\n\nconst useFetchProtocolData = (): ProtocolFetchState => {\n  const [fetchState, setFetchState] = useState<ProtocolFetchState>({\n    error: false,\n  })\n  const [t24, t48] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24, t48])\n  const [block24, block48] = blocks ?? []\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await getOverviewData()\n      const { error: error24, data: data24 } = await getOverviewData(block24?.number ?? undefined)\n      const { error: error48, data: data48 } = await getOverviewData(block48?.number ?? undefined)\n      const anyError = error || error24 || error48\n      const overviewData = formatPancakeFactoryResponse(data?.pancakeFactories?.[0])\n      const overviewData24 = formatPancakeFactoryResponse(data24?.pancakeFactories?.[0])\n      const overviewData48 = formatPancakeFactoryResponse(data48?.pancakeFactories?.[0])\n      const allDataAvailable = overviewData && overviewData24 && overviewData48\n      if (anyError || !allDataAvailable) {\n        setFetchState({\n          error: true,\n        })\n      } else {\n        const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n          overviewData.totalVolumeUSD,\n          overviewData24.totalVolumeUSD,\n          overviewData48.totalVolumeUSD,\n        )\n        const liquidityUSDChange = getPercentChange(overviewData.totalLiquidityUSD, overviewData24.totalLiquidityUSD)\n        // 24H transactions\n        const [txCount, txCountChange] = getChangeForPeriod(\n          overviewData.totalTransactions,\n          overviewData24.totalTransactions,\n          overviewData48.totalTransactions,\n        )\n        const protocolData: ProtocolData = {\n          volumeUSD,\n          volumeUSDChange: typeof volumeUSDChange === 'number' ? volumeUSDChange : 0,\n          liquidityUSD: overviewData.totalLiquidityUSD,\n          liquidityUSDChange,\n          txCount,\n          txCountChange,\n        }\n        setFetchState({\n          error: false,\n          data: protocolData,\n        })\n      }\n    }\n    const allBlocksAvailable = block24?.number && block48?.number\n    if (allBlocksAvailable && !blockError && !fetchState.data) {\n      fetch()\n    }\n  }, [block24, block48, blockError, fetchState])\n\n  return fetchState\n}\n\nexport default useFetchProtocolData\n"]},"metadata":{},"sourceType":"module"}