{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Profile/components/ActivityHistory/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { uniqBy } from 'lodash';\nimport { Flex, Text, Card, ArrowBackIcon, ArrowForwardIcon, Table, Th, useMatchBreakpoints } from '@pancakeswap/uikit';\nimport { getNftsFromDifferentCollectionsApi } from 'state/nftMarket/helpers';\nimport { UserNftInitializationState } from 'state/nftMarket/types';\nimport { useTranslation } from 'contexts/Localization';\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice';\nimport useTheme from 'hooks/useTheme';\nimport { useParams } from 'react-router';\nimport useFetchUserActivity from '../../hooks/useFetchUserActivity';\nimport useUserActivity from '../../hooks/useUserActivity';\nimport ActivityRow from './ActivityRow';\nimport TableLoader from './TableLoader';\nimport NoNftsImage from '../NoNftsImage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PageButtons = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 0.2em;\n  margin-bottom: 1.2em;\n`;\n_c = PageButtons;\nconst Arrow = styled.div`\n  color: ${({\n  theme\n}) => theme.colors.primary};\n  padding: 0 20px;\n  :hover {\n    cursor: pointer;\n  }\n`;\n_c2 = Arrow;\nconst MAX_PER_PAGE = 8;\n\nconst ActivityHistory = () => {\n  _s();\n\n  const {\n    accountAddress\n  } = useParams();\n  const {\n    theme\n  } = useTheme();\n  const {\n    t\n  } = useTranslation();\n  const [currentPage, setCurrentPage] = useState(1);\n  const [maxPage, setMaxPages] = useState(1);\n  const [activitiesSlice, setActivitiesSlice] = useState([]);\n  const [nftMetadata, setNftMetadata] = useState([]);\n  const {\n    sortedUserActivities,\n    initializationState\n  } = useUserActivity(accountAddress);\n  const bnbBusdPrice = useBNBBusdPrice();\n  const {\n    isXs,\n    isSm\n  } = useMatchBreakpoints();\n  useFetchUserActivity(accountAddress);\n  useEffect(() => {\n    const fetchActivityNftMetadata = async () => {\n      const activityNftTokenIds = uniqBy(sortedUserActivities.map(activity => {\n        return {\n          tokenId: activity.nft.tokenId,\n          collectionAddress: activity.nft.collection.id\n        };\n      }), 'tokenId');\n      const nfts = await getNftsFromDifferentCollectionsApi(activityNftTokenIds);\n      setNftMetadata(nfts);\n    };\n\n    const getMaxPages = () => {\n      const max = Math.ceil(sortedUserActivities.length / MAX_PER_PAGE);\n      setMaxPages(max);\n    };\n\n    if (sortedUserActivities.length > 0) {\n      getMaxPages();\n      fetchActivityNftMetadata();\n    }\n\n    return () => {\n      setActivitiesSlice([]);\n      setNftMetadata([]);\n      setMaxPages(1);\n      setCurrentPage(1);\n    };\n  }, [sortedUserActivities]);\n  useEffect(() => {\n    const getActivitiesSlice = () => {\n      const slice = sortedUserActivities.slice(MAX_PER_PAGE * (currentPage - 1), MAX_PER_PAGE * currentPage);\n      setActivitiesSlice(slice);\n    };\n\n    if (sortedUserActivities.length > 0) {\n      getActivitiesSlice();\n    }\n  }, [sortedUserActivities, currentPage]);\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: sortedUserActivities.length === 0 && nftMetadata.length === 0 && activitiesSlice.length === 0 && initializationState === UserNftInitializationState.INITIALIZED ? /*#__PURE__*/_jsxDEV(Flex, {\n      p: \"24px\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(NoNftsImage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        pt: \"8px\",\n        bold: true,\n        children: t('No NFT market history found')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(Th, {\n              textAlign: ['center', null, 'left'],\n              children: [\" \", t('Item')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Th, {\n              textAlign: \"right\",\n              children: [\" \", t('Event')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this), isXs || isSm ? null : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Th, {\n                textAlign: \"right\",\n                children: [\" \", t('Price')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Th, {\n                textAlign: \"right\",\n                children: [\" \", t('From/To')]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true), /*#__PURE__*/_jsxDEV(Th, {\n              textAlign: \"center\",\n              children: [\" \", t('Date')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 17\n            }, this), isXs || isSm ? null : /*#__PURE__*/_jsxDEV(Th, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 40\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: initializationState === UserNftInitializationState.INITIALIZING ? /*#__PURE__*/_jsxDEV(TableLoader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 17\n          }, this) : activitiesSlice.map(activity => {\n            const nftMeta = nftMetadata.find(metaNft => metaNft.tokenId === activity.nft.tokenId);\n            return /*#__PURE__*/_jsxDEV(ActivityRow, {\n              activity: activity,\n              nft: nftMeta,\n              bnbBusdPrice: bnbBusdPrice\n            }, `${activity.nft.tokenId}${activity.timestamp}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 21\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        borderTop: `1px ${theme.colors.cardBorder} solid`,\n        pt: \"24px\",\n        flexDirection: \"column\",\n        justifyContent: \"space-between\",\n        height: \"100%\",\n        children: /*#__PURE__*/_jsxDEV(PageButtons, {\n          children: [/*#__PURE__*/_jsxDEV(Arrow, {\n            onClick: () => {\n              setCurrentPage(currentPage === 1 ? currentPage : currentPage - 1);\n            },\n            children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {\n              color: currentPage === 1 ? 'textDisabled' : 'primary'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            children: t('Page %page% of %maxPage%', {\n              page: currentPage,\n              maxPage\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Arrow, {\n            onClick: () => {\n              setCurrentPage(currentPage === maxPage ? currentPage : currentPage + 1);\n            },\n            children: /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n              color: currentPage === maxPage ? 'textDisabled' : 'primary'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ActivityHistory, \"45xQC9vFMnW2b5UEsPiY9/fLtOQ=\", false, function () {\n  return [useParams, useTheme, useTranslation, useUserActivity, useBNBBusdPrice, useMatchBreakpoints, useFetchUserActivity];\n});\n\n_c3 = ActivityHistory;\nexport default ActivityHistory;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"PageButtons\");\n$RefreshReg$(_c2, \"Arrow\");\n$RefreshReg$(_c3, \"ActivityHistory\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Profile/components/ActivityHistory/index.tsx"],"names":["React","useState","useEffect","styled","uniqBy","Flex","Text","Card","ArrowBackIcon","ArrowForwardIcon","Table","Th","useMatchBreakpoints","getNftsFromDifferentCollectionsApi","UserNftInitializationState","useTranslation","useBNBBusdPrice","useTheme","useParams","useFetchUserActivity","useUserActivity","ActivityRow","TableLoader","NoNftsImage","PageButtons","div","Arrow","theme","colors","primary","MAX_PER_PAGE","ActivityHistory","accountAddress","t","currentPage","setCurrentPage","maxPage","setMaxPages","activitiesSlice","setActivitiesSlice","nftMetadata","setNftMetadata","sortedUserActivities","initializationState","bnbBusdPrice","isXs","isSm","fetchActivityNftMetadata","activityNftTokenIds","map","activity","tokenId","nft","collectionAddress","collection","id","nfts","getMaxPages","max","Math","ceil","length","getActivitiesSlice","slice","INITIALIZED","INITIALIZING","nftMeta","find","metaNft","timestamp","cardBorder","page"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { uniqBy } from 'lodash'\nimport { Flex, Text, Card, ArrowBackIcon, ArrowForwardIcon, Table, Th, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { getNftsFromDifferentCollectionsApi } from 'state/nftMarket/helpers'\nimport { NftToken, TokenIdWithCollectionAddress, UserNftInitializationState } from 'state/nftMarket/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useBNBBusdPrice } from 'hooks/useBUSDPrice'\nimport useTheme from 'hooks/useTheme'\nimport { useParams } from 'react-router'\nimport useFetchUserActivity from '../../hooks/useFetchUserActivity'\nimport useUserActivity, { Activity } from '../../hooks/useUserActivity'\nimport ActivityRow from './ActivityRow'\nimport TableLoader from './TableLoader'\nimport NoNftsImage from '../NoNftsImage'\n\nconst PageButtons = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  margin-top: 0.2em;\n  margin-bottom: 1.2em;\n`\n\nconst Arrow = styled.div`\n  color: ${({ theme }) => theme.colors.primary};\n  padding: 0 20px;\n  :hover {\n    cursor: pointer;\n  }\n`\n\nconst MAX_PER_PAGE = 8\n\nconst ActivityHistory = () => {\n  const { accountAddress } = useParams<{ accountAddress: string }>()\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const [currentPage, setCurrentPage] = useState(1)\n  const [maxPage, setMaxPages] = useState(1)\n  const [activitiesSlice, setActivitiesSlice] = useState<Activity[]>([])\n  const [nftMetadata, setNftMetadata] = useState<NftToken[]>([])\n  const { sortedUserActivities, initializationState } = useUserActivity(accountAddress)\n  const bnbBusdPrice = useBNBBusdPrice()\n  const { isXs, isSm } = useMatchBreakpoints()\n\n  useFetchUserActivity(accountAddress)\n\n  useEffect(() => {\n    const fetchActivityNftMetadata = async () => {\n      const activityNftTokenIds = uniqBy(\n        sortedUserActivities.map((activity): TokenIdWithCollectionAddress => {\n          return { tokenId: activity.nft.tokenId, collectionAddress: activity.nft.collection.id }\n        }),\n        'tokenId',\n      )\n      const nfts = await getNftsFromDifferentCollectionsApi(activityNftTokenIds)\n      setNftMetadata(nfts)\n    }\n\n    const getMaxPages = () => {\n      const max = Math.ceil(sortedUserActivities.length / MAX_PER_PAGE)\n      setMaxPages(max)\n    }\n\n    if (sortedUserActivities.length > 0) {\n      getMaxPages()\n      fetchActivityNftMetadata()\n    }\n\n    return () => {\n      setActivitiesSlice([])\n      setNftMetadata([])\n      setMaxPages(1)\n      setCurrentPage(1)\n    }\n  }, [sortedUserActivities])\n\n  useEffect(() => {\n    const getActivitiesSlice = () => {\n      const slice = sortedUserActivities.slice(MAX_PER_PAGE * (currentPage - 1), MAX_PER_PAGE * currentPage)\n      setActivitiesSlice(slice)\n    }\n    if (sortedUserActivities.length > 0) {\n      getActivitiesSlice()\n    }\n  }, [sortedUserActivities, currentPage])\n\n  return (\n    <Card>\n      {sortedUserActivities.length === 0 &&\n      nftMetadata.length === 0 &&\n      activitiesSlice.length === 0 &&\n      initializationState === UserNftInitializationState.INITIALIZED ? (\n        <Flex p=\"24px\" flexDirection=\"column\" alignItems=\"center\">\n          <NoNftsImage />\n          <Text pt=\"8px\" bold>\n            {t('No NFT market history found')}\n          </Text>\n        </Flex>\n      ) : (\n        <>\n          <Table>\n            <thead>\n              <tr>\n                <Th textAlign={['center', null, 'left']}> {t('Item')}</Th>\n                <Th textAlign=\"right\"> {t('Event')}</Th>\n                {isXs || isSm ? null : (\n                  <>\n                    <Th textAlign=\"right\"> {t('Price')}</Th>\n                    <Th textAlign=\"right\"> {t('From/To')}</Th>\n                  </>\n                )}\n                <Th textAlign=\"center\"> {t('Date')}</Th>\n                {isXs || isSm ? null : <Th />}\n              </tr>\n            </thead>\n\n            <tbody>\n              {initializationState === UserNftInitializationState.INITIALIZING ? (\n                <TableLoader />\n              ) : (\n                activitiesSlice.map((activity) => {\n                  const nftMeta = nftMetadata.find((metaNft) => metaNft.tokenId === activity.nft.tokenId)\n                  return (\n                    <ActivityRow\n                      key={`${activity.nft.tokenId}${activity.timestamp}`}\n                      activity={activity}\n                      nft={nftMeta}\n                      bnbBusdPrice={bnbBusdPrice}\n                    />\n                  )\n                })\n              )}\n            </tbody>\n          </Table>\n          <Flex\n            borderTop={`1px ${theme.colors.cardBorder} solid`}\n            pt=\"24px\"\n            flexDirection=\"column\"\n            justifyContent=\"space-between\"\n            height=\"100%\"\n          >\n            <PageButtons>\n              <Arrow\n                onClick={() => {\n                  setCurrentPage(currentPage === 1 ? currentPage : currentPage - 1)\n                }}\n              >\n                <ArrowBackIcon color={currentPage === 1 ? 'textDisabled' : 'primary'} />\n              </Arrow>\n              <Text>{t('Page %page% of %maxPage%', { page: currentPage, maxPage })}</Text>\n              <Arrow\n                onClick={() => {\n                  setCurrentPage(currentPage === maxPage ? currentPage : currentPage + 1)\n                }}\n              >\n                <ArrowForwardIcon color={currentPage === maxPage ? 'textDisabled' : 'primary'} />\n              </Arrow>\n            </PageButtons>\n          </Flex>\n        </>\n      )}\n    </Card>\n  )\n}\n\nexport default ActivityHistory\n"]},"metadata":{},"sourceType":"module"}