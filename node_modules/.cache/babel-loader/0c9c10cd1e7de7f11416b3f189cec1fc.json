{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _templateObject;import{request,gql}from'graphql-request';import{INFO_CLIENT}from'config/constants/endpoints';import{PCS_V2_START}from'config/constants/info';import{mapDayData,fetchChartData}from'../helpers';var getTokenChartData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(skip,address){var query,_yield$request,tokenDayDatas,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;query=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n      query tokenDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\\n        tokenDayDatas(\\n          first: 1000\\n          skip: $skip\\n          where: { token: $address, date_gt: $startTime }\\n          orderBy: date\\n          orderDirection: asc\\n        ) {\\n          date\\n          dailyVolumeUSD\\n          totalLiquidityUSD\\n        }\\n      }\\n    \"])));_context.next=4;return request(INFO_CLIENT,query,{startTime:PCS_V2_START,skip:skip,address:address});case 4:_yield$request=_context.sent;tokenDayDatas=_yield$request.tokenDayDatas;data=tokenDayDatas.map(mapDayData);return _context.abrupt(\"return\",{data:data,error:false});case 10:_context.prev=10;_context.t0=_context[\"catch\"](0);console.error('Failed to fetch token chart data',_context.t0);return _context.abrupt(\"return\",{error:true});case 14:case\"end\":return _context.stop();}}},_callee,null,[[0,10]]);}));return function getTokenChartData(_x,_x2){return _ref.apply(this,arguments);};}();var fetchTokenChartData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt(\"return\",fetchChartData(getTokenChartData,address));case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchTokenChartData(_x3){return _ref2.apply(this,arguments);};}();export default fetchTokenChartData;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/queries/tokens/chartData.ts"],"names":["request","gql","INFO_CLIENT","PCS_V2_START","mapDayData","fetchChartData","getTokenChartData","skip","address","query","startTime","tokenDayDatas","data","map","error","console","fetchTokenChartData"],"mappings":"yeAAA,OAASA,OAAT,CAAkBC,GAAlB,KAA6B,iBAA7B,CACA,OAASC,WAAT,KAA4B,4BAA5B,CAEA,OAASC,YAAT,KAA6B,uBAA7B,CAEA,OAASC,UAAT,CAAqBC,cAArB,KAA2C,YAA3C,CAEA,GAAMC,CAAAA,iBAAiB,0FAAG,iBAAOC,IAAP,CAAqBC,OAArB,8KAEhBC,KAFgB,CAERR,GAFQ,6cAiBUD,CAAAA,OAAO,CAAwBE,WAAxB,CAAqCO,KAArC,CAA4C,CACjFC,SAAS,CAAEP,YADsE,CAEjFI,IAAI,CAAJA,IAFiF,CAGjFC,OAAO,CAAPA,OAHiF,CAA5C,CAjBjB,qCAiBdG,aAjBc,gBAiBdA,aAjBc,CAsBhBC,IAtBgB,CAsBTD,aAAa,CAACE,GAAd,CAAkBT,UAAlB,CAtBS,iCAuBf,CAAEQ,IAAI,CAAJA,IAAF,CAAQE,KAAK,CAAE,KAAf,CAvBe,4DAyBtBC,OAAO,CAACD,KAAR,CAAc,kCAAd,cAzBsB,gCA0Bf,CAAEA,KAAK,CAAE,IAAT,CA1Be,uEAAH,kBAAjBR,CAAAA,iBAAiB,gDAAvB,CA8BA,GAAMU,CAAAA,mBAAmB,2FAAG,kBAAOR,OAAP,uJACnBH,cAAc,CAACC,iBAAD,CAAoBE,OAApB,CADK,0DAAH,kBAAnBQ,CAAAA,mBAAmB,8CAAzB,CAIA,cAAeA,CAAAA,mBAAf","sourcesContent":["import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { ChartEntry } from 'state/info/types'\nimport { PCS_V2_START } from 'config/constants/info'\nimport { TokenDayDatasResponse } from '../types'\nimport { mapDayData, fetchChartData } from '../helpers'\n\nconst getTokenChartData = async (skip: number, address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const query = gql`\n      query tokenDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\n        tokenDayDatas(\n          first: 1000\n          skip: $skip\n          where: { token: $address, date_gt: $startTime }\n          orderBy: date\n          orderDirection: asc\n        ) {\n          date\n          dailyVolumeUSD\n          totalLiquidityUSD\n        }\n      }\n    `\n    const { tokenDayDatas } = await request<TokenDayDatasResponse>(INFO_CLIENT, query, {\n      startTime: PCS_V2_START,\n      skip,\n      address,\n    })\n    const data = tokenDayDatas.map(mapDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch token chart data', error)\n    return { error: true }\n  }\n}\n\nconst fetchTokenChartData = async (address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  return fetchChartData(getTokenChartData, address)\n}\n\nexport default fetchTokenChartData\n"]},"metadata":{},"sourceType":"module"}