{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Predictions/components/RoundCard/OpenRoundCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { Card, CardBody, PlayCircleOutlineIcon, Button, useTooltip, ArrowUpIcon, ArrowDownIcon } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useAppDispatch } from 'state';\nimport { BetPosition } from 'state/types';\nimport { fetchLedgerData } from 'state/predictions';\nimport { ROUND_BUFFER } from 'state/predictions/config';\nimport useToast from 'hooks/useToast';\nimport useTheme from 'hooks/useTheme';\nimport { ToastDescriptionWithTx } from 'components/Toast';\nimport CardFlip from '../CardFlip';\nimport { formatBnbv2 } from '../../helpers';\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult';\nimport MultiplierArrow from './MultiplierArrow';\nimport CardHeader, { getBorderBackground } from './CardHeader';\nimport SetPositionCard from './SetPositionCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst OpenRoundCard = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier\n}) => {\n  _s();\n\n  const [state, setState] = useState({\n    isSettingPosition: false,\n    position: BetPosition.BULL\n  });\n  const {\n    t\n  } = useTranslation();\n  const {\n    theme\n  } = useTheme();\n  const {\n    toastSuccess\n  } = useToast();\n  const {\n    account\n  } = useWeb3React();\n  const dispatch = useAppDispatch();\n  const {\n    isSettingPosition,\n    position\n  } = state;\n  const isBufferPhase = Date.now() > (round.lockTimestamp + ROUND_BUFFER) * 1000;\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase();\n  const {\n    targetRef,\n    tooltipVisible,\n    tooltip\n  } = useTooltip( /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      whiteSpace: 'nowrap'\n    },\n    children: `${formatBnbv2(betAmount)} BNB`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this), {\n    placement: 'top'\n  });\n\n  const getHasEnteredPosition = () => {\n    if (hasEnteredUp || hasEnteredDown) {\n      return false;\n    }\n\n    if (round.lockPrice !== null) {\n      return false;\n    }\n\n    return true;\n  };\n\n  const canEnterPosition = getHasEnteredPosition();\n\n  const handleBack = () => setState(prevState => ({ ...prevState,\n    isSettingPosition: false\n  }));\n\n  const handleSetPosition = newPosition => {\n    setState(prevState => ({ ...prevState,\n      isSettingPosition: true,\n      position: newPosition\n    }));\n  };\n\n  const togglePosition = () => {\n    setState(prevState => ({ ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL\n    }));\n  };\n\n  const handleSuccess = async hash => {\n    await dispatch(fetchLedgerData({\n      account,\n      epochs: [round.epoch]\n    }));\n    handleBack();\n    toastSuccess(t('Success!'), /*#__PURE__*/_jsxDEV(ToastDescriptionWithTx, {\n      txHash: hash,\n      children: t('%position% position entered', {\n        position: positionDisplay\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this));\n  };\n\n  const getPositionEnteredIcon = () => {\n    return position === BetPosition.BULL ? /*#__PURE__*/_jsxDEV(ArrowUpIcon, {\n      color: \"currentColor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 44\n    }, this) : /*#__PURE__*/_jsxDEV(ArrowDownIcon, {\n      color: \"currentColor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 83\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(CardFlip, {\n    isFlipped: isSettingPosition,\n    height: \"404px\",\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      borderBackground: getBorderBackground(theme, 'next'),\n      children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n        status: \"next\",\n        epoch: round.epoch,\n        icon: /*#__PURE__*/_jsxDEV(PlayCircleOutlineIcon, {\n          color: \"white\",\n          mr: \"4px\",\n          width: \"21px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 17\n        }, this),\n        title: t('Next')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n        p: \"16px\",\n        children: [/*#__PURE__*/_jsxDEV(MultiplierArrow, {\n          betAmount: betAmount,\n          multiplier: bullMultiplier,\n          hasEntered: hasEnteredUp\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RoundResultBox, {\n          isNext: canEnterPosition,\n          isLive: !canEnterPosition,\n          children: canEnterPosition ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(PrizePoolRow, {\n              totalAmount: round.totalAmount,\n              mb: \"8px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"success\",\n              width: \"100%\",\n              onClick: () => handleSetPosition(BetPosition.BULL),\n              mb: \"4px\",\n              disabled: !canEnterPosition || isBufferPhase,\n              children: t('Enter UP')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"danger\",\n              width: \"100%\",\n              onClick: () => handleSetPosition(BetPosition.BEAR),\n              disabled: !canEnterPosition || isBufferPhase,\n              children: t('Enter DOWN')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              ref: targetRef,\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                disabled: true,\n                startIcon: getPositionEnteredIcon(),\n                width: \"100%\",\n                mb: \"8px\",\n                children: t('%position% Entered', {\n                  position: positionDisplay\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(PrizePoolRow, {\n              totalAmount: round.totalAmount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 17\n            }, this), tooltipVisible && tooltip]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MultiplierArrow, {\n          betAmount: betAmount,\n          multiplier: bearMultiplier,\n          betPosition: BetPosition.BEAR,\n          hasEntered: hasEnteredDown\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SetPositionCard, {\n      onBack: handleBack,\n      onSuccess: handleSuccess,\n      position: position,\n      togglePosition: togglePosition,\n      epoch: round.epoch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OpenRoundCard, \"EdYHwXvR1Ixr9K47D+NpbFLrt64=\", false, function () {\n  return [useTranslation, useTheme, useToast, useWeb3React, useAppDispatch, useTooltip];\n});\n\n_c = OpenRoundCard;\nexport default OpenRoundCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"OpenRoundCard\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Predictions/components/RoundCard/OpenRoundCard.tsx"],"names":["React","useState","useWeb3React","Card","CardBody","PlayCircleOutlineIcon","Button","useTooltip","ArrowUpIcon","ArrowDownIcon","useTranslation","useAppDispatch","BetPosition","fetchLedgerData","ROUND_BUFFER","useToast","useTheme","ToastDescriptionWithTx","CardFlip","formatBnbv2","RoundResultBox","PrizePoolRow","MultiplierArrow","CardHeader","getBorderBackground","SetPositionCard","OpenRoundCard","round","betAmount","hasEnteredUp","hasEnteredDown","bullMultiplier","bearMultiplier","state","setState","isSettingPosition","position","BULL","t","theme","toastSuccess","account","dispatch","isBufferPhase","Date","now","lockTimestamp","positionDisplay","toUpperCase","targetRef","tooltipVisible","tooltip","whiteSpace","placement","getHasEnteredPosition","lockPrice","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","togglePosition","BEAR","handleSuccess","hash","epochs","epoch","getPositionEnteredIcon","totalAmount"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  Card,\n  CardBody,\n  PlayCircleOutlineIcon,\n  Button,\n  useTooltip,\n  ArrowUpIcon,\n  ArrowDownIcon,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\nimport { fetchLedgerData } from 'state/predictions'\nimport { ROUND_BUFFER } from 'state/predictions/config'\nimport useToast from 'hooks/useToast'\nimport useTheme from 'hooks/useTheme'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport CardFlip from '../CardFlip'\nimport { formatBnbv2 } from '../../helpers'\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\nimport SetPositionCard from './SetPositionCard'\n\ninterface OpenRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\ninterface State {\n  isSettingPosition: boolean\n  position: BetPosition\n}\n\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const [state, setState] = useState<State>({\n    isSettingPosition: false,\n    position: BetPosition.BULL,\n  })\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess } = useToast()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { isSettingPosition, position } = state\n  const isBufferPhase = Date.now() > (round.lockTimestamp + ROUND_BUFFER) * 1000\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(betAmount)} BNB`}</div>,\n    { placement: 'top' },\n  )\n\n  const getHasEnteredPosition = () => {\n    if (hasEnteredUp || hasEnteredDown) {\n      return false\n    }\n\n    if (round.lockPrice !== null) {\n      return false\n    }\n\n    return true\n  }\n\n  const canEnterPosition = getHasEnteredPosition()\n\n  const handleBack = () =>\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: false,\n    }))\n\n  const handleSetPosition = (newPosition: BetPosition) => {\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: true,\n      position: newPosition,\n    }))\n  }\n\n  const togglePosition = () => {\n    setState((prevState) => ({\n      ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\n    }))\n  }\n\n  const handleSuccess = async (hash: string) => {\n    await dispatch(fetchLedgerData({ account, epochs: [round.epoch] }))\n\n    handleBack()\n\n    toastSuccess(\n      t('Success!'),\n      <ToastDescriptionWithTx txHash={hash}>\n        {t('%position% position entered', {\n          position: positionDisplay,\n        })}\n      </ToastDescriptionWithTx>,\n    )\n  }\n\n  const getPositionEnteredIcon = () => {\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\n  }\n\n  return (\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\n      <Card borderBackground={getBorderBackground(theme, 'next')}>\n        <CardHeader\n          status=\"next\"\n          epoch={round.epoch}\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\n          title={t('Next')}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\n            {canEnterPosition ? (\n              <>\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\n                <Button\n                  variant=\"success\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\n                  mb=\"4px\"\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter UP')}\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter DOWN')}\n                </Button>\n              </>\n            ) : (\n              <>\n                <div ref={targetRef}>\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\n                    {t('%position% Entered', { position: positionDisplay })}\n                  </Button>\n                </div>\n                <PrizePoolRow totalAmount={round.totalAmount} />\n                {tooltipVisible && tooltip}\n              </>\n            )}\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </Card>\n      <SetPositionCard\n        onBack={handleBack}\n        onSuccess={handleSuccess}\n        position={position}\n        togglePosition={togglePosition}\n        epoch={round.epoch}\n      />\n    </CardFlip>\n  )\n}\n\nexport default OpenRoundCard\n"]},"metadata":{},"sourceType":"module"}