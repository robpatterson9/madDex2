{"ast":null,"code":"import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React from'react';import styled from'styled-components';import BigNumber from'bignumber.js';import{Button,useModal,IconButton,AddIcon,MinusIcon,Skeleton,useTooltip,Flex,Text}from'@pancakeswap/uikit';import ConnectWalletButton from'components/ConnectWalletButton';import{useWeb3React}from'@web3-react/core';import{useCakeVault}from'state/pools/hooks';import Balance from'components/Balance';import{useTranslation}from'contexts/Localization';import{getBalanceNumber}from'utils/formatBalance';import{PoolCategory}from'config/constants/types';import{BIG_ZERO}from'utils/bigNumber';import{useERC20}from'hooks/useContract';import{convertSharesToCake}from'views/Pools/helpers';import{ActionContainer,ActionTitles,ActionContent}from'./styles';import NotEnoughTokensModal from'../../PoolCard/Modals/NotEnoughTokensModal';import StakeModal from'../../PoolCard/Modals/StakeModal';import VaultStakeModal from'../../CakeVaultCard/VaultStakeModal';import{useCheckVaultApprovalStatus,useApprovePool,useVaultApprove}from'../../../hooks/useApprove';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var IconButtonWrapper=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n\"])));var Staked=function Staked(_ref){var pool=_ref.pool,userDataLoaded=_ref.userDataLoaded;var sousId=pool.sousId,stakingToken=pool.stakingToken,earningToken=pool.earningToken,stakingLimit=pool.stakingLimit,isFinished=pool.isFinished,poolCategory=pool.poolCategory,userData=pool.userData,stakingTokenPrice=pool.stakingTokenPrice,isAutoVault=pool.isAutoVault;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var stakingTokenContract=useERC20(stakingToken.address||'');var _useApprovePool=useApprovePool(stakingTokenContract,sousId,earningToken.symbol),handlePoolApprove=_useApprovePool.handleApprove,requestedPoolApproval=_useApprovePool.requestedApproval;var _useCheckVaultApprova=useCheckVaultApprovalStatus(),isVaultApproved=_useCheckVaultApprova.isVaultApproved,setLastUpdated=_useCheckVaultApprova.setLastUpdated;var _useVaultApprove=useVaultApprove(setLastUpdated),handleVaultApprove=_useVaultApprove.handleApprove,requestedVaultApproval=_useVaultApprove.requestedApproval;var handleApprove=isAutoVault?handleVaultApprove:handlePoolApprove;var requestedApproval=isAutoVault?requestedVaultApproval:requestedPoolApproval;var isBnbPool=poolCategory===PoolCategory.BINANCE;var allowance=(userData===null||userData===void 0?void 0:userData.allowance)?new BigNumber(userData.allowance):BIG_ZERO;var stakedBalance=(userData===null||userData===void 0?void 0:userData.stakedBalance)?new BigNumber(userData.stakedBalance):BIG_ZERO;var isNotVaultAndHasStake=!isAutoVault&&stakedBalance.gt(0);var stakingTokenBalance=(userData===null||userData===void 0?void 0:userData.stakingTokenBalance)?new BigNumber(userData.stakingTokenBalance):BIG_ZERO;var stakedTokenBalance=getBalanceNumber(stakedBalance,stakingToken.decimals);var stakedTokenDollarBalance=getBalanceNumber(stakedBalance.multipliedBy(stakingTokenPrice),stakingToken.decimals);var _useCakeVault=useCakeVault(),userShares=_useCakeVault.userData.userShares,pricePerFullShare=_useCakeVault.pricePerFullShare;var _convertSharesToCake=convertSharesToCake(userShares,pricePerFullShare),cakeAsBigNumber=_convertSharesToCake.cakeAsBigNumber,cakeAsNumberBalance=_convertSharesToCake.cakeAsNumberBalance;var hasSharesStaked=userShares&&userShares.gt(0);var isVaultWithShares=isAutoVault&&hasSharesStaked;var stakedAutoDollarValue=getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice),stakingToken.decimals);var needsApproval=isAutoVault?!isVaultApproved:!allowance.gt(0)&&!isBnbPool;var _useModal=useModal(/*#__PURE__*/_jsx(NotEnoughTokensModal,{tokenSymbol:stakingToken.symbol})),_useModal2=_slicedToArray(_useModal,1),onPresentTokenRequired=_useModal2[0];var _useModal3=useModal(/*#__PURE__*/_jsx(StakeModal,{isBnbPool:isBnbPool,pool:pool,stakingTokenBalance:stakingTokenBalance,stakingTokenPrice:stakingTokenPrice})),_useModal4=_slicedToArray(_useModal3,1),onPresentStake=_useModal4[0];var _useModal5=useModal(/*#__PURE__*/_jsx(VaultStakeModal,{stakingMax:stakingTokenBalance,pool:pool})),_useModal6=_slicedToArray(_useModal5,1),onPresentVaultStake=_useModal6[0];var _useModal7=useModal(/*#__PURE__*/_jsx(StakeModal,{stakingTokenBalance:stakingTokenBalance,isBnbPool:isBnbPool,pool:pool,stakingTokenPrice:stakingTokenPrice,isRemovingStake:true})),_useModal8=_slicedToArray(_useModal7,1),onPresentUnstake=_useModal8[0];var _useModal9=useModal(/*#__PURE__*/_jsx(VaultStakeModal,{stakingMax:cakeAsBigNumber,pool:pool,isRemovingStake:true})),_useModal10=_slicedToArray(_useModal9,1),onPresentVaultUnstake=_useModal10[0];var onStake=function onStake(){if(isAutoVault){onPresentVaultStake();}else{onPresentStake();}};var onUnstake=function onUnstake(){if(isAutoVault){onPresentVaultUnstake();}else{onPresentUnstake();}};var _useTooltip=useTooltip(t(\"You've already staked the maximum amount you can stake in this pool!\"),{placement:'bottom'}),targetRef=_useTooltip.targetRef,tooltip=_useTooltip.tooltip,tooltipVisible=_useTooltip.tooltipVisible;var reachStakingLimit=stakingLimit.gt(0)&&userData.stakedBalance.gte(stakingLimit);if(!account){return/*#__PURE__*/_jsxs(ActionContainer,{children:[/*#__PURE__*/_jsx(ActionTitles,{children:/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",bold:true,color:\"textSubtle\",as:\"span\",textTransform:\"uppercase\",children:t('Start staking')})}),/*#__PURE__*/_jsx(ActionContent,{children:/*#__PURE__*/_jsx(ConnectWalletButton,{width:\"100%\"})})]});}if(!userDataLoaded){return/*#__PURE__*/_jsxs(ActionContainer,{children:[/*#__PURE__*/_jsx(ActionTitles,{children:/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",bold:true,color:\"textSubtle\",as:\"span\",textTransform:\"uppercase\",children:t('Start staking')})}),/*#__PURE__*/_jsx(ActionContent,{children:/*#__PURE__*/_jsx(Skeleton,{width:180,height:\"32px\",marginTop:14})})]});}if(needsApproval){return/*#__PURE__*/_jsxs(ActionContainer,{children:[/*#__PURE__*/_jsx(ActionTitles,{children:/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",bold:true,color:\"textSubtle\",as:\"span\",textTransform:\"uppercase\",children:t('Enable pool')})}),/*#__PURE__*/_jsx(ActionContent,{children:/*#__PURE__*/_jsx(Button,{width:\"100%\",disabled:requestedApproval,onClick:handleApprove,variant:\"secondary\",children:t('Enable')})})]});}// Wallet connected, user data loaded and approved\nif(isNotVaultAndHasStake||isVaultWithShares){return/*#__PURE__*/_jsxs(ActionContainer,{isAutoVault:isAutoVault,children:[/*#__PURE__*/_jsxs(ActionTitles,{children:[/*#__PURE__*/_jsxs(Text,{fontSize:\"12px\",bold:true,color:\"secondary\",as:\"span\",textTransform:\"uppercase\",children:[stakingToken.symbol,' ']}),/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",bold:true,color:\"textSubtle\",as:\"span\",textTransform:\"uppercase\",children:isAutoVault?t('Staked (compounding)'):t('Staked')})]}),/*#__PURE__*/_jsxs(ActionContent,{children:[/*#__PURE__*/_jsxs(Flex,{flex:\"1\",pt:\"16px\",flexDirection:\"column\",alignSelf:\"flex-start\",children:[/*#__PURE__*/_jsx(Balance,{lineHeight:\"1\",bold:true,fontSize:\"20px\",decimals:5,value:isAutoVault?cakeAsNumberBalance:stakedTokenBalance}),/*#__PURE__*/_jsx(Balance,{fontSize:\"12px\",display:\"inline\",color:\"textSubtle\",decimals:2,value:isAutoVault?stakedAutoDollarValue:stakedTokenDollarBalance,unit:\" USD\",prefix:\"~\"})]}),/*#__PURE__*/_jsxs(IconButtonWrapper,{children:[/*#__PURE__*/_jsx(IconButton,{variant:\"secondary\",onClick:onUnstake,mr:\"6px\",children:/*#__PURE__*/_jsx(MinusIcon,{color:\"primary\",width:\"14px\"})}),reachStakingLimit?/*#__PURE__*/_jsx(\"span\",{ref:targetRef,children:/*#__PURE__*/_jsx(IconButton,{variant:\"secondary\",disabled:true,children:/*#__PURE__*/_jsx(AddIcon,{color:\"textDisabled\",width:\"24px\",height:\"24px\"})})}):/*#__PURE__*/_jsx(IconButton,{variant:\"secondary\",onClick:stakingTokenBalance.gt(0)?onStake:onPresentTokenRequired,disabled:isFinished,children:/*#__PURE__*/_jsx(AddIcon,{color:\"primary\",width:\"14px\"})})]}),tooltipVisible&&tooltip]})]});}return/*#__PURE__*/_jsxs(ActionContainer,{children:[/*#__PURE__*/_jsxs(ActionTitles,{children:[/*#__PURE__*/_jsxs(Text,{fontSize:\"12px\",bold:true,color:\"secondary\",as:\"span\",textTransform:\"uppercase\",children:[t('Stake'),' ']}),/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",bold:true,color:\"textSubtle\",as:\"span\",textTransform:\"uppercase\",children:stakingToken.symbol})]}),/*#__PURE__*/_jsx(ActionContent,{children:/*#__PURE__*/_jsx(Button,{width:\"100%\",onClick:stakingTokenBalance.gt(0)?onStake:onPresentTokenRequired,variant:\"secondary\",disabled:isFinished,children:t('Stake')})})]});};export default Staked;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolsTable/ActionPanel/Stake.tsx"],"names":["React","styled","BigNumber","Button","useModal","IconButton","AddIcon","MinusIcon","Skeleton","useTooltip","Flex","Text","ConnectWalletButton","useWeb3React","useCakeVault","Balance","useTranslation","getBalanceNumber","PoolCategory","BIG_ZERO","useERC20","convertSharesToCake","ActionContainer","ActionTitles","ActionContent","NotEnoughTokensModal","StakeModal","VaultStakeModal","useCheckVaultApprovalStatus","useApprovePool","useVaultApprove","IconButtonWrapper","div","Staked","pool","userDataLoaded","sousId","stakingToken","earningToken","stakingLimit","isFinished","poolCategory","userData","stakingTokenPrice","isAutoVault","t","account","stakingTokenContract","address","symbol","handlePoolApprove","handleApprove","requestedPoolApproval","requestedApproval","isVaultApproved","setLastUpdated","handleVaultApprove","requestedVaultApproval","isBnbPool","BINANCE","allowance","stakedBalance","isNotVaultAndHasStake","gt","stakingTokenBalance","stakedTokenBalance","decimals","stakedTokenDollarBalance","multipliedBy","userShares","pricePerFullShare","cakeAsBigNumber","cakeAsNumberBalance","hasSharesStaked","isVaultWithShares","stakedAutoDollarValue","needsApproval","onPresentTokenRequired","onPresentStake","onPresentVaultStake","onPresentUnstake","onPresentVaultUnstake","onStake","onUnstake","placement","targetRef","tooltip","tooltipVisible","reachStakingLimit","gte"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, useTooltip, Flex, Text } from '@pancakeswap/uikit'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { DeserializedPool } from 'state/types'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useERC20 } from 'hooks/useContract'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\nimport NotEnoughTokensModal from '../../PoolCard/Modals/NotEnoughTokensModal'\nimport StakeModal from '../../PoolCard/Modals/StakeModal'\nimport VaultStakeModal from '../../CakeVaultCard/VaultStakeModal'\nimport { useCheckVaultApprovalStatus, useApprovePool, useVaultApprove } from '../../../hooks/useApprove'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps {\n  pool: DeserializedPool\n  userDataLoaded: boolean\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({ pool, userDataLoaded }) => {\n  const {\n    sousId,\n    stakingToken,\n    earningToken,\n    stakingLimit,\n    isFinished,\n    poolCategory,\n    userData,\n    stakingTokenPrice,\n    isAutoVault,\n  } = pool\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const stakingTokenContract = useERC20(stakingToken.address || '')\n  const { handleApprove: handlePoolApprove, requestedApproval: requestedPoolApproval } = useApprovePool(\n    stakingTokenContract,\n    sousId,\n    earningToken.symbol,\n  )\n\n  const { isVaultApproved, setLastUpdated } = useCheckVaultApprovalStatus()\n  const { handleApprove: handleVaultApprove, requestedApproval: requestedVaultApproval } =\n    useVaultApprove(setLastUpdated)\n\n  const handleApprove = isAutoVault ? handleVaultApprove : handlePoolApprove\n  const requestedApproval = isAutoVault ? requestedVaultApproval : requestedPoolApproval\n\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n  const allowance = userData?.allowance ? new BigNumber(userData.allowance) : BIG_ZERO\n  const stakedBalance = userData?.stakedBalance ? new BigNumber(userData.stakedBalance) : BIG_ZERO\n  const isNotVaultAndHasStake = !isAutoVault && stakedBalance.gt(0)\n\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const stakedTokenBalance = getBalanceNumber(stakedBalance, stakingToken.decimals)\n  const stakedTokenDollarBalance = getBalanceNumber(\n    stakedBalance.multipliedBy(stakingTokenPrice),\n    stakingToken.decimals,\n  )\n\n  const {\n    userData: { userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n\n  const { cakeAsBigNumber, cakeAsNumberBalance } = convertSharesToCake(userShares, pricePerFullShare)\n  const hasSharesStaked = userShares && userShares.gt(0)\n  const isVaultWithShares = isAutoVault && hasSharesStaked\n  const stakedAutoDollarValue = getBalanceNumber(cakeAsBigNumber.multipliedBy(stakingTokenPrice), stakingToken.decimals)\n\n  const needsApproval = isAutoVault ? !isVaultApproved : !allowance.gt(0) && !isBnbPool\n\n  const [onPresentTokenRequired] = useModal(<NotEnoughTokensModal tokenSymbol={stakingToken.symbol} />)\n\n  const [onPresentStake] = useModal(\n    <StakeModal\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenBalance={stakingTokenBalance}\n      stakingTokenPrice={stakingTokenPrice}\n    />,\n  )\n\n  const [onPresentVaultStake] = useModal(<VaultStakeModal stakingMax={stakingTokenBalance} pool={pool} />)\n\n  const [onPresentUnstake] = useModal(\n    <StakeModal\n      stakingTokenBalance={stakingTokenBalance}\n      isBnbPool={isBnbPool}\n      pool={pool}\n      stakingTokenPrice={stakingTokenPrice}\n      isRemovingStake\n    />,\n  )\n\n  const [onPresentVaultUnstake] = useModal(<VaultStakeModal stakingMax={cakeAsBigNumber} pool={pool} isRemovingStake />)\n\n  const onStake = () => {\n    if (isAutoVault) {\n      onPresentVaultStake()\n    } else {\n      onPresentStake()\n    }\n  }\n\n  const onUnstake = () => {\n    if (isAutoVault) {\n      onPresentVaultUnstake()\n    } else {\n      onPresentUnstake()\n    }\n  }\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    t(\"You've already staked the maximum amount you can stake in this pool!\"),\n    { placement: 'bottom' },\n  )\n\n  const reachStakingLimit = stakingLimit.gt(0) && userData.stakedBalance.gte(stakingLimit)\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataLoaded) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Start staking')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} height=\"32px\" marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (needsApproval) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {t('Enable pool')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n            {t('Enable')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  // Wallet connected, user data loaded and approved\n  if (isNotVaultAndHasStake || isVaultWithShares) {\n    return (\n      <ActionContainer isAutoVault={isAutoVault}>\n        <ActionTitles>\n          <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n            {stakingToken.symbol}{' '}\n          </Text>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n            {isAutoVault ? t('Staked (compounding)') : t('Staked')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Flex flex=\"1\" pt=\"16px\" flexDirection=\"column\" alignSelf=\"flex-start\">\n            <Balance\n              lineHeight=\"1\"\n              bold\n              fontSize=\"20px\"\n              decimals={5}\n              value={isAutoVault ? cakeAsNumberBalance : stakedTokenBalance}\n            />\n            <Balance\n              fontSize=\"12px\"\n              display=\"inline\"\n              color=\"textSubtle\"\n              decimals={2}\n              value={isAutoVault ? stakedAutoDollarValue : stakedTokenDollarBalance}\n              unit=\" USD\"\n              prefix=\"~\"\n            />\n          </Flex>\n          <IconButtonWrapper>\n            <IconButton variant=\"secondary\" onClick={onUnstake} mr=\"6px\">\n              <MinusIcon color=\"primary\" width=\"14px\" />\n            </IconButton>\n            {reachStakingLimit ? (\n              <span ref={targetRef}>\n                <IconButton variant=\"secondary\" disabled>\n                  <AddIcon color=\"textDisabled\" width=\"24px\" height=\"24px\" />\n                </IconButton>\n              </span>\n            ) : (\n              <IconButton\n                variant=\"secondary\"\n                onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n                disabled={isFinished}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            )}\n          </IconButtonWrapper>\n          {tooltipVisible && tooltip}\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text fontSize=\"12px\" bold color=\"secondary\" as=\"span\" textTransform=\"uppercase\">\n          {t('Stake')}{' '}\n        </Text>\n        <Text fontSize=\"12px\" bold color=\"textSubtle\" as=\"span\" textTransform=\"uppercase\">\n          {stakingToken.symbol}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button\n          width=\"100%\"\n          onClick={stakingTokenBalance.gt(0) ? onStake : onPresentTokenRequired}\n          variant=\"secondary\"\n          disabled={isFinished}\n        >\n          {t('Stake')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n"]},"metadata":{},"sourceType":"module"}