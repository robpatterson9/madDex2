{"ast":null,"code":"import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{LotteryStatus}from'config/constants/types';import{useTranslation}from'contexts/Localization';import{useEffect,useState}from'react';var useGetNextLotteryEvent=function useGetNextLotteryEvent(endTime,status){var _useTranslation=useTranslation(),t=_useTranslation.t;var vrfRequestTime=180;// 3 mins\nvar secondsBetweenRounds=300;// 5 mins\nvar transactionResolvingBuffer=30;// Delay countdown by 30s to ensure contract transactions have been calculated and broadcast\nvar _useState=useState({nextEventTime:null,preCountdownText:null,postCountdownText:null}),_useState2=_slicedToArray(_useState,2),nextEvent=_useState2[0],setNextEvent=_useState2[1];useEffect(function(){// Current lottery is active\nif(status===LotteryStatus.OPEN){setNextEvent({nextEventTime:endTime+transactionResolvingBuffer,preCountdownText:null,postCountdownText:t('until the draw')});}// Current lottery has finished but not yet claimable\nif(status===LotteryStatus.CLOSE){setNextEvent({nextEventTime:endTime+transactionResolvingBuffer+vrfRequestTime,preCountdownText:t('Winners announced in'),postCountdownText:null});}// Current lottery claimable. Next lottery has not yet started\nif(status===LotteryStatus.CLAIMABLE){setNextEvent({nextEventTime:endTime+transactionResolvingBuffer+secondsBetweenRounds,preCountdownText:t('Tickets on sale in'),postCountdownText:null});}},[status,endTime,t]);return nextEvent;};export default useGetNextLotteryEvent;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Lottery/hooks/useGetNextLotteryEvent.ts"],"names":["LotteryStatus","useTranslation","useEffect","useState","useGetNextLotteryEvent","endTime","status","t","vrfRequestTime","secondsBetweenRounds","transactionResolvingBuffer","nextEventTime","preCountdownText","postCountdownText","nextEvent","setNextEvent","OPEN","CLOSE","CLAIMABLE"],"mappings":"wJAAA,OAASA,aAAT,KAA8B,wBAA9B,CACA,OAASC,cAAT,KAA+B,uBAA/B,CACA,OAASC,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAQA,GAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACC,OAAD,CAAkBC,MAAlB,CAA0D,CACvF,oBAAcL,cAAc,EAA5B,CAAQM,CAAR,iBAAQA,CAAR,CACA,GAAMC,CAAAA,cAAc,CAAG,GAAvB,CAA2B;AAC3B,GAAMC,CAAAA,oBAAoB,CAAG,GAA7B,CAAiC;AACjC,GAAMC,CAAAA,0BAA0B,CAAG,EAAnC,CAAsC;AACtC,cAAkCP,QAAQ,CAAC,CAAEQ,aAAa,CAAE,IAAjB,CAAuBC,gBAAgB,CAAE,IAAzC,CAA+CC,iBAAiB,CAAE,IAAlE,CAAD,CAA1C,wCAAOC,SAAP,eAAkBC,YAAlB,eAEAb,SAAS,CAAC,UAAM,CACd;AACA,GAAII,MAAM,GAAKN,aAAa,CAACgB,IAA7B,CAAmC,CACjCD,YAAY,CAAC,CACXJ,aAAa,CAAEN,OAAO,CAAGK,0BADd,CAEXE,gBAAgB,CAAE,IAFP,CAGXC,iBAAiB,CAAEN,CAAC,CAAC,gBAAD,CAHT,CAAD,CAAZ,CAKD,CACD;AACA,GAAID,MAAM,GAAKN,aAAa,CAACiB,KAA7B,CAAoC,CAClCF,YAAY,CAAC,CACXJ,aAAa,CAAEN,OAAO,CAAGK,0BAAV,CAAuCF,cAD3C,CAEXI,gBAAgB,CAAEL,CAAC,CAAC,sBAAD,CAFR,CAGXM,iBAAiB,CAAE,IAHR,CAAD,CAAZ,CAKD,CACD;AACA,GAAIP,MAAM,GAAKN,aAAa,CAACkB,SAA7B,CAAwC,CACtCH,YAAY,CAAC,CACXJ,aAAa,CAAEN,OAAO,CAAGK,0BAAV,CAAuCD,oBAD3C,CAEXG,gBAAgB,CAAEL,CAAC,CAAC,oBAAD,CAFR,CAGXM,iBAAiB,CAAE,IAHR,CAAD,CAAZ,CAKD,CACF,CAzBQ,CAyBN,CAACP,MAAD,CAASD,OAAT,CAAkBE,CAAlB,CAzBM,CAAT,CA2BA,MAAOO,CAAAA,SAAP,CACD,CAnCD,CAqCA,cAAeV,CAAAA,sBAAf","sourcesContent":["import { LotteryStatus } from 'config/constants/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { useEffect, useState } from 'react'\n\ninterface LotteryEvent {\n  nextEventTime: number\n  postCountdownText?: string\n  preCountdownText?: string\n}\n\nconst useGetNextLotteryEvent = (endTime: number, status: LotteryStatus): LotteryEvent => {\n  const { t } = useTranslation()\n  const vrfRequestTime = 180 // 3 mins\n  const secondsBetweenRounds = 300 // 5 mins\n  const transactionResolvingBuffer = 30 // Delay countdown by 30s to ensure contract transactions have been calculated and broadcast\n  const [nextEvent, setNextEvent] = useState({ nextEventTime: null, preCountdownText: null, postCountdownText: null })\n\n  useEffect(() => {\n    // Current lottery is active\n    if (status === LotteryStatus.OPEN) {\n      setNextEvent({\n        nextEventTime: endTime + transactionResolvingBuffer,\n        preCountdownText: null,\n        postCountdownText: t('until the draw'),\n      })\n    }\n    // Current lottery has finished but not yet claimable\n    if (status === LotteryStatus.CLOSE) {\n      setNextEvent({\n        nextEventTime: endTime + transactionResolvingBuffer + vrfRequestTime,\n        preCountdownText: t('Winners announced in'),\n        postCountdownText: null,\n      })\n    }\n    // Current lottery claimable. Next lottery has not yet started\n    if (status === LotteryStatus.CLAIMABLE) {\n      setNextEvent({\n        nextEventTime: endTime + transactionResolvingBuffer + secondsBetweenRounds,\n        preCountdownText: t('Tickets on sale in'),\n        postCountdownText: null,\n      })\n    }\n  }, [status, endTime, t])\n\n  return nextEvent\n}\n\nexport default useGetNextLotteryEvent\n"]},"metadata":{},"sourceType":"module"}