{"ast":null,"code":"import React from'react';import{Flex,Text,TooltipText,useTooltip}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{useWeb3React}from'@web3-react/core';import useWithdrawalFeeTimer from'views/Pools/hooks/useWithdrawalFeeTimer';import{useCakeVault}from'state/pools/hooks';import WithdrawalFeeTimer from'./WithdrawalFeeTimer';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var UnstakingFeeCountdownRow=function UnstakingFeeCountdownRow(_ref){var isTableVariant=_ref.isTableVariant;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var _useCakeVault=useCakeVault(),_useCakeVault$userDat=_useCakeVault.userData,lastDepositedTime=_useCakeVault$userDat.lastDepositedTime,userShares=_useCakeVault$userDat.userShares,_useCakeVault$fees=_useCakeVault.fees,withdrawalFee=_useCakeVault$fees.withdrawalFee,withdrawalFeePeriod=_useCakeVault$fees.withdrawalFeePeriod;var feeAsDecimal=withdrawalFee/100||'-';var _useTooltip=useTooltip(/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Text,{bold:true,mb:\"4px\",children:t('Unstaking fee: %fee%%',{fee:feeAsDecimal})}),/*#__PURE__*/_jsx(Text,{children:t('Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.')})]}),{placement:'bottom-start'}),targetRef=_useTooltip.targetRef,tooltip=_useTooltip.tooltip,tooltipVisible=_useTooltip.tooltipVisible;var _useWithdrawalFeeTime=useWithdrawalFeeTimer(parseInt(lastDepositedTime,10),userShares,withdrawalFeePeriod),secondsRemaining=_useWithdrawalFeeTime.secondsRemaining,hasUnstakingFee=_useWithdrawalFeeTime.hasUnstakingFee;// The user has made a deposit, but has no fee\nvar noFeeToPay=lastDepositedTime&&!hasUnstakingFee&&userShares.gt(0);// Show the timer if a user is connected, has deposited, and has an unstaking fee\nvar shouldShowTimer=account&&lastDepositedTime&&hasUnstakingFee;var getRowText=function getRowText(){if(noFeeToPay){return t('Unstaking Fee').toLowerCase();}if(shouldShowTimer){return t('unstaking fee until');}return t('unstaking fee if withdrawn within 72h');};return/*#__PURE__*/_jsxs(Flex,{alignItems:isTableVariant?'flex-start':'center',justifyContent:\"space-between\",flexDirection:isTableVariant?'column':'row',children:[tooltipVisible&&tooltip,/*#__PURE__*/_jsxs(TooltipText,{ref:targetRef,small:true,children:[noFeeToPay?'0':feeAsDecimal,\"% \",getRowText()]}),shouldShowTimer&&/*#__PURE__*/_jsx(WithdrawalFeeTimer,{secondsRemaining:secondsRemaining})]});};export default UnstakingFeeCountdownRow;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/components/CakeVaultCard/UnstakingFeeCountdownRow.tsx"],"names":["React","Flex","Text","TooltipText","useTooltip","useTranslation","useWeb3React","useWithdrawalFeeTimer","useCakeVault","WithdrawalFeeTimer","UnstakingFeeCountdownRow","isTableVariant","t","account","userData","lastDepositedTime","userShares","fees","withdrawalFee","withdrawalFeePeriod","feeAsDecimal","fee","placement","targetRef","tooltip","tooltipVisible","parseInt","secondsRemaining","hasUnstakingFee","noFeeToPay","gt","shouldShowTimer","getRowText","toLowerCase"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,CAAeC,IAAf,CAAqBC,WAArB,CAAkCC,UAAlC,KAAoD,oBAApD,CACA,OAASC,cAAT,KAA+B,uBAA/B,CACA,OAASC,YAAT,KAA6B,kBAA7B,CACA,MAAOC,CAAAA,qBAAP,KAAkC,yCAAlC,CACA,OAASC,YAAT,KAA6B,mBAA7B,CACA,MAAOC,CAAAA,kBAAP,KAA+B,sBAA/B,C,6IAMA,GAAMC,CAAAA,wBAAiE,CAAG,QAApEA,CAAAA,wBAAoE,MAAwB,IAArBC,CAAAA,cAAqB,MAArBA,cAAqB,CAChG,oBAAcN,cAAc,EAA5B,CAAQO,CAAR,iBAAQA,CAAR,CACA,kBAAoBN,YAAY,EAAhC,CAAQO,OAAR,eAAQA,OAAR,CACA,kBAGIL,YAAY,EAHhB,qCACEM,QADF,CACcC,iBADd,uBACcA,iBADd,CACiCC,UADjC,uBACiCA,UADjC,kCAEEC,IAFF,CAEUC,aAFV,oBAEUA,aAFV,CAEyBC,mBAFzB,oBAEyBA,mBAFzB,CAIA,GAAMC,CAAAA,YAAY,CAAGF,aAAa,CAAG,GAAhB,EAAuB,GAA5C,CACA,gBAA+Cd,UAAU,cACvD,wCACE,KAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAC,KAAd,UACGQ,CAAC,CAAC,uBAAD,CAA0B,CAAES,GAAG,CAAED,YAAP,CAA1B,CADJ,EADF,cAIE,KAAC,IAAD,WACGR,CAAC,CACA,+IADA,CADJ,EAJF,GADuD,CAWvD,CAAEU,SAAS,CAAE,cAAb,CAXuD,CAAzD,CAAQC,SAAR,aAAQA,SAAR,CAAmBC,OAAnB,aAAmBA,OAAnB,CAA4BC,cAA5B,aAA4BA,cAA5B,CAcA,0BAA8ClB,qBAAqB,CACjEmB,QAAQ,CAACX,iBAAD,CAAoB,EAApB,CADyD,CAEjEC,UAFiE,CAGjEG,mBAHiE,CAAnE,CAAQQ,gBAAR,uBAAQA,gBAAR,CAA0BC,eAA1B,uBAA0BA,eAA1B,CAMA;AACA,GAAMC,CAAAA,UAAU,CAAGd,iBAAiB,EAAI,CAACa,eAAtB,EAAyCZ,UAAU,CAACc,EAAX,CAAc,CAAd,CAA5D,CAEA;AACA,GAAMC,CAAAA,eAAe,CAAGlB,OAAO,EAAIE,iBAAX,EAAgCa,eAAxD,CAEA,GAAMI,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvB,GAAIH,UAAJ,CAAgB,CACd,MAAOjB,CAAAA,CAAC,CAAC,eAAD,CAAD,CAAmBqB,WAAnB,EAAP,CACD,CACD,GAAIF,eAAJ,CAAqB,CACnB,MAAOnB,CAAAA,CAAC,CAAC,qBAAD,CAAR,CACD,CACD,MAAOA,CAAAA,CAAC,CAAC,uCAAD,CAAR,CACD,CARD,CAUA,mBACE,MAAC,IAAD,EACE,UAAU,CAAED,cAAc,CAAG,YAAH,CAAkB,QAD9C,CAEE,cAAc,CAAC,eAFjB,CAGE,aAAa,CAAEA,cAAc,CAAG,QAAH,CAAc,KAH7C,WAKGc,cAAc,EAAID,OALrB,cAME,MAAC,WAAD,EAAa,GAAG,CAAED,SAAlB,CAA6B,KAAK,KAAlC,WACGM,UAAU,CAAG,GAAH,CAAST,YADtB,MACsCY,UAAU,EADhD,GANF,CASGD,eAAe,eAAI,KAAC,kBAAD,EAAoB,gBAAgB,CAAEJ,gBAAtC,EATtB,GADF,CAaD,CAzDD,CA2DA,cAAejB,CAAAA,wBAAf","sourcesContent":["import React from 'react'\nimport { Flex, Text, TooltipText, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer'\nimport { useCakeVault } from 'state/pools/hooks'\nimport WithdrawalFeeTimer from './WithdrawalFeeTimer'\n\ninterface UnstakingFeeCountdownRowProps {\n  isTableVariant?: boolean\n}\n\nconst UnstakingFeeCountdownRow: React.FC<UnstakingFeeCountdownRowProps> = ({ isTableVariant }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    userData: { lastDepositedTime, userShares },\n    fees: { withdrawalFee, withdrawalFeePeriod },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100 || '-'\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'bottom-start' },\n  )\n\n  const { secondsRemaining, hasUnstakingFee } = useWithdrawalFeeTimer(\n    parseInt(lastDepositedTime, 10),\n    userShares,\n    withdrawalFeePeriod,\n  )\n\n  // The user has made a deposit, but has no fee\n  const noFeeToPay = lastDepositedTime && !hasUnstakingFee && userShares.gt(0)\n\n  // Show the timer if a user is connected, has deposited, and has an unstaking fee\n  const shouldShowTimer = account && lastDepositedTime && hasUnstakingFee\n\n  const getRowText = () => {\n    if (noFeeToPay) {\n      return t('Unstaking Fee').toLowerCase()\n    }\n    if (shouldShowTimer) {\n      return t('unstaking fee until')\n    }\n    return t('unstaking fee if withdrawn within 72h')\n  }\n\n  return (\n    <Flex\n      alignItems={isTableVariant ? 'flex-start' : 'center'}\n      justifyContent=\"space-between\"\n      flexDirection={isTableVariant ? 'column' : 'row'}\n    >\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef} small>\n        {noFeeToPay ? '0' : feeAsDecimal}% {getRowText()}\n      </TooltipText>\n      {shouldShowTimer && <WithdrawalFeeTimer secondsRemaining={secondsRemaining} />}\n    </Flex>\n  )\n}\n\nexport default UnstakingFeeCountdownRow\n"]},"metadata":{},"sourceType":"module"}