{"ast":null,"code":"import _defineProperty from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{useEffect,useMemo}from'react';import{useSelector}from'react-redux';import{ethers}from'ethers';import{minBy,orderBy}from'lodash';import{isAddress}from'utils';import{useAppDispatch}from'state';import{parseBigNumberObj}from'./helpers';import{fetchAddressResult}from'.';export var useGetRounds=function useGetRounds(){var rounds=useSelector(function(state){return state.predictions.rounds;});return Object.keys(rounds).reduce(function(accum,epoch){return _objectSpread(_objectSpread({},accum),{},_defineProperty({},epoch,parseBigNumberObj(rounds[epoch])));},{});};export var useGetRound=function useGetRound(epoch){var round=useSelector(function(state){return state.predictions.rounds[epoch];});return parseBigNumberObj(round);};export var useGetSortedRounds=function useGetSortedRounds(){var roundData=useGetRounds();return orderBy(Object.values(roundData),['epoch'],['asc']);};export var useGetBetByEpoch=function useGetBetByEpoch(account,epoch){var bets=useSelector(function(state){return state.predictions.ledgers;});if(!bets[account]){return null;}if(!bets[account][epoch]){return null;}return parseBigNumberObj(bets[account][epoch]);};export var useGetIsClaimable=function useGetIsClaimable(epoch){var claimableStatuses=useSelector(function(state){return state.predictions.claimableStatuses;});return claimableStatuses[epoch]||false;};/**\n * Used to get the range of rounds to poll for\n */export var useGetEarliestEpoch=function useGetEarliestEpoch(){return useSelector(function(state){var earliestRound=minBy(Object.values(state.predictions.rounds),'epoch');return earliestRound===null||earliestRound===void 0?void 0:earliestRound.epoch;});};export var useIsHistoryPaneOpen=function useIsHistoryPaneOpen(){return useSelector(function(state){return state.predictions.isHistoryPaneOpen;});};export var useIsChartPaneOpen=function useIsChartPaneOpen(){return useSelector(function(state){return state.predictions.isChartPaneOpen;});};export var useGetCurrentEpoch=function useGetCurrentEpoch(){return useSelector(function(state){return state.predictions.currentEpoch;});};export var useGetIntervalSeconds=function useGetIntervalSeconds(){return useSelector(function(state){return state.predictions.intervalSeconds;});};export var useGetCurrentRound=function useGetCurrentRound(){var currentEpoch=useGetCurrentEpoch();var rounds=useGetRounds();return rounds[currentEpoch];};export var useGetPredictionsStatus=function useGetPredictionsStatus(){return useSelector(function(state){return state.predictions.status;});};export var useGetHistoryFilter=function useGetHistoryFilter(){return useSelector(function(state){return state.predictions.historyFilter;});};export var useGetHasHistoryLoaded=function useGetHasHistoryLoaded(){return useSelector(function(state){return state.predictions.hasHistoryLoaded;});};export var useGetCurrentHistoryPage=function useGetCurrentHistoryPage(){return useSelector(function(state){return state.predictions.currentHistoryPage;});};export var useGetMinBetAmount=function useGetMinBetAmount(){var minBetAmount=useSelector(function(state){return state.predictions.minBetAmount;});return useMemo(function(){return ethers.BigNumber.from(minBetAmount);},[minBetAmount]);};export var useGetBufferSeconds=function useGetBufferSeconds(){return useSelector(function(state){return state.predictions.bufferSeconds;});};export var useGetIsFetchingHistory=function useGetIsFetchingHistory(){return useSelector(function(state){return state.predictions.isFetchingHistory;});};export var useGetHistory=function useGetHistory(){return useSelector(function(state){return state.predictions.history;});};export var useGetLastOraclePrice=function useGetLastOraclePrice(){var lastOraclePrice=useSelector(function(state){return state.predictions.lastOraclePrice;});return useMemo(function(){return ethers.BigNumber.from(lastOraclePrice);},[lastOraclePrice]);};/**\n * The current round's lock timestamp will not be set immediately so we return an estimate until then\n */export var useGetCurrentRoundLockTimestamp=function useGetCurrentRoundLockTimestamp(){var currentRound=useGetCurrentRound();var intervalSeconds=useGetIntervalSeconds();if(!currentRound.lockTimestamp){return currentRound.startTimestamp+intervalSeconds;}return currentRound.lockTimestamp;};// Leaderboard\nexport var useGetLeaderboardLoadingState=function useGetLeaderboardLoadingState(){return useSelector(function(state){return state.predictions.leaderboard.loadingState;});};export var useGetLeaderboardResults=function useGetLeaderboardResults(){return useSelector(function(state){return state.predictions.leaderboard.results;});};export var useGetLeaderboardFilters=function useGetLeaderboardFilters(){return useSelector(function(state){return state.predictions.leaderboard.filters;});};export var useGetLeaderboardSkip=function useGetLeaderboardSkip(){return useSelector(function(state){return state.predictions.leaderboard.skip;});};export var useGetLeaderboardHasMoreResults=function useGetLeaderboardHasMoreResults(){return useSelector(function(state){return state.predictions.leaderboard.hasMoreResults;});};export var useGetAddressResult=function useGetAddressResult(account){return useSelector(function(state){return state.predictions.leaderboard.addressResults[account];});};export var useGetOrFetchLeaderboardAddressResult=function useGetOrFetchLeaderboardAddressResult(account){var addressResult=useGetAddressResult(account);var dispatch=useAppDispatch();useEffect(function(){var address=isAddress(account);// If address result is null it means we already tried fetching the results and none came back\nif(!addressResult&&addressResult!==null&&address){dispatch(fetchAddressResult(account));}},[dispatch,account,addressResult]);return addressResult;};export var useGetSelectedAddress=function useGetSelectedAddress(){return useSelector(function(state){return state.predictions.leaderboard.selectedAddress;});};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/predictions/hooks.ts"],"names":["useEffect","useMemo","useSelector","ethers","minBy","orderBy","isAddress","useAppDispatch","parseBigNumberObj","fetchAddressResult","useGetRounds","rounds","state","predictions","Object","keys","reduce","accum","epoch","useGetRound","round","useGetSortedRounds","roundData","values","useGetBetByEpoch","account","bets","ledgers","useGetIsClaimable","claimableStatuses","useGetEarliestEpoch","earliestRound","useIsHistoryPaneOpen","isHistoryPaneOpen","useIsChartPaneOpen","isChartPaneOpen","useGetCurrentEpoch","currentEpoch","useGetIntervalSeconds","intervalSeconds","useGetCurrentRound","useGetPredictionsStatus","status","useGetHistoryFilter","historyFilter","useGetHasHistoryLoaded","hasHistoryLoaded","useGetCurrentHistoryPage","currentHistoryPage","useGetMinBetAmount","minBetAmount","BigNumber","from","useGetBufferSeconds","bufferSeconds","useGetIsFetchingHistory","isFetchingHistory","useGetHistory","history","useGetLastOraclePrice","lastOraclePrice","useGetCurrentRoundLockTimestamp","currentRound","lockTimestamp","startTimestamp","useGetLeaderboardLoadingState","leaderboard","loadingState","useGetLeaderboardResults","results","useGetLeaderboardFilters","filters","useGetLeaderboardSkip","skip","useGetLeaderboardHasMoreResults","hasMoreResults","useGetAddressResult","addressResults","useGetOrFetchLeaderboardAddressResult","addressResult","dispatch","address","useGetSelectedAddress","selectedAddress"],"mappings":"iTAAA,OAASA,SAAT,CAAoBC,OAApB,KAAmC,OAAnC,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,MAAT,KAAuB,QAAvB,CACA,OAASC,KAAT,CAAgBC,OAAhB,KAA+B,QAA/B,CACA,OAASC,SAAT,KAA0B,OAA1B,CACA,OAASC,cAAT,KAA+B,OAA/B,CAEA,OAASC,iBAAT,KAAkC,WAAlC,CACA,OAASC,kBAAT,KAAmC,GAAnC,CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CAChC,GAAMC,CAAAA,MAAM,CAAGT,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkBF,MAApC,EAAD,CAA1B,CACA,MAAOG,CAAAA,MAAM,CAACC,IAAP,CAAYJ,MAAZ,EAAoBK,MAApB,CAA2B,SAACC,KAAD,CAAQC,KAAR,CAAkB,CAClD,sCACKD,KADL,wBAEGC,KAFH,CAEWV,iBAAiB,CAA4BG,MAAM,CAACO,KAAD,CAAlC,CAF5B,GAID,CALM,CAKJ,EALI,CAAP,CAMD,CARM,CAUP,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACD,KAAD,CAAmB,CAC5C,GAAME,CAAAA,KAAK,CAAGlB,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkBF,MAAlB,CAAyBO,KAAzB,CAAlB,EAAD,CAAzB,CACA,MAAOV,CAAAA,iBAAiB,CAA4BY,KAA5B,CAAxB,CACD,CAHM,CAKP,MAAO,IAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CACtC,GAAMC,CAAAA,SAAS,CAAGZ,YAAY,EAA9B,CACA,MAAOL,CAAAA,OAAO,CAACS,MAAM,CAACS,MAAP,CAAcD,SAAd,CAAD,CAA2B,CAAC,OAAD,CAA3B,CAAsC,CAAC,KAAD,CAAtC,CAAd,CACD,CAHM,CAKP,MAAO,IAAME,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,OAAD,CAAkBP,KAAlB,CAAoC,CAClE,GAAMQ,CAAAA,IAAI,CAAGxB,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkBc,OAApC,EAAD,CAAxB,CAEA,GAAI,CAACD,IAAI,CAACD,OAAD,CAAT,CAAoB,CAClB,MAAO,KAAP,CACD,CAED,GAAI,CAACC,IAAI,CAACD,OAAD,CAAJ,CAAcP,KAAd,CAAL,CAA2B,CACzB,MAAO,KAAP,CACD,CAED,MAAOV,CAAAA,iBAAiB,CAA8BkB,IAAI,CAACD,OAAD,CAAJ,CAAcP,KAAd,CAA9B,CAAxB,CACD,CAZM,CAcP,MAAO,IAAMU,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACV,KAAD,CAAW,CAC1C,GAAMW,CAAAA,iBAAiB,CAAG3B,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkBgB,iBAApC,EAAD,CAArC,CACA,MAAOA,CAAAA,iBAAiB,CAACX,KAAD,CAAjB,EAA4B,KAAnC,CACD,CAHM,CAKP;AACA;AACA,GACA,MAAO,IAAMY,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CACvC,MAAO5B,CAAAA,WAAW,CAAC,SAACU,KAAD,CAAkB,CACnC,GAAMmB,CAAAA,aAAa,CAAG3B,KAAK,CAACU,MAAM,CAACS,MAAP,CAAcX,KAAK,CAACC,WAAN,CAAkBF,MAAhC,CAAD,CAA0C,OAA1C,CAA3B,CACA,MAAOoB,CAAAA,aAAP,SAAOA,aAAP,iBAAOA,aAAa,CAAEb,KAAtB,CACD,CAHiB,CAAlB,CAID,CALM,CAOP,MAAO,IAAMc,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,EAAM,CACxC,MAAO9B,CAAAA,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkBoB,iBAApC,EAAD,CAAlB,CACD,CAFM,CAIP,MAAO,IAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CACtC,MAAOhC,CAAAA,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkBsB,eAApC,EAAD,CAAlB,CACD,CAFM,CAIP,MAAO,IAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CACtC,MAAOlC,CAAAA,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkBwB,YAApC,EAAD,CAAlB,CACD,CAFM,CAIP,MAAO,IAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,EAAM,CACzC,MAAOpC,CAAAA,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkB0B,eAApC,EAAD,CAAlB,CACD,CAFM,CAIP,MAAO,IAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CACtC,GAAMH,CAAAA,YAAY,CAAGD,kBAAkB,EAAvC,CACA,GAAMzB,CAAAA,MAAM,CAAGD,YAAY,EAA3B,CACA,MAAOC,CAAAA,MAAM,CAAC0B,YAAD,CAAb,CACD,CAJM,CAMP,MAAO,IAAMI,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,EAAM,CAC3C,MAAOvC,CAAAA,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkB6B,MAApC,EAAD,CAAlB,CACD,CAFM,CAIP,MAAO,IAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CACvC,MAAOzC,CAAAA,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkB+B,aAApC,EAAD,CAAlB,CACD,CAFM,CAIP,MAAO,IAAMC,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,EAAM,CAC1C,MAAO3C,CAAAA,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkBiC,gBAApC,EAAD,CAAlB,CACD,CAFM,CAIP,MAAO,IAAMC,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,EAAM,CAC5C,MAAO7C,CAAAA,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkBmC,kBAApC,EAAD,CAAlB,CACD,CAFM,CAIP,MAAO,IAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CACtC,GAAMC,CAAAA,YAAY,CAAGhD,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkBqC,YAApC,EAAD,CAAhC,CACA,MAAOjD,CAAAA,OAAO,CAAC,iBAAME,CAAAA,MAAM,CAACgD,SAAP,CAAiBC,IAAjB,CAAsBF,YAAtB,CAAN,EAAD,CAA4C,CAACA,YAAD,CAA5C,CAAd,CACD,CAHM,CAKP,MAAO,IAAMG,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAM,CACvC,MAAOnD,CAAAA,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkByC,aAApC,EAAD,CAAlB,CACD,CAFM,CAIP,MAAO,IAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,EAAM,CAC3C,MAAOrD,CAAAA,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkB2C,iBAApC,EAAD,CAAlB,CACD,CAFM,CAIP,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CACjC,MAAOvD,CAAAA,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkB6C,OAApC,EAAD,CAAlB,CACD,CAFM,CAIP,MAAO,IAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,EAAM,CACzC,GAAMC,CAAAA,eAAe,CAAG1D,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkB+C,eAApC,EAAD,CAAnC,CACA,MAAO3D,CAAAA,OAAO,CAAC,UAAM,CACnB,MAAOE,CAAAA,MAAM,CAACgD,SAAP,CAAiBC,IAAjB,CAAsBQ,eAAtB,CAAP,CACD,CAFa,CAEX,CAACA,eAAD,CAFW,CAAd,CAGD,CALM,CAOP;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,+BAA+B,CAAG,QAAlCA,CAAAA,+BAAkC,EAAM,CACnD,GAAMC,CAAAA,YAAY,CAAGtB,kBAAkB,EAAvC,CACA,GAAMD,CAAAA,eAAe,CAAGD,qBAAqB,EAA7C,CAEA,GAAI,CAACwB,YAAY,CAACC,aAAlB,CAAiC,CAC/B,MAAOD,CAAAA,YAAY,CAACE,cAAb,CAA8BzB,eAArC,CACD,CAED,MAAOuB,CAAAA,YAAY,CAACC,aAApB,CACD,CATM,CAWP;AACA,MAAO,IAAME,CAAAA,6BAA6B,CAAG,QAAhCA,CAAAA,6BAAgC,EAAM,CACjD,MAAO/D,CAAAA,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkBqD,WAAlB,CAA8BC,YAAhD,EAAD,CAAlB,CACD,CAFM,CAIP,MAAO,IAAMC,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,EAAM,CAC5C,MAAOlE,CAAAA,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkBqD,WAAlB,CAA8BG,OAAhD,EAAD,CAAlB,CACD,CAFM,CAIP,MAAO,IAAMC,CAAAA,wBAAwB,CAAG,QAA3BA,CAAAA,wBAA2B,EAAM,CAC5C,MAAOpE,CAAAA,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkBqD,WAAlB,CAA8BK,OAAhD,EAAD,CAAlB,CACD,CAFM,CAIP,MAAO,IAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,EAAM,CACzC,MAAOtE,CAAAA,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkBqD,WAAlB,CAA8BO,IAAhD,EAAD,CAAlB,CACD,CAFM,CAIP,MAAO,IAAMC,CAAAA,+BAA+B,CAAG,QAAlCA,CAAAA,+BAAkC,EAAM,CACnD,MAAOxE,CAAAA,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkBqD,WAAlB,CAA8BS,cAAhD,EAAD,CAAlB,CACD,CAFM,CAIP,MAAO,IAAMC,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACnD,OAAD,CAAqB,CACtD,MAAOvB,CAAAA,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkBqD,WAAlB,CAA8BW,cAA9B,CAA6CpD,OAA7C,CAAlB,EAAD,CAAlB,CACD,CAFM,CAIP,MAAO,IAAMqD,CAAAA,qCAAqC,CAAG,QAAxCA,CAAAA,qCAAwC,CAACrD,OAAD,CAAqB,CACxE,GAAMsD,CAAAA,aAAa,CAAGH,mBAAmB,CAACnD,OAAD,CAAzC,CACA,GAAMuD,CAAAA,QAAQ,CAAGzE,cAAc,EAA/B,CAEAP,SAAS,CAAC,UAAM,CACd,GAAMiF,CAAAA,OAAO,CAAG3E,SAAS,CAACmB,OAAD,CAAzB,CAEA;AACA,GAAI,CAACsD,aAAD,EAAkBA,aAAa,GAAK,IAApC,EAA4CE,OAAhD,CAAyD,CACvDD,QAAQ,CAACvE,kBAAkB,CAACgB,OAAD,CAAnB,CAAR,CACD,CACF,CAPQ,CAON,CAACuD,QAAD,CAAWvD,OAAX,CAAoBsD,aAApB,CAPM,CAAT,CASA,MAAOA,CAAAA,aAAP,CACD,CAdM,CAgBP,MAAO,IAAMG,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,EAAM,CACzC,MAAOhF,CAAAA,WAAW,CAAC,SAACU,KAAD,QAAkBA,CAAAA,KAAK,CAACC,WAAN,CAAkBqD,WAAlB,CAA8BiB,eAAhD,EAAD,CAAlB,CACD,CAFM","sourcesContent":["import { useEffect, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { ethers } from 'ethers'\nimport { minBy, orderBy } from 'lodash'\nimport { isAddress } from 'utils'\nimport { useAppDispatch } from 'state'\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from '../types'\nimport { parseBigNumberObj } from './helpers'\nimport { fetchAddressResult } from '.'\n\nexport const useGetRounds = () => {\n  const rounds = useSelector((state: State) => state.predictions.rounds)\n  return Object.keys(rounds).reduce((accum, epoch) => {\n    return {\n      ...accum,\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\n    }\n  }, {}) as { [key: string]: NodeRound }\n}\n\nexport const useGetRound = (epoch: number) => {\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\n}\n\nexport const useGetSortedRounds = () => {\n  const roundData = useGetRounds()\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\n}\n\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\n  const bets = useSelector((state: State) => state.predictions.ledgers)\n\n  if (!bets[account]) {\n    return null\n  }\n\n  if (!bets[account][epoch]) {\n    return null\n  }\n\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\n}\n\nexport const useGetIsClaimable = (epoch) => {\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\n  return claimableStatuses[epoch] || false\n}\n\n/**\n * Used to get the range of rounds to poll for\n */\nexport const useGetEarliestEpoch = () => {\n  return useSelector((state: State) => {\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\n    return earliestRound?.epoch\n  })\n}\n\nexport const useIsHistoryPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\n}\n\nexport const useIsChartPaneOpen = () => {\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\n}\n\nexport const useGetCurrentEpoch = () => {\n  return useSelector((state: State) => state.predictions.currentEpoch)\n}\n\nexport const useGetIntervalSeconds = () => {\n  return useSelector((state: State) => state.predictions.intervalSeconds)\n}\n\nexport const useGetCurrentRound = () => {\n  const currentEpoch = useGetCurrentEpoch()\n  const rounds = useGetRounds()\n  return rounds[currentEpoch]\n}\n\nexport const useGetPredictionsStatus = () => {\n  return useSelector((state: State) => state.predictions.status)\n}\n\nexport const useGetHistoryFilter = () => {\n  return useSelector((state: State) => state.predictions.historyFilter)\n}\n\nexport const useGetHasHistoryLoaded = () => {\n  return useSelector((state: State) => state.predictions.hasHistoryLoaded)\n}\n\nexport const useGetCurrentHistoryPage = () => {\n  return useSelector((state: State) => state.predictions.currentHistoryPage)\n}\n\nexport const useGetMinBetAmount = () => {\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\n}\n\nexport const useGetBufferSeconds = () => {\n  return useSelector((state: State) => state.predictions.bufferSeconds)\n}\n\nexport const useGetIsFetchingHistory = () => {\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\n}\n\nexport const useGetHistory = () => {\n  return useSelector((state: State) => state.predictions.history)\n}\n\nexport const useGetLastOraclePrice = () => {\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\n  return useMemo(() => {\n    return ethers.BigNumber.from(lastOraclePrice)\n  }, [lastOraclePrice])\n}\n\n/**\n * The current round's lock timestamp will not be set immediately so we return an estimate until then\n */\nexport const useGetCurrentRoundLockTimestamp = () => {\n  const currentRound = useGetCurrentRound()\n  const intervalSeconds = useGetIntervalSeconds()\n\n  if (!currentRound.lockTimestamp) {\n    return currentRound.startTimestamp + intervalSeconds\n  }\n\n  return currentRound.lockTimestamp\n}\n\n// Leaderboard\nexport const useGetLeaderboardLoadingState = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.loadingState)\n}\n\nexport const useGetLeaderboardResults = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.results)\n}\n\nexport const useGetLeaderboardFilters = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.filters)\n}\n\nexport const useGetLeaderboardSkip = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.skip)\n}\n\nexport const useGetLeaderboardHasMoreResults = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.hasMoreResults)\n}\n\nexport const useGetAddressResult = (account: string) => {\n  return useSelector((state: State) => state.predictions.leaderboard.addressResults[account])\n}\n\nexport const useGetOrFetchLeaderboardAddressResult = (account: string) => {\n  const addressResult = useGetAddressResult(account)\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    const address = isAddress(account)\n\n    // If address result is null it means we already tried fetching the results and none came back\n    if (!addressResult && addressResult !== null && address) {\n      dispatch(fetchAddressResult(account))\n    }\n  }, [dispatch, account, addressResult])\n\n  return addressResult\n}\n\nexport const useGetSelectedAddress = () => {\n  return useSelector((state: State) => state.predictions.leaderboard.selectedAddress)\n}\n"]},"metadata":{},"sourceType":"module"}