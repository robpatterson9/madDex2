{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Farms/components/FarmCard/StakeAction.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport styled from 'styled-components';\nimport BigNumber from 'bignumber.js';\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit';\nimport { useLocation } from 'react-router-dom';\nimport Balance from 'components/Balance';\nimport { useTranslation } from 'contexts/Localization';\nimport { useAppDispatch } from 'state';\nimport { fetchFarmUserDataAsync } from 'state/farms';\nimport { useLpTokenPrice } from 'state/farms/hooks';\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance';\nimport DepositModal from '../DepositModal';\nimport WithdrawModal from '../WithdrawModal';\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms';\nimport useStakeFarms from '../../hooks/useStakeFarms';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`;\n_c = IconButtonWrapper;\n\nconst StakeAction = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  multiplier,\n  apr,\n  displayApr,\n  addLiquidityUrl,\n  cakePrice,\n  lpLabel\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    onStake\n  } = useStakeFarms(pid);\n  const {\n    onUnstake\n  } = useUnstakeFarms(pid);\n  const location = useLocation();\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  const lpPrice = useLpTokenPrice(tokenName);\n\n  const handleStake = async amount => {\n    await onStake(amount);\n    dispatch(fetchFarmUserDataAsync({\n      account,\n      pids: [pid]\n    }));\n  };\n\n  const handleUnstake = async amount => {\n    await onUnstake(amount);\n    dispatch(fetchFarmUserDataAsync({\n      account,\n      pids: [pid]\n    }));\n  };\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance);\n\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return '<0.0000001';\n    }\n\n    if (stakedBalanceBigNumber.gt(0)) {\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN);\n    }\n\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN);\n  }, [stakedBalance]);\n  const [onPresentDeposit] = useModal( /*#__PURE__*/_jsxDEV(DepositModal, {\n    max: tokenBalance,\n    stakedBalance: stakedBalance,\n    onConfirm: handleStake,\n    tokenName: tokenName,\n    multiplier: multiplier,\n    lpPrice: lpPrice,\n    lpLabel: lpLabel,\n    apr: apr,\n    displayApr: displayApr,\n    addLiquidityUrl: addLiquidityUrl,\n    cakePrice: cakePrice\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this));\n  const [onPresentWithdraw] = useModal( /*#__PURE__*/_jsxDEV(WithdrawModal, {\n    max: stakedBalance,\n    onConfirm: handleUnstake,\n    tokenName: tokenName\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this));\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? /*#__PURE__*/_jsxDEV(Button, {\n      onClick: onPresentDeposit,\n      disabled: ['history', 'archived'].some(item => location.pathname.includes(item)),\n      children: t('Stake LP')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(IconButtonWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        variant: \"tertiary\",\n        onClick: onPresentWithdraw,\n        mr: \"6px\",\n        children: /*#__PURE__*/_jsxDEV(MinusIcon, {\n          color: \"primary\",\n          width: \"14px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        variant: \"tertiary\",\n        onClick: onPresentDeposit,\n        disabled: ['history', 'archived'].some(item => location.pathname.includes(item)),\n        children: /*#__PURE__*/_jsxDEV(AddIcon, {\n          color: \"primary\",\n          width: \"14px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      alignItems: \"flex-start\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        color: stakedBalance.eq(0) ? 'textDisabled' : 'text',\n        children: displayBalance()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), stakedBalance.gt(0) && lpPrice.gt(0) && /*#__PURE__*/_jsxDEV(Balance, {\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        decimals: 2,\n        value: getBalanceNumber(lpPrice.times(stakedBalance)),\n        unit: \" USD\",\n        prefix: \"~\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), renderStakingButtons()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n\n_s(StakeAction, \"7PKyBWVDeUcIcK2UlnMkot7+hCg=\", false, function () {\n  return [useTranslation, useStakeFarms, useUnstakeFarms, useLocation, useAppDispatch, useWeb3React, useLpTokenPrice, useModal, useModal];\n});\n\n_c2 = StakeAction;\nexport default StakeAction;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"IconButtonWrapper\");\n$RefreshReg$(_c2, \"StakeAction\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Farms/components/FarmCard/StakeAction.tsx"],"names":["React","useCallback","useWeb3React","styled","BigNumber","Button","Flex","Heading","IconButton","AddIcon","MinusIcon","useModal","useLocation","Balance","useTranslation","useAppDispatch","fetchFarmUserDataAsync","useLpTokenPrice","getBalanceAmount","getBalanceNumber","DepositModal","WithdrawModal","useUnstakeFarms","useStakeFarms","IconButtonWrapper","div","StakeAction","stakedBalance","tokenBalance","tokenName","pid","multiplier","apr","displayApr","addLiquidityUrl","cakePrice","lpLabel","t","onStake","onUnstake","location","dispatch","account","lpPrice","handleStake","amount","pids","handleUnstake","displayBalance","stakedBalanceBigNumber","gt","lt","toFixed","ROUND_DOWN","onPresentDeposit","onPresentWithdraw","renderStakingButtons","eq","some","item","pathname","includes","times"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { useLpTokenPrice } from 'state/farms/hooks'\nimport { getBalanceAmount, getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport useUnstakeFarms from '../../hooks/useUnstakeFarms'\nimport useStakeFarms from '../../hooks/useStakeFarms'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  multiplier?: string\n  apr?: number\n  displayApr?: string\n  addLiquidityUrl?: string\n  cakePrice?: BigNumber\n  lpLabel?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  multiplier,\n  apr,\n  displayApr,\n  addLiquidityUrl,\n  cakePrice,\n  lpLabel,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const lpPrice = useLpTokenPrice(tokenName)\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return '<0.0000001'\n    }\n    if (stakedBalanceBigNumber.gt(0)) {\n      return stakedBalanceBigNumber.toFixed(8, BigNumber.ROUND_DOWN)\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={tokenName}\n      multiplier={multiplier}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return stakedBalance.eq(0) ? (\n      <Button\n        onClick={onPresentDeposit}\n        disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n      >\n        {t('Stake LP')}\n      </Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton\n          variant=\"tertiary\"\n          onClick={onPresentDeposit}\n          disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n        >\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\n        <Heading color={stakedBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance()}</Heading>\n        {stakedBalance.gt(0) && lpPrice.gt(0) && (\n          <Balance\n            fontSize=\"12px\"\n            color=\"textSubtle\"\n            decimals={2}\n            value={getBalanceNumber(lpPrice.times(stakedBalance))}\n            unit=\" USD\"\n            prefix=\"~\"\n          />\n        )}\n      </Flex>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n"]},"metadata":{},"sourceType":"module"}