{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{sumBy}from'lodash';import{useAppDispatch}from'state';import{useWeb3React}from'@web3-react/core';import{Card,CardBody,CardHeader,Flex,Heading,PrizeIcon}from'@pancakeswap/uikit';import{useProfile}from'state/profile/hooks';import{addPoints}from'state/profile';import{addAchievement}from'state/achievements';import{useTranslation}from'contexts/Localization';import{getClaimableIfoData}from'utils/achievements';import AchievementRow from'./AchievementRow';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ClaimPointsCallout=function ClaimPointsCallout(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),claimableAchievements=_useState2[0],setClaimableAchievement=_useState2[1];var _useTranslation=useTranslation(),t=_useTranslation.t;var dispatch=useAppDispatch();var _useProfile=useProfile(),profile=_useProfile.profile;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;useEffect(function(){var fetchIfoClaims=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var ifoData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getClaimableIfoData(account);case 2:ifoData=_context.sent;setClaimableAchievement(ifoData);case 4:case\"end\":return _context.stop();}}},_callee);}));return function fetchIfoClaims(){return _ref.apply(this,arguments);};}();if(account){fetchIfoClaims();}},[account,dispatch,setClaimableAchievement]);var handleCollectSuccess=function handleCollectSuccess(achievement){dispatch(addAchievement(achievement));dispatch(addPoints(achievement.points));setClaimableAchievement(function(prevClaimableAchievements){return prevClaimableAchievements.filter(function(prevClaimableAchievement){return prevClaimableAchievement.id!==achievement.id;});});};if(!(profile===null||profile===void 0?void 0:profile.isActive)){return null;}if(claimableAchievements.length===0){return null;}var totalPointsToCollect=sumBy(claimableAchievements,'points');return/*#__PURE__*/_jsxs(Card,{isActive:true,mb:\"32px\",children:[/*#__PURE__*/_jsx(CardHeader,{children:/*#__PURE__*/_jsx(Flex,{flexDirection:['column',null,'row'],justifyContent:['start',null,'space-between'],children:/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",mb:['16px',null,0],children:[/*#__PURE__*/_jsx(PrizeIcon,{width:\"32px\",mr:\"8px\"}),/*#__PURE__*/_jsx(Heading,{scale:\"lg\",children:t('%num% Points to Collect',{num:totalPointsToCollect})})]})})}),/*#__PURE__*/_jsx(CardBody,{children:claimableAchievements.map(function(achievement){return/*#__PURE__*/_jsx(AchievementRow,{achievement:achievement,onCollectSuccess:handleCollectSuccess},achievement.address);})})]});};export default ClaimPointsCallout;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Profile/components/Achievements/ClaimPointsCallout .tsx"],"names":["React","useEffect","useState","sumBy","useAppDispatch","useWeb3React","Card","CardBody","CardHeader","Flex","Heading","PrizeIcon","useProfile","addPoints","addAchievement","useTranslation","getClaimableIfoData","AchievementRow","ClaimPointsCallout","claimableAchievements","setClaimableAchievement","t","dispatch","profile","account","fetchIfoClaims","ifoData","handleCollectSuccess","achievement","points","prevClaimableAchievements","filter","prevClaimableAchievement","id","isActive","length","totalPointsToCollect","num","map","address"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { sumBy } from 'lodash'\nimport { useAppDispatch } from 'state'\nimport { useWeb3React } from '@web3-react/core'\nimport { Card, CardBody, CardHeader, Flex, Heading, PrizeIcon } from '@pancakeswap/uikit'\nimport { useProfile } from 'state/profile/hooks'\nimport { Achievement } from 'state/types'\nimport { addPoints } from 'state/profile'\nimport { addAchievement } from 'state/achievements'\nimport { useTranslation } from 'contexts/Localization'\nimport { getClaimableIfoData } from 'utils/achievements'\nimport AchievementRow from './AchievementRow'\n\nconst ClaimPointsCallout = () => {\n  const [claimableAchievements, setClaimableAchievement] = useState<Achievement[]>([])\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { profile } = useProfile()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const fetchIfoClaims = async () => {\n      const ifoData = await getClaimableIfoData(account)\n      setClaimableAchievement(ifoData)\n    }\n\n    if (account) {\n      fetchIfoClaims()\n    }\n  }, [account, dispatch, setClaimableAchievement])\n\n  const handleCollectSuccess = (achievement: Achievement) => {\n    dispatch(addAchievement(achievement))\n    dispatch(addPoints(achievement.points))\n\n    setClaimableAchievement((prevClaimableAchievements) =>\n      prevClaimableAchievements.filter((prevClaimableAchievement) => prevClaimableAchievement.id !== achievement.id),\n    )\n  }\n\n  if (!profile?.isActive) {\n    return null\n  }\n\n  if (claimableAchievements.length === 0) {\n    return null\n  }\n\n  const totalPointsToCollect = sumBy(claimableAchievements, 'points')\n\n  return (\n    <Card isActive mb=\"32px\">\n      <CardHeader>\n        <Flex flexDirection={['column', null, 'row']} justifyContent={['start', null, 'space-between']}>\n          <Flex alignItems=\"center\" mb={['16px', null, 0]}>\n            <PrizeIcon width=\"32px\" mr=\"8px\" />\n            <Heading scale=\"lg\">{t('%num% Points to Collect', { num: totalPointsToCollect })}</Heading>\n          </Flex>\n        </Flex>\n      </CardHeader>\n      <CardBody>\n        {claimableAchievements.map((achievement) => (\n          <AchievementRow key={achievement.address} achievement={achievement} onCollectSuccess={handleCollectSuccess} />\n        ))}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default ClaimPointsCallout\n"]},"metadata":{},"sourceType":"module"}