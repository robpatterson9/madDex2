{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Nft/market/components/BuySellModals/BuyModal/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { ethers } from 'ethers';\nimport useTheme from 'hooks/useTheme';\nimport { useTranslation } from 'contexts/Localization';\nimport useTokenBalance, { useGetBnbBalance } from 'hooks/useTokenBalance';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { ethersToBigNumber } from 'utils/bigNumber';\nimport tokens from 'config/constants/tokens';\nimport { parseUnits, formatEther } from 'ethers/lib/utils';\nimport { useERC20, useNftMarketContract } from 'hooks/useContract';\nimport { useWeb3React } from '@web3-react/core';\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice';\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction';\nimport useToast from 'hooks/useToast';\nimport { ToastDescriptionWithTx } from 'components/Toast';\nimport { useAppDispatch } from 'state';\nimport { addUserNft } from 'state/nftMarket/reducer';\nimport { NftLocation } from 'state/nftMarket/types';\nimport { StyledModal } from './styles';\nimport ReviewStage from './ReviewStage';\nimport ConfirmStage from '../shared/ConfirmStage';\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage';\nimport { PaymentCurrency, BuyingStage } from './types';\nimport TransactionConfirmed from '../shared/TransactionConfirmed';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst modalTitles = {\n  [BuyingStage.REVIEW]: 'Review',\n  [BuyingStage.APPROVE_AND_CONFIRM]: 'Back',\n  [BuyingStage.CONFIRM]: 'Back',\n  [BuyingStage.TX_CONFIRMED]: 'Transaction Confirmed'\n};\n\nconst BuyModal = ({\n  nftToBuy,\n  onDismiss\n}) => {\n  _s();\n\n  const [stage, setStage] = useState(BuyingStage.REVIEW);\n  const [confirmedTxHash, setConfirmedTxHash] = useState('');\n  const [paymentCurrency, setPaymentCurrency] = useState(PaymentCurrency.BNB);\n  const {\n    theme\n  } = useTheme();\n  const {\n    t\n  } = useTranslation();\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n  const {\n    account\n  } = useWeb3React();\n  const wbnbContract = useERC20(tokens.wbnb.address);\n  const nftMarketContract = useNftMarketContract();\n  const {\n    toastSuccess\n  } = useToast();\n  const dispatch = useAppDispatch();\n  const nftPriceWei = parseUnits(nftToBuy.marketData.currentAskPrice, 'ether');\n  const nftPrice = parseFloat(nftToBuy.marketData.currentAskPrice); // BNB - returns ethers.BigNumber\n\n  const {\n    balance: bnbBalance,\n    fetchStatus: bnbFetchStatus\n  } = useGetBnbBalance();\n  const formattedBnbBalance = parseFloat(formatEther(bnbBalance)); // WBNB - returns BigNumber\n\n  const {\n    balance: wbnbBalance,\n    fetchStatus: wbnbFetchStatus\n  } = useTokenBalance(tokens.wbnb.address);\n  const formattedWbnbBalance = getBalanceNumber(wbnbBalance);\n  const walletBalance = paymentCurrency === PaymentCurrency.BNB ? formattedBnbBalance : formattedWbnbBalance;\n  const walletFetchStatus = paymentCurrency === PaymentCurrency.BNB ? bnbFetchStatus : wbnbFetchStatus;\n  const notEnoughBnbForPurchase = paymentCurrency === PaymentCurrency.BNB ? bnbBalance.lt(nftPriceWei) : wbnbBalance.lt(ethersToBigNumber(nftPriceWei));\n  const {\n    isApproving,\n    isApproved,\n    isConfirming,\n    handleApprove,\n    handleConfirm\n  } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      try {\n        const currentAllowance = await wbnbContract.allowance(account, nftMarketContract.address);\n        return currentAllowance.gt(0);\n      } catch (error) {\n        return false;\n      }\n    },\n    onApprove: () => {\n      return callWithGasPrice(wbnbContract, 'approve', [nftMarketContract.address, ethers.constants.MaxUint256]);\n    },\n    onApproveSuccess: async ({\n      receipt\n    }) => {\n      toastSuccess(t('Contract approved - you can now buy NFT with WBNB!'), /*#__PURE__*/_jsxDEV(ToastDescriptionWithTx, {\n        txHash: receipt.transactionHash\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this));\n    },\n    onConfirm: () => {\n      const payAmount = Number.isNaN(nftPrice) ? ethers.BigNumber.from(0) : parseUnits(nftToBuy.marketData.currentAskPrice);\n\n      if (paymentCurrency === PaymentCurrency.BNB) {\n        return callWithGasPrice(nftMarketContract, 'buyTokenUsingBNB', [nftToBuy.collectionAddress, nftToBuy.tokenId], {\n          value: payAmount\n        });\n      }\n\n      return callWithGasPrice(nftMarketContract, 'buyTokenUsingWBNB', [nftToBuy.collectionAddress, nftToBuy.tokenId, payAmount]);\n    },\n    onSuccess: async ({\n      receipt\n    }) => {\n      setConfirmedTxHash(receipt.transactionHash);\n      setStage(BuyingStage.TX_CONFIRMED);\n      dispatch(addUserNft({\n        tokenId: nftToBuy.tokenId,\n        collectionAddress: nftToBuy.collectionAddress,\n        nftLocation: NftLocation.WALLET\n      }));\n      toastSuccess(t('Your NFT has been sent to your wallet'), /*#__PURE__*/_jsxDEV(ToastDescriptionWithTx, {\n        txHash: receipt.transactionHash\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this));\n    }\n  });\n\n  const continueToNextStage = () => {\n    if (paymentCurrency === PaymentCurrency.WBNB && !isApproved) {\n      setStage(BuyingStage.APPROVE_AND_CONFIRM);\n    } else {\n      setStage(BuyingStage.CONFIRM);\n    }\n  };\n\n  const goBack = () => {\n    setStage(BuyingStage.REVIEW);\n  };\n\n  const showBackButton = stage === BuyingStage.CONFIRM || stage === BuyingStage.APPROVE_AND_CONFIRM;\n  return /*#__PURE__*/_jsxDEV(StyledModal, {\n    title: modalTitles[stage],\n    stage: stage,\n    onDismiss: onDismiss,\n    onBack: showBackButton ? goBack : null,\n    headerBackground: theme.colors.gradients.cardHeader,\n    children: [stage === BuyingStage.REVIEW && /*#__PURE__*/_jsxDEV(ReviewStage, {\n      nftToBuy: nftToBuy,\n      paymentCurrency: paymentCurrency,\n      setPaymentCurrency: setPaymentCurrency,\n      nftPrice: nftPrice,\n      walletBalance: walletBalance,\n      walletFetchStatus: walletFetchStatus,\n      notEnoughBnbForPurchase: notEnoughBnbForPurchase,\n      continueToNextStage: continueToNextStage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 9\n    }, this), stage === BuyingStage.APPROVE_AND_CONFIRM && /*#__PURE__*/_jsxDEV(ApproveAndConfirmStage, {\n      variant: \"buy\",\n      handleApprove: handleApprove,\n      isApproved: isApproved,\n      isApproving: isApproving,\n      isConfirming: isConfirming,\n      handleConfirm: handleConfirm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this), stage === BuyingStage.CONFIRM && /*#__PURE__*/_jsxDEV(ConfirmStage, {\n      isConfirming: isConfirming,\n      handleConfirm: handleConfirm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 41\n    }, this), stage === BuyingStage.TX_CONFIRMED && /*#__PURE__*/_jsxDEV(TransactionConfirmed, {\n      txHash: confirmedTxHash,\n      onDismiss: onDismiss\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 46\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BuyModal, \"HVjpK4uKv0azLCIcGZ6nwROwWLc=\", false, function () {\n  return [useTheme, useTranslation, useCallWithGasPrice, useWeb3React, useERC20, useNftMarketContract, useToast, useAppDispatch, useGetBnbBalance, useTokenBalance, useApproveConfirmTransaction];\n});\n\n_c = BuyModal;\nexport default BuyModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"BuyModal\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/components/BuySellModals/BuyModal/index.tsx"],"names":["React","useState","ethers","useTheme","useTranslation","useTokenBalance","useGetBnbBalance","getBalanceNumber","ethersToBigNumber","tokens","parseUnits","formatEther","useERC20","useNftMarketContract","useWeb3React","useCallWithGasPrice","useApproveConfirmTransaction","useToast","ToastDescriptionWithTx","useAppDispatch","addUserNft","NftLocation","StyledModal","ReviewStage","ConfirmStage","ApproveAndConfirmStage","PaymentCurrency","BuyingStage","TransactionConfirmed","modalTitles","REVIEW","APPROVE_AND_CONFIRM","CONFIRM","TX_CONFIRMED","BuyModal","nftToBuy","onDismiss","stage","setStage","confirmedTxHash","setConfirmedTxHash","paymentCurrency","setPaymentCurrency","BNB","theme","t","callWithGasPrice","account","wbnbContract","wbnb","address","nftMarketContract","toastSuccess","dispatch","nftPriceWei","marketData","currentAskPrice","nftPrice","parseFloat","balance","bnbBalance","fetchStatus","bnbFetchStatus","formattedBnbBalance","wbnbBalance","wbnbFetchStatus","formattedWbnbBalance","walletBalance","walletFetchStatus","notEnoughBnbForPurchase","lt","isApproving","isApproved","isConfirming","handleApprove","handleConfirm","onRequiresApproval","currentAllowance","allowance","gt","error","onApprove","constants","MaxUint256","onApproveSuccess","receipt","transactionHash","onConfirm","payAmount","Number","isNaN","BigNumber","from","collectionAddress","tokenId","value","onSuccess","nftLocation","WALLET","continueToNextStage","WBNB","goBack","showBackButton","colors","gradients","cardHeader"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { InjectedModalProps } from '@pancakeswap/uikit'\nimport { ethers } from 'ethers'\nimport useTheme from 'hooks/useTheme'\nimport { useTranslation } from 'contexts/Localization'\nimport useTokenBalance, { useGetBnbBalance } from 'hooks/useTokenBalance'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { ethersToBigNumber } from 'utils/bigNumber'\nimport tokens from 'config/constants/tokens'\nimport { parseUnits, formatEther } from 'ethers/lib/utils'\nimport { useERC20, useNftMarketContract } from 'hooks/useContract'\nimport { useWeb3React } from '@web3-react/core'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport useToast from 'hooks/useToast'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useAppDispatch } from 'state'\nimport { addUserNft } from 'state/nftMarket/reducer'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport { StyledModal } from './styles'\nimport ReviewStage from './ReviewStage'\nimport ConfirmStage from '../shared/ConfirmStage'\nimport ApproveAndConfirmStage from '../shared/ApproveAndConfirmStage'\nimport { PaymentCurrency, BuyingStage } from './types'\nimport TransactionConfirmed from '../shared/TransactionConfirmed'\n\nconst modalTitles = {\n  [BuyingStage.REVIEW]: 'Review',\n  [BuyingStage.APPROVE_AND_CONFIRM]: 'Back',\n  [BuyingStage.CONFIRM]: 'Back',\n  [BuyingStage.TX_CONFIRMED]: 'Transaction Confirmed',\n}\n\ninterface BuyModalProps extends InjectedModalProps {\n  nftToBuy: NftToken\n}\n\nconst BuyModal: React.FC<BuyModalProps> = ({ nftToBuy, onDismiss }) => {\n  const [stage, setStage] = useState(BuyingStage.REVIEW)\n  const [confirmedTxHash, setConfirmedTxHash] = useState('')\n  const [paymentCurrency, setPaymentCurrency] = useState<PaymentCurrency>(PaymentCurrency.BNB)\n  const { theme } = useTheme()\n  const { t } = useTranslation()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const { account } = useWeb3React()\n  const wbnbContract = useERC20(tokens.wbnb.address)\n  const nftMarketContract = useNftMarketContract()\n\n  const { toastSuccess } = useToast()\n  const dispatch = useAppDispatch()\n\n  const nftPriceWei = parseUnits(nftToBuy.marketData.currentAskPrice, 'ether')\n  const nftPrice = parseFloat(nftToBuy.marketData.currentAskPrice)\n\n  // BNB - returns ethers.BigNumber\n  const { balance: bnbBalance, fetchStatus: bnbFetchStatus } = useGetBnbBalance()\n  const formattedBnbBalance = parseFloat(formatEther(bnbBalance))\n  // WBNB - returns BigNumber\n  const { balance: wbnbBalance, fetchStatus: wbnbFetchStatus } = useTokenBalance(tokens.wbnb.address)\n  const formattedWbnbBalance = getBalanceNumber(wbnbBalance)\n\n  const walletBalance = paymentCurrency === PaymentCurrency.BNB ? formattedBnbBalance : formattedWbnbBalance\n  const walletFetchStatus = paymentCurrency === PaymentCurrency.BNB ? bnbFetchStatus : wbnbFetchStatus\n\n  const notEnoughBnbForPurchase =\n    paymentCurrency === PaymentCurrency.BNB\n      ? bnbBalance.lt(nftPriceWei)\n      : wbnbBalance.lt(ethersToBigNumber(nftPriceWei))\n\n  const { isApproving, isApproved, isConfirming, handleApprove, handleConfirm } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      try {\n        const currentAllowance = await wbnbContract.allowance(account, nftMarketContract.address)\n        return currentAllowance.gt(0)\n      } catch (error) {\n        return false\n      }\n    },\n    onApprove: () => {\n      return callWithGasPrice(wbnbContract, 'approve', [nftMarketContract.address, ethers.constants.MaxUint256])\n    },\n    onApproveSuccess: async ({ receipt }) => {\n      toastSuccess(\n        t('Contract approved - you can now buy NFT with WBNB!'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n      )\n    },\n    onConfirm: () => {\n      const payAmount = Number.isNaN(nftPrice)\n        ? ethers.BigNumber.from(0)\n        : parseUnits(nftToBuy.marketData.currentAskPrice)\n      if (paymentCurrency === PaymentCurrency.BNB) {\n        return callWithGasPrice(nftMarketContract, 'buyTokenUsingBNB', [nftToBuy.collectionAddress, nftToBuy.tokenId], {\n          value: payAmount,\n        })\n      }\n      return callWithGasPrice(nftMarketContract, 'buyTokenUsingWBNB', [\n        nftToBuy.collectionAddress,\n        nftToBuy.tokenId,\n        payAmount,\n      ])\n    },\n    onSuccess: async ({ receipt }) => {\n      setConfirmedTxHash(receipt.transactionHash)\n      setStage(BuyingStage.TX_CONFIRMED)\n      dispatch(\n        addUserNft({\n          tokenId: nftToBuy.tokenId,\n          collectionAddress: nftToBuy.collectionAddress,\n          nftLocation: NftLocation.WALLET,\n        }),\n      )\n      toastSuccess(\n        t('Your NFT has been sent to your wallet'),\n        <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n      )\n    },\n  })\n\n  const continueToNextStage = () => {\n    if (paymentCurrency === PaymentCurrency.WBNB && !isApproved) {\n      setStage(BuyingStage.APPROVE_AND_CONFIRM)\n    } else {\n      setStage(BuyingStage.CONFIRM)\n    }\n  }\n\n  const goBack = () => {\n    setStage(BuyingStage.REVIEW)\n  }\n\n  const showBackButton = stage === BuyingStage.CONFIRM || stage === BuyingStage.APPROVE_AND_CONFIRM\n\n  return (\n    <StyledModal\n      title={modalTitles[stage]}\n      stage={stage}\n      onDismiss={onDismiss}\n      onBack={showBackButton ? goBack : null}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      {stage === BuyingStage.REVIEW && (\n        <ReviewStage\n          nftToBuy={nftToBuy}\n          paymentCurrency={paymentCurrency}\n          setPaymentCurrency={setPaymentCurrency}\n          nftPrice={nftPrice}\n          walletBalance={walletBalance}\n          walletFetchStatus={walletFetchStatus}\n          notEnoughBnbForPurchase={notEnoughBnbForPurchase}\n          continueToNextStage={continueToNextStage}\n        />\n      )}\n      {stage === BuyingStage.APPROVE_AND_CONFIRM && (\n        <ApproveAndConfirmStage\n          variant=\"buy\"\n          handleApprove={handleApprove}\n          isApproved={isApproved}\n          isApproving={isApproving}\n          isConfirming={isConfirming}\n          handleConfirm={handleConfirm}\n        />\n      )}\n      {stage === BuyingStage.CONFIRM && <ConfirmStage isConfirming={isConfirming} handleConfirm={handleConfirm} />}\n      {stage === BuyingStage.TX_CONFIRMED && <TransactionConfirmed txHash={confirmedTxHash} onDismiss={onDismiss} />}\n    </StyledModal>\n  )\n}\n\nexport default BuyModal\n"]},"metadata":{},"sourceType":"module"}