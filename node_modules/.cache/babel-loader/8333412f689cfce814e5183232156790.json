{"ast":null,"code":"import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{useEffect,useReducer}from'react';import{parseRetrievedNumber}from'../../helpers';import generateTicketNumbers from'./generateTicketNumbers';var getInitialState=function getInitialState(_ref){var amount=_ref.amount,userCurrentTickets=_ref.userCurrentTickets;var randomTickets=generateTicketNumbers(amount,userCurrentTickets);var randomTicketsAsStringArray=randomTickets.map(function(ticket){return parseRetrievedNumber(ticket.toString()).split('');});var tickets=Array.from({length:amount},function(_,i){return i+1;}).map(function(index){return{id:index,numbers:randomTicketsAsStringArray[index-1],duplicateWith:[],isComplete:true};});return{tickets:tickets,allComplete:true};};var reducer=function reducer(state,action){switch(action.type){case'updateTicket':{var tickets=_toConsumableArray(state.tickets);var _action$payload=action.payload,_ticketId=_action$payload.ticketId,_newNumbers=_action$payload.newNumbers;var newDuplicates=state.tickets.filter(function(ticket){return ticket.id!==_ticketId&&ticket.isComplete&&ticket.numbers.join('')===_newNumbers.join('');});// If ticket was duplicate but not duplicate anymore with this update\n// go through previously considered duplicates and remove id of this ticket\n// from their duplicateWith array\nvar prevDuplicates=tickets[_ticketId-1].duplicateWith;prevDuplicates.forEach(function(prevTicketId){if(!newDuplicates.map(function(_ref2){var id=_ref2.id;return id;}).includes(prevTicketId)){var dupsToUpdate=_toConsumableArray(tickets[prevTicketId-1].duplicateWith);var indexToRemove=dupsToUpdate.findIndex(function(id){return id===_ticketId;});dupsToUpdate.splice(indexToRemove,1);tickets[prevTicketId-1]=_objectSpread(_objectSpread({},tickets[prevTicketId-1]),{},{duplicateWith:dupsToUpdate});}});// If found duplicates - update their duplicateWith array\nif(newDuplicates.length!==0){newDuplicates.forEach(function(duplicate){tickets[duplicate.id-1]=_objectSpread(_objectSpread({},duplicate),{},{duplicateWith:[].concat(_toConsumableArray(duplicate.duplicateWith),[_ticketId])});});}var updatedTicket={id:_ticketId,numbers:_newNumbers,duplicateWith:newDuplicates.map(function(ticket){return ticket.id;}),isComplete:_newNumbers.join('').length===6};tickets[_ticketId-1]=updatedTicket;// Check if all tickets are filled\nvar allComplete=tickets.every(function(ticket){return ticket.isComplete;});return{tickets:tickets,allComplete:allComplete};}case'reset':return getInitialState({amount:action.payload.amount,userCurrentTickets:action.payload.userCurrentTickets});default:throw new Error();}};export var useTicketsReducer=function useTicketsReducer(amount,userCurrentTickets){var _useReducer=useReducer(reducer,{amount:amount,userCurrentTickets:userCurrentTickets},getInitialState),_useReducer2=_slicedToArray(_useReducer,2),state=_useReducer2[0],dispatch=_useReducer2[1];useEffect(function(){dispatch({type:'reset',payload:{amount:amount,userCurrentTickets:userCurrentTickets}});},[amount,userCurrentTickets]);var updateTicket=function updateTicket(ticketId,newNumbers){dispatch({type:'updateTicket',payload:{ticketId:ticketId,newNumbers:newNumbers}});};var randomize=function randomize(){dispatch({type:'reset',payload:{amount:amount,userCurrentTickets:userCurrentTickets}});};var getTicketsForPurchase=function getTicketsForPurchase(){return state.tickets.map(function(ticket){var reversedTicket=_toConsumableArray(ticket.numbers).map(function(num){return parseInt(num,10);}).reverse();reversedTicket.unshift(1);var ticketAsNumber=parseInt(reversedTicket.join(''),10);return ticketAsNumber;});};return[updateTicket,randomize,state.tickets,state.allComplete,getTicketsForPurchase];};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Lottery/components/BuyTicketsModal/useTicketsReducer.tsx"],"names":["useEffect","useReducer","parseRetrievedNumber","generateTicketNumbers","getInitialState","amount","userCurrentTickets","randomTickets","randomTicketsAsStringArray","map","ticket","toString","split","tickets","Array","from","length","_","i","index","id","numbers","duplicateWith","isComplete","allComplete","reducer","state","action","type","payload","ticketId","newNumbers","newDuplicates","filter","join","prevDuplicates","forEach","prevTicketId","includes","dupsToUpdate","indexToRemove","findIndex","splice","duplicate","updatedTicket","every","Error","useTicketsReducer","dispatch","updateTicket","randomize","getTicketsForPurchase","reversedTicket","num","parseInt","reverse","unshift","ticketAsNumber"],"mappings":"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","sourcesContent":["import { LotteryTicket } from 'config/constants/types'\nimport { useEffect, useReducer } from 'react'\nimport { parseRetrievedNumber } from '../../helpers'\nimport generateTicketNumbers from './generateTicketNumbers'\n\nexport interface Ticket {\n  id: number\n  numbers: string[]\n  duplicateWith: number[]\n  isComplete: boolean\n}\n\nexport interface TicketsState {\n  tickets: Ticket[]\n  allComplete: boolean\n}\n\nconst getInitialState = ({\n  amount,\n  userCurrentTickets,\n}: {\n  amount: number\n  userCurrentTickets: LotteryTicket[]\n}): TicketsState => {\n  const randomTickets = generateTicketNumbers(amount, userCurrentTickets)\n  const randomTicketsAsStringArray = randomTickets.map((ticket) => parseRetrievedNumber(ticket.toString()).split(''))\n  const tickets = Array.from({ length: amount }, (_, i) => i + 1).map((index) => ({\n    id: index,\n    numbers: randomTicketsAsStringArray[index - 1],\n    duplicateWith: [],\n    isComplete: true,\n  }))\n  return {\n    tickets,\n    allComplete: true,\n  }\n}\n\nconst reducer = (state: TicketsState, action: any) => {\n  switch (action.type) {\n    case 'updateTicket': {\n      const tickets = [...state.tickets]\n      const { ticketId, newNumbers } = action.payload\n\n      const newDuplicates = state.tickets.filter(\n        (ticket) => ticket.id !== ticketId && ticket.isComplete && ticket.numbers.join('') === newNumbers.join(''),\n      )\n\n      // If ticket was duplicate but not duplicate anymore with this update\n      // go through previously considered duplicates and remove id of this ticket\n      // from their duplicateWith array\n      const prevDuplicates = tickets[ticketId - 1].duplicateWith\n      prevDuplicates.forEach((prevTicketId) => {\n        if (!newDuplicates.map(({ id }) => id).includes(prevTicketId)) {\n          const dupsToUpdate = [...tickets[prevTicketId - 1].duplicateWith]\n          const indexToRemove = dupsToUpdate.findIndex((id) => id === ticketId)\n          dupsToUpdate.splice(indexToRemove, 1)\n          tickets[prevTicketId - 1] = {\n            ...tickets[prevTicketId - 1],\n            duplicateWith: dupsToUpdate,\n          }\n        }\n      })\n\n      // If found duplicates - update their duplicateWith array\n      if (newDuplicates.length !== 0) {\n        newDuplicates.forEach((duplicate) => {\n          tickets[duplicate.id - 1] = {\n            ...duplicate,\n            duplicateWith: [...duplicate.duplicateWith, ticketId],\n          }\n        })\n      }\n\n      const updatedTicket = {\n        id: ticketId,\n        numbers: newNumbers,\n        duplicateWith: newDuplicates.map((ticket) => ticket.id),\n        isComplete: newNumbers.join('').length === 6,\n      }\n      tickets[ticketId - 1] = updatedTicket\n\n      // Check if all tickets are filled\n      const allComplete = tickets.every((ticket) => ticket.isComplete)\n\n      return {\n        tickets,\n        allComplete,\n      }\n    }\n    case 'reset':\n      return getInitialState({ amount: action.payload.amount, userCurrentTickets: action.payload.userCurrentTickets })\n    default:\n      throw new Error()\n  }\n}\n\nexport type UpdateTicketAction = (ticketId: number, newNumbers: string[]) => void\n\nexport const useTicketsReducer = (\n  amount: number,\n  userCurrentTickets: LotteryTicket[],\n): [UpdateTicketAction, () => void, Ticket[], boolean, () => number[]] => {\n  const [state, dispatch] = useReducer(reducer, { amount, userCurrentTickets }, getInitialState)\n\n  useEffect(() => {\n    dispatch({ type: 'reset', payload: { amount, userCurrentTickets } })\n  }, [amount, userCurrentTickets])\n\n  const updateTicket = (ticketId: number, newNumbers: string[]) => {\n    dispatch({ type: 'updateTicket', payload: { ticketId, newNumbers } })\n  }\n\n  const randomize = () => {\n    dispatch({ type: 'reset', payload: { amount, userCurrentTickets } })\n  }\n\n  const getTicketsForPurchase = () => {\n    return state.tickets.map((ticket) => {\n      const reversedTicket = [...ticket.numbers].map((num) => parseInt(num, 10)).reverse()\n      reversedTicket.unshift(1)\n      const ticketAsNumber = parseInt(reversedTicket.join(''), 10)\n      return ticketAsNumber\n    })\n  }\n\n  return [updateTicket, randomize, state.tickets, state.allComplete, getTicketsForPurchase]\n}\n"]},"metadata":{},"sourceType":"module"}