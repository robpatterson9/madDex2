{"ast":null,"code":"import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{ethers}from'ethers';/**\n * Estimate the gas needed to call a function, and add a 10% margin\n * @param contract Used to perform the call\n * @param methodName The name of the methode called\n * @param gasMarginPer10000 The gasMargin per 10000 (i.e. 10% -> 1000)\n * @param args An array of arguments to pass to the method\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */export var estimateGas=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(contract,methodName,methodArgs,gasMarginPer10000){var _contract$estimateGas;var rawGasEstimation,gasEstimation;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(contract[methodName]){_context.next=2;break;}throw new Error(\"Method \".concat(methodName,\" doesn't exist on \").concat(contract.address));case 2:_context.next=4;return(_contract$estimateGas=contract.estimateGas)[methodName].apply(_contract$estimateGas,_toConsumableArray(methodArgs));case 4:rawGasEstimation=_context.sent;// By convention, ethers.BigNumber values are multiplied by 1000 to avoid dealing with real numbers\ngasEstimation=rawGasEstimation.mul(ethers.BigNumber.from(10000).add(ethers.BigNumber.from(gasMarginPer10000))).div(ethers.BigNumber.from(10000));return _context.abrupt(\"return\",gasEstimation);case 7:case\"end\":return _context.stop();}}},_callee);}));return function estimateGas(_x,_x2,_x3,_x4){return _ref.apply(this,arguments);};}();/**\n * Perform a contract call with a gas value returned from estimateGas\n * @param contract Used to perform the call\n * @param methodName The name of the method called\n * @param methodArgs An array of arguments to pass to the method\n * @param overrides An overrides object to pass to the method\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */export var callWithEstimateGas=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(contract,methodName){var methodArgs,overrides,gasMarginPer10000,gasEstimation,tx,_args2=arguments;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:methodArgs=_args2.length>2&&_args2[2]!==undefined?_args2[2]:[];overrides=_args2.length>3&&_args2[3]!==undefined?_args2[3]:{};gasMarginPer10000=_args2.length>4&&_args2[4]!==undefined?_args2[4]:1000;gasEstimation=estimateGas(contract,methodName,methodArgs,gasMarginPer10000);_context2.next=6;return contract[methodName].apply(contract,_toConsumableArray(methodArgs).concat([_objectSpread({gasLimit:gasEstimation},overrides)]));case 6:tx=_context2.sent;return _context2.abrupt(\"return\",tx);case 8:case\"end\":return _context2.stop();}}},_callee2);}));return function callWithEstimateGas(_x5,_x6){return _ref2.apply(this,arguments);};}();","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/utils/calls/estimateGas.ts"],"names":["ethers","estimateGas","contract","methodName","methodArgs","gasMarginPer10000","Error","address","rawGasEstimation","gasEstimation","mul","BigNumber","from","add","div","callWithEstimateGas","overrides","gasLimit","tx"],"mappings":"omBAAA,OAASA,MAAT,KAA4C,QAA5C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,WAAW,0FAAG,iBACzBC,QADyB,CAEzBC,UAFyB,CAGzBC,UAHyB,CAIzBC,iBAJyB,kLAMpBH,QAAQ,CAACC,UAAD,CANY,8BAOjB,IAAIG,CAAAA,KAAJ,kBAAoBH,UAApB,8BAAmDD,QAAQ,CAACK,OAA5D,EAPiB,8BASM,uBAAAL,QAAQ,CAACD,WAAT,EAAqBE,UAArB,iDAAoCC,UAApC,EATN,QASnBI,gBATmB,eAUzB;AACMC,aAXmB,CAWHD,gBAAgB,CACnCE,GADmB,CACfV,MAAM,CAACW,SAAP,CAAiBC,IAAjB,CAAsB,KAAtB,EAA6BC,GAA7B,CAAiCb,MAAM,CAACW,SAAP,CAAiBC,IAAjB,CAAsBP,iBAAtB,CAAjC,CADe,EAEnBS,GAFmB,CAEfd,MAAM,CAACW,SAAP,CAAiBC,IAAjB,CAAsB,KAAtB,CAFe,CAXG,iCAclBH,aAdkB,wDAAH,kBAAXR,CAAAA,WAAW,wDAAjB,CAiBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMc,CAAAA,mBAAmB,2FAAG,kBACjCb,QADiC,CAEjCC,UAFiC,mMAGjCC,UAHiC,kDAGb,EAHa,CAIjCY,SAJiC,kDAIV,EAJU,CAKjCX,iBALiC,kDAKb,IALa,CAO3BI,aAP2B,CAOXR,WAAW,CAACC,QAAD,CAAWC,UAAX,CAAuBC,UAAvB,CAAmCC,iBAAnC,CAPA,wBAQhBH,CAAAA,QAAQ,CAACC,UAAD,CAAR,OAAAD,QAAQ,oBAAgBE,UAAhB,yBACvBa,QAAQ,CAAER,aADa,EAEpBO,SAFoB,IARQ,QAQ3BE,EAR2B,iDAY1BA,EAZ0B,0DAAH,kBAAnBH,CAAAA,mBAAmB,kDAAzB","sourcesContent":["import { ethers, Contract, Overrides } from 'ethers'\n\n/**\n * Estimate the gas needed to call a function, and add a 10% margin\n * @param contract Used to perform the call\n * @param methodName The name of the methode called\n * @param gasMarginPer10000 The gasMargin per 10000 (i.e. 10% -> 1000)\n * @param args An array of arguments to pass to the method\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */\nexport const estimateGas = async (\n  contract: Contract,\n  methodName: string,\n  methodArgs: any[],\n  gasMarginPer10000: number,\n) => {\n  if (!contract[methodName]) {\n    throw new Error(`Method ${methodName} doesn't exist on ${contract.address}`)\n  }\n  const rawGasEstimation = await contract.estimateGas[methodName](...methodArgs)\n  // By convention, ethers.BigNumber values are multiplied by 1000 to avoid dealing with real numbers\n  const gasEstimation = rawGasEstimation\n    .mul(ethers.BigNumber.from(10000).add(ethers.BigNumber.from(gasMarginPer10000)))\n    .div(ethers.BigNumber.from(10000))\n  return gasEstimation\n}\n\n/**\n * Perform a contract call with a gas value returned from estimateGas\n * @param contract Used to perform the call\n * @param methodName The name of the method called\n * @param methodArgs An array of arguments to pass to the method\n * @param overrides An overrides object to pass to the method\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\n */\nexport const callWithEstimateGas = async (\n  contract: Contract,\n  methodName: string,\n  methodArgs: any[] = [],\n  overrides: Overrides = {},\n  gasMarginPer10000 = 1000,\n): Promise<ethers.providers.TransactionResponse> => {\n  const gasEstimation = estimateGas(contract, methodName, methodArgs, gasMarginPer10000)\n  const tx = await contract[methodName](...methodArgs, {\n    gasLimit: gasEstimation,\n    ...overrides,\n  })\n  return tx\n}\n"]},"metadata":{},"sourceType":"module"}