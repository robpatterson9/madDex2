{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3,_templateObject4;import React,{useState}from'react';import styled from'styled-components';import{AutoRenewIcon,Button,Flex}from'@pancakeswap/uikit';import useToast from'hooks/useToast';import{useTranslation}from'contexts/Localization';import{usePointCenterIfoContract}from'hooks/useContract';import{useCallWithGasPrice}from'hooks/useCallWithGasPrice';import{ToastDescriptionWithTx}from'components/Toast';import AchievementTitle from'views/Nft/market/Profile/components/Achievements/AchievementTitle';import AchievementAvatar from'views/Nft/market/Profile/components/Achievements/AchievementAvatar';import AchievementDescription from'views/Nft/market/Profile/components/Achievements/AchievementDescription';import PointsLabel from'./PointsLabel';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ActionColumn=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  flex: none;\\n  width: 100%;\\n\\n  \",\" {\\n    max-width: 160px;\\n\\n    & > button {\\n      width: 100%;\\n    }\\n  }\\n\"])),function(_ref){var theme=_ref.theme;return theme.mediaQueries.sm;});var StyledAchievementRow=styled(Flex)(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  border-bottom: 1px solid \",\";\\n  padding-bottom: 16px;\\n  padding-top: 16px;\\n\"])),function(_ref2){var theme=_ref2.theme;return theme.colors.cardBorder;});var Details=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  flex: 1;\\n\"])));var Body=styled(Flex)(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  flex-direction: column;\\n  flex: 1;\\n  margin-left: 8px;\\n\\n  \",\" {\\n    align-items: center;\\n    flex-direction: row;\\n  }\\n\"])),function(_ref3){var theme=_ref3.theme;return theme.mediaQueries.md;});var AchievementRow=function AchievementRow(_ref4){var achievement=_ref4.achievement,onCollectSuccess=_ref4.onCollectSuccess;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isCollecting=_useState2[0],setIsCollecting=_useState2[1];var _useTranslation=useTranslation(),t=_useTranslation.t;var pointCenterContract=usePointCenterIfoContract();var _useToast=useToast(),toastError=_useToast.toastError,toastSuccess=_useToast.toastSuccess;var _useCallWithGasPrice=useCallWithGasPrice(),callWithGasPrice=_useCallWithGasPrice.callWithGasPrice;var handleCollectPoints=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var tx,receipt;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return callWithGasPrice(pointCenterContract,'getPoints',[achievement.address]);case 2:tx=_context.sent;setIsCollecting(true);_context.next=6;return tx.wait();case 6:receipt=_context.sent;if(receipt.status){setIsCollecting(false);onCollectSuccess(achievement);toastSuccess(t('Points Collected!'),/*#__PURE__*/_jsx(ToastDescriptionWithTx,{txHash:receipt.transactionHash}));}else{toastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));setIsCollecting(false);}case 8:case\"end\":return _context.stop();}}},_callee);}));return function handleCollectPoints(){return _ref5.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(StyledAchievementRow,{children:[/*#__PURE__*/_jsx(AchievementAvatar,{badge:achievement.badge}),/*#__PURE__*/_jsxs(Body,{children:[/*#__PURE__*/_jsxs(Details,{children:[/*#__PURE__*/_jsx(AchievementTitle,{title:achievement.title}),/*#__PURE__*/_jsx(AchievementDescription,{description:achievement.description})]}),/*#__PURE__*/_jsx(PointsLabel,{points:achievement.points,px:[0,null,null,'32px'],mb:['16px',null,null,0]}),/*#__PURE__*/_jsx(ActionColumn,{children:/*#__PURE__*/_jsx(Button,{onClick:handleCollectPoints,isLoading:isCollecting,endIcon:isCollecting?/*#__PURE__*/_jsx(AutoRenewIcon,{spin:true,color:\"currentColor\"}):null,disabled:isCollecting,variant:\"secondary\",children:t('Collect')})})]})]});};export default AchievementRow;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Profile/components/Achievements/AchievementRow/index.tsx"],"names":["React","useState","styled","AutoRenewIcon","Button","Flex","useToast","useTranslation","usePointCenterIfoContract","useCallWithGasPrice","ToastDescriptionWithTx","AchievementTitle","AchievementAvatar","AchievementDescription","PointsLabel","ActionColumn","div","theme","mediaQueries","sm","StyledAchievementRow","colors","cardBorder","Details","Body","md","AchievementRow","achievement","onCollectSuccess","isCollecting","setIsCollecting","t","pointCenterContract","toastError","toastSuccess","callWithGasPrice","handleCollectPoints","address","tx","wait","receipt","status","transactionHash","badge","title","description","points"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { AutoRenewIcon, Button, Flex } from '@pancakeswap/uikit'\nimport { Achievement } from 'state/types'\nimport useToast from 'hooks/useToast'\nimport { useTranslation } from 'contexts/Localization'\nimport { usePointCenterIfoContract } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport AchievementTitle from 'views/Nft/market/Profile/components/Achievements/AchievementTitle'\nimport AchievementAvatar from 'views/Nft/market/Profile/components/Achievements/AchievementAvatar'\nimport AchievementDescription from 'views/Nft/market/Profile/components/Achievements/AchievementDescription'\nimport PointsLabel from './PointsLabel'\n\ninterface AchievementRowProps {\n  achievement: Achievement\n  onCollectSuccess?: (achievement: Achievement) => void\n}\n\nconst ActionColumn = styled.div`\n  flex: none;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    max-width: 160px;\n\n    & > button {\n      width: 100%;\n    }\n  }\n`\n\nconst StyledAchievementRow = styled(Flex)`\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  padding-bottom: 16px;\n  padding-top: 16px;\n`\n\nconst Details = styled.div`\n  flex: 1;\n`\n\nconst Body = styled(Flex)`\n  flex-direction: column;\n  flex: 1;\n  margin-left: 8px;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    align-items: center;\n    flex-direction: row;\n  }\n`\n\nconst AchievementRow: React.FC<AchievementRowProps> = ({ achievement, onCollectSuccess }) => {\n  const [isCollecting, setIsCollecting] = useState(false)\n  const { t } = useTranslation()\n  const pointCenterContract = usePointCenterIfoContract()\n  const { toastError, toastSuccess } = useToast()\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const handleCollectPoints = async () => {\n    const tx = await callWithGasPrice(pointCenterContract, 'getPoints', [achievement.address])\n    setIsCollecting(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      setIsCollecting(false)\n      onCollectSuccess(achievement)\n      toastSuccess(t('Points Collected!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsCollecting(false)\n    }\n  }\n\n  return (\n    <StyledAchievementRow>\n      <AchievementAvatar badge={achievement.badge} />\n      <Body>\n        <Details>\n          <AchievementTitle title={achievement.title} />\n          <AchievementDescription description={achievement.description} />\n        </Details>\n        <PointsLabel points={achievement.points} px={[0, null, null, '32px']} mb={['16px', null, null, 0]} />\n        <ActionColumn>\n          <Button\n            onClick={handleCollectPoints}\n            isLoading={isCollecting}\n            endIcon={isCollecting ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n            disabled={isCollecting}\n            variant=\"secondary\"\n          >\n            {t('Collect')}\n          </Button>\n        </ActionColumn>\n      </Body>\n    </StyledAchievementRow>\n  )\n}\n\nexport default AchievementRow\n"]},"metadata":{},"sourceType":"module"}