{"ast":null,"code":"import BigNumber from'bignumber.js';import{BLOCKS_PER_YEAR,CAKE_PER_YEAR}from'config';import lpAprs from'config/constants/lpAprs.json';/**\n * Get the APR value in %\n * @param stakingTokenPrice Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of stakingToken in the pool\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\n * @returns Null if the APR is NaN or infinite.\n */export var getPoolApr=function getPoolApr(stakingTokenPrice,rewardTokenPrice,totalStaked,tokenPerBlock){var totalRewardPricePerYear=new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR);var totalStakingTokenInPool=new BigNumber(stakingTokenPrice).times(totalStaked);var apr=totalRewardPricePerYear.div(totalStakingTokenInPool).times(100);return apr.isNaN()||!apr.isFinite()?null:apr.toNumber();};/**\n * Get farm APR value in %\n * @param poolWeight allocationPoint / totalAllocationPoint\n * @param cakePriceUsd Cake price in USD\n * @param poolLiquidityUsd Total pool liquidity in USD\n * @param farmAddress Farm Address\n * @returns Farm Apr\n */export var getFarmApr=function getFarmApr(poolWeight,cakePriceUsd,poolLiquidityUsd,farmAddress){var _lpAprs$farmAddress$t;var yearlyCakeRewardAllocation=poolWeight?poolWeight.times(CAKE_PER_YEAR):new BigNumber(NaN);var cakeRewardsApr=yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100);var cakeRewardsAprAsNumber=null;if(!cakeRewardsApr.isNaN()&&cakeRewardsApr.isFinite()){cakeRewardsAprAsNumber=cakeRewardsApr.toNumber();}var lpRewardsApr=(_lpAprs$farmAddress$t=lpAprs[farmAddress===null||farmAddress===void 0?void 0:farmAddress.toLocaleLowerCase()])!==null&&_lpAprs$farmAddress$t!==void 0?_lpAprs$farmAddress$t:0;return{cakeRewardsApr:cakeRewardsAprAsNumber,lpRewardsApr:lpRewardsApr};};export default null;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/utils/apr.ts"],"names":["BigNumber","BLOCKS_PER_YEAR","CAKE_PER_YEAR","lpAprs","getPoolApr","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","times","totalStakingTokenInPool","apr","div","isNaN","isFinite","toNumber","getFarmApr","poolWeight","cakePriceUsd","poolLiquidityUsd","farmAddress","yearlyCakeRewardAllocation","NaN","cakeRewardsApr","cakeRewardsAprAsNumber","lpRewardsApr","toLocaleLowerCase"],"mappings":"AAAA,MAAOA,CAAAA,SAAP,KAAsB,cAAtB,CACA,OAASC,eAAT,CAA0BC,aAA1B,KAA+C,QAA/C,CACA,MAAOC,CAAAA,MAAP,KAAmB,8BAAnB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CACxBC,iBADwB,CAExBC,gBAFwB,CAGxBC,WAHwB,CAIxBC,aAJwB,CAKb,CACX,GAAMC,CAAAA,uBAAuB,CAAG,GAAIT,CAAAA,SAAJ,CAAcM,gBAAd,EAAgCI,KAAhC,CAAsCF,aAAtC,EAAqDE,KAArD,CAA2DT,eAA3D,CAAhC,CACA,GAAMU,CAAAA,uBAAuB,CAAG,GAAIX,CAAAA,SAAJ,CAAcK,iBAAd,EAAiCK,KAAjC,CAAuCH,WAAvC,CAAhC,CACA,GAAMK,CAAAA,GAAG,CAAGH,uBAAuB,CAACI,GAAxB,CAA4BF,uBAA5B,EAAqDD,KAArD,CAA2D,GAA3D,CAAZ,CACA,MAAOE,CAAAA,GAAG,CAACE,KAAJ,IAAe,CAACF,GAAG,CAACG,QAAJ,EAAhB,CAAiC,IAAjC,CAAwCH,GAAG,CAACI,QAAJ,EAA/C,CACD,CAVM,CAYP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CACxBC,UADwB,CAExBC,YAFwB,CAGxBC,gBAHwB,CAIxBC,WAJwB,CAK6B,2BACrD,GAAMC,CAAAA,0BAA0B,CAAGJ,UAAU,CAAGA,UAAU,CAACR,KAAX,CAAiBR,aAAjB,CAAH,CAAqC,GAAIF,CAAAA,SAAJ,CAAcuB,GAAd,CAAlF,CACA,GAAMC,CAAAA,cAAc,CAAGF,0BAA0B,CAACZ,KAA3B,CAAiCS,YAAjC,EAA+CN,GAA/C,CAAmDO,gBAAnD,EAAqEV,KAArE,CAA2E,GAA3E,CAAvB,CACA,GAAIe,CAAAA,sBAAsB,CAAG,IAA7B,CACA,GAAI,CAACD,cAAc,CAACV,KAAf,EAAD,EAA2BU,cAAc,CAACT,QAAf,EAA/B,CAA0D,CACxDU,sBAAsB,CAAGD,cAAc,CAACR,QAAf,EAAzB,CACD,CACD,GAAMU,CAAAA,YAAY,wBAAGvB,MAAM,CAACkB,WAAD,SAACA,WAAD,iBAACA,WAAW,CAAEM,iBAAb,EAAD,CAAT,+DAA+C,CAAjE,CACA,MAAO,CAAEH,cAAc,CAAEC,sBAAlB,CAA0CC,YAAY,CAAZA,YAA1C,CAAP,CACD,CAdM,CAgBP,cAAe,KAAf","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { BLOCKS_PER_YEAR, CAKE_PER_YEAR } from 'config'\nimport lpAprs from 'config/constants/lpAprs.json'\n\n/**\n * Get the APR value in %\n * @param stakingTokenPrice Token price in the same quote currency\n * @param rewardTokenPrice Token price in the same quote currency\n * @param totalStaked Total amount of stakingToken in the pool\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\n * @returns Null if the APR is NaN or infinite.\n */\nexport const getPoolApr = (\n  stakingTokenPrice: number,\n  rewardTokenPrice: number,\n  totalStaked: number,\n  tokenPerBlock: number,\n): number => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\n}\n\n/**\n * Get farm APR value in %\n * @param poolWeight allocationPoint / totalAllocationPoint\n * @param cakePriceUsd Cake price in USD\n * @param poolLiquidityUsd Total pool liquidity in USD\n * @param farmAddress Farm Address\n * @returns Farm Apr\n */\nexport const getFarmApr = (\n  poolWeight: BigNumber,\n  cakePriceUsd: BigNumber,\n  poolLiquidityUsd: BigNumber,\n  farmAddress: string,\n): { cakeRewardsApr: number; lpRewardsApr: number } => {\n  const yearlyCakeRewardAllocation = poolWeight ? poolWeight.times(CAKE_PER_YEAR) : new BigNumber(NaN)\n  const cakeRewardsApr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\n  let cakeRewardsAprAsNumber = null\n  if (!cakeRewardsApr.isNaN() && cakeRewardsApr.isFinite()) {\n    cakeRewardsAprAsNumber = cakeRewardsApr.toNumber()\n  }\n  const lpRewardsApr = lpAprs[farmAddress?.toLocaleLowerCase()] ?? 0\n  return { cakeRewardsApr: cakeRewardsAprAsNumber, lpRewardsApr }\n}\n\nexport default null\n"]},"metadata":{},"sourceType":"module"}