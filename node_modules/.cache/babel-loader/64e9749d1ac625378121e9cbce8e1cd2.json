{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Lottery/components/BuyTicketsModal/BuyTicketsModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useMemo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport BigNumber from 'bignumber.js';\nimport { ethers } from 'ethers';\nimport { Modal, Text, Flex, HelpIcon, BalanceInput, Ticket, useTooltip, Skeleton, Button, ArrowForwardIcon } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useWeb3React } from '@web3-react/core';\nimport tokens from 'config/constants/tokens';\nimport { getFullDisplayBalance } from 'utils/formatBalance';\nimport { BIG_ZERO, ethersToBigNumber } from 'utils/bigNumber';\nimport { useAppDispatch } from 'state';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport { useLottery } from 'state/lottery/hooks';\nimport { fetchUserTicketsAndLotteries } from 'state/lottery';\nimport useTheme from 'hooks/useTheme';\nimport useTokenBalance, { FetchStatus } from 'hooks/useTokenBalance';\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction';\nimport { useCake, useLotteryV2Contract } from 'hooks/useContract';\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice';\nimport useToast from 'hooks/useToast';\nimport ConnectWalletButton from 'components/ConnectWalletButton';\nimport { ToastDescriptionWithTx } from 'components/Toast';\nimport ApproveConfirmButtons, { ButtonArrangement } from 'components/ApproveConfirmButtons';\nimport NumTicketsToBuyButton from './NumTicketsToBuyButton';\nimport EditNumbersModal from './EditNumbersModal';\nimport { useTicketsReducer } from './useTicketsReducer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledModal = styled(Modal)`\n  min-width: 280px;\n  max-width: 320px;\n`;\n_c = StyledModal;\nconst ShortcutButtonsWrapper = styled(Flex)`\n  justify-content: space-between;\n  margin-top: 8px;\n  margin-bottom: 24px;\n  display: ${({\n  isVisible\n}) => isVisible ? 'flex' : 'none'};\n`;\n_c2 = ShortcutButtonsWrapper;\nvar BuyingStage;\n\n(function (BuyingStage) {\n  BuyingStage[\"BUY\"] = \"Buy\";\n  BuyingStage[\"EDIT\"] = \"Edit\";\n})(BuyingStage || (BuyingStage = {}));\n\nconst BuyTicketsModal = ({\n  onDismiss\n}) => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const {\n    t\n  } = useTranslation();\n  const {\n    theme\n  } = useTheme();\n  const {\n    maxNumberTicketsPerBuyOrClaim,\n    currentLotteryId,\n    currentRound: {\n      priceTicketInCake,\n      discountDivisor,\n      userTickets: {\n        tickets: userCurrentTickets\n      }\n    }\n  } = useLottery();\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n  const [ticketsToBuy, setTicketsToBuy] = useState('');\n  const [discountValue, setDiscountValue] = useState('');\n  const [totalCost, setTotalCost] = useState('');\n  const [ticketCostBeforeDiscount, setTicketCostBeforeDiscount] = useState('');\n  const [buyingStage, setBuyingStage] = useState(BuyingStage.BUY);\n  const [maxPossibleTicketPurchase, setMaxPossibleTicketPurchase] = useState(BIG_ZERO);\n  const [maxTicketPurchaseExceeded, setMaxTicketPurchaseExceeded] = useState(false);\n  const [userNotEnoughCake, setUserNotEnoughCake] = useState(false);\n  const lotteryContract = useLotteryV2Contract();\n  const cakeContract = useCake();\n  const {\n    toastSuccess\n  } = useToast();\n  const {\n    balance: userCake,\n    fetchStatus\n  } = useTokenBalance(tokens.cake.address); // balance from useTokenBalance causes rerenders in effects as a new BigNumber is instantiated on each render, hence memoising it using the stringified value below.\n\n  const stringifiedUserCake = userCake.toJSON();\n  const memoisedUserCake = useMemo(() => new BigNumber(stringifiedUserCake), [stringifiedUserCake]);\n  const cakePriceBusd = usePriceCakeBusd();\n  const dispatch = useAppDispatch();\n  const hasFetchedBalance = fetchStatus === FetchStatus.SUCCESS;\n  const userCakeDisplayBalance = getFullDisplayBalance(userCake, 18, 3);\n\n  const TooltipComponent = () => /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      mb: \"16px\",\n      children: t('Buying multiple tickets in a single transaction gives a discount. The discount increases in a linear way, up to the maximum of 100 tickets:')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: t('2 tickets: 0.05%')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: t('50 tickets: 2.45%')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      children: t('100 tickets: 4.95%')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n\n  const {\n    targetRef,\n    tooltip,\n    tooltipVisible\n  } = useTooltip( /*#__PURE__*/_jsxDEV(TooltipComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 61\n  }, this), {\n    placement: 'bottom-end',\n    tooltipOffset: [20, 10]\n  });\n  const limitNumberByMaxTicketsPerBuy = useCallback(number => {\n    return number.gt(maxNumberTicketsPerBuyOrClaim) ? maxNumberTicketsPerBuyOrClaim : number;\n  }, [maxNumberTicketsPerBuyOrClaim]);\n  const getTicketCostAfterDiscount = useCallback(numberTickets => {\n    const totalAfterDiscount = priceTicketInCake.times(numberTickets).times(discountDivisor.plus(1).minus(numberTickets)).div(discountDivisor);\n    return totalAfterDiscount;\n  }, [discountDivisor, priceTicketInCake]);\n  const getMaxTicketBuyWithDiscount = useCallback(numberTickets => {\n    const costAfterDiscount = getTicketCostAfterDiscount(numberTickets);\n    const costBeforeDiscount = priceTicketInCake.times(numberTickets);\n    const discountAmount = costBeforeDiscount.minus(costAfterDiscount);\n    const ticketsBoughtWithDiscount = discountAmount.div(priceTicketInCake);\n    const overallTicketBuy = numberTickets.plus(ticketsBoughtWithDiscount);\n    return {\n      overallTicketBuy,\n      ticketsBoughtWithDiscount\n    };\n  }, [getTicketCostAfterDiscount, priceTicketInCake]);\n  const validateInput = useCallback(inputNumber => {\n    const limitedNumberTickets = limitNumberByMaxTicketsPerBuy(inputNumber);\n    const cakeCostAfterDiscount = getTicketCostAfterDiscount(limitedNumberTickets);\n\n    if (cakeCostAfterDiscount.gt(userCake)) {\n      setUserNotEnoughCake(true);\n    } else if (limitedNumberTickets.eq(maxNumberTicketsPerBuyOrClaim)) {\n      setMaxTicketPurchaseExceeded(true);\n    } else {\n      setUserNotEnoughCake(false);\n      setMaxTicketPurchaseExceeded(false);\n    }\n  }, [limitNumberByMaxTicketsPerBuy, getTicketCostAfterDiscount, maxNumberTicketsPerBuyOrClaim, userCake]);\n  useEffect(() => {\n    const getMaxPossiblePurchase = () => {\n      const maxBalancePurchase = memoisedUserCake.div(priceTicketInCake);\n      const limitedMaxPurchase = limitNumberByMaxTicketsPerBuy(maxBalancePurchase);\n      let maxPurchase; // If the users' max CAKE balance purchase is less than the contract limit - factor the discount logic into the max number of tickets they can purchase\n\n      if (limitedMaxPurchase.lt(maxNumberTicketsPerBuyOrClaim)) {\n        // Get max tickets purchasable with the users' balance, as well as using the discount to buy tickets\n        const {\n          overallTicketBuy: maxPlusDiscountTickets\n        } = getMaxTicketBuyWithDiscount(limitedMaxPurchase); // Knowing how many tickets they can buy when counting the discount - plug that total in, and see how much that total will get discounted\n\n        const {\n          ticketsBoughtWithDiscount: secondTicketDiscountBuy\n        } = getMaxTicketBuyWithDiscount(maxPlusDiscountTickets); // Add the additional tickets that can be bought with the discount, to the original max purchase\n\n        maxPurchase = limitedMaxPurchase.plus(secondTicketDiscountBuy);\n      } else {\n        maxPurchase = limitedMaxPurchase;\n      }\n\n      if (hasFetchedBalance && maxPurchase.lt(1)) {\n        setUserNotEnoughCake(true);\n      } else {\n        setUserNotEnoughCake(false);\n      }\n\n      setMaxPossibleTicketPurchase(maxPurchase);\n    };\n\n    getMaxPossiblePurchase();\n  }, [maxNumberTicketsPerBuyOrClaim, priceTicketInCake, memoisedUserCake, limitNumberByMaxTicketsPerBuy, getTicketCostAfterDiscount, getMaxTicketBuyWithDiscount, hasFetchedBalance]);\n  useEffect(() => {\n    const numberOfTicketsToBuy = new BigNumber(ticketsToBuy);\n    const costAfterDiscount = getTicketCostAfterDiscount(numberOfTicketsToBuy);\n    const costBeforeDiscount = priceTicketInCake.times(numberOfTicketsToBuy);\n    const discountBeingApplied = costBeforeDiscount.minus(costAfterDiscount);\n    setTicketCostBeforeDiscount(costBeforeDiscount.gt(0) ? getFullDisplayBalance(costBeforeDiscount) : '0');\n    setTotalCost(costAfterDiscount.gt(0) ? getFullDisplayBalance(costAfterDiscount) : '0');\n    setDiscountValue(discountBeingApplied.gt(0) ? getFullDisplayBalance(discountBeingApplied, 18, 5) : '0');\n  }, [ticketsToBuy, priceTicketInCake, discountDivisor, getTicketCostAfterDiscount]);\n\n  const getNumTicketsByPercentage = percentage => {\n    const percentageOfMaxTickets = maxPossibleTicketPurchase.gt(0) ? maxPossibleTicketPurchase.div(new BigNumber(100)).times(new BigNumber(percentage)) : BIG_ZERO;\n    return Math.floor(percentageOfMaxTickets.toNumber());\n  };\n\n  const tenPercentOfBalance = getNumTicketsByPercentage(10);\n  const twentyFivePercentOfBalance = getNumTicketsByPercentage(25);\n  const fiftyPercentOfBalance = getNumTicketsByPercentage(50);\n  const oneHundredPercentOfBalance = getNumTicketsByPercentage(100);\n\n  const handleInputChange = input => {\n    // Force input to integer\n    const inputAsInt = parseInt(input, 10);\n    const inputAsBN = new BigNumber(inputAsInt);\n    const limitedNumberTickets = limitNumberByMaxTicketsPerBuy(inputAsBN);\n    validateInput(inputAsBN);\n    setTicketsToBuy(inputAsInt ? limitedNumberTickets.toString() : '');\n  };\n\n  const handleNumberButtonClick = number => {\n    setTicketsToBuy(number.toFixed());\n    setUserNotEnoughCake(false);\n    setMaxTicketPurchaseExceeded(false);\n  };\n\n  const [updateTicket, randomize, tickets, allComplete, getTicketsForPurchase] = useTicketsReducer(parseInt(ticketsToBuy, 10), userCurrentTickets);\n  const {\n    isApproving,\n    isApproved,\n    isConfirmed,\n    isConfirming,\n    handleApprove,\n    handleConfirm\n  } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      try {\n        const response = await cakeContract.allowance(account, lotteryContract.address);\n        const currentAllowance = ethersToBigNumber(response);\n        return currentAllowance.gt(0);\n      } catch (error) {\n        return false;\n      }\n    },\n    onApprove: () => {\n      return callWithGasPrice(cakeContract, 'approve', [lotteryContract.address, ethers.constants.MaxUint256]);\n    },\n    onApproveSuccess: async ({\n      receipt\n    }) => {\n      toastSuccess(t('Contract enabled - you can now purchase tickets'), /*#__PURE__*/_jsxDEV(ToastDescriptionWithTx, {\n        txHash: receipt.transactionHash\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this));\n    },\n    onConfirm: () => {\n      const ticketsForPurchase = getTicketsForPurchase();\n      return callWithGasPrice(lotteryContract, 'buyTickets', [currentLotteryId, ticketsForPurchase]);\n    },\n    onSuccess: async ({\n      receipt\n    }) => {\n      onDismiss();\n      dispatch(fetchUserTicketsAndLotteries({\n        account,\n        currentLotteryId\n      }));\n      toastSuccess(t('Lottery tickets purchased!'), /*#__PURE__*/_jsxDEV(ToastDescriptionWithTx, {\n        txHash: receipt.transactionHash\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 55\n      }, this));\n    }\n  });\n\n  const getErrorMessage = () => {\n    if (userNotEnoughCake) return t('Insufficient CAKE balance');\n    return t('The maximum number of tickets you can buy in one transaction is %maxTickets%', {\n      maxTickets: maxNumberTicketsPerBuyOrClaim.toString()\n    });\n  };\n\n  const percentageDiscount = () => {\n    const percentageAsBn = new BigNumber(discountValue).div(new BigNumber(ticketCostBeforeDiscount)).times(100);\n\n    if (percentageAsBn.isNaN() || percentageAsBn.eq(0)) {\n      return 0;\n    }\n\n    return percentageAsBn.toNumber().toFixed(2);\n  };\n\n  const disableBuying = !isApproved || isConfirmed || userNotEnoughCake || !ticketsToBuy || new BigNumber(ticketsToBuy).lte(0) || getTicketsForPurchase().length !== parseInt(ticketsToBuy, 10);\n\n  if (buyingStage === BuyingStage.EDIT) {\n    return /*#__PURE__*/_jsxDEV(EditNumbersModal, {\n      totalCost: totalCost,\n      updateTicket: updateTicket,\n      randomize: randomize,\n      tickets: tickets,\n      allComplete: allComplete,\n      onConfirm: handleConfirm,\n      isConfirming: isConfirming,\n      onDismiss: () => setBuyingStage(BuyingStage.BUY)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(StyledModal, {\n    title: t('Buy Tickets'),\n    onDismiss: onDismiss,\n    headerBackground: theme.colors.gradients.cardHeader,\n    children: [tooltipVisible && tooltip, /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      mb: \"8px\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        color: \"textSubtle\",\n        children: [t('Buy'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        minWidth: \"70px\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          mr: \"4px\",\n          bold: true,\n          children: t('Tickets')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Ticket, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BalanceInput, {\n      isWarning: account && (userNotEnoughCake || maxTicketPurchaseExceeded),\n      placeholder: \"0\",\n      value: ticketsToBuy,\n      onUserInput: handleInputChange,\n      currencyValue: cakePriceBusd.gt(0) && `~${ticketsToBuy ? getFullDisplayBalance(priceTicketInCake.times(new BigNumber(ticketsToBuy))) : '0.00'} CAKE`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      mt: \"4px\",\n      mb: \"12px\",\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"flex-end\",\n        flexDirection: \"column\",\n        children: [account && (userNotEnoughCake || maxTicketPurchaseExceeded) && /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"12px\",\n          color: \"failure\",\n          children: getErrorMessage()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this), account && /*#__PURE__*/_jsxDEV(Flex, {\n          justifyContent: \"flex-end\",\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"12px\",\n            color: \"textSubtle\",\n            mr: \"4px\",\n            children: [\"CAKE \", t('Balance'), \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 15\n          }, this), hasFetchedBalance ? /*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"12px\",\n            color: \"textSubtle\",\n            children: userCakeDisplayBalance\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n            width: 50,\n            height: 12\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 7\n    }, this), account && !hasFetchedBalance ? /*#__PURE__*/_jsxDEV(Skeleton, {\n      width: \"100%\",\n      height: 20,\n      mt: \"8px\",\n      mb: \"24px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ShortcutButtonsWrapper, {\n      isVisible: account && hasFetchedBalance && oneHundredPercentOfBalance >= 1,\n      children: [tenPercentOfBalance >= 1 && /*#__PURE__*/_jsxDEV(NumTicketsToBuyButton, {\n        onClick: () => handleNumberButtonClick(tenPercentOfBalance),\n        children: hasFetchedBalance ? tenPercentOfBalance : ``\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 13\n      }, this), twentyFivePercentOfBalance >= 1 && /*#__PURE__*/_jsxDEV(NumTicketsToBuyButton, {\n        onClick: () => handleNumberButtonClick(twentyFivePercentOfBalance),\n        children: hasFetchedBalance ? twentyFivePercentOfBalance : ``\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 13\n      }, this), fiftyPercentOfBalance >= 1 && /*#__PURE__*/_jsxDEV(NumTicketsToBuyButton, {\n        onClick: () => handleNumberButtonClick(fiftyPercentOfBalance),\n        children: hasFetchedBalance ? fiftyPercentOfBalance : ``\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 13\n      }, this), oneHundredPercentOfBalance >= 1 && /*#__PURE__*/_jsxDEV(NumTicketsToBuyButton, {\n        onClick: () => handleNumberButtonClick(oneHundredPercentOfBalance),\n        children: \"MAX\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        mb: \"8px\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          color: \"textSubtle\",\n          fontSize: \"14px\",\n          children: [t('Cost'), \" (CAKE)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          color: \"textSubtle\",\n          fontSize: \"14px\",\n          children: [priceTicketInCake && getFullDisplayBalance(priceTicketInCake.times(ticketsToBuy || 0)), \" CAKE\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        mb: \"8px\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Flex, {\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            display: \"inline\",\n            bold: true,\n            fontSize: \"14px\",\n            mr: \"4px\",\n            children: [discountValue && totalCost ? percentageDiscount() : 0, \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            display: \"inline\",\n            color: \"textSubtle\",\n            fontSize: \"14px\",\n            children: t('Bulk discount')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Flex, {\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            ref: targetRef,\n            children: /*#__PURE__*/_jsxDEV(HelpIcon, {\n              ml: \"4px\",\n              width: \"14px\",\n              height: \"14px\",\n              color: \"textSubtle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          color: \"textSubtle\",\n          children: [\"~\", discountValue, \" CAKE\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        borderTop: `1px solid ${theme.colors.cardBorder}`,\n        pt: \"8px\",\n        mb: \"24px\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          color: \"textSubtle\",\n          fontSize: \"16px\",\n          children: t('You pay')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"16px\",\n          bold: true,\n          children: [\"~\", totalCost, \" CAKE\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this), account ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ApproveConfirmButtons, {\n          isApproveDisabled: isApproved,\n          isApproving: isApproving,\n          isConfirmDisabled: disableBuying,\n          isConfirming: isConfirming,\n          onApprove: handleApprove,\n          onConfirm: handleConfirm,\n          buttonArrangement: ButtonArrangement.SEQUENTIAL,\n          confirmLabel: t('Buy Instantly'),\n          confirmId: \"lotteryBuyInstant\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 13\n        }, this), isApproved && /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          mt: \"8px\",\n          endIcon: /*#__PURE__*/_jsxDEV(ArrowForwardIcon, {\n            ml: \"2px\",\n            color: disableBuying || isConfirming ? 'disabled' : 'primary',\n            height: \"24px\",\n            width: \"24px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 19\n          }, this),\n          disabled: disableBuying || isConfirming,\n          onClick: () => {\n            setBuyingStage(BuyingStage.EDIT);\n          },\n          children: t('View/Edit Numbers')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(ConnectWalletButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        mt: \"24px\",\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        children: t('\"Buy Instantly\" chooses random numbers, with no duplicates among your tickets. Prices are set before each round starts, equal to $5 at that time. Purchases are final.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 311,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BuyTicketsModal, \"/xkNqAsirlAd5GmUGPacwyeANDs=\", false, function () {\n  return [useWeb3React, useTranslation, useTheme, useLottery, useCallWithGasPrice, useLotteryV2Contract, useCake, useToast, useTokenBalance, usePriceCakeBusd, useAppDispatch, useTooltip, useTicketsReducer, useApproveConfirmTransaction];\n});\n\n_c3 = BuyTicketsModal;\nexport default BuyTicketsModal;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledModal\");\n$RefreshReg$(_c2, \"ShortcutButtonsWrapper\");\n$RefreshReg$(_c3, \"BuyTicketsModal\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Lottery/components/BuyTicketsModal/BuyTicketsModal.tsx"],"names":["React","useEffect","useState","useMemo","useCallback","styled","BigNumber","ethers","Modal","Text","Flex","HelpIcon","BalanceInput","Ticket","useTooltip","Skeleton","Button","ArrowForwardIcon","useTranslation","useWeb3React","tokens","getFullDisplayBalance","BIG_ZERO","ethersToBigNumber","useAppDispatch","usePriceCakeBusd","useLottery","fetchUserTicketsAndLotteries","useTheme","useTokenBalance","FetchStatus","useApproveConfirmTransaction","useCake","useLotteryV2Contract","useCallWithGasPrice","useToast","ConnectWalletButton","ToastDescriptionWithTx","ApproveConfirmButtons","ButtonArrangement","NumTicketsToBuyButton","EditNumbersModal","useTicketsReducer","StyledModal","ShortcutButtonsWrapper","isVisible","BuyingStage","BuyTicketsModal","onDismiss","account","t","theme","maxNumberTicketsPerBuyOrClaim","currentLotteryId","currentRound","priceTicketInCake","discountDivisor","userTickets","tickets","userCurrentTickets","callWithGasPrice","ticketsToBuy","setTicketsToBuy","discountValue","setDiscountValue","totalCost","setTotalCost","ticketCostBeforeDiscount","setTicketCostBeforeDiscount","buyingStage","setBuyingStage","BUY","maxPossibleTicketPurchase","setMaxPossibleTicketPurchase","maxTicketPurchaseExceeded","setMaxTicketPurchaseExceeded","userNotEnoughCake","setUserNotEnoughCake","lotteryContract","cakeContract","toastSuccess","balance","userCake","fetchStatus","cake","address","stringifiedUserCake","toJSON","memoisedUserCake","cakePriceBusd","dispatch","hasFetchedBalance","SUCCESS","userCakeDisplayBalance","TooltipComponent","targetRef","tooltip","tooltipVisible","placement","tooltipOffset","limitNumberByMaxTicketsPerBuy","number","gt","getTicketCostAfterDiscount","numberTickets","totalAfterDiscount","times","plus","minus","div","getMaxTicketBuyWithDiscount","costAfterDiscount","costBeforeDiscount","discountAmount","ticketsBoughtWithDiscount","overallTicketBuy","validateInput","inputNumber","limitedNumberTickets","cakeCostAfterDiscount","eq","getMaxPossiblePurchase","maxBalancePurchase","limitedMaxPurchase","maxPurchase","lt","maxPlusDiscountTickets","secondTicketDiscountBuy","numberOfTicketsToBuy","discountBeingApplied","getNumTicketsByPercentage","percentage","percentageOfMaxTickets","Math","floor","toNumber","tenPercentOfBalance","twentyFivePercentOfBalance","fiftyPercentOfBalance","oneHundredPercentOfBalance","handleInputChange","input","inputAsInt","parseInt","inputAsBN","toString","handleNumberButtonClick","toFixed","updateTicket","randomize","allComplete","getTicketsForPurchase","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","onRequiresApproval","response","allowance","currentAllowance","error","onApprove","constants","MaxUint256","onApproveSuccess","receipt","transactionHash","onConfirm","ticketsForPurchase","onSuccess","getErrorMessage","maxTickets","percentageDiscount","percentageAsBn","isNaN","disableBuying","lte","length","EDIT","colors","gradients","cardHeader","cardBorder","SEQUENTIAL"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useMemo, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\nimport {\n  Modal,\n  Text,\n  Flex,\n  HelpIcon,\n  BalanceInput,\n  Ticket,\n  useTooltip,\n  Skeleton,\n  Button,\n  ArrowForwardIcon,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport tokens from 'config/constants/tokens'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport { BIG_ZERO, ethersToBigNumber } from 'utils/bigNumber'\nimport { useAppDispatch } from 'state'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useLottery } from 'state/lottery/hooks'\nimport { fetchUserTicketsAndLotteries } from 'state/lottery'\nimport useTheme from 'hooks/useTheme'\nimport useTokenBalance, { FetchStatus } from 'hooks/useTokenBalance'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useCake, useLotteryV2Contract } from 'hooks/useContract'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport useToast from 'hooks/useToast'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport ApproveConfirmButtons, { ButtonArrangement } from 'components/ApproveConfirmButtons'\nimport NumTicketsToBuyButton from './NumTicketsToBuyButton'\nimport EditNumbersModal from './EditNumbersModal'\nimport { useTicketsReducer } from './useTicketsReducer'\n\nconst StyledModal = styled(Modal)`\n  min-width: 280px;\n  max-width: 320px;\n`\n\nconst ShortcutButtonsWrapper = styled(Flex)<{ isVisible: boolean }>`\n  justify-content: space-between;\n  margin-top: 8px;\n  margin-bottom: 24px;\n  display: ${({ isVisible }) => (isVisible ? 'flex' : 'none')};\n`\n\ninterface BuyTicketsModalProps {\n  onDismiss?: () => void\n}\n\nenum BuyingStage {\n  BUY = 'Buy',\n  EDIT = 'Edit',\n}\n\nconst BuyTicketsModal: React.FC<BuyTicketsModalProps> = ({ onDismiss }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const {\n    maxNumberTicketsPerBuyOrClaim,\n    currentLotteryId,\n    currentRound: {\n      priceTicketInCake,\n      discountDivisor,\n      userTickets: { tickets: userCurrentTickets },\n    },\n  } = useLottery()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const [ticketsToBuy, setTicketsToBuy] = useState('')\n  const [discountValue, setDiscountValue] = useState('')\n  const [totalCost, setTotalCost] = useState('')\n  const [ticketCostBeforeDiscount, setTicketCostBeforeDiscount] = useState('')\n  const [buyingStage, setBuyingStage] = useState<BuyingStage>(BuyingStage.BUY)\n  const [maxPossibleTicketPurchase, setMaxPossibleTicketPurchase] = useState(BIG_ZERO)\n  const [maxTicketPurchaseExceeded, setMaxTicketPurchaseExceeded] = useState(false)\n  const [userNotEnoughCake, setUserNotEnoughCake] = useState(false)\n  const lotteryContract = useLotteryV2Contract()\n  const cakeContract = useCake()\n  const { toastSuccess } = useToast()\n  const { balance: userCake, fetchStatus } = useTokenBalance(tokens.cake.address)\n  // balance from useTokenBalance causes rerenders in effects as a new BigNumber is instantiated on each render, hence memoising it using the stringified value below.\n  const stringifiedUserCake = userCake.toJSON()\n  const memoisedUserCake = useMemo(() => new BigNumber(stringifiedUserCake), [stringifiedUserCake])\n\n  const cakePriceBusd = usePriceCakeBusd()\n  const dispatch = useAppDispatch()\n  const hasFetchedBalance = fetchStatus === FetchStatus.SUCCESS\n  const userCakeDisplayBalance = getFullDisplayBalance(userCake, 18, 3)\n\n  const TooltipComponent = () => (\n    <>\n      <Text mb=\"16px\">\n        {t(\n          'Buying multiple tickets in a single transaction gives a discount. The discount increases in a linear way, up to the maximum of 100 tickets:',\n        )}\n      </Text>\n      <Text>{t('2 tickets: 0.05%')}</Text>\n      <Text>{t('50 tickets: 2.45%')}</Text>\n      <Text>{t('100 tickets: 4.95%')}</Text>\n    </>\n  )\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(<TooltipComponent />, {\n    placement: 'bottom-end',\n    tooltipOffset: [20, 10],\n  })\n\n  const limitNumberByMaxTicketsPerBuy = useCallback(\n    (number: BigNumber) => {\n      return number.gt(maxNumberTicketsPerBuyOrClaim) ? maxNumberTicketsPerBuyOrClaim : number\n    },\n    [maxNumberTicketsPerBuyOrClaim],\n  )\n\n  const getTicketCostAfterDiscount = useCallback(\n    (numberTickets: BigNumber) => {\n      const totalAfterDiscount = priceTicketInCake\n        .times(numberTickets)\n        .times(discountDivisor.plus(1).minus(numberTickets))\n        .div(discountDivisor)\n      return totalAfterDiscount\n    },\n    [discountDivisor, priceTicketInCake],\n  )\n\n  const getMaxTicketBuyWithDiscount = useCallback(\n    (numberTickets: BigNumber) => {\n      const costAfterDiscount = getTicketCostAfterDiscount(numberTickets)\n      const costBeforeDiscount = priceTicketInCake.times(numberTickets)\n      const discountAmount = costBeforeDiscount.minus(costAfterDiscount)\n      const ticketsBoughtWithDiscount = discountAmount.div(priceTicketInCake)\n      const overallTicketBuy = numberTickets.plus(ticketsBoughtWithDiscount)\n      return { overallTicketBuy, ticketsBoughtWithDiscount }\n    },\n    [getTicketCostAfterDiscount, priceTicketInCake],\n  )\n\n  const validateInput = useCallback(\n    (inputNumber: BigNumber) => {\n      const limitedNumberTickets = limitNumberByMaxTicketsPerBuy(inputNumber)\n      const cakeCostAfterDiscount = getTicketCostAfterDiscount(limitedNumberTickets)\n\n      if (cakeCostAfterDiscount.gt(userCake)) {\n        setUserNotEnoughCake(true)\n      } else if (limitedNumberTickets.eq(maxNumberTicketsPerBuyOrClaim)) {\n        setMaxTicketPurchaseExceeded(true)\n      } else {\n        setUserNotEnoughCake(false)\n        setMaxTicketPurchaseExceeded(false)\n      }\n    },\n    [limitNumberByMaxTicketsPerBuy, getTicketCostAfterDiscount, maxNumberTicketsPerBuyOrClaim, userCake],\n  )\n\n  useEffect(() => {\n    const getMaxPossiblePurchase = () => {\n      const maxBalancePurchase = memoisedUserCake.div(priceTicketInCake)\n      const limitedMaxPurchase = limitNumberByMaxTicketsPerBuy(maxBalancePurchase)\n      let maxPurchase\n\n      // If the users' max CAKE balance purchase is less than the contract limit - factor the discount logic into the max number of tickets they can purchase\n      if (limitedMaxPurchase.lt(maxNumberTicketsPerBuyOrClaim)) {\n        // Get max tickets purchasable with the users' balance, as well as using the discount to buy tickets\n        const { overallTicketBuy: maxPlusDiscountTickets } = getMaxTicketBuyWithDiscount(limitedMaxPurchase)\n\n        // Knowing how many tickets they can buy when counting the discount - plug that total in, and see how much that total will get discounted\n        const { ticketsBoughtWithDiscount: secondTicketDiscountBuy } =\n          getMaxTicketBuyWithDiscount(maxPlusDiscountTickets)\n\n        // Add the additional tickets that can be bought with the discount, to the original max purchase\n        maxPurchase = limitedMaxPurchase.plus(secondTicketDiscountBuy)\n      } else {\n        maxPurchase = limitedMaxPurchase\n      }\n\n      if (hasFetchedBalance && maxPurchase.lt(1)) {\n        setUserNotEnoughCake(true)\n      } else {\n        setUserNotEnoughCake(false)\n      }\n\n      setMaxPossibleTicketPurchase(maxPurchase)\n    }\n    getMaxPossiblePurchase()\n  }, [\n    maxNumberTicketsPerBuyOrClaim,\n    priceTicketInCake,\n    memoisedUserCake,\n    limitNumberByMaxTicketsPerBuy,\n    getTicketCostAfterDiscount,\n    getMaxTicketBuyWithDiscount,\n    hasFetchedBalance,\n  ])\n\n  useEffect(() => {\n    const numberOfTicketsToBuy = new BigNumber(ticketsToBuy)\n    const costAfterDiscount = getTicketCostAfterDiscount(numberOfTicketsToBuy)\n    const costBeforeDiscount = priceTicketInCake.times(numberOfTicketsToBuy)\n    const discountBeingApplied = costBeforeDiscount.minus(costAfterDiscount)\n    setTicketCostBeforeDiscount(costBeforeDiscount.gt(0) ? getFullDisplayBalance(costBeforeDiscount) : '0')\n    setTotalCost(costAfterDiscount.gt(0) ? getFullDisplayBalance(costAfterDiscount) : '0')\n    setDiscountValue(discountBeingApplied.gt(0) ? getFullDisplayBalance(discountBeingApplied, 18, 5) : '0')\n  }, [ticketsToBuy, priceTicketInCake, discountDivisor, getTicketCostAfterDiscount])\n\n  const getNumTicketsByPercentage = (percentage: number): number => {\n    const percentageOfMaxTickets = maxPossibleTicketPurchase.gt(0)\n      ? maxPossibleTicketPurchase.div(new BigNumber(100)).times(new BigNumber(percentage))\n      : BIG_ZERO\n    return Math.floor(percentageOfMaxTickets.toNumber())\n  }\n\n  const tenPercentOfBalance = getNumTicketsByPercentage(10)\n  const twentyFivePercentOfBalance = getNumTicketsByPercentage(25)\n  const fiftyPercentOfBalance = getNumTicketsByPercentage(50)\n  const oneHundredPercentOfBalance = getNumTicketsByPercentage(100)\n\n  const handleInputChange = (input: string) => {\n    // Force input to integer\n    const inputAsInt = parseInt(input, 10)\n    const inputAsBN = new BigNumber(inputAsInt)\n    const limitedNumberTickets = limitNumberByMaxTicketsPerBuy(inputAsBN)\n    validateInput(inputAsBN)\n    setTicketsToBuy(inputAsInt ? limitedNumberTickets.toString() : '')\n  }\n\n  const handleNumberButtonClick = (number: number) => {\n    setTicketsToBuy(number.toFixed())\n    setUserNotEnoughCake(false)\n    setMaxTicketPurchaseExceeded(false)\n  }\n\n  const [updateTicket, randomize, tickets, allComplete, getTicketsForPurchase] = useTicketsReducer(\n    parseInt(ticketsToBuy, 10),\n    userCurrentTickets,\n  )\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        try {\n          const response = await cakeContract.allowance(account, lotteryContract.address)\n          const currentAllowance = ethersToBigNumber(response)\n          return currentAllowance.gt(0)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return callWithGasPrice(cakeContract, 'approve', [lotteryContract.address, ethers.constants.MaxUint256])\n      },\n      onApproveSuccess: async ({ receipt }) => {\n        toastSuccess(\n          t('Contract enabled - you can now purchase tickets'),\n          <ToastDescriptionWithTx txHash={receipt.transactionHash} />,\n        )\n      },\n      onConfirm: () => {\n        const ticketsForPurchase = getTicketsForPurchase()\n        return callWithGasPrice(lotteryContract, 'buyTickets', [currentLotteryId, ticketsForPurchase])\n      },\n      onSuccess: async ({ receipt }) => {\n        onDismiss()\n        dispatch(fetchUserTicketsAndLotteries({ account, currentLotteryId }))\n        toastSuccess(t('Lottery tickets purchased!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      },\n    })\n\n  const getErrorMessage = () => {\n    if (userNotEnoughCake) return t('Insufficient CAKE balance')\n    return t('The maximum number of tickets you can buy in one transaction is %maxTickets%', {\n      maxTickets: maxNumberTicketsPerBuyOrClaim.toString(),\n    })\n  }\n\n  const percentageDiscount = () => {\n    const percentageAsBn = new BigNumber(discountValue).div(new BigNumber(ticketCostBeforeDiscount)).times(100)\n    if (percentageAsBn.isNaN() || percentageAsBn.eq(0)) {\n      return 0\n    }\n    return percentageAsBn.toNumber().toFixed(2)\n  }\n\n  const disableBuying =\n    !isApproved ||\n    isConfirmed ||\n    userNotEnoughCake ||\n    !ticketsToBuy ||\n    new BigNumber(ticketsToBuy).lte(0) ||\n    getTicketsForPurchase().length !== parseInt(ticketsToBuy, 10)\n\n  if (buyingStage === BuyingStage.EDIT) {\n    return (\n      <EditNumbersModal\n        totalCost={totalCost}\n        updateTicket={updateTicket}\n        randomize={randomize}\n        tickets={tickets}\n        allComplete={allComplete}\n        onConfirm={handleConfirm}\n        isConfirming={isConfirming}\n        onDismiss={() => setBuyingStage(BuyingStage.BUY)}\n      />\n    )\n  }\n\n  return (\n    <StyledModal title={t('Buy Tickets')} onDismiss={onDismiss} headerBackground={theme.colors.gradients.cardHeader}>\n      {tooltipVisible && tooltip}\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text color=\"textSubtle\">{t('Buy')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Text mr=\"4px\" bold>\n            {t('Tickets')}\n          </Text>\n          <Ticket />\n        </Flex>\n      </Flex>\n      <BalanceInput\n        isWarning={account && (userNotEnoughCake || maxTicketPurchaseExceeded)}\n        placeholder=\"0\"\n        value={ticketsToBuy}\n        onUserInput={handleInputChange}\n        currencyValue={\n          cakePriceBusd.gt(0) &&\n          `~${ticketsToBuy ? getFullDisplayBalance(priceTicketInCake.times(new BigNumber(ticketsToBuy))) : '0.00'} CAKE`\n        }\n      />\n      <Flex alignItems=\"center\" justifyContent=\"flex-end\" mt=\"4px\" mb=\"12px\">\n        <Flex justifyContent=\"flex-end\" flexDirection=\"column\">\n          {account && (userNotEnoughCake || maxTicketPurchaseExceeded) && (\n            <Text fontSize=\"12px\" color=\"failure\">\n              {getErrorMessage()}\n            </Text>\n          )}\n          {account && (\n            <Flex justifyContent=\"flex-end\">\n              <Text fontSize=\"12px\" color=\"textSubtle\" mr=\"4px\">\n                CAKE {t('Balance')}:\n              </Text>\n              {hasFetchedBalance ? (\n                <Text fontSize=\"12px\" color=\"textSubtle\">\n                  {userCakeDisplayBalance}\n                </Text>\n              ) : (\n                <Skeleton width={50} height={12} />\n              )}\n            </Flex>\n          )}\n        </Flex>\n      </Flex>\n\n      {account && !hasFetchedBalance ? (\n        <Skeleton width=\"100%\" height={20} mt=\"8px\" mb=\"24px\" />\n      ) : (\n        <ShortcutButtonsWrapper isVisible={account && hasFetchedBalance && oneHundredPercentOfBalance >= 1}>\n          {tenPercentOfBalance >= 1 && (\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(tenPercentOfBalance)}>\n              {hasFetchedBalance ? tenPercentOfBalance : ``}\n            </NumTicketsToBuyButton>\n          )}\n          {twentyFivePercentOfBalance >= 1 && (\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(twentyFivePercentOfBalance)}>\n              {hasFetchedBalance ? twentyFivePercentOfBalance : ``}\n            </NumTicketsToBuyButton>\n          )}\n          {fiftyPercentOfBalance >= 1 && (\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(fiftyPercentOfBalance)}>\n              {hasFetchedBalance ? fiftyPercentOfBalance : ``}\n            </NumTicketsToBuyButton>\n          )}\n          {oneHundredPercentOfBalance >= 1 && (\n            <NumTicketsToBuyButton onClick={() => handleNumberButtonClick(oneHundredPercentOfBalance)}>\n              MAX\n            </NumTicketsToBuyButton>\n          )}\n        </ShortcutButtonsWrapper>\n      )}\n      <Flex flexDirection=\"column\">\n        <Flex mb=\"8px\" justifyContent=\"space-between\">\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {t('Cost')} (CAKE)\n          </Text>\n          <Text color=\"textSubtle\" fontSize=\"14px\">\n            {priceTicketInCake && getFullDisplayBalance(priceTicketInCake.times(ticketsToBuy || 0))} CAKE\n          </Text>\n        </Flex>\n        <Flex mb=\"8px\" justifyContent=\"space-between\">\n          <Flex>\n            <Text display=\"inline\" bold fontSize=\"14px\" mr=\"4px\">\n              {discountValue && totalCost ? percentageDiscount() : 0}%\n            </Text>\n            <Text display=\"inline\" color=\"textSubtle\" fontSize=\"14px\">\n              {t('Bulk discount')}\n            </Text>\n            <Flex alignItems=\"center\" justifyContent=\"center\" ref={targetRef}>\n              <HelpIcon ml=\"4px\" width=\"14px\" height=\"14px\" color=\"textSubtle\" />\n            </Flex>\n          </Flex>\n          <Text fontSize=\"14px\" color=\"textSubtle\">\n            ~{discountValue} CAKE\n          </Text>\n        </Flex>\n        <Flex borderTop={`1px solid ${theme.colors.cardBorder}`} pt=\"8px\" mb=\"24px\" justifyContent=\"space-between\">\n          <Text color=\"textSubtle\" fontSize=\"16px\">\n            {t('You pay')}\n          </Text>\n          <Text fontSize=\"16px\" bold>\n            ~{totalCost} CAKE\n          </Text>\n        </Flex>\n\n        {account ? (\n          <>\n            <ApproveConfirmButtons\n              isApproveDisabled={isApproved}\n              isApproving={isApproving}\n              isConfirmDisabled={disableBuying}\n              isConfirming={isConfirming}\n              onApprove={handleApprove}\n              onConfirm={handleConfirm}\n              buttonArrangement={ButtonArrangement.SEQUENTIAL}\n              confirmLabel={t('Buy Instantly')}\n              confirmId=\"lotteryBuyInstant\"\n            />\n            {isApproved && (\n              <Button\n                variant=\"secondary\"\n                mt=\"8px\"\n                endIcon={\n                  <ArrowForwardIcon\n                    ml=\"2px\"\n                    color={disableBuying || isConfirming ? 'disabled' : 'primary'}\n                    height=\"24px\"\n                    width=\"24px\"\n                  />\n                }\n                disabled={disableBuying || isConfirming}\n                onClick={() => {\n                  setBuyingStage(BuyingStage.EDIT)\n                }}\n              >\n                {t('View/Edit Numbers')}\n              </Button>\n            )}\n          </>\n        ) : (\n          <ConnectWalletButton />\n        )}\n\n        <Text mt=\"24px\" fontSize=\"12px\" color=\"textSubtle\">\n          {t(\n            '\"Buy Instantly\" chooses random numbers, with no duplicates among your tickets. Prices are set before each round starts, equal to $5 at that time. Purchases are final.',\n          )}\n        </Text>\n      </Flex>\n    </StyledModal>\n  )\n}\n\nexport default BuyTicketsModal\n"]},"metadata":{},"sourceType":"module"}