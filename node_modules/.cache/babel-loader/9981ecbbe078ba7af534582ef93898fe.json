{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolsTable/Cells/AutoEarningsCell.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useMatchBreakpoints } from '@pancakeswap/uikit';\nimport Balance from 'components/Balance';\nimport { useCakeVault } from 'state/pools/hooks';\nimport { useTranslation } from 'contexts/Localization';\nimport { getCakeVaultEarnings } from 'views/Pools/helpers';\nimport BaseCell, { CellContent } from './BaseCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledCell = styled(BaseCell)`\n  flex: 4.5;\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    flex: 1 0 120px;\n  }\n`;\n_c = StyledCell;\nconst HelpIconWrapper = styled.div`\n  align-self: center;\n`;\n_c2 = HelpIconWrapper;\n\nconst AutoEarningsCell = ({\n  pool,\n  account,\n  userDataLoaded\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    isMobile\n  } = useMatchBreakpoints();\n  const {\n    earningTokenPrice\n  } = pool;\n  const {\n    userData: {\n      cakeAtLastUserAction,\n      userShares,\n      lastUserActionTime\n    },\n    pricePerFullShare\n  } = useCakeVault();\n  const {\n    hasAutoEarnings,\n    autoCakeToDisplay,\n    autoUsdToDisplay\n  } = getCakeVaultEarnings(account, cakeAtLastUserAction, userShares, pricePerFullShare, earningTokenPrice);\n  const labelText = t('Recent CAKE profit');\n  const earningTokenBalance = autoCakeToDisplay;\n  const hasEarnings = hasAutoEarnings;\n  const earningTokenDollarBalance = autoUsdToDisplay;\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000;\n  const dateTimeLastAction = new Date(lastActionInMs);\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString();\n  const {\n    targetRef,\n    tooltip,\n    tooltipVisible\n  } = useTooltip( /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Balance, {\n      fontSize: \"16px\",\n      value: autoCakeToDisplay,\n      decimals: 3,\n      bold: true,\n      unit: \" CAKE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Balance, {\n      fontSize: \"16px\",\n      value: autoUsdToDisplay,\n      decimals: 2,\n      bold: true,\n      prefix: \"~$\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), t('Earned since your last action'), /*#__PURE__*/_jsxDEV(Text, {\n      children: dateStringToDisplay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true), {\n    placement: 'bottom'\n  });\n  return /*#__PURE__*/_jsxDEV(StyledCell, {\n    role: \"cell\",\n    children: /*#__PURE__*/_jsxDEV(CellContent, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        textAlign: \"left\",\n        children: labelText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), !userDataLoaded && account ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        width: \"80px\",\n        height: \"16px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [tooltipVisible && tooltip, /*#__PURE__*/_jsxDEV(Flex, {\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            mr: \"8px\",\n            height: \"32px\",\n            children: [/*#__PURE__*/_jsxDEV(Balance, {\n              mt: \"4px\",\n              bold: !isMobile,\n              fontSize: isMobile ? '14px' : '16px',\n              color: hasEarnings ? 'primary' : 'textDisabled',\n              decimals: hasEarnings ? 5 : 1,\n              value: hasEarnings ? earningTokenBalance : 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this), hasEarnings ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: earningTokenPrice > 0 && /*#__PURE__*/_jsxDEV(Balance, {\n                display: \"inline\",\n                fontSize: \"12px\",\n                color: \"textSubtle\",\n                decimals: 2,\n                prefix: \"~\",\n                value: earningTokenDollarBalance,\n                unit: \" USD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 23\n              }, this)\n            }, void 0, false) : /*#__PURE__*/_jsxDEV(Text, {\n              mt: \"4px\",\n              fontSize: \"12px\",\n              color: \"textDisabled\",\n              children: \"0 USD\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), hasEarnings && !isMobile && /*#__PURE__*/_jsxDEV(HelpIconWrapper, {\n            ref: targetRef,\n            children: /*#__PURE__*/_jsxDEV(HelpIcon, {\n              color: \"textSubtle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AutoEarningsCell, \"5qwsj0wwcEMgmlQMj1bAHqZBs3c=\", false, function () {\n  return [useTranslation, useMatchBreakpoints, useCakeVault, useTooltip];\n});\n\n_c3 = AutoEarningsCell;\nexport default AutoEarningsCell;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledCell\");\n$RefreshReg$(_c2, \"HelpIconWrapper\");\n$RefreshReg$(_c3, \"AutoEarningsCell\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolsTable/Cells/AutoEarningsCell.tsx"],"names":["React","styled","Skeleton","Text","useTooltip","HelpIcon","Flex","Box","useMatchBreakpoints","Balance","useCakeVault","useTranslation","getCakeVaultEarnings","BaseCell","CellContent","StyledCell","theme","mediaQueries","sm","HelpIconWrapper","div","AutoEarningsCell","pool","account","userDataLoaded","t","isMobile","earningTokenPrice","userData","cakeAtLastUserAction","userShares","lastUserActionTime","pricePerFullShare","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","labelText","earningTokenBalance","hasEarnings","earningTokenDollarBalance","lastActionInMs","parseInt","dateTimeLastAction","Date","dateStringToDisplay","toLocaleString","targetRef","tooltip","tooltipVisible","placement"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { DeserializedPool } from 'state/types'\nimport Balance from 'components/Balance'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface AutoEarningsCellProps {\n  pool: DeserializedPool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 4.5;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 120px;\n  }\n`\n\nconst HelpIconWrapper = styled.div`\n  align-self: center;\n`\n\nconst AutoEarningsCell: React.FC<AutoEarningsCellProps> = ({ pool, account, userDataLoaded }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const { earningTokenPrice } = pool\n\n  const {\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    earningTokenPrice,\n  )\n\n  const labelText = t('Recent CAKE profit')\n  const earningTokenBalance = autoCakeToDisplay\n  const hasEarnings = hasAutoEarnings\n  const earningTokenDollarBalance = autoUsdToDisplay\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={autoCakeToDisplay} decimals={3} bold unit=\" CAKE\" />\n      <Balance fontSize=\"16px\" value={autoUsdToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    { placement: 'bottom' },\n  )\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        {!userDataLoaded && account ? (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        ) : (\n          <>\n            {tooltipVisible && tooltip}\n            <Flex>\n              <Box mr=\"8px\" height=\"32px\">\n                <Balance\n                  mt=\"4px\"\n                  bold={!isMobile}\n                  fontSize={isMobile ? '14px' : '16px'}\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\n                  decimals={hasEarnings ? 5 : 1}\n                  value={hasEarnings ? earningTokenBalance : 0}\n                />\n                {hasEarnings ? (\n                  <>\n                    {earningTokenPrice > 0 && (\n                      <Balance\n                        display=\"inline\"\n                        fontSize=\"12px\"\n                        color=\"textSubtle\"\n                        decimals={2}\n                        prefix=\"~\"\n                        value={earningTokenDollarBalance}\n                        unit=\" USD\"\n                      />\n                    )}\n                  </>\n                ) : (\n                  <Text mt=\"4px\" fontSize=\"12px\" color=\"textDisabled\">\n                    0 USD\n                  </Text>\n                )}\n              </Box>\n              {hasEarnings && !isMobile && (\n                <HelpIconWrapper ref={targetRef}>\n                  <HelpIcon color=\"textSubtle\" />\n                </HelpIconWrapper>\n              )}\n            </Flex>\n          </>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AutoEarningsCell\n"]},"metadata":{},"sourceType":"module"}