{"ast":null,"code":"import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import React from'react';import styled from'styled-components';import{Skeleton,Text,useTooltip,HelpIcon,Flex,Box,useMatchBreakpoints}from'@pancakeswap/uikit';import Balance from'components/Balance';import{useCakeVault}from'state/pools/hooks';import{useTranslation}from'contexts/Localization';import{getCakeVaultEarnings}from'views/Pools/helpers';import BaseCell,{CellContent}from'./BaseCell';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var StyledCell=styled(BaseCell)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  flex: 4.5;\\n  \",\" {\\n    flex: 1 0 120px;\\n  }\\n\"])),function(_ref){var theme=_ref.theme;return theme.mediaQueries.sm;});var HelpIconWrapper=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  align-self: center;\\n\"])));var AutoEarningsCell=function AutoEarningsCell(_ref2){var pool=_ref2.pool,account=_ref2.account,userDataLoaded=_ref2.userDataLoaded;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useMatchBreakpoints=useMatchBreakpoints(),isMobile=_useMatchBreakpoints.isMobile;var earningTokenPrice=pool.earningTokenPrice;var _useCakeVault=useCakeVault(),_useCakeVault$userDat=_useCakeVault.userData,cakeAtLastUserAction=_useCakeVault$userDat.cakeAtLastUserAction,userShares=_useCakeVault$userDat.userShares,lastUserActionTime=_useCakeVault$userDat.lastUserActionTime,pricePerFullShare=_useCakeVault.pricePerFullShare;var _getCakeVaultEarnings=getCakeVaultEarnings(account,cakeAtLastUserAction,userShares,pricePerFullShare,earningTokenPrice),hasAutoEarnings=_getCakeVaultEarnings.hasAutoEarnings,autoCakeToDisplay=_getCakeVaultEarnings.autoCakeToDisplay,autoUsdToDisplay=_getCakeVaultEarnings.autoUsdToDisplay;var labelText=t('Recent CAKE profit');var earningTokenBalance=autoCakeToDisplay;var hasEarnings=hasAutoEarnings;var earningTokenDollarBalance=autoUsdToDisplay;var lastActionInMs=lastUserActionTime&&parseInt(lastUserActionTime)*1000;var dateTimeLastAction=new Date(lastActionInMs);var dateStringToDisplay=dateTimeLastAction.toLocaleString();var _useTooltip=useTooltip(/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Balance,{fontSize:\"16px\",value:autoCakeToDisplay,decimals:3,bold:true,unit:\" CAKE\"}),/*#__PURE__*/_jsx(Balance,{fontSize:\"16px\",value:autoUsdToDisplay,decimals:2,bold:true,prefix:\"~$\"}),t('Earned since your last action'),/*#__PURE__*/_jsx(Text,{children:dateStringToDisplay})]}),{placement:'bottom'}),targetRef=_useTooltip.targetRef,tooltip=_useTooltip.tooltip,tooltipVisible=_useTooltip.tooltipVisible;return/*#__PURE__*/_jsx(StyledCell,{role:\"cell\",children:/*#__PURE__*/_jsxs(CellContent,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",color:\"textSubtle\",textAlign:\"left\",children:labelText}),!userDataLoaded&&account?/*#__PURE__*/_jsx(Skeleton,{width:\"80px\",height:\"16px\"}):/*#__PURE__*/_jsxs(_Fragment,{children:[tooltipVisible&&tooltip,/*#__PURE__*/_jsxs(Flex,{children:[/*#__PURE__*/_jsxs(Box,{mr:\"8px\",height:\"32px\",children:[/*#__PURE__*/_jsx(Balance,{mt:\"4px\",bold:!isMobile,fontSize:isMobile?'14px':'16px',color:hasEarnings?'primary':'textDisabled',decimals:hasEarnings?5:1,value:hasEarnings?earningTokenBalance:0}),hasEarnings?/*#__PURE__*/_jsx(_Fragment,{children:earningTokenPrice>0&&/*#__PURE__*/_jsx(Balance,{display:\"inline\",fontSize:\"12px\",color:\"textSubtle\",decimals:2,prefix:\"~\",value:earningTokenDollarBalance,unit:\" USD\"})}):/*#__PURE__*/_jsx(Text,{mt:\"4px\",fontSize:\"12px\",color:\"textDisabled\",children:\"0 USD\"})]}),hasEarnings&&!isMobile&&/*#__PURE__*/_jsx(HelpIconWrapper,{ref:targetRef,children:/*#__PURE__*/_jsx(HelpIcon,{color:\"textSubtle\"})})]})]})]})});};export default AutoEarningsCell;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolsTable/Cells/AutoEarningsCell.tsx"],"names":["React","styled","Skeleton","Text","useTooltip","HelpIcon","Flex","Box","useMatchBreakpoints","Balance","useCakeVault","useTranslation","getCakeVaultEarnings","BaseCell","CellContent","StyledCell","theme","mediaQueries","sm","HelpIconWrapper","div","AutoEarningsCell","pool","account","userDataLoaded","t","isMobile","earningTokenPrice","userData","cakeAtLastUserAction","userShares","lastUserActionTime","pricePerFullShare","hasAutoEarnings","autoCakeToDisplay","autoUsdToDisplay","labelText","earningTokenBalance","hasEarnings","earningTokenDollarBalance","lastActionInMs","parseInt","dateTimeLastAction","Date","dateStringToDisplay","toLocaleString","placement","targetRef","tooltip","tooltipVisible"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton, Text, useTooltip, HelpIcon, Flex, Box, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { DeserializedPool } from 'state/types'\nimport Balance from 'components/Balance'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeVaultEarnings } from 'views/Pools/helpers'\nimport BaseCell, { CellContent } from './BaseCell'\n\ninterface AutoEarningsCellProps {\n  pool: DeserializedPool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 4.5;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 120px;\n  }\n`\n\nconst HelpIconWrapper = styled.div`\n  align-self: center;\n`\n\nconst AutoEarningsCell: React.FC<AutoEarningsCellProps> = ({ pool, account, userDataLoaded }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const { earningTokenPrice } = pool\n\n  const {\n    userData: { cakeAtLastUserAction, userShares, lastUserActionTime },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { hasAutoEarnings, autoCakeToDisplay, autoUsdToDisplay } = getCakeVaultEarnings(\n    account,\n    cakeAtLastUserAction,\n    userShares,\n    pricePerFullShare,\n    earningTokenPrice,\n  )\n\n  const labelText = t('Recent CAKE profit')\n  const earningTokenBalance = autoCakeToDisplay\n  const hasEarnings = hasAutoEarnings\n  const earningTokenDollarBalance = autoUsdToDisplay\n\n  const lastActionInMs = lastUserActionTime && parseInt(lastUserActionTime) * 1000\n  const dateTimeLastAction = new Date(lastActionInMs)\n  const dateStringToDisplay = dateTimeLastAction.toLocaleString()\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Balance fontSize=\"16px\" value={autoCakeToDisplay} decimals={3} bold unit=\" CAKE\" />\n      <Balance fontSize=\"16px\" value={autoUsdToDisplay} decimals={2} bold prefix=\"~$\" />\n      {t('Earned since your last action')}\n      <Text>{dateStringToDisplay}</Text>\n    </>,\n    { placement: 'bottom' },\n  )\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        {!userDataLoaded && account ? (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        ) : (\n          <>\n            {tooltipVisible && tooltip}\n            <Flex>\n              <Box mr=\"8px\" height=\"32px\">\n                <Balance\n                  mt=\"4px\"\n                  bold={!isMobile}\n                  fontSize={isMobile ? '14px' : '16px'}\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\n                  decimals={hasEarnings ? 5 : 1}\n                  value={hasEarnings ? earningTokenBalance : 0}\n                />\n                {hasEarnings ? (\n                  <>\n                    {earningTokenPrice > 0 && (\n                      <Balance\n                        display=\"inline\"\n                        fontSize=\"12px\"\n                        color=\"textSubtle\"\n                        decimals={2}\n                        prefix=\"~\"\n                        value={earningTokenDollarBalance}\n                        unit=\" USD\"\n                      />\n                    )}\n                  </>\n                ) : (\n                  <Text mt=\"4px\" fontSize=\"12px\" color=\"textDisabled\">\n                    0 USD\n                  </Text>\n                )}\n              </Box>\n              {hasEarnings && !isMobile && (\n                <HelpIconWrapper ref={targetRef}>\n                  <HelpIcon color=\"textSubtle\" />\n                </HelpIconWrapper>\n              )}\n            </Flex>\n          </>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default AutoEarningsCell\n"]},"metadata":{},"sourceType":"module"}