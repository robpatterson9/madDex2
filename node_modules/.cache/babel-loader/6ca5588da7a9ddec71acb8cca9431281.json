{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-param-reassign */\nimport { useEffect, useState } from 'react';\nimport { request, gql } from 'graphql-request';\nimport { INFO_CLIENT } from 'config/constants/endpoints';\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers';\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps';\nimport { getChangeForPeriod, getLpFeesAndApr, getPercentChange } from 'views/Info/utils/infoDataHelpers';\n\n/**\n * Data for displaying pool tables (on multiple pages, used throughout the site)\n * Note: Don't try to refactor it to use variables, server throws error if blocks passed as undefined variable\n * only works if its hard-coded into query string\n */\nconst POOL_AT_BLOCK = (block, pools) => {\n  const blockString = block ? `block: {number: ${block}}` : ``;\n  const addressesString = `[\"${pools.join('\",\"')}\"]`;\n  return `pairs(\n    where: { id_in: ${addressesString} }\n    ${blockString}\n    orderBy: trackedReserveBNB\n    orderDirection: desc\n  ) {\n    id\n    reserve0\n    reserve1\n    reserveUSD\n    volumeUSD\n    token0Price\n    token1Price\n    token0 {\n      id\n      symbol\n      name\n    }\n    token1 {\n      id\n      symbol\n      name\n    }\n  }`;\n};\n\n_c = POOL_AT_BLOCK;\n\nconst fetchPoolData = async (block24h, block48h, block7d, block14d, poolAddresses) => {\n  try {\n    const query = gql`\n      query pools {\n        now: ${POOL_AT_BLOCK(null, poolAddresses)}\n        oneDayAgo: ${POOL_AT_BLOCK(block24h, poolAddresses)}\n        twoDaysAgo: ${POOL_AT_BLOCK(block48h, poolAddresses)}\n        oneWeekAgo: ${POOL_AT_BLOCK(block7d, poolAddresses)}\n        twoWeeksAgo: ${POOL_AT_BLOCK(block14d, poolAddresses)}\n      }\n    `;\n    const data = await request(INFO_CLIENT, query);\n    return {\n      data,\n      error: false\n    };\n  } catch (error) {\n    console.error('Failed to fetch pool data', error);\n    return {\n      error: true\n    };\n  }\n}; // Transforms pools into \"0xADDRESS: { ...PoolFields }\" format and cast strigns to numbers\n\n\nconst parsePoolData = pairs => {\n  if (!pairs) {\n    return {};\n  }\n\n  return pairs.reduce((accum, poolData) => {\n    const {\n      volumeUSD,\n      reserveUSD,\n      reserve0,\n      reserve1,\n      token0Price,\n      token1Price\n    } = poolData;\n    accum[poolData.id] = { ...poolData,\n      volumeUSD: parseFloat(volumeUSD),\n      reserveUSD: parseFloat(reserveUSD),\n      reserve0: parseFloat(reserve0),\n      reserve1: parseFloat(reserve1),\n      token0Price: parseFloat(token0Price),\n      token1Price: parseFloat(token1Price)\n    };\n    return accum;\n  }, {});\n};\n\n/**\n * Fetch top pools by liquidity\n */\nconst usePoolDatas = poolAddresses => {\n  _s();\n\n  const [fetchState, setFetchState] = useState({\n    error: false\n  });\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps();\n  const {\n    blocks,\n    error: blockError\n  } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d]);\n  const [block24h, block48h, block7d, block14d] = blocks !== null && blocks !== void 0 ? blocks : [];\n  useEffect(() => {\n    const fetch = async () => {\n      const {\n        error,\n        data\n      } = await fetchPoolData(block24h.number, block48h.number, block7d.number, block14d.number, poolAddresses);\n\n      if (error) {\n        setFetchState({\n          error: true\n        });\n      } else {\n        const formattedPoolData = parsePoolData(data === null || data === void 0 ? void 0 : data.now);\n        const formattedPoolData24h = parsePoolData(data === null || data === void 0 ? void 0 : data.oneDayAgo);\n        const formattedPoolData48h = parsePoolData(data === null || data === void 0 ? void 0 : data.twoDaysAgo);\n        const formattedPoolData7d = parsePoolData(data === null || data === void 0 ? void 0 : data.oneWeekAgo);\n        const formattedPoolData14d = parsePoolData(data === null || data === void 0 ? void 0 : data.twoWeeksAgo); // Calculate data and format\n\n        const formatted = poolAddresses.reduce((accum, address) => {\n          // Undefined data is possible if pool is brand new and didn't exist one day ago or week ago.\n          const current = formattedPoolData[address];\n          const oneDay = formattedPoolData24h[address];\n          const twoDays = formattedPoolData48h[address];\n          const week = formattedPoolData7d[address];\n          const twoWeeks = formattedPoolData14d[address];\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(current === null || current === void 0 ? void 0 : current.volumeUSD, oneDay === null || oneDay === void 0 ? void 0 : oneDay.volumeUSD, twoDays === null || twoDays === void 0 ? void 0 : twoDays.volumeUSD);\n          const [volumeUSDWeek, volumeUSDChangeWeek] = getChangeForPeriod(current === null || current === void 0 ? void 0 : current.volumeUSD, week === null || week === void 0 ? void 0 : week.volumeUSD, twoWeeks === null || twoWeeks === void 0 ? void 0 : twoWeeks.volumeUSD);\n          const liquidityUSD = current ? current.reserveUSD : 0;\n          const liquidityUSDChange = getPercentChange(current === null || current === void 0 ? void 0 : current.reserveUSD, oneDay === null || oneDay === void 0 ? void 0 : oneDay.reserveUSD);\n          const liquidityToken0 = current ? current.reserve0 : 0;\n          const liquidityToken1 = current ? current.reserve1 : 0;\n          const {\n            totalFees24h,\n            totalFees7d,\n            lpFees24h,\n            lpFees7d,\n            lpApr7d\n          } = getLpFeesAndApr(volumeUSD, volumeUSDWeek, liquidityUSD);\n\n          if (current) {\n            accum[address] = {\n              address,\n              token0: {\n                address: current.token0.id,\n                name: current.token0.name,\n                symbol: current.token0.symbol\n              },\n              token1: {\n                address: current.token1.id,\n                name: current.token1.name,\n                symbol: current.token1.symbol\n              },\n              token0Price: current.token0Price,\n              token1Price: current.token1Price,\n              volumeUSD,\n              volumeUSDChange,\n              volumeUSDWeek,\n              volumeUSDChangeWeek,\n              totalFees24h,\n              totalFees7d,\n              lpFees24h,\n              lpFees7d,\n              lpApr7d,\n              liquidityUSD,\n              liquidityUSDChange,\n              liquidityToken0,\n              liquidityToken1\n            };\n          }\n\n          return accum;\n        }, {});\n        setFetchState({\n          data: formatted,\n          error: false\n        });\n      }\n    };\n\n    const allBlocksAvailable = (block24h === null || block24h === void 0 ? void 0 : block24h.number) && (block48h === null || block48h === void 0 ? void 0 : block48h.number) && (block7d === null || block7d === void 0 ? void 0 : block7d.number) && (block14d === null || block14d === void 0 ? void 0 : block14d.number);\n\n    if (poolAddresses.length > 0 && allBlocksAvailable && !blockError) {\n      fetch();\n    }\n  }, [poolAddresses, block24h, block48h, block7d, block14d, blockError]);\n  return fetchState;\n};\n\n_s(usePoolDatas, \"2dBWJWelMtkf76Wgg6tN6E2fS1E=\", false, function () {\n  return [useBlocksFromTimestamps];\n});\n\nexport default usePoolDatas;\n\nvar _c;\n\n$RefreshReg$(_c, \"POOL_AT_BLOCK\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/queries/pools/poolData.ts"],"names":["useEffect","useState","request","gql","INFO_CLIENT","getDeltaTimestamps","useBlocksFromTimestamps","getChangeForPeriod","getLpFeesAndApr","getPercentChange","POOL_AT_BLOCK","block","pools","blockString","addressesString","join","fetchPoolData","block24h","block48h","block7d","block14d","poolAddresses","query","data","error","console","parsePoolData","pairs","reduce","accum","poolData","volumeUSD","reserveUSD","reserve0","reserve1","token0Price","token1Price","id","parseFloat","usePoolDatas","fetchState","setFetchState","t24h","t48h","t7d","t14d","blocks","blockError","fetch","number","formattedPoolData","now","formattedPoolData24h","oneDayAgo","formattedPoolData48h","twoDaysAgo","formattedPoolData7d","oneWeekAgo","formattedPoolData14d","twoWeeksAgo","formatted","address","current","oneDay","twoDays","week","twoWeeks","volumeUSDChange","volumeUSDWeek","volumeUSDChangeWeek","liquidityUSD","liquidityUSDChange","liquidityToken0","liquidityToken1","totalFees24h","totalFees7d","lpFees24h","lpFees7d","lpApr7d","token0","name","symbol","token1","allBlocksAvailable","length"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { useEffect, useState } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\nimport { useBlocksFromTimestamps } from 'views/Info/hooks/useBlocksFromTimestamps'\nimport { PoolData } from 'state/info/types'\nimport { getChangeForPeriod, getLpFeesAndApr, getPercentChange } from 'views/Info/utils/infoDataHelpers'\n\ninterface PoolFields {\n  id: string\n  reserve0: string\n  reserve1: string\n  reserveUSD: string\n  volumeUSD: string\n  token0Price: string\n  token1Price: string\n  token0: {\n    id: string\n    symbol: string\n    name: string\n  }\n  token1: {\n    id: string\n    symbol: string\n    name: string\n  }\n}\n\ninterface FormattedPoolFields\n  extends Omit<PoolFields, 'volumeUSD' | 'reserveUSD' | 'reserve0' | 'reserve1' | 'token0Price' | 'token1Price'> {\n  volumeUSD: number\n  reserveUSD: number\n  reserve0: number\n  reserve1: number\n  token0Price: number\n  token1Price: number\n}\n\ninterface PoolsQueryResponse {\n  now: PoolFields[]\n  oneDayAgo: PoolFields[]\n  twoDaysAgo: PoolFields[]\n  oneWeekAgo: PoolFields[]\n  twoWeeksAgo: PoolFields[]\n}\n\n/**\n * Data for displaying pool tables (on multiple pages, used throughout the site)\n * Note: Don't try to refactor it to use variables, server throws error if blocks passed as undefined variable\n * only works if its hard-coded into query string\n */\nconst POOL_AT_BLOCK = (block: number | null, pools: string[]) => {\n  const blockString = block ? `block: {number: ${block}}` : ``\n  const addressesString = `[\"${pools.join('\",\"')}\"]`\n  return `pairs(\n    where: { id_in: ${addressesString} }\n    ${blockString}\n    orderBy: trackedReserveBNB\n    orderDirection: desc\n  ) {\n    id\n    reserve0\n    reserve1\n    reserveUSD\n    volumeUSD\n    token0Price\n    token1Price\n    token0 {\n      id\n      symbol\n      name\n    }\n    token1 {\n      id\n      symbol\n      name\n    }\n  }`\n}\n\nconst fetchPoolData = async (\n  block24h: number,\n  block48h: number,\n  block7d: number,\n  block14d: number,\n  poolAddresses: string[],\n) => {\n  try {\n    const query = gql`\n      query pools {\n        now: ${POOL_AT_BLOCK(null, poolAddresses)}\n        oneDayAgo: ${POOL_AT_BLOCK(block24h, poolAddresses)}\n        twoDaysAgo: ${POOL_AT_BLOCK(block48h, poolAddresses)}\n        oneWeekAgo: ${POOL_AT_BLOCK(block7d, poolAddresses)}\n        twoWeeksAgo: ${POOL_AT_BLOCK(block14d, poolAddresses)}\n      }\n    `\n    const data = await request<PoolsQueryResponse>(INFO_CLIENT, query)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch pool data', error)\n    return { error: true }\n  }\n}\n\n// Transforms pools into \"0xADDRESS: { ...PoolFields }\" format and cast strigns to numbers\nconst parsePoolData = (pairs?: PoolFields[]) => {\n  if (!pairs) {\n    return {}\n  }\n  return pairs.reduce((accum: { [address: string]: FormattedPoolFields }, poolData) => {\n    const { volumeUSD, reserveUSD, reserve0, reserve1, token0Price, token1Price } = poolData\n    accum[poolData.id] = {\n      ...poolData,\n      volumeUSD: parseFloat(volumeUSD),\n      reserveUSD: parseFloat(reserveUSD),\n      reserve0: parseFloat(reserve0),\n      reserve1: parseFloat(reserve1),\n      token0Price: parseFloat(token0Price),\n      token1Price: parseFloat(token1Price),\n    }\n    return accum\n  }, {})\n}\n\ninterface PoolDatas {\n  error: boolean\n  data?: {\n    [address: string]: PoolData\n  }\n}\n\n/**\n * Fetch top pools by liquidity\n */\nconst usePoolDatas = (poolAddresses: string[]): PoolDatas => {\n  const [fetchState, setFetchState] = useState<PoolDatas>({ error: false })\n  const [t24h, t48h, t7d, t14d] = getDeltaTimestamps()\n  const { blocks, error: blockError } = useBlocksFromTimestamps([t24h, t48h, t7d, t14d])\n  const [block24h, block48h, block7d, block14d] = blocks ?? []\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { error, data } = await fetchPoolData(\n        block24h.number,\n        block48h.number,\n        block7d.number,\n        block14d.number,\n        poolAddresses,\n      )\n      if (error) {\n        setFetchState({ error: true })\n      } else {\n        const formattedPoolData = parsePoolData(data?.now)\n        const formattedPoolData24h = parsePoolData(data?.oneDayAgo)\n        const formattedPoolData48h = parsePoolData(data?.twoDaysAgo)\n        const formattedPoolData7d = parsePoolData(data?.oneWeekAgo)\n        const formattedPoolData14d = parsePoolData(data?.twoWeeksAgo)\n\n        // Calculate data and format\n        const formatted = poolAddresses.reduce((accum: { [address: string]: PoolData }, address) => {\n          // Undefined data is possible if pool is brand new and didn't exist one day ago or week ago.\n          const current: FormattedPoolFields | undefined = formattedPoolData[address]\n          const oneDay: FormattedPoolFields | undefined = formattedPoolData24h[address]\n          const twoDays: FormattedPoolFields | undefined = formattedPoolData48h[address]\n          const week: FormattedPoolFields | undefined = formattedPoolData7d[address]\n          const twoWeeks: FormattedPoolFields | undefined = formattedPoolData14d[address]\n\n          const [volumeUSD, volumeUSDChange] = getChangeForPeriod(\n            current?.volumeUSD,\n            oneDay?.volumeUSD,\n            twoDays?.volumeUSD,\n          )\n          const [volumeUSDWeek, volumeUSDChangeWeek] = getChangeForPeriod(\n            current?.volumeUSD,\n            week?.volumeUSD,\n            twoWeeks?.volumeUSD,\n          )\n\n          const liquidityUSD = current ? current.reserveUSD : 0\n\n          const liquidityUSDChange = getPercentChange(current?.reserveUSD, oneDay?.reserveUSD)\n\n          const liquidityToken0 = current ? current.reserve0 : 0\n          const liquidityToken1 = current ? current.reserve1 : 0\n\n          const { totalFees24h, totalFees7d, lpFees24h, lpFees7d, lpApr7d } = getLpFeesAndApr(\n            volumeUSD,\n            volumeUSDWeek,\n            liquidityUSD,\n          )\n\n          if (current) {\n            accum[address] = {\n              address,\n              token0: {\n                address: current.token0.id,\n                name: current.token0.name,\n                symbol: current.token0.symbol,\n              },\n              token1: {\n                address: current.token1.id,\n                name: current.token1.name,\n                symbol: current.token1.symbol,\n              },\n              token0Price: current.token0Price,\n              token1Price: current.token1Price,\n              volumeUSD,\n              volumeUSDChange,\n              volumeUSDWeek,\n              volumeUSDChangeWeek,\n              totalFees24h,\n              totalFees7d,\n              lpFees24h,\n              lpFees7d,\n              lpApr7d,\n              liquidityUSD,\n              liquidityUSDChange,\n              liquidityToken0,\n              liquidityToken1,\n            }\n          }\n\n          return accum\n        }, {})\n        setFetchState({ data: formatted, error: false })\n      }\n    }\n\n    const allBlocksAvailable = block24h?.number && block48h?.number && block7d?.number && block14d?.number\n    if (poolAddresses.length > 0 && allBlocksAvailable && !blockError) {\n      fetch()\n    }\n  }, [poolAddresses, block24h, block48h, block7d, block14d, blockError])\n\n  return fetchState\n}\n\nexport default usePoolDatas\n"]},"metadata":{},"sourceType":"module"}