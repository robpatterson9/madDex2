{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { ethers } from 'ethers';\nimport { useEffect, useState } from 'react';\nimport { useUserNfts } from 'state/nftMarket/hooks';\nimport { AskOrderType } from 'state/nftMarket/types';\nexport let MarketEvent;\n\n(function (MarketEvent) {\n  MarketEvent[\"NEW\"] = \"NEW\";\n  MarketEvent[\"CANCEL\"] = \"CANCEL\";\n  MarketEvent[\"MODIFY\"] = \"MODIFY\";\n  MarketEvent[\"BUY\"] = \"BUY\";\n  MarketEvent[\"SELL\"] = \"SELL\";\n})(MarketEvent || (MarketEvent = {}));\n\n/**\n * Return an array of all user activity, sorted by most recent timestamp.\n * @returns\n */\nconst useUserActivity = account => {\n  _s();\n\n  const [sortedUserActivities, setSortedUserActivities] = useState([]);\n  const {\n    activity: {\n      askOrderHistory,\n      buyTradeHistory,\n      sellTradeHistory,\n      initializationState\n    }\n  } = useUserNfts();\n  useEffect(() => {\n    const getAskOrderEvent = orderType => {\n      switch (orderType) {\n        case AskOrderType.CANCEL:\n          return MarketEvent.CANCEL;\n\n        case AskOrderType.MODIFY:\n          return MarketEvent.MODIFY;\n\n        case AskOrderType.NEW:\n          return MarketEvent.NEW;\n\n        default:\n          return MarketEvent.MODIFY;\n      }\n    };\n\n    const transformTransactions = transactions => {\n      const transformedTransactions = transactions.map(transaction => {\n        const userSeller = transaction.seller.id === account.toLowerCase();\n        const marketEvent = userSeller ? MarketEvent.SELL : MarketEvent.BUY;\n        const {\n          timestamp,\n          nft\n        } = transaction;\n        const price = transaction.askPrice;\n        const otherParty = userSeller ? transaction.buyer.id : transaction.seller.id;\n        const tx = transaction.id;\n        return {\n          marketEvent,\n          price,\n          otherParty,\n          timestamp,\n          nft,\n          tx\n        };\n      });\n      return transformedTransactions;\n    };\n\n    const transformAskOrders = askOrders => {\n      const transformedAskOrders = askOrders.map(askOrder => {\n        const marketEvent = getAskOrderEvent(askOrder.orderType);\n        const {\n          timestamp,\n          nft\n        } = askOrder;\n        const price = askOrder.askPrice;\n        const tx = askOrder.id;\n        return {\n          marketEvent,\n          price,\n          timestamp,\n          nft,\n          tx\n        };\n      });\n      return transformedAskOrders;\n    };\n\n    const allActivity = [...transformAskOrders(askOrderHistory), ...transformTransactions(buyTradeHistory), ...transformTransactions(sellTradeHistory)];\n\n    if (allActivity.length > 0) {\n      const sortedByMostRecent = allActivity.sort((activityItem1, activityItem2) => {\n        const timestamp1 = ethers.BigNumber.from(activityItem1.timestamp);\n        const timestamp2 = ethers.BigNumber.from(activityItem2.timestamp);\n        return timestamp2.sub(timestamp1).toNumber();\n      });\n      setSortedUserActivities(sortedByMostRecent);\n    }\n\n    return () => {\n      setSortedUserActivities([]);\n    };\n  }, [account, askOrderHistory, buyTradeHistory, sellTradeHistory]);\n  return {\n    sortedUserActivities,\n    initializationState\n  };\n};\n\n_s(useUserActivity, \"n7mrggzQLeqgkS9BbLicWCzBLxE=\", false, function () {\n  return [useUserNfts];\n});\n\nexport default useUserActivity;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Profile/hooks/useUserActivity.tsx"],"names":["ethers","useEffect","useState","useUserNfts","AskOrderType","MarketEvent","useUserActivity","account","sortedUserActivities","setSortedUserActivities","activity","askOrderHistory","buyTradeHistory","sellTradeHistory","initializationState","getAskOrderEvent","orderType","CANCEL","MODIFY","NEW","transformTransactions","transactions","transformedTransactions","map","transaction","userSeller","seller","id","toLowerCase","marketEvent","SELL","BUY","timestamp","nft","price","askPrice","otherParty","buyer","tx","transformAskOrders","askOrders","transformedAskOrders","askOrder","allActivity","length","sortedByMostRecent","sort","activityItem1","activityItem2","timestamp1","BigNumber","from","timestamp2","sub","toNumber"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers'\nimport { useEffect, useState } from 'react'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { AskOrder, AskOrderType, TokenMarketData, Transaction, UserNftInitializationState } from 'state/nftMarket/types'\n\nexport enum MarketEvent {\n  NEW = 'NEW',\n  CANCEL = 'CANCEL',\n  MODIFY = 'MODIFY',\n  BUY = 'BUY',\n  SELL = 'SELL',\n}\n\nexport interface Activity {\n  marketEvent: MarketEvent\n  timestamp: string\n  tx: string\n  nft?: TokenMarketData\n  price?: string\n  otherParty?: string\n}\n\n/**\n * Return an array of all user activity, sorted by most recent timestamp.\n * @returns\n */\nconst useUserActivity = (\n  account: string,\n): { sortedUserActivities: Activity[]; initializationState: UserNftInitializationState } => {\n  const [sortedUserActivities, setSortedUserActivities] = useState<Activity[]>([])\n  const {\n    activity: { askOrderHistory, buyTradeHistory, sellTradeHistory, initializationState },\n  } = useUserNfts()\n\n  useEffect(() => {\n    const getAskOrderEvent = (orderType: AskOrderType): MarketEvent => {\n      switch (orderType) {\n        case AskOrderType.CANCEL:\n          return MarketEvent.CANCEL\n        case AskOrderType.MODIFY:\n          return MarketEvent.MODIFY\n        case AskOrderType.NEW:\n          return MarketEvent.NEW\n        default:\n          return MarketEvent.MODIFY\n      }\n    }\n\n    const transformTransactions = (transactions: Transaction[]): Activity[] => {\n      const transformedTransactions = transactions.map((transaction) => {\n        const userSeller = transaction.seller.id === account.toLowerCase()\n        const marketEvent = userSeller ? MarketEvent.SELL : MarketEvent.BUY\n        const { timestamp, nft } = transaction\n        const price = transaction.askPrice\n        const otherParty = userSeller ? transaction.buyer.id : transaction.seller.id\n        const tx = transaction.id\n        return { marketEvent, price, otherParty, timestamp, nft, tx }\n      })\n\n      return transformedTransactions\n    }\n\n    const transformAskOrders = (askOrders: AskOrder[]): Activity[] => {\n      const transformedAskOrders = askOrders.map((askOrder) => {\n        const marketEvent = getAskOrderEvent(askOrder.orderType)\n        const { timestamp, nft } = askOrder\n        const price = askOrder.askPrice\n        const tx = askOrder.id\n        return { marketEvent, price, timestamp, nft, tx }\n      })\n\n      return transformedAskOrders\n    }\n\n    const allActivity = [\n      ...transformAskOrders(askOrderHistory),\n      ...transformTransactions(buyTradeHistory),\n      ...transformTransactions(sellTradeHistory),\n    ]\n    if (allActivity.length > 0) {\n      const sortedByMostRecent = allActivity.sort((activityItem1, activityItem2) => {\n        const timestamp1 = ethers.BigNumber.from(activityItem1.timestamp)\n        const timestamp2 = ethers.BigNumber.from(activityItem2.timestamp)\n        return timestamp2.sub(timestamp1).toNumber()\n      })\n\n      setSortedUserActivities(sortedByMostRecent)\n    }\n\n    return () => {\n      setSortedUserActivities([])\n    }\n  }, [account, askOrderHistory, buyTradeHistory, sellTradeHistory])\n\n  return { sortedUserActivities, initializationState }\n}\n\nexport default useUserActivity\n"]},"metadata":{},"sourceType":"module"}