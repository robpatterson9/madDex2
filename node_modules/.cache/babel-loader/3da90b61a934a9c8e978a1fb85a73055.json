{"ast":null,"code":"// Collections -> Nfts -> Transactions\n// Users -> Nft tokens IDs\n// TODO: Handle the error state on the UI\nexport let NFTMarketInitializationState;\n\n(function (NFTMarketInitializationState) {\n  NFTMarketInitializationState[\"UNINITIALIZED\"] = \"UNINITIALIZED\";\n  NFTMarketInitializationState[\"INITIALIZED\"] = \"INITIALIZED\";\n  NFTMarketInitializationState[\"ERROR\"] = \"ERROR\";\n})(NFTMarketInitializationState || (NFTMarketInitializationState = {}));\n\nexport let UserNftInitializationState;\n\n(function (UserNftInitializationState) {\n  UserNftInitializationState[\"UNINITIALIZED\"] = \"UNINITIALIZED\";\n  UserNftInitializationState[\"INITIALIZING\"] = \"INITIALIZING\";\n  UserNftInitializationState[\"INITIALIZED\"] = \"INITIALIZED\";\n  UserNftInitializationState[\"ERROR\"] = \"ERROR\";\n})(UserNftInitializationState || (UserNftInitializationState = {}));\n\nexport let AskOrderType;\n\n(function (AskOrderType) {\n  AskOrderType[\"NEW\"] = \"NEW\";\n  AskOrderType[\"MODIFY\"] = \"MODIFY\";\n  AskOrderType[\"CANCEL\"] = \"CANCEL\";\n})(AskOrderType || (AskOrderType = {}));\n\nexport let NftLocation; // Market data regarding specific token ID, acquired via subgraph\n\n(function (NftLocation) {\n  NftLocation[\"FORSALE\"] = \"For Sale\";\n  NftLocation[\"PROFILE\"] = \"Profile Pic\";\n  NftLocation[\"WALLET\"] = \"In Wallet\";\n})(NftLocation || (NftLocation = {}));","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/nftMarket/types.ts"],"names":["NFTMarketInitializationState","UserNftInitializationState","AskOrderType","NftLocation"],"mappings":"AAEA;AACA;AAEA;AACA,WAAYA,4BAAZ;;WAAYA,4B;AAAAA,EAAAA,4B;AAAAA,EAAAA,4B;AAAAA,EAAAA,4B;GAAAA,4B,KAAAA,4B;;AAMZ,WAAYC,0BAAZ;;WAAYA,0B;AAAAA,EAAAA,0B;AAAAA,EAAAA,0B;AAAAA,EAAAA,0B;AAAAA,EAAAA,0B;GAAAA,0B,KAAAA,0B;;AAsCZ,WAAYC,YAAZ;;WAAYA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;AAAAA,EAAAA,Y;GAAAA,Y,KAAAA,Y;;AAuBZ,WAAYC,WAAZ,C,CAMA;;WANYA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;AAAAA,EAAAA,W;GAAAA,W,KAAAA,W","sourcesContent":["import { BigNumberish } from 'ethers'\n\n// Collections -> Nfts -> Transactions\n// Users -> Nft tokens IDs\n\n// TODO: Handle the error state on the UI\nexport enum NFTMarketInitializationState {\n  UNINITIALIZED = 'UNINITIALIZED',\n  INITIALIZED = 'INITIALIZED',\n  ERROR = 'ERROR',\n}\n\nexport enum UserNftInitializationState {\n  UNINITIALIZED = 'UNINITIALIZED',\n  INITIALIZING = 'INITIALIZING',\n  INITIALIZED = 'INITIALIZED',\n  ERROR = 'ERROR',\n}\n\nexport interface State {\n  initializationState: NFTMarketInitializationState\n  data: {\n    collections: Record<string, Collection> // string is the address\n    nfts: Record<string, NftToken[]> // string is the collection address\n    isFetchingMoreNfts: boolean\n    latestFetchAt: number\n    lastUpdateAt: number\n    users: Record<string, User> // string is the address\n    user: UserNftsState\n  }\n}\n\nexport interface UserNftsState {\n  userNftsInitializationState: UserNftInitializationState\n  nfts: NftToken[]\n  activity: UserActivity\n}\n\nexport interface Transaction {\n  id: string\n  block: string\n  timestamp: string\n  askPrice: string\n  netPrice: string\n  buyer: { id: string }\n  seller: { id: string }\n  withBNB: boolean\n  nft?: TokenMarketData\n}\n\nexport enum AskOrderType {\n  NEW = 'NEW',\n  MODIFY = 'MODIFY',\n  CANCEL = 'CANCEL',\n}\n\nexport interface AskOrder {\n  id: string\n  block: string\n  timestamp: string\n  askPrice: string\n  orderType: AskOrderType\n  nft?: TokenMarketData\n}\n\nexport interface Image {\n  original: string\n  thumbnail: string\n  mp4?: string\n  webm?: string\n  gif?: string\n}\n\nexport enum NftLocation {\n  FORSALE = 'For Sale',\n  PROFILE = 'Profile Pic',\n  WALLET = 'In Wallet',\n}\n\n// Market data regarding specific token ID, acquired via subgraph\nexport interface TokenMarketData {\n  tokenId: string\n  metadataUrl: string\n  currentAskPrice: string\n  currentSeller: string\n  latestTradedPriceInBNB: string\n  tradeVolumeBNB: string\n  totalTrades: string\n  isTradable: boolean\n  otherId: string\n  collection?: {\n    id: string\n  }\n  updatedAt?: string\n  transactionHistory?: Transaction[]\n}\n\n// Represents single NFT token, either Squad-like NFT or single PancakeBunny.\nexport interface NftToken {\n  tokenId: string\n  name: string\n  description: string\n  collectionName: string\n  collectionAddress: string\n  image: Image\n  attributes?: NftAttribute[]\n  createdAt?: string // API createdAt\n  updatedAt?: string // API updatedAt\n  marketData?: TokenMarketData\n  location?: NftLocation\n  meta?: Record<string, string | number>\n}\n\nexport interface TokenIdWithCollectionAddress {\n  collectionAddress: string\n  tokenId: string\n  nftLocation?: NftLocation\n}\n\nexport interface NftAttribute {\n  traitType: string\n  value: string | number\n  displayType: string\n}\n\n// Internal type used to refer to a collection\n// Most fields are populated from API (via ApiCollection type)\nexport interface Collection {\n  id: string\n  address: string\n  name: string\n  description?: string\n  symbol: string\n  active: boolean\n  totalVolumeBNB: string\n  numberTokensListed: string\n  tradingFee: string\n  creatorFee: string\n  owner: string\n  totalSupply: string\n  verified: boolean\n  avatar: string\n  banner: {\n    large: string\n    small: string\n  }\n  attributes?: NftAttribute[]\n}\n\nexport interface ApiCollections {\n  [key: string]: Collection\n}\n\nexport interface User {\n  address: string\n  numberTokensListed: BigNumberish\n  numberTokensPurchased: BigNumberish\n  numberTokensSold: BigNumberish\n  nfts: Record<string, BigNumberish> // String is an address, BigNumberish is a tokenID\n}\n\n/**\n * API RESPONSES\n */\n\nexport interface ApiCollection {\n  address: string\n  owner: string\n  name: string\n  description: string\n  symbol: string\n  totalSupply: string\n  verified: boolean\n  createdAt: string\n  updatedAt: string\n  avatar: string\n  banner: {\n    large: string\n    small: string\n  }\n  attributes?: NftAttribute[] // returned for specific collection but not for all collections\n}\n\n// Get all collections\n// ${API_NFT}/collections/\nexport interface ApiCollectionsReponse {\n  total: number\n  data: ApiCollection[]\n}\n\n// Get single collection\n// ${API_NFT}/collections/${collectionAddress}\nexport interface ApiSingleCollectionResponse {\n  data: ApiCollection\n}\n\nexport interface ApiSingleTokenData {\n  name: string\n  description: string\n  image: Image\n  collection: {\n    name: string\n  }\n}\n\n// Get tokens within collection\n// ${API_NFT}/collections/${collectionAddress}/tokens\nexport interface ApiResponseCollectionTokens {\n  total: number\n  attributesDistribution: Record<string, number>\n  data: Record<string, ApiSingleTokenData>\n}\n\n// Get specific token data\n// ${API_NFT}/collections/${collectionAddress}/tokens/${tokenId}\nexport interface ApiResponseSpecificToken {\n  data: {\n    tokenId: string\n    name: string\n    description: string\n    image: Image\n    createdAt: string\n    updatedAt: string\n    attributes: NftAttribute[]\n    collection: {\n      name: string\n    }\n  }\n}\n\n/**\n * SUBGRAPH RESPONSES\n */\n\nexport interface CollectionMarketDataBaseFields {\n  id: string\n  name: string\n  symbol: string\n  active: boolean\n  totalTrades: string\n  totalVolumeBNB: string\n  numberTokensListed: string\n  creatorAddress: string\n  tradingFee: string\n  creatorFee: string\n  whitelistChecked: string\n}\n\nexport interface UserActivity {\n  askOrderHistory: AskOrder[]\n  buyTradeHistory: Transaction[]\n  sellTradeHistory: Transaction[]\n  initializationState: UserNftInitializationState\n}\n"]},"metadata":{},"sourceType":"module"}