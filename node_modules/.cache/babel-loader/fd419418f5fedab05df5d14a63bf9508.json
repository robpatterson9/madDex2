{"ast":null,"code":"import _toConsumableArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{ethers}from'ethers';import{useEffect,useState}from'react';import{useUserNfts}from'state/nftMarket/hooks';import{AskOrderType}from'state/nftMarket/types';export var MarketEvent;(function(MarketEvent){MarketEvent[\"NEW\"]=\"NEW\";MarketEvent[\"CANCEL\"]=\"CANCEL\";MarketEvent[\"MODIFY\"]=\"MODIFY\";MarketEvent[\"BUY\"]=\"BUY\";MarketEvent[\"SELL\"]=\"SELL\";})(MarketEvent||(MarketEvent={}));/**\n * Return an array of all user activity, sorted by most recent timestamp.\n * @returns\n */var useUserActivity=function useUserActivity(account){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),sortedUserActivities=_useState2[0],setSortedUserActivities=_useState2[1];var _useUserNfts=useUserNfts(),_useUserNfts$activity=_useUserNfts.activity,askOrderHistory=_useUserNfts$activity.askOrderHistory,buyTradeHistory=_useUserNfts$activity.buyTradeHistory,sellTradeHistory=_useUserNfts$activity.sellTradeHistory,initializationState=_useUserNfts$activity.initializationState;useEffect(function(){var getAskOrderEvent=function getAskOrderEvent(orderType){switch(orderType){case AskOrderType.CANCEL:return MarketEvent.CANCEL;case AskOrderType.MODIFY:return MarketEvent.MODIFY;case AskOrderType.NEW:return MarketEvent.NEW;default:return MarketEvent.MODIFY;}};var transformTransactions=function transformTransactions(transactions){var transformedTransactions=transactions.map(function(transaction){var userSeller=transaction.seller.id===account.toLowerCase();var marketEvent=userSeller?MarketEvent.SELL:MarketEvent.BUY;var timestamp=transaction.timestamp,nft=transaction.nft;var price=transaction.askPrice;var otherParty=userSeller?transaction.buyer.id:transaction.seller.id;var tx=transaction.id;return{marketEvent:marketEvent,price:price,otherParty:otherParty,timestamp:timestamp,nft:nft,tx:tx};});return transformedTransactions;};var transformAskOrders=function transformAskOrders(askOrders){var transformedAskOrders=askOrders.map(function(askOrder){var marketEvent=getAskOrderEvent(askOrder.orderType);var timestamp=askOrder.timestamp,nft=askOrder.nft;var price=askOrder.askPrice;var tx=askOrder.id;return{marketEvent:marketEvent,price:price,timestamp:timestamp,nft:nft,tx:tx};});return transformedAskOrders;};var allActivity=[].concat(_toConsumableArray(transformAskOrders(askOrderHistory)),_toConsumableArray(transformTransactions(buyTradeHistory)),_toConsumableArray(transformTransactions(sellTradeHistory)));if(allActivity.length>0){var sortedByMostRecent=allActivity.sort(function(activityItem1,activityItem2){var timestamp1=ethers.BigNumber.from(activityItem1.timestamp);var timestamp2=ethers.BigNumber.from(activityItem2.timestamp);return timestamp2.sub(timestamp1).toNumber();});setSortedUserActivities(sortedByMostRecent);}return function(){setSortedUserActivities([]);};},[account,askOrderHistory,buyTradeHistory,sellTradeHistory]);return{sortedUserActivities:sortedUserActivities,initializationState:initializationState};};export default useUserActivity;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Profile/hooks/useUserActivity.tsx"],"names":["ethers","useEffect","useState","useUserNfts","AskOrderType","MarketEvent","useUserActivity","account","sortedUserActivities","setSortedUserActivities","activity","askOrderHistory","buyTradeHistory","sellTradeHistory","initializationState","getAskOrderEvent","orderType","CANCEL","MODIFY","NEW","transformTransactions","transactions","transformedTransactions","map","transaction","userSeller","seller","id","toLowerCase","marketEvent","SELL","BUY","timestamp","nft","price","askPrice","otherParty","buyer","tx","transformAskOrders","askOrders","transformedAskOrders","askOrder","allActivity","length","sortedByMostRecent","sort","activityItem1","activityItem2","timestamp1","BigNumber","from","timestamp2","sub","toNumber"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers'\nimport { useEffect, useState } from 'react'\nimport { useUserNfts } from 'state/nftMarket/hooks'\nimport { AskOrder, AskOrderType, TokenMarketData, Transaction, UserNftInitializationState } from 'state/nftMarket/types'\n\nexport enum MarketEvent {\n  NEW = 'NEW',\n  CANCEL = 'CANCEL',\n  MODIFY = 'MODIFY',\n  BUY = 'BUY',\n  SELL = 'SELL',\n}\n\nexport interface Activity {\n  marketEvent: MarketEvent\n  timestamp: string\n  tx: string\n  nft?: TokenMarketData\n  price?: string\n  otherParty?: string\n}\n\n/**\n * Return an array of all user activity, sorted by most recent timestamp.\n * @returns\n */\nconst useUserActivity = (\n  account: string,\n): { sortedUserActivities: Activity[]; initializationState: UserNftInitializationState } => {\n  const [sortedUserActivities, setSortedUserActivities] = useState<Activity[]>([])\n  const {\n    activity: { askOrderHistory, buyTradeHistory, sellTradeHistory, initializationState },\n  } = useUserNfts()\n\n  useEffect(() => {\n    const getAskOrderEvent = (orderType: AskOrderType): MarketEvent => {\n      switch (orderType) {\n        case AskOrderType.CANCEL:\n          return MarketEvent.CANCEL\n        case AskOrderType.MODIFY:\n          return MarketEvent.MODIFY\n        case AskOrderType.NEW:\n          return MarketEvent.NEW\n        default:\n          return MarketEvent.MODIFY\n      }\n    }\n\n    const transformTransactions = (transactions: Transaction[]): Activity[] => {\n      const transformedTransactions = transactions.map((transaction) => {\n        const userSeller = transaction.seller.id === account.toLowerCase()\n        const marketEvent = userSeller ? MarketEvent.SELL : MarketEvent.BUY\n        const { timestamp, nft } = transaction\n        const price = transaction.askPrice\n        const otherParty = userSeller ? transaction.buyer.id : transaction.seller.id\n        const tx = transaction.id\n        return { marketEvent, price, otherParty, timestamp, nft, tx }\n      })\n\n      return transformedTransactions\n    }\n\n    const transformAskOrders = (askOrders: AskOrder[]): Activity[] => {\n      const transformedAskOrders = askOrders.map((askOrder) => {\n        const marketEvent = getAskOrderEvent(askOrder.orderType)\n        const { timestamp, nft } = askOrder\n        const price = askOrder.askPrice\n        const tx = askOrder.id\n        return { marketEvent, price, timestamp, nft, tx }\n      })\n\n      return transformedAskOrders\n    }\n\n    const allActivity = [\n      ...transformAskOrders(askOrderHistory),\n      ...transformTransactions(buyTradeHistory),\n      ...transformTransactions(sellTradeHistory),\n    ]\n    if (allActivity.length > 0) {\n      const sortedByMostRecent = allActivity.sort((activityItem1, activityItem2) => {\n        const timestamp1 = ethers.BigNumber.from(activityItem1.timestamp)\n        const timestamp2 = ethers.BigNumber.from(activityItem2.timestamp)\n        return timestamp2.sub(timestamp1).toNumber()\n      })\n\n      setSortedUserActivities(sortedByMostRecent)\n    }\n\n    return () => {\n      setSortedUserActivities([])\n    }\n  }, [account, askOrderHistory, buyTradeHistory, sellTradeHistory])\n\n  return { sortedUserActivities, initializationState }\n}\n\nexport default useUserActivity\n"]},"metadata":{},"sourceType":"module"}