{"ast":null,"code":"import React,{useEffect}from'react';import{format}from'date-fns';import{ResponsiveContainer,XAxis,YAxis,Tooltip,AreaChart,Area}from'recharts';import useTheme from'hooks/useTheme';import{formatAmount}from'views/Info/utils/formatInfoNumbers';import{LineChartLoader}from'views/Info/components/ChartLoaders';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";// Calls setHoverValue and setHoverDate when part of chart is hovered\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\nvar HoverUpdater=function HoverUpdater(_ref){var payload=_ref.payload,setHoverValue=_ref.setHoverValue,setHoverDate=_ref.setHoverDate;useEffect(function(){setHoverValue(payload.value);setHoverDate(format(payload.time,'MMM d, yyyy'));},[payload.value,payload.time,setHoverValue,setHoverDate]);return null;};/**\n * Note: remember that it needs to be mounted inside the container with fixed height\n */var LineChart=function LineChart(_ref2){var data=_ref2.data,setHoverValue=_ref2.setHoverValue,setHoverDate=_ref2.setHoverDate;var _useTheme=useTheme(),theme=_useTheme.theme;if(!data||data.length===0){return/*#__PURE__*/_jsx(LineChartLoader,{});}return/*#__PURE__*/_jsx(ResponsiveContainer,{children:/*#__PURE__*/_jsxs(AreaChart,{data:data,width:300,height:308,margin:{top:5,right:15,left:0,bottom:5},onMouseLeave:function onMouseLeave(){if(setHoverDate)setHoverDate(undefined);if(setHoverValue)setHoverValue(undefined);},children:[/*#__PURE__*/_jsx(\"defs\",{children:/*#__PURE__*/_jsxs(\"linearGradient\",{id:\"gradient\",x1:\"0\",y1:\"0\",x2:\"0\",y2:\"1\",children:[/*#__PURE__*/_jsx(\"stop\",{offset:\"5%\",stopColor:theme.colors.inputSecondary,stopOpacity:0.5}),/*#__PURE__*/_jsx(\"stop\",{offset:\"100%\",stopColor:theme.colors.secondary,stopOpacity:0})]})}),/*#__PURE__*/_jsx(XAxis,{dataKey:\"time\",axisLine:false,tickLine:false,tickFormatter:function tickFormatter(time){return format(time,'dd');},minTickGap:10}),/*#__PURE__*/_jsx(YAxis,{dataKey:\"value\",tickCount:6,scale:\"linear\",axisLine:false,tickLine:false,fontSize:\"12px\",tickFormatter:function tickFormatter(val){return\"$\".concat(formatAmount(val));},orientation:\"right\",tick:{dx:10,fill:theme.colors.textSubtle}}),/*#__PURE__*/_jsx(Tooltip,{cursor:{stroke:theme.colors.secondary},contentStyle:{display:'none'},formatter:function formatter(tooltipValue,name,props){return/*#__PURE__*/_jsx(HoverUpdater,{payload:props.payload,setHoverValue:setHoverValue,setHoverDate:setHoverDate});}}),/*#__PURE__*/_jsx(Area,{dataKey:\"value\",type:\"monotone\",stroke:theme.colors.secondary,fill:\"url(#gradient)\",strokeWidth:2})]})});};export default LineChart;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Info/components/InfoCharts/LineChart/index.tsx"],"names":["React","useEffect","format","ResponsiveContainer","XAxis","YAxis","Tooltip","AreaChart","Area","useTheme","formatAmount","LineChartLoader","HoverUpdater","payload","setHoverValue","setHoverDate","value","time","LineChart","data","theme","length","top","right","left","bottom","undefined","colors","inputSecondary","secondary","val","dx","fill","textSubtle","stroke","display","tooltipValue","name","props"],"mappings":"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","sourcesContent":["import React, { useEffect, Dispatch, SetStateAction } from 'react'\nimport { format } from 'date-fns'\nimport { ResponsiveContainer, XAxis, YAxis, Tooltip, AreaChart, Area } from 'recharts'\nimport useTheme from 'hooks/useTheme'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { LineChartLoader } from 'views/Info/components/ChartLoaders'\n\nexport type LineChartProps = {\n  data: any[]\n  setHoverValue: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setHoverDate: Dispatch<SetStateAction<string | undefined>> // used for label of valye\n} & React.HTMLAttributes<HTMLDivElement>\n\n// Calls setHoverValue and setHoverDate when part of chart is hovered\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\nconst HoverUpdater = ({ payload, setHoverValue, setHoverDate }) => {\n  useEffect(() => {\n    setHoverValue(payload.value)\n    setHoverDate(format(payload.time, 'MMM d, yyyy'))\n  }, [payload.value, payload.time, setHoverValue, setHoverDate])\n\n  return null\n}\n\n/**\n * Note: remember that it needs to be mounted inside the container with fixed height\n */\nconst LineChart = ({ data, setHoverValue, setHoverDate }: LineChartProps) => {\n  const { theme } = useTheme()\n  if (!data || data.length === 0) {\n    return <LineChartLoader />\n  }\n  return (\n    <ResponsiveContainer>\n      <AreaChart\n        data={data}\n        width={300}\n        height={308}\n        margin={{\n          top: 5,\n          right: 15,\n          left: 0,\n          bottom: 5,\n        }}\n        onMouseLeave={() => {\n          if (setHoverDate) setHoverDate(undefined)\n          if (setHoverValue) setHoverValue(undefined)\n        }}\n      >\n        <defs>\n          <linearGradient id=\"gradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor={theme.colors.inputSecondary} stopOpacity={0.5} />\n            <stop offset=\"100%\" stopColor={theme.colors.secondary} stopOpacity={0} />\n          </linearGradient>\n        </defs>\n        <XAxis\n          dataKey=\"time\"\n          axisLine={false}\n          tickLine={false}\n          tickFormatter={(time) => format(time, 'dd')}\n          minTickGap={10}\n        />\n        <YAxis\n          dataKey=\"value\"\n          tickCount={6}\n          scale=\"linear\"\n          axisLine={false}\n          tickLine={false}\n          fontSize=\"12px\"\n          tickFormatter={(val) => `$${formatAmount(val)}`}\n          orientation=\"right\"\n          tick={{ dx: 10, fill: theme.colors.textSubtle }}\n        />\n        <Tooltip\n          cursor={{ stroke: theme.colors.secondary }}\n          contentStyle={{ display: 'none' }}\n          formatter={(tooltipValue, name, props) => (\n            <HoverUpdater payload={props.payload} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\n          )}\n        />\n        <Area dataKey=\"value\" type=\"monotone\" stroke={theme.colors.secondary} fill=\"url(#gradient)\" strokeWidth={2} />\n      </AreaChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default LineChart\n"]},"metadata":{},"sourceType":"module"}