{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolsTable/PoolRow.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { useMatchBreakpoints } from '@pancakeswap/uikit';\nimport useDelayedUnmount from 'hooks/useDelayedUnmount';\nimport NameCell from './Cells/NameCell';\nimport EarningsCell from './Cells/EarningsCell';\nimport AprCell from './Cells/AprCell';\nimport TotalStakedCell from './Cells/TotalStakedCell';\nimport EndsInCell from './Cells/EndsInCell';\nimport ExpandActionCell from './Cells/ExpandActionCell';\nimport ActionPanel from './ActionPanel/ActionPanel';\nimport AutoEarningsCell from './Cells/AutoEarningsCell';\nimport AutoAprCell from './Cells/AutoAprCell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledRow = styled.div`\n  background-color: transparent;\n  display: flex;\n  cursor: pointer;\n`;\n_c = StyledRow;\n\nconst PoolRow = ({\n  pool,\n  account,\n  userDataLoaded\n}) => {\n  _s();\n\n  const {\n    isXs,\n    isSm,\n    isMd,\n    isLg,\n    isXl,\n    isXxl,\n    isTablet,\n    isDesktop\n  } = useMatchBreakpoints();\n  const isLargerScreen = isLg || isXl || isXxl;\n  const [expanded, setExpanded] = useState(false);\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300);\n\n  const toggleExpanded = () => {\n    setExpanded(prev => !prev);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(StyledRow, {\n      role: \"row\",\n      onClick: toggleExpanded,\n      children: [/*#__PURE__*/_jsxDEV(NameCell, {\n        pool: pool\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), pool.isAutoVault ? /*#__PURE__*/_jsxDEV(AutoEarningsCell, {\n        pool: pool,\n        account: account,\n        userDataLoaded: userDataLoaded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(EarningsCell, {\n        pool: pool,\n        account: account,\n        userDataLoaded: userDataLoaded\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), pool.isAutoVault ? /*#__PURE__*/_jsxDEV(AutoAprCell, {\n        pool: pool\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 29\n      }, this) : /*#__PURE__*/_jsxDEV(AprCell, {\n        pool: pool\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 59\n      }, this), isLargerScreen && /*#__PURE__*/_jsxDEV(TotalStakedCell, {\n        pool: pool\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 28\n      }, this), isDesktop && /*#__PURE__*/_jsxDEV(EndsInCell, {\n        pool: pool\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(ExpandActionCell, {\n        expanded: expanded,\n        isFullLayout: isTablet || isDesktop\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), shouldRenderActionPanel && /*#__PURE__*/_jsxDEV(ActionPanel, {\n      account: account,\n      pool: pool,\n      userDataLoaded: userDataLoaded,\n      expanded: expanded,\n      breakpoints: {\n        isXs,\n        isSm,\n        isMd,\n        isLg,\n        isXl,\n        isXxl\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PoolRow, \"9LRxcXIJjRvLQVQTBI3xxTBeSD4=\", false, function () {\n  return [useMatchBreakpoints, useDelayedUnmount];\n});\n\n_c2 = PoolRow;\nexport default PoolRow;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledRow\");\n$RefreshReg$(_c2, \"PoolRow\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolsTable/PoolRow.tsx"],"names":["React","useState","styled","useMatchBreakpoints","useDelayedUnmount","NameCell","EarningsCell","AprCell","TotalStakedCell","EndsInCell","ExpandActionCell","ActionPanel","AutoEarningsCell","AutoAprCell","StyledRow","div","PoolRow","pool","account","userDataLoaded","isXs","isSm","isMd","isLg","isXl","isXxl","isTablet","isDesktop","isLargerScreen","expanded","setExpanded","shouldRenderActionPanel","toggleExpanded","prev","isAutoVault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AAEA,OAAOC,iBAAP,MAA8B,yBAA9B;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,eAAP,MAA4B,yBAA5B;AACA,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,gBAAP,MAA6B,0BAA7B;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,gBAAP,MAA6B,0BAA7B;AACA,OAAOC,WAAP,MAAwB,qBAAxB;;;AAQA,MAAMC,SAAS,GAAGZ,MAAM,CAACa,GAAI;AAC7B;AACA;AACA;AACA,CAJA;KAAMD,S;;AAMN,MAAME,OAA+B,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,OAAR;AAAiBC,EAAAA;AAAjB,CAAD,KAAuC;AAAA;;AAC7E,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA,IAAd;AAAoBC,IAAAA,IAApB;AAA0BC,IAAAA,IAA1B;AAAgCC,IAAAA,KAAhC;AAAuCC,IAAAA,QAAvC;AAAiDC,IAAAA;AAAjD,MAA+DxB,mBAAmB,EAAxF;AACA,QAAMyB,cAAc,GAAGL,IAAI,IAAIC,IAAR,IAAgBC,KAAvC;AACA,QAAM,CAACI,QAAD,EAAWC,WAAX,IAA0B7B,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM8B,uBAAuB,GAAG3B,iBAAiB,CAACyB,QAAD,EAAW,GAAX,CAAjD;;AAEA,QAAMG,cAAc,GAAG,MAAM;AAC3BF,IAAAA,WAAW,CAAEG,IAAD,IAAU,CAACA,IAAZ,CAAX;AACD,GAFD;;AAIA,sBACE;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,IAAI,EAAC,KAAhB;AAAsB,MAAA,OAAO,EAAED,cAA/B;AAAA,8BACE,QAAC,QAAD;AAAU,QAAA,IAAI,EAAEf;AAAhB;AAAA;AAAA;AAAA;AAAA,cADF,EAEGA,IAAI,CAACiB,WAAL,gBACC,QAAC,gBAAD;AAAkB,QAAA,IAAI,EAAEjB,IAAxB;AAA8B,QAAA,OAAO,EAAEC,OAAvC;AAAgD,QAAA,cAAc,EAAEC;AAAhE;AAAA;AAAA;AAAA;AAAA,cADD,gBAGC,QAAC,YAAD;AAAc,QAAA,IAAI,EAAEF,IAApB;AAA0B,QAAA,OAAO,EAAEC,OAAnC;AAA4C,QAAA,cAAc,EAAEC;AAA5D;AAAA;AAAA;AAAA;AAAA,cALJ,EAOGF,IAAI,CAACiB,WAAL,gBAAmB,QAAC,WAAD;AAAa,QAAA,IAAI,EAAEjB;AAAnB;AAAA;AAAA;AAAA;AAAA,cAAnB,gBAAiD,QAAC,OAAD;AAAS,QAAA,IAAI,EAAEA;AAAf;AAAA;AAAA;AAAA;AAAA,cAPpD,EAQGW,cAAc,iBAAI,QAAC,eAAD;AAAiB,QAAA,IAAI,EAAEX;AAAvB;AAAA;AAAA;AAAA;AAAA,cARrB,EASGU,SAAS,iBAAI,QAAC,UAAD;AAAY,QAAA,IAAI,EAAEV;AAAlB;AAAA;AAAA;AAAA;AAAA,cAThB,eAUE,QAAC,gBAAD;AAAkB,QAAA,QAAQ,EAAEY,QAA5B;AAAsC,QAAA,YAAY,EAAEH,QAAQ,IAAIC;AAAhE;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAaGI,uBAAuB,iBACtB,QAAC,WAAD;AACE,MAAA,OAAO,EAAEb,OADX;AAEE,MAAA,IAAI,EAAED,IAFR;AAGE,MAAA,cAAc,EAAEE,cAHlB;AAIE,MAAA,QAAQ,EAAEU,QAJZ;AAKE,MAAA,WAAW,EAAE;AAAET,QAAAA,IAAF;AAAQC,QAAAA,IAAR;AAAcC,QAAAA,IAAd;AAAoBC,QAAAA,IAApB;AAA0BC,QAAAA,IAA1B;AAAgCC,QAAAA;AAAhC;AALf;AAAA;AAAA;AAAA;AAAA,YAdJ;AAAA,kBADF;AAyBD,CAnCD;;GAAMT,O;UACiEb,mB,EAGrCC,iB;;;MAJ5BY,O;AAqCN,eAAeA,OAAf","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { DeserializedPool } from 'state/types'\nimport useDelayedUnmount from 'hooks/useDelayedUnmount'\nimport NameCell from './Cells/NameCell'\nimport EarningsCell from './Cells/EarningsCell'\nimport AprCell from './Cells/AprCell'\nimport TotalStakedCell from './Cells/TotalStakedCell'\nimport EndsInCell from './Cells/EndsInCell'\nimport ExpandActionCell from './Cells/ExpandActionCell'\nimport ActionPanel from './ActionPanel/ActionPanel'\nimport AutoEarningsCell from './Cells/AutoEarningsCell'\nimport AutoAprCell from './Cells/AutoAprCell'\n\ninterface PoolRowProps {\n  pool: DeserializedPool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledRow = styled.div`\n  background-color: transparent;\n  display: flex;\n  cursor: pointer;\n`\n\nconst PoolRow: React.FC<PoolRowProps> = ({ pool, account, userDataLoaded }) => {\n  const { isXs, isSm, isMd, isLg, isXl, isXxl, isTablet, isDesktop } = useMatchBreakpoints()\n  const isLargerScreen = isLg || isXl || isXxl\n  const [expanded, setExpanded] = useState(false)\n  const shouldRenderActionPanel = useDelayedUnmount(expanded, 300)\n\n  const toggleExpanded = () => {\n    setExpanded((prev) => !prev)\n  }\n\n  return (\n    <>\n      <StyledRow role=\"row\" onClick={toggleExpanded}>\n        <NameCell pool={pool} />\n        {pool.isAutoVault ? (\n          <AutoEarningsCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\n        ) : (\n          <EarningsCell pool={pool} account={account} userDataLoaded={userDataLoaded} />\n        )}\n        {pool.isAutoVault ? <AutoAprCell pool={pool} /> : <AprCell pool={pool} />}\n        {isLargerScreen && <TotalStakedCell pool={pool} />}\n        {isDesktop && <EndsInCell pool={pool} />}\n        <ExpandActionCell expanded={expanded} isFullLayout={isTablet || isDesktop} />\n      </StyledRow>\n      {shouldRenderActionPanel && (\n        <ActionPanel\n          account={account}\n          pool={pool}\n          userDataLoaded={userDataLoaded}\n          expanded={expanded}\n          breakpoints={{ isXs, isSm, isMd, isLg, isXl, isXxl }}\n        />\n      )}\n    </>\n  )\n}\n\nexport default PoolRow\n"]},"metadata":{},"sourceType":"module"}