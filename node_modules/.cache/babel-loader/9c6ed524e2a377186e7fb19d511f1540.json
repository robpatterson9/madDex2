{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/components/SearchInput/SearchInput.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo } from 'react';\nimport { Input } from '@pancakeswap/uikit';\nimport styled from 'styled-components';\nimport debounce from 'lodash/debounce';\nimport { useTranslation } from 'contexts/Localization';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledInput = styled(Input)`\n  border-radius: 16px;\n  margin-left: auto;\n`;\n_c = StyledInput;\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    display: block;\n  }\n`;\n_c2 = InputWrapper;\n\nconst SearchInput = ({\n  onChange: onChangeCallback,\n  placeholder = 'Search'\n}) => {\n  _s();\n\n  const [searchText, setSearchText] = useState('');\n  const {\n    t\n  } = useTranslation();\n  const debouncedOnChange = useMemo(() => debounce(e => onChangeCallback(e), 500), [onChangeCallback]);\n\n  const onChange = e => {\n    setSearchText(e.target.value);\n    debouncedOnChange(e);\n  };\n\n  return /*#__PURE__*/_jsxDEV(InputWrapper, {\n    children: /*#__PURE__*/_jsxDEV(StyledInput, {\n      value: searchText,\n      onChange: onChange,\n      placeholder: t(placeholder)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchInput, \"nAI3aZY60loHY2Pwp3pQItt65OE=\", false, function () {\n  return [useTranslation];\n});\n\n_c3 = SearchInput;\nexport default SearchInput;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledInput\");\n$RefreshReg$(_c2, \"InputWrapper\");\n$RefreshReg$(_c3, \"SearchInput\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/components/SearchInput/SearchInput.tsx"],"names":["React","useState","useMemo","Input","styled","debounce","useTranslation","StyledInput","InputWrapper","div","theme","mediaQueries","sm","SearchInput","onChange","onChangeCallback","placeholder","searchText","setSearchText","t","debouncedOnChange","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,OAAzC;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,SAASC,cAAT,QAA+B,uBAA/B;;AAEA,MAAMC,WAAW,GAAGH,MAAM,CAACD,KAAD,CAAQ;AAClC;AACA;AACA,CAHA;KAAMI,W;AAKN,MAAMC,YAAY,GAAGJ,MAAM,CAACK,GAAI;AAChC;AACA,IAAI,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,YAAN,CAAmBC,EAAG;AACzC;AACA;AACA,CALA;MAAMJ,Y;;AAYN,MAAMK,WAA4B,GAAG,CAAC;AAAEC,EAAAA,QAAQ,EAAEC,gBAAZ;AAA8BC,EAAAA,WAAW,GAAG;AAA5C,CAAD,KAA4D;AAAA;;AAC/F,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAM;AAAEkB,IAAAA;AAAF,MAAQb,cAAc,EAA5B;AAEA,QAAMc,iBAAiB,GAAGlB,OAAO,CAC/B,MAAMG,QAAQ,CAAEgB,CAAD,IAA4CN,gBAAgB,CAACM,CAAD,CAA7D,EAAkE,GAAlE,CADiB,EAE/B,CAACN,gBAAD,CAF+B,CAAjC;;AAKA,QAAMD,QAAQ,GAAIO,CAAD,IAA4C;AAC3DH,IAAAA,aAAa,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;AACAH,IAAAA,iBAAiB,CAACC,CAAD,CAAjB;AACD,GAHD;;AAKA,sBACE,QAAC,YAAD;AAAA,2BACE,QAAC,WAAD;AAAa,MAAA,KAAK,EAAEJ,UAApB;AAAgC,MAAA,QAAQ,EAAEH,QAA1C;AAAoD,MAAA,WAAW,EAAEK,CAAC,CAACH,WAAD;AAAlE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CApBD;;GAAMH,W;UAGUP,c;;;MAHVO,W;AAsBN,eAAeA,WAAf","sourcesContent":["import React, { useState, useMemo } from 'react'\nimport { Input } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport debounce from 'lodash/debounce'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledInput = styled(Input)`\n  border-radius: 16px;\n  margin-left: auto;\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    display: block;\n  }\n`\n\ninterface Props {\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n  placeholder?: string\n}\n\nconst SearchInput: React.FC<Props> = ({ onChange: onChangeCallback, placeholder = 'Search' }) => {\n  const [searchText, setSearchText] = useState('')\n\n  const { t } = useTranslation()\n\n  const debouncedOnChange = useMemo(\n    () => debounce((e: React.ChangeEvent<HTMLInputElement>) => onChangeCallback(e), 500),\n    [onChangeCallback],\n  )\n\n  const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(e.target.value)\n    debouncedOnChange(e)\n  }\n\n  return (\n    <InputWrapper>\n      <StyledInput value={searchText} onChange={onChange} placeholder={t(placeholder)} />\n    </InputWrapper>\n  )\n}\n\nexport default SearchInput\n"]},"metadata":{},"sourceType":"module"}