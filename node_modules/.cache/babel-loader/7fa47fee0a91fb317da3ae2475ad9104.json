{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useState } from 'react';\nimport useIsWindowVisible from 'hooks/useIsWindowVisible';\n\nconst getNow = () => Math.floor(Date.now() / 1000);\n/**\n * Consider this moving up to the global level\n */\n\n\nconst useCountdown = timestamp => {\n  _s();\n\n  const [secondsRemaining, setSecondsRemaining] = useState(() => {\n    return timestamp - getNow();\n  });\n  const [isPaused, setIsPaused] = useState(false);\n  const isWindowVisible = useIsWindowVisible();\n  const pause = useCallback(() => setIsPaused(true), [setIsPaused]);\n  const unpause = useCallback(() => setIsPaused(false), [setIsPaused]);\n  useEffect(() => {\n    let timer;\n\n    if (!isPaused && secondsRemaining > 0) {\n      timer = setTimeout(() => {\n        setSecondsRemaining(prevSecondsRemaining => prevSecondsRemaining - 1);\n      }, 1000);\n    }\n\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [secondsRemaining, isPaused, setSecondsRemaining]);\n  useEffect(() => {\n    setSecondsRemaining(timestamp - getNow());\n  }, [timestamp, setSecondsRemaining]); // Pause the timer if the tab becomes inactive to avoid it becoming out of sync\n\n  useEffect(() => {\n    if (isWindowVisible) {\n      setSecondsRemaining(timestamp - getNow());\n      unpause();\n    } else {\n      pause();\n    }\n  }, [pause, unpause, timestamp, setSecondsRemaining, isWindowVisible]);\n  return {\n    secondsRemaining,\n    pause,\n    unpause\n  };\n};\n\n_s(useCountdown, \"Agh4fxsirFnKAir659sUqUCrNgM=\", false, function () {\n  return [useIsWindowVisible];\n});\n\nexport default useCountdown;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Predictions/hooks/useCountdown.ts"],"names":["useCallback","useEffect","useState","useIsWindowVisible","getNow","Math","floor","Date","now","useCountdown","timestamp","secondsRemaining","setSecondsRemaining","isPaused","setIsPaused","isWindowVisible","pause","unpause","timer","setTimeout","prevSecondsRemaining","clearTimeout"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AACA,OAAOC,kBAAP,MAA+B,0BAA/B;;AAEA,MAAMC,MAAM,GAAG,MAAMC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB,CAArB;AAEA;AACA;AACA;;;AACA,MAAMC,YAAY,GAAIC,SAAD,IAAuB;AAAA;;AAC1C,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CV,QAAQ,CAAC,MAAM;AAC7D,WAAOQ,SAAS,GAAGN,MAAM,EAAzB;AACD,GAFuD,CAAxD;AAGA,QAAM,CAACS,QAAD,EAAWC,WAAX,IAA0BZ,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAMa,eAAe,GAAGZ,kBAAkB,EAA1C;AAEA,QAAMa,KAAK,GAAGhB,WAAW,CAAC,MAAMc,WAAW,CAAC,IAAD,CAAlB,EAA0B,CAACA,WAAD,CAA1B,CAAzB;AACA,QAAMG,OAAO,GAAGjB,WAAW,CAAC,MAAMc,WAAW,CAAC,KAAD,CAAlB,EAA2B,CAACA,WAAD,CAA3B,CAA3B;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,KAAJ;;AAEA,QAAI,CAACL,QAAD,IAAaF,gBAAgB,GAAG,CAApC,EAAuC;AACrCO,MAAAA,KAAK,GAAGC,UAAU,CAAC,MAAM;AACvBP,QAAAA,mBAAmB,CAAEQ,oBAAD,IAA0BA,oBAAoB,GAAG,CAAlD,CAAnB;AACD,OAFiB,EAEf,IAFe,CAAlB;AAGD;;AAED,WAAO,MAAM;AACXC,MAAAA,YAAY,CAACH,KAAD,CAAZ;AACD,KAFD;AAGD,GAZQ,EAYN,CAACP,gBAAD,EAAmBE,QAAnB,EAA6BD,mBAA7B,CAZM,CAAT;AAcAX,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,mBAAmB,CAACF,SAAS,GAAGN,MAAM,EAAnB,CAAnB;AACD,GAFQ,EAEN,CAACM,SAAD,EAAYE,mBAAZ,CAFM,CAAT,CAxB0C,CA4B1C;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIc,eAAJ,EAAqB;AACnBH,MAAAA,mBAAmB,CAACF,SAAS,GAAGN,MAAM,EAAnB,CAAnB;AACAa,MAAAA,OAAO;AACR,KAHD,MAGO;AACLD,MAAAA,KAAK;AACN;AACF,GAPQ,EAON,CAACA,KAAD,EAAQC,OAAR,EAAiBP,SAAjB,EAA4BE,mBAA5B,EAAiDG,eAAjD,CAPM,CAAT;AASA,SAAO;AAAEJ,IAAAA,gBAAF;AAAoBK,IAAAA,KAApB;AAA2BC,IAAAA;AAA3B,GAAP;AACD,CAvCD;;GAAMR,Y;UAKoBN,kB;;;AAoC1B,eAAeM,YAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\n\nconst getNow = () => Math.floor(Date.now() / 1000)\n\n/**\n * Consider this moving up to the global level\n */\nconst useCountdown = (timestamp: number) => {\n  const [secondsRemaining, setSecondsRemaining] = useState(() => {\n    return timestamp - getNow()\n  })\n  const [isPaused, setIsPaused] = useState(false)\n  const isWindowVisible = useIsWindowVisible()\n\n  const pause = useCallback(() => setIsPaused(true), [setIsPaused])\n  const unpause = useCallback(() => setIsPaused(false), [setIsPaused])\n\n  useEffect(() => {\n    let timer: ReturnType<typeof setTimeout>\n\n    if (!isPaused && secondsRemaining > 0) {\n      timer = setTimeout(() => {\n        setSecondsRemaining((prevSecondsRemaining) => prevSecondsRemaining - 1)\n      }, 1000)\n    }\n\n    return () => {\n      clearTimeout(timer)\n    }\n  }, [secondsRemaining, isPaused, setSecondsRemaining])\n\n  useEffect(() => {\n    setSecondsRemaining(timestamp - getNow())\n  }, [timestamp, setSecondsRemaining])\n\n  // Pause the timer if the tab becomes inactive to avoid it becoming out of sync\n  useEffect(() => {\n    if (isWindowVisible) {\n      setSecondsRemaining(timestamp - getNow())\n      unpause()\n    } else {\n      pause()\n    }\n  }, [pause, unpause, timestamp, setSecondsRemaining, isWindowVisible])\n\n  return { secondsRemaining, pause, unpause }\n}\n\nexport default useCountdown\n"]},"metadata":{},"sourceType":"module"}