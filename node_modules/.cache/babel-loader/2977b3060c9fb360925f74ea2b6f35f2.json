{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from 'react';\n\nconst useIntersectionObserver = () => {\n  _s();\n\n  const observerRef = useRef(null);\n  const intersectionObserverRef = useRef(null);\n  const [observerIsSet, setObserverIsSet] = useState(false);\n  const [isIntersecting, setIsIntersecting] = useState(false);\n  useEffect(() => {\n    const checkObserverIsIntersecting = ([entry]) => {\n      setIsIntersecting(entry.isIntersecting);\n    };\n\n    if (!observerIsSet) {\n      intersectionObserverRef.current = new IntersectionObserver(checkObserverIsIntersecting, {\n        rootMargin: '0px',\n        threshold: 1\n      });\n      intersectionObserverRef.current.observe(observerRef.current);\n      setObserverIsSet(true);\n    }\n\n    return () => {\n      if (intersectionObserverRef.current && observerIsSet) {\n        intersectionObserverRef.current.disconnect();\n      }\n    };\n  }, [observerIsSet]);\n  return {\n    observerRef,\n    isIntersecting\n  };\n};\n\n_s(useIntersectionObserver, \"pD8g4G2FkHotGEiEdVPFbBb0My0=\");\n\nexport default useIntersectionObserver;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/hooks/useIntersectionObserver.ts"],"names":["useEffect","useRef","useState","useIntersectionObserver","observerRef","intersectionObserverRef","observerIsSet","setObserverIsSet","isIntersecting","setIsIntersecting","checkObserverIsIntersecting","entry","current","IntersectionObserver","rootMargin","threshold","observe","disconnect"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;;AAEA,MAAMC,uBAAuB,GAAG,MAAM;AAAA;;AACpC,QAAMC,WAAW,GAAGH,MAAM,CAAiB,IAAjB,CAA1B;AACA,QAAMI,uBAAuB,GAAGJ,MAAM,CAAuB,IAAvB,CAAtC;AACA,QAAM,CAACK,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACM,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAAC,KAAD,CAApD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,2BAA2B,GAAG,CAAC,CAACC,KAAD,CAAD,KAA0C;AAC5EF,MAAAA,iBAAiB,CAACE,KAAK,CAACH,cAAP,CAAjB;AACD,KAFD;;AAIA,QAAI,CAACF,aAAL,EAAoB;AAClBD,MAAAA,uBAAuB,CAACO,OAAxB,GAAkC,IAAIC,oBAAJ,CAAyBH,2BAAzB,EAAsD;AACtFI,QAAAA,UAAU,EAAE,KAD0E;AAEtFC,QAAAA,SAAS,EAAE;AAF2E,OAAtD,CAAlC;AAIAV,MAAAA,uBAAuB,CAACO,OAAxB,CAAgCI,OAAhC,CAAwCZ,WAAW,CAACQ,OAApD;AACAL,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACD;;AAED,WAAO,MAAM;AACX,UAAIF,uBAAuB,CAACO,OAAxB,IAAmCN,aAAvC,EAAsD;AACpDD,QAAAA,uBAAuB,CAACO,OAAxB,CAAgCK,UAAhC;AACD;AACF,KAJD;AAKD,GAnBQ,EAmBN,CAACX,aAAD,CAnBM,CAAT;AAqBA,SAAO;AAAEF,IAAAA,WAAF;AAAeI,IAAAA;AAAf,GAAP;AACD,CA5BD;;GAAML,uB;;AA8BN,eAAeA,uBAAf","sourcesContent":["import { useEffect, useRef, useState } from 'react'\n\nconst useIntersectionObserver = () => {\n  const observerRef = useRef<HTMLDivElement>(null)\n  const intersectionObserverRef = useRef<IntersectionObserver>(null)\n  const [observerIsSet, setObserverIsSet] = useState(false)\n  const [isIntersecting, setIsIntersecting] = useState(false)\n\n  useEffect(() => {\n    const checkObserverIsIntersecting = ([entry]: IntersectionObserverEntry[]) => {\n      setIsIntersecting(entry.isIntersecting)\n    }\n\n    if (!observerIsSet) {\n      intersectionObserverRef.current = new IntersectionObserver(checkObserverIsIntersecting, {\n        rootMargin: '0px',\n        threshold: 1,\n      })\n      intersectionObserverRef.current.observe(observerRef.current)\n      setObserverIsSet(true)\n    }\n\n    return () => {\n      if (intersectionObserverRef.current && observerIsSet) {\n        intersectionObserverRef.current.disconnect()\n      }\n    }\n  }, [observerIsSet])\n\n  return { observerRef, isIntersecting }\n}\n\nexport default useIntersectionObserver\n"]},"metadata":{},"sourceType":"module"}