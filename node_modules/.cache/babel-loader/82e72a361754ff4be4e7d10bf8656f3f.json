{"ast":null,"code":"import{usePriceCakeBusd}from'state/farms/hooks';import{getBalanceNumber}from'utils/formatBalance';import easterPrizes from'config/constants/trading-competition/easter';import BigNumber from'bignumber.js';export var localiseTradingVolume=function localiseTradingVolume(value){var decimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;return value.toLocaleString('en-US',{maximumFractionDigits:decimals});};export var useCompetitionCakeRewards=function useCompetitionCakeRewards(userCakeReward){var cakeAsBigNumber=new BigNumber(userCakeReward);var cakeBalance=getBalanceNumber(cakeAsBigNumber);var cakePriceBusd=usePriceCakeBusd();return{cakeReward:cakeBalance,dollarValueOfCakeReward:cakePriceBusd.gt(0)?cakeBalance*cakePriceBusd.toNumber():null};};// 1 is a reasonable teamRank default: accessing the first team in the config.\n// We use the smart contract userPointReward to get a users' points\n// Achievement keys are consistent across different teams regardless of team team rank\n// If a teamRank value isn't passed, this helper can be used to return achievement keys for a given userRewardGroup\nexport var getRewardGroupAchievements=function getRewardGroupAchievements(userRewardGroup){var teamRank=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var userGroup=easterPrizes[teamRank].filter(function(prizeGroup){return prizeGroup.group===userRewardGroup;})[0];var userAchievements=userGroup&&userGroup.achievements;return userAchievements;};export default localiseTradingVolume;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/TradingCompetition/helpers.ts"],"names":["usePriceCakeBusd","getBalanceNumber","easterPrizes","BigNumber","localiseTradingVolume","value","decimals","toLocaleString","maximumFractionDigits","useCompetitionCakeRewards","userCakeReward","cakeAsBigNumber","cakeBalance","cakePriceBusd","cakeReward","dollarValueOfCakeReward","gt","toNumber","getRewardGroupAchievements","userRewardGroup","teamRank","userGroup","filter","prizeGroup","group","userAchievements","achievements"],"mappings":"AACA,OAASA,gBAAT,KAAiC,mBAAjC,CACA,OAASC,gBAAT,KAAiC,qBAAjC,CACA,MAAOC,CAAAA,YAAP,KAAyB,6CAAzB,CACA,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CAEA,MAAO,IAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACC,KAAD,CAAiC,IAAjBC,CAAAA,QAAiB,2DAAN,CAAM,CACpE,MAAOD,CAAAA,KAAK,CAACE,cAAN,CAAqB,OAArB,CAA8B,CAAEC,qBAAqB,CAAEF,QAAzB,CAA9B,CAAP,CACD,CAFM,CAIP,MAAO,IAAMG,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,CAACC,cAAD,CAA+B,CACtE,GAAMC,CAAAA,eAAe,CAAG,GAAIR,CAAAA,SAAJ,CAAcO,cAAd,CAAxB,CACA,GAAME,CAAAA,WAAW,CAAGX,gBAAgB,CAACU,eAAD,CAApC,CACA,GAAME,CAAAA,aAAa,CAAGb,gBAAgB,EAAtC,CACA,MAAO,CACLc,UAAU,CAAEF,WADP,CAELG,uBAAuB,CAAEF,aAAa,CAACG,EAAd,CAAiB,CAAjB,EAAsBJ,WAAW,CAAGC,aAAa,CAACI,QAAd,EAApC,CAA+D,IAFnF,CAAP,CAID,CARM,CAUP;AACA;AACA;AACA;AACA,MAAO,IAAMC,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,CAACC,eAAD,CAA2C,IAAjBC,CAAAA,QAAiB,2DAAN,CAAM,CACnF,GAAMC,CAAAA,SAAS,CAAGnB,YAAY,CAACkB,QAAD,CAAZ,CAAuBE,MAAvB,CAA8B,SAACC,UAAD,CAAgB,CAC9D,MAAOA,CAAAA,UAAU,CAACC,KAAX,GAAqBL,eAA5B,CACD,CAFiB,EAEf,CAFe,CAAlB,CAGA,GAAMM,CAAAA,gBAAgB,CAAGJ,SAAS,EAAIA,SAAS,CAACK,YAAhD,CACA,MAAOD,CAAAA,gBAAP,CACD,CANM,CAQP,cAAerB,CAAAA,qBAAf","sourcesContent":["import { ReactText } from 'react'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport easterPrizes from 'config/constants/trading-competition/easter'\nimport BigNumber from 'bignumber.js'\n\nexport const localiseTradingVolume = (value: number, decimals = 0) => {\n  return value.toLocaleString('en-US', { maximumFractionDigits: decimals })\n}\n\nexport const useCompetitionCakeRewards = (userCakeReward: ReactText) => {\n  const cakeAsBigNumber = new BigNumber(userCakeReward as string)\n  const cakeBalance = getBalanceNumber(cakeAsBigNumber)\n  const cakePriceBusd = usePriceCakeBusd()\n  return {\n    cakeReward: cakeBalance,\n    dollarValueOfCakeReward: cakePriceBusd.gt(0) ? cakeBalance * cakePriceBusd.toNumber() : null,\n  }\n}\n\n// 1 is a reasonable teamRank default: accessing the first team in the config.\n// We use the smart contract userPointReward to get a users' points\n// Achievement keys are consistent across different teams regardless of team team rank\n// If a teamRank value isn't passed, this helper can be used to return achievement keys for a given userRewardGroup\nexport const getRewardGroupAchievements = (userRewardGroup: string, teamRank = 1) => {\n  const userGroup = easterPrizes[teamRank].filter((prizeGroup) => {\n    return prizeGroup.group === userRewardGroup\n  })[0]\n  const userAchievements = userGroup && userGroup.achievements\n  return userAchievements\n}\n\nexport default localiseTradingVolume\n"]},"metadata":{},"sourceType":"module"}