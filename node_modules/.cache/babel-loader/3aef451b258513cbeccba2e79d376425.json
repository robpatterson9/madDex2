{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import{formatUnits}from'@ethersproject/units';import{Card,CardBody,Heading,Text}from'@pancakeswap/uikit';import{useWeb3React}from'@web3-react/core';import{useTranslation}from'contexts/Localization';import useApproveConfirmTransaction from'hooks/useApproveConfirmTransaction';import{useCake,useBunnyFactory}from'hooks/useContract';import{FetchStatus,useGetCakeBalance}from'hooks/useTokenBalance';import{useCallWithGasPrice}from'hooks/useCallWithGasPrice';import ApproveConfirmButtons from'components/ApproveConfirmButtons';import useToast from'hooks/useToast';import{useAppDispatch}from'state';import{fetchUserNfts}from'state/nftMarket/reducer';import{useGetCollections}from'state/nftMarket/hooks';import{getNftsFromCollectionApi}from'state/nftMarket/helpers';import{pancakeBunniesAddress}from'views/Nft/market/constants';import SelectionCard from'./SelectionCard';import NextStepButton from'./NextStepButton';import useProfileCreation from'./contexts/hook';import{MINT_COST,STARTER_NFT_BUNNY_IDS}from'./config';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Mint=function Mint(){var _useState=useState(''),_useState2=_slicedToArray(_useState,2),selectedBunnyId=_useState2[0],setSelectedBunnyId=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),starterNfts=_useState4[0],setStarterNfts=_useState4[1];var _useProfileCreation=useProfileCreation(),actions=_useProfileCreation.actions,minimumCakeRequired=_useProfileCreation.minimumCakeRequired,allowance=_useProfileCreation.allowance;var collections=useGetCollections();var _useToast=useToast(),toastSuccess=_useToast.toastSuccess;var dispatch=useAppDispatch();var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var cakeContract=useCake();var bunnyFactoryContract=useBunnyFactory();var _useTranslation=useTranslation(),t=_useTranslation.t;var _useGetCakeBalance=useGetCakeBalance(),cakeBalance=_useGetCakeBalance.balance,fetchStatus=_useGetCakeBalance.fetchStatus;var hasMinimumCakeRequired=fetchStatus===FetchStatus.SUCCESS&&cakeBalance.gte(MINT_COST);var _useCallWithGasPrice=useCallWithGasPrice(),callWithGasPrice=_useCallWithGasPrice.callWithGasPrice;useEffect(function(){var getStarterNfts=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$getNftsFromCol,allPbTokens,nfts;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getNftsFromCollectionApi(pancakeBunniesAddress);case 2:_yield$getNftsFromCol=_context.sent;allPbTokens=_yield$getNftsFromCol.data;nfts=STARTER_NFT_BUNNY_IDS.map(function(bunnyId){if(allPbTokens&&allPbTokens[bunnyId]){return _objectSpread(_objectSpread({},allPbTokens[bunnyId]),{},{bunnyId:bunnyId});}return undefined;});setStarterNfts(nfts);case 6:case\"end\":return _context.stop();}}},_callee);}));return function getStarterNfts(){return _ref.apply(this,arguments);};}();if(starterNfts.length===0){getStarterNfts();}},[starterNfts]);var _useApproveConfirmTra=useApproveConfirmTransaction({onRequiresApproval:function(){var _onRequiresApproval=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return cakeContract.allowance(account,bunnyFactoryContract.address);case 3:response=_context2.sent;return _context2.abrupt(\"return\",response.gte(minimumCakeRequired));case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](0);return _context2.abrupt(\"return\",false);case 10:case\"end\":return _context2.stop();}}},_callee2,null,[[0,7]]);}));function onRequiresApproval(){return _onRequiresApproval.apply(this,arguments);}return onRequiresApproval;}(),onApprove:function onApprove(){return callWithGasPrice(cakeContract,'approve',[bunnyFactoryContract.address,allowance.toString()]);},onConfirm:function onConfirm(){return callWithGasPrice(bunnyFactoryContract,'mintNFT',[selectedBunnyId]);},onApproveSuccess:function onApproveSuccess(){toastSuccess('Enabled',\"Press 'confirm' to mint this NFT\");},onSuccess:function onSuccess(){toastSuccess('Success','You have minted your starter NFT');dispatch(fetchUserNfts({account:account,collections:collections}));actions.nextStep();}}),isApproving=_useApproveConfirmTra.isApproving,isApproved=_useApproveConfirmTra.isApproved,isConfirmed=_useApproveConfirmTra.isConfirmed,isConfirming=_useApproveConfirmTra.isConfirming,handleApprove=_useApproveConfirmTra.handleApprove,handleConfirm=_useApproveConfirmTra.handleConfirm;return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"20px\",color:\"textSubtle\",bold:true,children:t('Step %num%',{num:1})}),/*#__PURE__*/_jsx(Heading,{as:\"h3\",scale:\"xl\",mb:\"24px\",children:t('Get Starter Collectible')}),/*#__PURE__*/_jsx(Text,{as:\"p\",children:t('Every profile starts by making a “starter” collectible (NFT).')}),/*#__PURE__*/_jsx(Text,{as:\"p\",children:t('This starter will also become your first profile picture.')}),/*#__PURE__*/_jsx(Text,{as:\"p\",mb:\"24px\",children:t('You can change your profile pic later if you get another approved Pancake Collectible.')}),/*#__PURE__*/_jsx(Card,{mb:\"24px\",children:/*#__PURE__*/_jsxs(CardBody,{children:[/*#__PURE__*/_jsx(Heading,{as:\"h4\",scale:\"lg\",mb:\"8px\",children:t('Choose your Starter!')}),/*#__PURE__*/_jsx(Text,{as:\"p\",color:\"textSubtle\",children:t('Choose wisely: you can only ever make one starter collectible!')}),/*#__PURE__*/_jsx(Text,{as:\"p\",mb:\"24px\",color:\"textSubtle\",children:t('Cost: %num% CAKE',{num:formatUnits(MINT_COST)})}),starterNfts.map(function(nft){var handleChange=function handleChange(value){return setSelectedBunnyId(value);};return/*#__PURE__*/_jsx(SelectionCard,{name:\"mintStarter\",value:nft===null||nft===void 0?void 0:nft.bunnyId,image:nft===null||nft===void 0?void 0:nft.image.thumbnail,isChecked:selectedBunnyId===(nft===null||nft===void 0?void 0:nft.bunnyId),onChange:handleChange,disabled:isApproving||isConfirming||isConfirmed||!hasMinimumCakeRequired,children:/*#__PURE__*/_jsx(Text,{bold:true,children:nft===null||nft===void 0?void 0:nft.name})},nft===null||nft===void 0?void 0:nft.name);}),!hasMinimumCakeRequired&&/*#__PURE__*/_jsx(Text,{color:\"failure\",mb:\"16px\",children:t('A minimum of %num% CAKE is required',{num:formatUnits(MINT_COST)})}),/*#__PURE__*/_jsx(ApproveConfirmButtons,{isApproveDisabled:selectedBunnyId===null||isConfirmed||isConfirming||isApproved,isApproving:isApproving,isConfirmDisabled:!isApproved||isConfirmed||!hasMinimumCakeRequired,isConfirming:isConfirming,onApprove:handleApprove,onConfirm:handleConfirm})]})}),/*#__PURE__*/_jsx(NextStepButton,{onClick:actions.nextStep,disabled:!isConfirmed,children:t('Next Step')})]});};export default Mint;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/ProfileCreation/Mint.tsx"],"names":["React","useState","useEffect","formatUnits","Card","CardBody","Heading","Text","useWeb3React","useTranslation","useApproveConfirmTransaction","useCake","useBunnyFactory","FetchStatus","useGetCakeBalance","useCallWithGasPrice","ApproveConfirmButtons","useToast","useAppDispatch","fetchUserNfts","useGetCollections","getNftsFromCollectionApi","pancakeBunniesAddress","SelectionCard","NextStepButton","useProfileCreation","MINT_COST","STARTER_NFT_BUNNY_IDS","Mint","selectedBunnyId","setSelectedBunnyId","starterNfts","setStarterNfts","actions","minimumCakeRequired","allowance","collections","toastSuccess","dispatch","account","cakeContract","bunnyFactoryContract","t","cakeBalance","balance","fetchStatus","hasMinimumCakeRequired","SUCCESS","gte","callWithGasPrice","getStarterNfts","allPbTokens","data","nfts","map","bunnyId","undefined","length","onRequiresApproval","address","response","onApprove","toString","onConfirm","onApproveSuccess","onSuccess","nextStep","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","num","nft","handleChange","value","image","thumbnail","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { formatUnits } from '@ethersproject/units'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useCake, useBunnyFactory } from 'hooks/useContract'\nimport { FetchStatus, useGetCakeBalance } from 'hooks/useTokenBalance'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\nimport useToast from 'hooks/useToast'\nimport { useAppDispatch } from 'state'\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\nimport { useGetCollections } from 'state/nftMarket/hooks'\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\nimport { ApiSingleTokenData } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from 'views/Nft/market/constants'\nimport SelectionCard from './SelectionCard'\nimport NextStepButton from './NextStepButton'\nimport useProfileCreation from './contexts/hook'\nimport { MINT_COST, STARTER_NFT_BUNNY_IDS } from './config'\n\ninterface MintNftData extends ApiSingleTokenData {\n  bunnyId?: string\n}\n\nconst Mint: React.FC = () => {\n  const [selectedBunnyId, setSelectedBunnyId] = useState<string>('')\n  const [starterNfts, setStarterNfts] = useState<MintNftData[]>([])\n  const { actions, minimumCakeRequired, allowance } = useProfileCreation()\n  const collections = useGetCollections()\n  const { toastSuccess } = useToast()\n  const dispatch = useAppDispatch()\n\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const bunnyFactoryContract = useBunnyFactory()\n  const { t } = useTranslation()\n  const { balance: cakeBalance, fetchStatus } = useGetCakeBalance()\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.SUCCESS && cakeBalance.gte(MINT_COST)\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  useEffect(() => {\n    const getStarterNfts = async () => {\n      const { data: allPbTokens } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      const nfts = STARTER_NFT_BUNNY_IDS.map((bunnyId) => {\n        if (allPbTokens && allPbTokens[bunnyId]) {\n          return { ...allPbTokens[bunnyId], bunnyId }\n        }\n        return undefined\n      })\n      setStarterNfts(nfts)\n    }\n    if (starterNfts.length === 0) {\n      getStarterNfts()\n    }\n  }, [starterNfts])\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        // TODO: Move this to a helper, this check will be probably be used many times\n        try {\n          const response = await cakeContract.allowance(account, bunnyFactoryContract.address)\n          return response.gte(minimumCakeRequired)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return callWithGasPrice(cakeContract, 'approve', [bunnyFactoryContract.address, allowance.toString()])\n      },\n      onConfirm: () => {\n        return callWithGasPrice(bunnyFactoryContract, 'mintNFT', [selectedBunnyId])\n      },\n      onApproveSuccess: () => {\n        toastSuccess('Enabled', \"Press 'confirm' to mint this NFT\")\n      },\n      onSuccess: () => {\n        toastSuccess('Success', 'You have minted your starter NFT')\n        dispatch(fetchUserNfts({ account, collections }))\n        actions.nextStep()\n      },\n    })\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 1 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Get Starter Collectible')}\n      </Heading>\n      <Text as=\"p\">{t('Every profile starts by making a “starter” collectible (NFT).')}</Text>\n      <Text as=\"p\">{t('This starter will also become your first profile picture.')}</Text>\n      <Text as=\"p\" mb=\"24px\">\n        {t('You can change your profile pic later if you get another approved Pancake Collectible.')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Choose your Starter!')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {t('Choose wisely: you can only ever make one starter collectible!')}\n          </Text>\n          <Text as=\"p\" mb=\"24px\" color=\"textSubtle\">\n            {t('Cost: %num% CAKE', { num: formatUnits(MINT_COST) })}\n          </Text>\n          {starterNfts.map((nft) => {\n            const handleChange = (value: string) => setSelectedBunnyId(value)\n\n            return (\n              <SelectionCard\n                key={nft?.name}\n                name=\"mintStarter\"\n                value={nft?.bunnyId}\n                image={nft?.image.thumbnail}\n                isChecked={selectedBunnyId === nft?.bunnyId}\n                onChange={handleChange}\n                disabled={isApproving || isConfirming || isConfirmed || !hasMinimumCakeRequired}\n              >\n                <Text bold>{nft?.name}</Text>\n              </SelectionCard>\n            )\n          })}\n          {!hasMinimumCakeRequired && (\n            <Text color=\"failure\" mb=\"16px\">\n              {t('A minimum of %num% CAKE is required', { num: formatUnits(MINT_COST) })}\n            </Text>\n          )}\n          <ApproveConfirmButtons\n            isApproveDisabled={selectedBunnyId === null || isConfirmed || isConfirming || isApproved}\n            isApproving={isApproving}\n            isConfirmDisabled={!isApproved || isConfirmed || !hasMinimumCakeRequired}\n            isConfirming={isConfirming}\n            onApprove={handleApprove}\n            onConfirm={handleConfirm}\n          />\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={!isConfirmed}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default Mint\n"]},"metadata":{},"sourceType":"module"}