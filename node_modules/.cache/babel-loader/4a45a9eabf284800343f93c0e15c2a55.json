{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{useWeb3React}from'@web3-react/core';import{Card,CardBody,PlayCircleOutlineIcon,Button,useTooltip,ArrowUpIcon,ArrowDownIcon}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{useAppDispatch}from'state';import{BetPosition}from'state/types';import{fetchLedgerData}from'state/predictions';import{ROUND_BUFFER}from'state/predictions/config';import useToast from'hooks/useToast';import useTheme from'hooks/useTheme';import{ToastDescriptionWithTx}from'components/Toast';import CardFlip from'../CardFlip';import{formatBnbv2}from'../../helpers';import{RoundResultBox,PrizePoolRow}from'../RoundResult';import MultiplierArrow from'./MultiplierArrow';import CardHeader,{getBorderBackground}from'./CardHeader';import SetPositionCard from'./SetPositionCard';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var OpenRoundCard=function OpenRoundCard(_ref){var round=_ref.round,betAmount=_ref.betAmount,hasEnteredUp=_ref.hasEnteredUp,hasEnteredDown=_ref.hasEnteredDown,bullMultiplier=_ref.bullMultiplier,bearMultiplier=_ref.bearMultiplier;var _useState=useState({isSettingPosition:false,position:BetPosition.BULL}),_useState2=_slicedToArray(_useState,2),state=_useState2[0],setState=_useState2[1];var _useTranslation=useTranslation(),t=_useTranslation.t;var _useTheme=useTheme(),theme=_useTheme.theme;var _useToast=useToast(),toastSuccess=_useToast.toastSuccess;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var dispatch=useAppDispatch();var isSettingPosition=state.isSettingPosition,position=state.position;var isBufferPhase=Date.now()>(round.lockTimestamp+ROUND_BUFFER)*1000;var positionDisplay=position===BetPosition.BULL?t('Up').toUpperCase():t('Down').toUpperCase();var _useTooltip=useTooltip(/*#__PURE__*/_jsx(\"div\",{style:{whiteSpace:'nowrap'},children:\"\".concat(formatBnbv2(betAmount),\" BNB\")}),{placement:'top'}),targetRef=_useTooltip.targetRef,tooltipVisible=_useTooltip.tooltipVisible,tooltip=_useTooltip.tooltip;var getHasEnteredPosition=function getHasEnteredPosition(){if(hasEnteredUp||hasEnteredDown){return false;}if(round.lockPrice!==null){return false;}return true;};var canEnterPosition=getHasEnteredPosition();var handleBack=function handleBack(){return setState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{isSettingPosition:false});});};var handleSetPosition=function handleSetPosition(newPosition){setState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{isSettingPosition:true,position:newPosition});});};var togglePosition=function togglePosition(){setState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},{position:prevState.position===BetPosition.BULL?BetPosition.BEAR:BetPosition.BULL});});};var handleSuccess=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(hash){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return dispatch(fetchLedgerData({account:account,epochs:[round.epoch]}));case 2:handleBack();toastSuccess(t('Success!'),/*#__PURE__*/_jsx(ToastDescriptionWithTx,{txHash:hash,children:t('%position% position entered',{position:positionDisplay})}));case 4:case\"end\":return _context.stop();}}},_callee);}));return function handleSuccess(_x){return _ref2.apply(this,arguments);};}();var getPositionEnteredIcon=function getPositionEnteredIcon(){return position===BetPosition.BULL?/*#__PURE__*/_jsx(ArrowUpIcon,{color:\"currentColor\"}):/*#__PURE__*/_jsx(ArrowDownIcon,{color:\"currentColor\"});};return/*#__PURE__*/_jsxs(CardFlip,{isFlipped:isSettingPosition,height:\"404px\",children:[/*#__PURE__*/_jsxs(Card,{borderBackground:getBorderBackground(theme,'next'),children:[/*#__PURE__*/_jsx(CardHeader,{status:\"next\",epoch:round.epoch,icon:/*#__PURE__*/_jsx(PlayCircleOutlineIcon,{color:\"white\",mr:\"4px\",width:\"21px\"}),title:t('Next')}),/*#__PURE__*/_jsxs(CardBody,{p:\"16px\",children:[/*#__PURE__*/_jsx(MultiplierArrow,{betAmount:betAmount,multiplier:bullMultiplier,hasEntered:hasEnteredUp}),/*#__PURE__*/_jsx(RoundResultBox,{isNext:canEnterPosition,isLive:!canEnterPosition,children:canEnterPosition?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(PrizePoolRow,{totalAmount:round.totalAmount,mb:\"8px\"}),/*#__PURE__*/_jsx(Button,{variant:\"success\",width:\"100%\",onClick:function onClick(){return handleSetPosition(BetPosition.BULL);},mb:\"4px\",disabled:!canEnterPosition||isBufferPhase,children:t('Enter UP')}),/*#__PURE__*/_jsx(Button,{variant:\"danger\",width:\"100%\",onClick:function onClick(){return handleSetPosition(BetPosition.BEAR);},disabled:!canEnterPosition||isBufferPhase,children:t('Enter DOWN')})]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{ref:targetRef,children:/*#__PURE__*/_jsx(Button,{disabled:true,startIcon:getPositionEnteredIcon(),width:\"100%\",mb:\"8px\",children:t('%position% Entered',{position:positionDisplay})})}),/*#__PURE__*/_jsx(PrizePoolRow,{totalAmount:round.totalAmount}),tooltipVisible&&tooltip]})}),/*#__PURE__*/_jsx(MultiplierArrow,{betAmount:betAmount,multiplier:bearMultiplier,betPosition:BetPosition.BEAR,hasEntered:hasEnteredDown})]})]}),/*#__PURE__*/_jsx(SetPositionCard,{onBack:handleBack,onSuccess:handleSuccess,position:position,togglePosition:togglePosition,epoch:round.epoch})]});};export default OpenRoundCard;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Predictions/components/RoundCard/OpenRoundCard.tsx"],"names":["React","useState","useWeb3React","Card","CardBody","PlayCircleOutlineIcon","Button","useTooltip","ArrowUpIcon","ArrowDownIcon","useTranslation","useAppDispatch","BetPosition","fetchLedgerData","ROUND_BUFFER","useToast","useTheme","ToastDescriptionWithTx","CardFlip","formatBnbv2","RoundResultBox","PrizePoolRow","MultiplierArrow","CardHeader","getBorderBackground","SetPositionCard","OpenRoundCard","round","betAmount","hasEnteredUp","hasEnteredDown","bullMultiplier","bearMultiplier","isSettingPosition","position","BULL","state","setState","t","theme","toastSuccess","account","dispatch","isBufferPhase","Date","now","lockTimestamp","positionDisplay","toUpperCase","whiteSpace","placement","targetRef","tooltipVisible","tooltip","getHasEnteredPosition","lockPrice","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","togglePosition","BEAR","handleSuccess","hash","epochs","epoch","getPositionEnteredIcon","totalAmount"],"mappings":"4lBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,YAAT,KAA6B,kBAA7B,CACA,OACEC,IADF,CAEEC,QAFF,CAGEC,qBAHF,CAIEC,MAJF,CAKEC,UALF,CAMEC,WANF,CAOEC,aAPF,KAQO,oBARP,CASA,OAASC,cAAT,KAA+B,uBAA/B,CACA,OAASC,cAAT,KAA+B,OAA/B,CACA,OAASC,WAAT,KAAmD,aAAnD,CACA,OAASC,eAAT,KAAgC,mBAAhC,CACA,OAASC,YAAT,KAA6B,0BAA7B,CACA,MAAOC,CAAAA,QAAP,KAAqB,gBAArB,CACA,MAAOC,CAAAA,QAAP,KAAqB,gBAArB,CACA,OAASC,sBAAT,KAAuC,kBAAvC,CACA,MAAOC,CAAAA,QAAP,KAAqB,aAArB,CACA,OAASC,WAAT,KAA4B,eAA5B,CACA,OAASC,cAAT,CAAyBC,YAAzB,KAA6C,gBAA7C,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,CACA,MAAOC,CAAAA,UAAP,EAAqBC,mBAArB,KAAgD,cAAhD,CACA,MAAOC,CAAAA,eAAP,KAA4B,mBAA5B,C,6IAgBA,GAAMC,CAAAA,aAA2C,CAAG,QAA9CA,CAAAA,aAA8C,MAO9C,IANJC,CAAAA,KAMI,MANJA,KAMI,CALJC,SAKI,MALJA,SAKI,CAJJC,YAII,MAJJA,YAII,CAHJC,cAGI,MAHJA,cAGI,CAFJC,cAEI,MAFJA,cAEI,CADJC,cACI,MADJA,cACI,CACJ,cAA0B/B,QAAQ,CAAQ,CACxCgC,iBAAiB,CAAE,KADqB,CAExCC,QAAQ,CAAEtB,WAAW,CAACuB,IAFkB,CAAR,CAAlC,wCAAOC,KAAP,eAAcC,QAAd,eAIA,oBAAc3B,cAAc,EAA5B,CAAQ4B,CAAR,iBAAQA,CAAR,CACA,cAAkBtB,QAAQ,EAA1B,CAAQuB,KAAR,WAAQA,KAAR,CACA,cAAyBxB,QAAQ,EAAjC,CAAQyB,YAAR,WAAQA,YAAR,CACA,kBAAoBtC,YAAY,EAAhC,CAAQuC,OAAR,eAAQA,OAAR,CACA,GAAMC,CAAAA,QAAQ,CAAG/B,cAAc,EAA/B,CACA,GAAQsB,CAAAA,iBAAR,CAAwCG,KAAxC,CAAQH,iBAAR,CAA2BC,QAA3B,CAAwCE,KAAxC,CAA2BF,QAA3B,CACA,GAAMS,CAAAA,aAAa,CAAGC,IAAI,CAACC,GAAL,GAAa,CAAClB,KAAK,CAACmB,aAAN,CAAsBhC,YAAvB,EAAuC,IAA1E,CACA,GAAMiC,CAAAA,eAAe,CAAGb,QAAQ,GAAKtB,WAAW,CAACuB,IAAzB,CAAgCG,CAAC,CAAC,IAAD,CAAD,CAAQU,WAAR,EAAhC,CAAwDV,CAAC,CAAC,MAAD,CAAD,CAAUU,WAAV,EAAhF,CACA,gBAA+CzC,UAAU,cACvD,YAAK,KAAK,CAAE,CAAE0C,UAAU,CAAE,QAAd,CAAZ,oBAA0C9B,WAAW,CAACS,SAAD,CAArD,UADuD,CAEvD,CAAEsB,SAAS,CAAE,KAAb,CAFuD,CAAzD,CAAQC,SAAR,aAAQA,SAAR,CAAmBC,cAAnB,aAAmBA,cAAnB,CAAmCC,OAAnC,aAAmCA,OAAnC,CAKA,GAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,EAAM,CAClC,GAAIzB,YAAY,EAAIC,cAApB,CAAoC,CAClC,MAAO,MAAP,CACD,CAED,GAAIH,KAAK,CAAC4B,SAAN,GAAoB,IAAxB,CAA8B,CAC5B,MAAO,MAAP,CACD,CAED,MAAO,KAAP,CACD,CAVD,CAYA,GAAMC,CAAAA,gBAAgB,CAAGF,qBAAqB,EAA9C,CAEA,GAAMG,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,SACjBpB,CAAAA,QAAQ,CAAC,SAACqB,SAAD,wCACJA,SADI,MAEPzB,iBAAiB,CAAE,KAFZ,IAAD,CADS,EAAnB,CAMA,GAAM0B,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,WAAD,CAA8B,CACtDvB,QAAQ,CAAC,SAACqB,SAAD,wCACJA,SADI,MAEPzB,iBAAiB,CAAE,IAFZ,CAGPC,QAAQ,CAAE0B,WAHH,IAAD,CAAR,CAKD,CAND,CAQA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3BxB,QAAQ,CAAC,SAACqB,SAAD,wCACJA,SADI,MAEPxB,QAAQ,CAAEwB,SAAS,CAACxB,QAAV,GAAuBtB,WAAW,CAACuB,IAAnC,CAA0CvB,WAAW,CAACkD,IAAtD,CAA6DlD,WAAW,CAACuB,IAF5E,IAAD,CAAR,CAID,CALD,CAOA,GAAM4B,CAAAA,aAAa,2FAAG,iBAAOC,IAAP,wIACdtB,CAAAA,QAAQ,CAAC7B,eAAe,CAAC,CAAE4B,OAAO,CAAPA,OAAF,CAAWwB,MAAM,CAAE,CAACtC,KAAK,CAACuC,KAAP,CAAnB,CAAD,CAAhB,CADM,QAGpBT,UAAU,GAEVjB,YAAY,CACVF,CAAC,CAAC,UAAD,CADS,cAEV,KAAC,sBAAD,EAAwB,MAAM,CAAE0B,IAAhC,UACG1B,CAAC,CAAC,6BAAD,CAAgC,CAChCJ,QAAQ,CAAEa,eADsB,CAAhC,CADJ,EAFU,CAAZ,CALoB,sDAAH,kBAAbgB,CAAAA,aAAa,6CAAnB,CAeA,GAAMI,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,EAAM,CACnC,MAAOjC,CAAAA,QAAQ,GAAKtB,WAAW,CAACuB,IAAzB,cAAgC,KAAC,WAAD,EAAa,KAAK,CAAC,cAAnB,EAAhC,cAAuE,KAAC,aAAD,EAAe,KAAK,CAAC,cAArB,EAA9E,CACD,CAFD,CAIA,mBACE,MAAC,QAAD,EAAU,SAAS,CAAEF,iBAArB,CAAwC,MAAM,CAAC,OAA/C,wBACE,MAAC,IAAD,EAAM,gBAAgB,CAAET,mBAAmB,CAACe,KAAD,CAAQ,MAAR,CAA3C,wBACE,KAAC,UAAD,EACE,MAAM,CAAC,MADT,CAEE,KAAK,CAAEZ,KAAK,CAACuC,KAFf,CAGE,IAAI,cAAE,KAAC,qBAAD,EAAuB,KAAK,CAAC,OAA7B,CAAqC,EAAE,CAAC,KAAxC,CAA8C,KAAK,CAAC,MAApD,EAHR,CAIE,KAAK,CAAE5B,CAAC,CAAC,MAAD,CAJV,EADF,cAOE,MAAC,QAAD,EAAU,CAAC,CAAC,MAAZ,wBACE,KAAC,eAAD,EAAiB,SAAS,CAAEV,SAA5B,CAAuC,UAAU,CAAEG,cAAnD,CAAmE,UAAU,CAAEF,YAA/E,EADF,cAEE,KAAC,cAAD,EAAgB,MAAM,CAAE2B,gBAAxB,CAA0C,MAAM,CAAE,CAACA,gBAAnD,UACGA,gBAAgB,cACf,wCACE,KAAC,YAAD,EAAc,WAAW,CAAE7B,KAAK,CAACyC,WAAjC,CAA8C,EAAE,CAAC,KAAjD,EADF,cAEE,KAAC,MAAD,EACE,OAAO,CAAC,SADV,CAEE,KAAK,CAAC,MAFR,CAGE,OAAO,CAAE,yBAAMT,CAAAA,iBAAiB,CAAC/C,WAAW,CAACuB,IAAb,CAAvB,EAHX,CAIE,EAAE,CAAC,KAJL,CAKE,QAAQ,CAAE,CAACqB,gBAAD,EAAqBb,aALjC,UAOGL,CAAC,CAAC,UAAD,CAPJ,EAFF,cAWE,KAAC,MAAD,EACE,OAAO,CAAC,QADV,CAEE,KAAK,CAAC,MAFR,CAGE,OAAO,CAAE,yBAAMqB,CAAAA,iBAAiB,CAAC/C,WAAW,CAACkD,IAAb,CAAvB,EAHX,CAIE,QAAQ,CAAE,CAACN,gBAAD,EAAqBb,aAJjC,UAMGL,CAAC,CAAC,YAAD,CANJ,EAXF,GADe,cAsBf,wCACE,YAAK,GAAG,CAAEa,SAAV,uBACE,KAAC,MAAD,EAAQ,QAAQ,KAAhB,CAAiB,SAAS,CAAEgB,sBAAsB,EAAlD,CAAsD,KAAK,CAAC,MAA5D,CAAmE,EAAE,CAAC,KAAtE,UACG7B,CAAC,CAAC,oBAAD,CAAuB,CAAEJ,QAAQ,CAAEa,eAAZ,CAAvB,CADJ,EADF,EADF,cAME,KAAC,YAAD,EAAc,WAAW,CAAEpB,KAAK,CAACyC,WAAjC,EANF,CAOGhB,cAAc,EAAIC,OAPrB,GAvBJ,EAFF,cAoCE,KAAC,eAAD,EACE,SAAS,CAAEzB,SADb,CAEE,UAAU,CAAEI,cAFd,CAGE,WAAW,CAAEpB,WAAW,CAACkD,IAH3B,CAIE,UAAU,CAAEhC,cAJd,EApCF,GAPF,GADF,cAoDE,KAAC,eAAD,EACE,MAAM,CAAE2B,UADV,CAEE,SAAS,CAAEM,aAFb,CAGE,QAAQ,CAAE7B,QAHZ,CAIE,cAAc,CAAE2B,cAJlB,CAKE,KAAK,CAAElC,KAAK,CAACuC,KALf,EApDF,GADF,CA8DD,CA7ID,CA+IA,cAAexC,CAAAA,aAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport {\n  Card,\n  CardBody,\n  PlayCircleOutlineIcon,\n  Button,\n  useTooltip,\n  ArrowUpIcon,\n  ArrowDownIcon,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\nimport { fetchLedgerData } from 'state/predictions'\nimport { ROUND_BUFFER } from 'state/predictions/config'\nimport useToast from 'hooks/useToast'\nimport useTheme from 'hooks/useTheme'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport CardFlip from '../CardFlip'\nimport { formatBnbv2 } from '../../helpers'\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader, { getBorderBackground } from './CardHeader'\nimport SetPositionCard from './SetPositionCard'\n\ninterface OpenRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\ninterface State {\n  isSettingPosition: boolean\n  position: BetPosition\n}\n\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const [state, setState] = useState<State>({\n    isSettingPosition: false,\n    position: BetPosition.BULL,\n  })\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess } = useToast()\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const { isSettingPosition, position } = state\n  const isBufferPhase = Date.now() > (round.lockTimestamp + ROUND_BUFFER) * 1000\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(betAmount)} BNB`}</div>,\n    { placement: 'top' },\n  )\n\n  const getHasEnteredPosition = () => {\n    if (hasEnteredUp || hasEnteredDown) {\n      return false\n    }\n\n    if (round.lockPrice !== null) {\n      return false\n    }\n\n    return true\n  }\n\n  const canEnterPosition = getHasEnteredPosition()\n\n  const handleBack = () =>\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: false,\n    }))\n\n  const handleSetPosition = (newPosition: BetPosition) => {\n    setState((prevState) => ({\n      ...prevState,\n      isSettingPosition: true,\n      position: newPosition,\n    }))\n  }\n\n  const togglePosition = () => {\n    setState((prevState) => ({\n      ...prevState,\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\n    }))\n  }\n\n  const handleSuccess = async (hash: string) => {\n    await dispatch(fetchLedgerData({ account, epochs: [round.epoch] }))\n\n    handleBack()\n\n    toastSuccess(\n      t('Success!'),\n      <ToastDescriptionWithTx txHash={hash}>\n        {t('%position% position entered', {\n          position: positionDisplay,\n        })}\n      </ToastDescriptionWithTx>,\n    )\n  }\n\n  const getPositionEnteredIcon = () => {\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\n  }\n\n  return (\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\n      <Card borderBackground={getBorderBackground(theme, 'next')}>\n        <CardHeader\n          status=\"next\"\n          epoch={round.epoch}\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\n          title={t('Next')}\n        />\n        <CardBody p=\"16px\">\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\n            {canEnterPosition ? (\n              <>\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\n                <Button\n                  variant=\"success\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\n                  mb=\"4px\"\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter UP')}\n                </Button>\n                <Button\n                  variant=\"danger\"\n                  width=\"100%\"\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\n                  disabled={!canEnterPosition || isBufferPhase}\n                >\n                  {t('Enter DOWN')}\n                </Button>\n              </>\n            ) : (\n              <>\n                <div ref={targetRef}>\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\n                    {t('%position% Entered', { position: positionDisplay })}\n                  </Button>\n                </div>\n                <PrizePoolRow totalAmount={round.totalAmount} />\n                {tooltipVisible && tooltip}\n              </>\n            )}\n          </RoundResultBox>\n          <MultiplierArrow\n            betAmount={betAmount}\n            multiplier={bearMultiplier}\n            betPosition={BetPosition.BEAR}\n            hasEntered={hasEnteredDown}\n          />\n        </CardBody>\n      </Card>\n      <SetPositionCard\n        onBack={handleBack}\n        onSuccess={handleSuccess}\n        position={position}\n        togglePosition={togglePosition}\n        epoch={round.epoch}\n      />\n    </CardFlip>\n  )\n}\n\nexport default OpenRoundCard\n"]},"metadata":{},"sourceType":"module"}