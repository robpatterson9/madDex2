{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _templateObject;import request,{gql}from'graphql-request';import flatten from'lodash/flatten';import{GRAPH_API_PREDICTION_V1}from'config/constants/endpoints';export var getV1History=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var skip,where,response,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:skip=_args.length>0&&_args[0]!==undefined?_args[0]:0;where=_args.length>1&&_args[1]!==undefined?_args[1]:{};_context.next=4;return request(GRAPH_API_PREDICTION_V1,gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n      query getV1BetHistory($skip: Int!, $where: Bet_filter) {\\n        bets(first: 1000, skip: $skip, where: $where, orderBy: createdAt, orderDirection: desc) {\\n          hash\\n          amount\\n          position\\n          claimed\\n          claimedAmount\\n          claimedHash\\n          round {\\n            epoch\\n            position\\n            failed\\n            totalAmount\\n            lockPrice\\n            closePrice\\n            totalBets\\n            totalAmount\\n          }\\n        }\\n      }\\n    \"]))),{skip:skip,where:where});case 4:response=_context.sent;return _context.abrupt(\"return\",response.bets);case 6:case\"end\":return _context.stop();}}},_callee);}));return function getV1History(){return _ref.apply(this,arguments);};}();export var getAllV1History=function getAllV1History(){var where=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};return new Promise(function(resolve,reject){var bets={};var getHistoryChunk=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(skip){var betHistory;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return getV1History(skip,where);case 3:betHistory=_context2.sent;bets[skip]=betHistory;if(betHistory.length===0){resolve(flatten(Object.values(bets)));}else{getHistoryChunk(skip+1000);}_context2.next=11;break;case 8:_context2.prev=8;_context2.t0=_context2[\"catch\"](0);reject(_context2.t0);case 11:case\"end\":return _context2.stop();}}},_callee2,null,[[0,8]]);}));return function getHistoryChunk(_x){return _ref2.apply(this,arguments);};}();getHistoryChunk(0);});};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Predictions/components/v1/helpers.ts"],"names":["request","gql","flatten","GRAPH_API_PREDICTION_V1","getV1History","skip","where","response","bets","getAllV1History","Promise","resolve","reject","getHistoryChunk","betHistory","length","Object","values"],"mappings":"yeAAA,MAAOA,CAAAA,OAAP,EAAkBC,GAAlB,KAA6B,iBAA7B,CACA,MAAOC,CAAAA,OAAP,KAAoB,gBAApB,CACA,OAASC,uBAAT,KAAwC,4BAAxC,CAEA,MAAO,IAAMC,CAAAA,YAAY,0FAAG,2KAAOC,IAAP,+CAAc,CAAd,CAAiBC,KAAjB,+CAAyB,EAAzB,uBACHN,CAAAA,OAAO,CAC5BG,uBAD4B,CAE5BF,GAF4B,6kBAwB5B,CAAEI,IAAI,CAAJA,IAAF,CAAQC,KAAK,CAALA,KAAR,CAxB4B,CADJ,QACpBC,QADoB,+CA2BnBA,QAAQ,CAACC,IA3BU,wDAAH,kBAAZJ,CAAAA,YAAY,0CAAlB,CA8BP,MAAO,IAAMK,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,EAAgD,IAA/CH,CAAAA,KAA+C,2DAAvC,EAAuC,CAC7E,MAAO,IAAII,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACtC,GAAMJ,CAAAA,IAAI,CAAG,EAAb,CAEA,GAAMK,CAAAA,eAAe,2FAAG,kBAAOR,IAAP,6KAEKD,CAAAA,YAAY,CAACC,IAAD,CAAOC,KAAP,CAFjB,QAEdQ,UAFc,gBAGpBN,IAAI,CAACH,IAAD,CAAJ,CAAaS,UAAb,CAEA,GAAIA,UAAU,CAACC,MAAX,GAAsB,CAA1B,CAA6B,CAC3BJ,OAAO,CAACT,OAAO,CAACc,MAAM,CAACC,MAAP,CAAcT,IAAd,CAAD,CAAR,CAAP,CACD,CAFD,IAEO,CACLK,eAAe,CAACR,IAAI,CAAG,IAAR,CAAf,CACD,CATmB,mFAWpBO,MAAM,cAAN,CAXoB,sEAAH,kBAAfC,CAAAA,eAAe,6CAArB,CAeAA,eAAe,CAAC,CAAD,CAAf,CACD,CAnBM,CAAP,CAoBD,CArBM","sourcesContent":["import request, { gql } from 'graphql-request'\nimport flatten from 'lodash/flatten'\nimport { GRAPH_API_PREDICTION_V1 } from 'config/constants/endpoints'\n\nexport const getV1History = async (skip = 0, where = {}): Promise<Record<string, any>[]> => {\n  const response = await request(\n    GRAPH_API_PREDICTION_V1,\n    gql`\n      query getV1BetHistory($skip: Int!, $where: Bet_filter) {\n        bets(first: 1000, skip: $skip, where: $where, orderBy: createdAt, orderDirection: desc) {\n          hash\n          amount\n          position\n          claimed\n          claimedAmount\n          claimedHash\n          round {\n            epoch\n            position\n            failed\n            totalAmount\n            lockPrice\n            closePrice\n            totalBets\n            totalAmount\n          }\n        }\n      }\n    `,\n    { skip, where },\n  )\n  return response.bets\n}\n\nexport const getAllV1History = (where = {}): Promise<Record<string, any>[]> => {\n  return new Promise((resolve, reject) => {\n    const bets = {}\n\n    const getHistoryChunk = async (skip: number) => {\n      try {\n        const betHistory = await getV1History(skip, where)\n        bets[skip] = betHistory\n\n        if (betHistory.length === 0) {\n          resolve(flatten(Object.values(bets)))\n        } else {\n          getHistoryChunk(skip + 1000)\n        }\n      } catch (error) {\n        reject(error)\n      }\n    }\n\n    getHistoryChunk(0)\n  })\n}\n"]},"metadata":{},"sourceType":"module"}