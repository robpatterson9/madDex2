{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/ClaimButton.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { AutoRenewIcon, Button } from '@pancakeswap/uikit';\nimport { PoolIds } from 'config/constants/types';\nimport { useTranslation } from 'contexts/Localization';\nimport useToast from 'hooks/useToast';\nimport { ToastDescriptionWithTx } from 'components/Toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ClaimButton = ({\n  poolId,\n  ifoVersion,\n  walletIfoData\n}) => {\n  _s();\n\n  const userPoolCharacteristics = walletIfoData[poolId];\n  const {\n    t\n  } = useTranslation();\n  const {\n    toastError,\n    toastSuccess\n  } = useToast();\n\n  const setPendingTx = isPending => walletIfoData.setPendingTx(isPending, poolId);\n\n  const handleClaim = async () => {\n    try {\n      let txHash;\n      setPendingTx(true);\n\n      if (ifoVersion === 1) {\n        const tx = await walletIfoData.contract.harvest();\n        const receipt = await tx.wait();\n        txHash = receipt.transactionHash;\n      } else {\n        const tx = await walletIfoData.contract.harvestPool(poolId === PoolIds.poolBasic ? 0 : 1);\n        const receipt = await tx.wait();\n        txHash = receipt.transactionHash;\n      }\n\n      walletIfoData.setIsClaimed(poolId);\n      toastSuccess(t('Success!'), /*#__PURE__*/_jsxDEV(ToastDescriptionWithTx, {\n        txHash: txHash,\n        children: t('You have successfully claimed your rewards.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this));\n    } catch (error) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n      console.error(error);\n    } finally {\n      setPendingTx(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Button, {\n    onClick: handleClaim,\n    disabled: userPoolCharacteristics.isPendingTx,\n    width: \"100%\",\n    isLoading: userPoolCharacteristics.isPendingTx,\n    endIcon: userPoolCharacteristics.isPendingTx ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n      spin: true,\n      color: \"currentColor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 54\n    }, this) : null,\n    children: t('Claim')\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ClaimButton, \"TVDcUOFoSEiY1eHYJog8Xwml5SU=\", false, function () {\n  return [useTranslation, useToast];\n});\n\n_c = ClaimButton;\nexport default ClaimButton;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClaimButton\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/ClaimButton.tsx"],"names":["React","AutoRenewIcon","Button","PoolIds","useTranslation","useToast","ToastDescriptionWithTx","ClaimButton","poolId","ifoVersion","walletIfoData","userPoolCharacteristics","t","toastError","toastSuccess","setPendingTx","isPending","handleClaim","txHash","tx","contract","harvest","receipt","wait","transactionHash","harvestPool","poolBasic","setIsClaimed","error","console","isPendingTx"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,MAAxB,QAAsC,oBAAtC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AAEA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,sBAAT,QAAuC,kBAAvC;;;AAQA,MAAMC,WAA4B,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,UAAV;AAAsBC,EAAAA;AAAtB,CAAD,KAA2C;AAAA;;AAC9E,QAAMC,uBAAuB,GAAGD,aAAa,CAACF,MAAD,CAA7C;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAQR,cAAc,EAA5B;AACA,QAAM;AAAES,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA+BT,QAAQ,EAA7C;;AAEA,QAAMU,YAAY,GAAIC,SAAD,IAAwBN,aAAa,CAACK,YAAd,CAA2BC,SAA3B,EAAsCR,MAAtC,CAA7C;;AAEA,QAAMS,WAAW,GAAG,YAAY;AAC9B,QAAI;AACF,UAAIC,MAAJ;AACAH,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,UAAIN,UAAU,KAAK,CAAnB,EAAsB;AACpB,cAAMU,EAAE,GAAG,MAAMT,aAAa,CAACU,QAAd,CAAuBC,OAAvB,EAAjB;AACA,cAAMC,OAAO,GAAG,MAAMH,EAAE,CAACI,IAAH,EAAtB;AACAL,QAAAA,MAAM,GAAGI,OAAO,CAACE,eAAjB;AACD,OAJD,MAIO;AACL,cAAML,EAAE,GAAG,MAAMT,aAAa,CAACU,QAAd,CAAuBK,WAAvB,CAAmCjB,MAAM,KAAKL,OAAO,CAACuB,SAAnB,GAA+B,CAA/B,GAAmC,CAAtE,CAAjB;AACA,cAAMJ,OAAO,GAAG,MAAMH,EAAE,CAACI,IAAH,EAAtB;AACAL,QAAAA,MAAM,GAAGI,OAAO,CAACE,eAAjB;AACD;;AAEDd,MAAAA,aAAa,CAACiB,YAAd,CAA2BnB,MAA3B;AACAM,MAAAA,YAAY,CACVF,CAAC,CAAC,UAAD,CADS,eAEV,QAAC,sBAAD;AAAwB,QAAA,MAAM,EAAEM,MAAhC;AAAA,kBACGN,CAAC,CAAC,6CAAD;AADJ;AAAA;AAAA;AAAA;AAAA,cAFU,CAAZ;AAMD,KArBD,CAqBE,OAAOgB,KAAP,EAAc;AACdf,MAAAA,UAAU,CAACD,CAAC,CAAC,OAAD,CAAF,EAAaA,CAAC,CAAC,oFAAD,CAAd,CAAV;AACAiB,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,KAxBD,SAwBU;AACRb,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GA5BD;;AA8BA,sBACE,QAAC,MAAD;AACE,IAAA,OAAO,EAAEE,WADX;AAEE,IAAA,QAAQ,EAAEN,uBAAuB,CAACmB,WAFpC;AAGE,IAAA,KAAK,EAAC,MAHR;AAIE,IAAA,SAAS,EAAEnB,uBAAuB,CAACmB,WAJrC;AAKE,IAAA,OAAO,EAAEnB,uBAAuB,CAACmB,WAAxB,gBAAsC,QAAC,aAAD;AAAe,MAAA,IAAI,MAAnB;AAAoB,MAAA,KAAK,EAAC;AAA1B;AAAA;AAAA;AAAA;AAAA,YAAtC,GAAoF,IAL/F;AAAA,cAOGlB,CAAC,CAAC,OAAD;AAPJ;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAhDD;;GAAML,W;UAEUH,c,EACuBC,Q;;;KAHjCE,W;AAkDN,eAAeA,WAAf","sourcesContent":["import React from 'react'\nimport { AutoRenewIcon, Button } from '@pancakeswap/uikit'\nimport { PoolIds } from 'config/constants/types'\nimport { WalletIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport useToast from 'hooks/useToast'\nimport { ToastDescriptionWithTx } from 'components/Toast'\n\ninterface Props {\n  poolId: PoolIds\n  ifoVersion: number\n  walletIfoData: WalletIfoData\n}\n\nconst ClaimButton: React.FC<Props> = ({ poolId, ifoVersion, walletIfoData }) => {\n  const userPoolCharacteristics = walletIfoData[poolId]\n  const { t } = useTranslation()\n  const { toastError, toastSuccess } = useToast()\n\n  const setPendingTx = (isPending: boolean) => walletIfoData.setPendingTx(isPending, poolId)\n\n  const handleClaim = async () => {\n    try {\n      let txHash\n      setPendingTx(true)\n\n      if (ifoVersion === 1) {\n        const tx = await walletIfoData.contract.harvest()\n        const receipt = await tx.wait()\n        txHash = receipt.transactionHash\n      } else {\n        const tx = await walletIfoData.contract.harvestPool(poolId === PoolIds.poolBasic ? 0 : 1)\n        const receipt = await tx.wait()\n        txHash = receipt.transactionHash\n      }\n\n      walletIfoData.setIsClaimed(poolId)\n      toastSuccess(\n        t('Success!'),\n        <ToastDescriptionWithTx txHash={txHash}>\n          {t('You have successfully claimed your rewards.')}\n        </ToastDescriptionWithTx>,\n      )\n    } catch (error) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      console.error(error)\n    } finally {\n      setPendingTx(false)\n    }\n  }\n\n  return (\n    <Button\n      onClick={handleClaim}\n      disabled={userPoolCharacteristics.isPendingTx}\n      width=\"100%\"\n      isLoading={userPoolCharacteristics.isPendingTx}\n      endIcon={userPoolCharacteristics.isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n    >\n      {t('Claim')}\n    </Button>\n  )\n}\n\nexport default ClaimButton\n"]},"metadata":{},"sourceType":"module"}