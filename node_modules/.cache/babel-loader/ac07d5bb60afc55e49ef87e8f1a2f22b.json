{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { JSBI, Percent, Router, TradeType } from '@pancakeswap/sdk';\nimport { useMemo } from 'react';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport { useGasPrice } from 'state/user/hooks';\nimport truncateHash from 'utils/truncateHash';\nimport { BIPS_BASE, INITIAL_ALLOWED_SLIPPAGE } from '../config/constants';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { calculateGasMargin, getRouterContract, isAddress } from '../utils';\nimport isZero from '../utils/isZero';\nimport useTransactionDeadline from './useTransactionDeadline';\nimport useENS from './ENS/useENS';\nexport let SwapCallbackState;\n\n(function (SwapCallbackState) {\n  SwapCallbackState[SwapCallbackState[\"INVALID\"] = 0] = \"INVALID\";\n  SwapCallbackState[SwapCallbackState[\"LOADING\"] = 1] = \"LOADING\";\n  SwapCallbackState[SwapCallbackState[\"VALID\"] = 2] = \"VALID\";\n})(SwapCallbackState || (SwapCallbackState = {}));\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName\n */\nfunction useSwapCallArguments(trade, // trade to execute, required\nallowedSlippage = INITIAL_ALLOWED_SLIPPAGE, // in bips\nrecipientAddressOrName) {\n  _s();\n\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const {\n    address: recipientAddress\n  } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress;\n  const deadline = useTransactionDeadline();\n  return useMemo(() => {\n    if (!trade || !recipient || !library || !account || !chainId || !deadline) return [];\n    const contract = getRouterContract(chainId, library, account);\n\n    if (!contract) {\n      return [];\n    }\n\n    const swapMethods = [];\n    swapMethods.push(Router.swapCallParameters(trade, {\n      feeOnTransfer: false,\n      allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n      recipient,\n      deadline: deadline.toNumber()\n    }));\n\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\n      swapMethods.push(Router.swapCallParameters(trade, {\n        feeOnTransfer: true,\n        allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n        recipient,\n        deadline: deadline.toNumber()\n      }));\n    }\n\n    return swapMethods.map(parameters => ({\n      parameters,\n      contract\n    }));\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade]);\n} // returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\n\n\n_s(useSwapCallArguments, \"s8HoqurgUOlyu7X09x9CGKHKngs=\", false, function () {\n  return [useActiveWeb3React, useENS, useTransactionDeadline];\n});\n\nexport function useSwapCallback(trade, // trade to execute, required\nallowedSlippage = INITIAL_ALLOWED_SLIPPAGE, // in bips\nrecipientAddressOrName) {\n  _s2();\n\n  const {\n    account,\n    chainId,\n    library\n  } = useActiveWeb3React();\n  const gasPrice = useGasPrice();\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, recipientAddressOrName);\n  const addTransaction = useTransactionAdder();\n  const {\n    address: recipientAddress\n  } = useENS(recipientAddressOrName);\n  const recipient = recipientAddressOrName === null ? account : recipientAddress;\n  return useMemo(() => {\n    if (!trade || !library || !account || !chainId) {\n      return {\n        state: SwapCallbackState.INVALID,\n        callback: null,\n        error: 'Missing dependencies'\n      };\n    }\n\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return {\n          state: SwapCallbackState.INVALID,\n          callback: null,\n          error: 'Invalid recipient'\n        };\n      }\n\n      return {\n        state: SwapCallbackState.LOADING,\n        callback: null,\n        error: null\n      };\n    }\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap() {\n        const estimatedCalls = await Promise.all(swapCalls.map(call => {\n          const {\n            parameters: {\n              methodName,\n              args,\n              value\n            },\n            contract\n          } = call;\n          const options = !value || isZero(value) ? {} : {\n            value\n          };\n          return contract.estimateGas[methodName](...args, options).then(gasEstimate => {\n            return {\n              call,\n              gasEstimate\n            };\n          }).catch(gasError => {\n            console.error('Gas estimate failed, trying eth_call to extract error', call);\n            return contract.callStatic[methodName](...args, options).then(result => {\n              console.error('Unexpected successful call after failed estimate gas', call, gasError, result);\n              return {\n                call,\n                error: new Error('Unexpected issue with estimating the gas. Please try again.')\n              };\n            }).catch(callError => {\n              var _callError$data;\n\n              console.error('Call threw error', call, callError);\n              const reason = callError.reason || ((_callError$data = callError.data) === null || _callError$data === void 0 ? void 0 : _callError$data.message) || callError.message;\n              const errorMessage = `The transaction cannot succeed due to error: ${reason !== null && reason !== void 0 ? reason : 'Unknown error, check the logs'}.`;\n              return {\n                call,\n                error: new Error(errorMessage)\n              };\n            });\n          });\n        })); // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n\n        const successfulEstimation = estimatedCalls.find((el, ix, list) => 'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]));\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter(call => 'error' in call);\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error;\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error');\n        }\n\n        const {\n          call: {\n            contract,\n            parameters: {\n              methodName,\n              args,\n              value\n            }\n          },\n          gasEstimate\n        } = successfulEstimation;\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          gasPrice,\n          ...(value && !isZero(value) ? {\n            value,\n            from: account\n          } : {\n            from: account\n          })\n        }).then(response => {\n          const inputSymbol = trade.inputAmount.currency.symbol;\n          const outputSymbol = trade.outputAmount.currency.symbol;\n          const inputAmount = trade.inputAmount.toSignificant(3);\n          const outputAmount = trade.outputAmount.toSignificant(3);\n          const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`;\n          const withRecipient = recipient === account ? base : `${base} to ${recipientAddressOrName && isAddress(recipientAddressOrName) ? truncateHash(recipientAddressOrName) : recipientAddressOrName}`;\n          addTransaction(response, {\n            summary: withRecipient\n          });\n          return response.hash;\n        }).catch(error => {\n          // if the user rejected the tx, pass this along\n          if ((error === null || error === void 0 ? void 0 : error.code) === 4001) {\n            throw new Error('Transaction rejected.');\n          } else {\n            // otherwise, the error was unexpected and we need to convey that\n            console.error(`Swap failed`, error, methodName, args, value);\n            throw new Error(`Swap failed: ${error.message}`);\n          }\n        });\n      },\n      error: null\n    };\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction, gasPrice]);\n}\n\n_s2(useSwapCallback, \"ZIb+1iq9rk2UxqxUi7JdI5eC0wY=\", false, function () {\n  return [useActiveWeb3React, useGasPrice, useSwapCallArguments, useTransactionAdder, useENS];\n});","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/hooks/useSwapCallback.ts"],"names":["JSBI","Percent","Router","TradeType","useMemo","useActiveWeb3React","useGasPrice","truncateHash","BIPS_BASE","INITIAL_ALLOWED_SLIPPAGE","useTransactionAdder","calculateGasMargin","getRouterContract","isAddress","isZero","useTransactionDeadline","useENS","SwapCallbackState","useSwapCallArguments","trade","allowedSlippage","recipientAddressOrName","account","chainId","library","address","recipientAddress","recipient","deadline","contract","swapMethods","push","swapCallParameters","feeOnTransfer","BigInt","toNumber","tradeType","EXACT_INPUT","map","parameters","useSwapCallback","gasPrice","swapCalls","addTransaction","state","INVALID","callback","error","LOADING","VALID","onSwap","estimatedCalls","Promise","all","call","methodName","args","value","options","estimateGas","then","gasEstimate","catch","gasError","console","callStatic","result","Error","callError","reason","data","message","errorMessage","successfulEstimation","find","el","ix","list","length","errorCalls","filter","gasLimit","from","response","inputSymbol","inputAmount","currency","symbol","outputSymbol","outputAmount","toSignificant","base","withRecipient","summary","hash","code"],"mappings":";;;AAEA,SAASA,IAAT,EAAeC,OAAf,EAAwBC,MAAxB,EAAuDC,SAAvD,QAAwE,kBAAxE;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,OAAOC,kBAAP,MAA+B,0BAA/B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,SAASC,SAAT,EAAoBC,wBAApB,QAAoD,qBAApD;AACA,SAASC,mBAAT,QAAoC,6BAApC;AACA,SAASC,kBAAT,EAA6BC,iBAA7B,EAAgDC,SAAhD,QAAiE,UAAjE;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,MAAP,MAAmB,cAAnB;AAEA,WAAYC,iBAAZ;;WAAYA,iB;AAAAA,EAAAA,iB,CAAAA,iB;AAAAA,EAAAA,iB,CAAAA,iB;AAAAA,EAAAA,iB,CAAAA,iB;GAAAA,iB,KAAAA,iB;;AAuBZ;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,oBAAT,CACEC,KADF,EAC4B;AAC1BC,eAAuB,GAAGX,wBAF5B,EAEsD;AACpDY,sBAHF,EAIc;AAAA;;AACZ,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAAgCnB,kBAAkB,EAAxD;AAEA,QAAM;AAAEoB,IAAAA,OAAO,EAAEC;AAAX,MAAgCV,MAAM,CAACK,sBAAD,CAA5C;AACA,QAAMM,SAAS,GAAGN,sBAAsB,KAAK,IAA3B,GAAkCC,OAAlC,GAA4CI,gBAA9D;AACA,QAAME,QAAQ,GAAGb,sBAAsB,EAAvC;AAEA,SAAOX,OAAO,CAAC,MAAM;AACnB,QAAI,CAACe,KAAD,IAAU,CAACQ,SAAX,IAAwB,CAACH,OAAzB,IAAoC,CAACF,OAArC,IAAgD,CAACC,OAAjD,IAA4D,CAACK,QAAjE,EAA2E,OAAO,EAAP;AAE3E,UAAMC,QAAyB,GAAGjB,iBAAiB,CAACW,OAAD,EAAUC,OAAV,EAAmBF,OAAnB,CAAnD;;AACA,QAAI,CAACO,QAAL,EAAe;AACb,aAAO,EAAP;AACD;;AAED,UAAMC,WAAW,GAAG,EAApB;AAEAA,IAAAA,WAAW,CAACC,IAAZ,CACE7B,MAAM,CAAC8B,kBAAP,CAA0Bb,KAA1B,EAAiC;AAC/Bc,MAAAA,aAAa,EAAE,KADgB;AAE/Bb,MAAAA,eAAe,EAAE,IAAInB,OAAJ,CAAYD,IAAI,CAACkC,MAAL,CAAYd,eAAZ,CAAZ,EAA0CZ,SAA1C,CAFc;AAG/BmB,MAAAA,SAH+B;AAI/BC,MAAAA,QAAQ,EAAEA,QAAQ,CAACO,QAAT;AAJqB,KAAjC,CADF;;AASA,QAAIhB,KAAK,CAACiB,SAAN,KAAoBjC,SAAS,CAACkC,WAAlC,EAA+C;AAC7CP,MAAAA,WAAW,CAACC,IAAZ,CACE7B,MAAM,CAAC8B,kBAAP,CAA0Bb,KAA1B,EAAiC;AAC/Bc,QAAAA,aAAa,EAAE,IADgB;AAE/Bb,QAAAA,eAAe,EAAE,IAAInB,OAAJ,CAAYD,IAAI,CAACkC,MAAL,CAAYd,eAAZ,CAAZ,EAA0CZ,SAA1C,CAFc;AAG/BmB,QAAAA,SAH+B;AAI/BC,QAAAA,QAAQ,EAAEA,QAAQ,CAACO,QAAT;AAJqB,OAAjC,CADF;AAQD;;AAED,WAAOL,WAAW,CAACQ,GAAZ,CAAiBC,UAAD,KAAiB;AAAEA,MAAAA,UAAF;AAAcV,MAAAA;AAAd,KAAjB,CAAhB,CAAP;AACD,GA/Ba,EA+BX,CAACP,OAAD,EAAUF,eAAV,EAA2BG,OAA3B,EAAoCK,QAApC,EAA8CJ,OAA9C,EAAuDG,SAAvD,EAAkER,KAAlE,CA/BW,CAAd;AAgCD,C,CAED;AACA;;;GA9CSD,oB;UAK+Bb,kB,EAEAW,M,EAErBD,sB;;;AAsCnB,OAAO,SAASyB,eAAT,CACLrB,KADK,EACqB;AAC1BC,eAAuB,GAAGX,wBAFrB,EAE+C;AACpDY,sBAHK,EAIyF;AAAA;;AAC9F,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA;AAApB,MAAgCnB,kBAAkB,EAAxD;AACA,QAAMoC,QAAQ,GAAGnC,WAAW,EAA5B;AAEA,QAAMoC,SAAS,GAAGxB,oBAAoB,CAACC,KAAD,EAAQC,eAAR,EAAyBC,sBAAzB,CAAtC;AAEA,QAAMsB,cAAc,GAAGjC,mBAAmB,EAA1C;AAEA,QAAM;AAAEe,IAAAA,OAAO,EAAEC;AAAX,MAAgCV,MAAM,CAACK,sBAAD,CAA5C;AACA,QAAMM,SAAS,GAAGN,sBAAsB,KAAK,IAA3B,GAAkCC,OAAlC,GAA4CI,gBAA9D;AAEA,SAAOtB,OAAO,CAAC,MAAM;AACnB,QAAI,CAACe,KAAD,IAAU,CAACK,OAAX,IAAsB,CAACF,OAAvB,IAAkC,CAACC,OAAvC,EAAgD;AAC9C,aAAO;AAAEqB,QAAAA,KAAK,EAAE3B,iBAAiB,CAAC4B,OAA3B;AAAoCC,QAAAA,QAAQ,EAAE,IAA9C;AAAoDC,QAAAA,KAAK,EAAE;AAA3D,OAAP;AACD;;AACD,QAAI,CAACpB,SAAL,EAAgB;AACd,UAAIN,sBAAsB,KAAK,IAA/B,EAAqC;AACnC,eAAO;AAAEuB,UAAAA,KAAK,EAAE3B,iBAAiB,CAAC4B,OAA3B;AAAoCC,UAAAA,QAAQ,EAAE,IAA9C;AAAoDC,UAAAA,KAAK,EAAE;AAA3D,SAAP;AACD;;AACD,aAAO;AAAEH,QAAAA,KAAK,EAAE3B,iBAAiB,CAAC+B,OAA3B;AAAoCF,QAAAA,QAAQ,EAAE,IAA9C;AAAoDC,QAAAA,KAAK,EAAE;AAA3D,OAAP;AACD;;AAED,WAAO;AACLH,MAAAA,KAAK,EAAE3B,iBAAiB,CAACgC,KADpB;AAELH,MAAAA,QAAQ,EAAE,eAAeI,MAAf,GAAyC;AACjD,cAAMC,cAAmC,GAAG,MAAMC,OAAO,CAACC,GAAR,CAChDX,SAAS,CAACJ,GAAV,CAAegB,IAAD,IAAU;AACtB,gBAAM;AACJf,YAAAA,UAAU,EAAE;AAAEgB,cAAAA,UAAF;AAAcC,cAAAA,IAAd;AAAoBC,cAAAA;AAApB,aADR;AAEJ5B,YAAAA;AAFI,cAGFyB,IAHJ;AAIA,gBAAMI,OAAO,GAAG,CAACD,KAAD,IAAU3C,MAAM,CAAC2C,KAAD,CAAhB,GAA0B,EAA1B,GAA+B;AAAEA,YAAAA;AAAF,WAA/C;AAEA,iBAAO5B,QAAQ,CAAC8B,WAAT,CAAqBJ,UAArB,EAAiC,GAAGC,IAApC,EAA0CE,OAA1C,EACJE,IADI,CACEC,WAAD,IAAiB;AACrB,mBAAO;AACLP,cAAAA,IADK;AAELO,cAAAA;AAFK,aAAP;AAID,WANI,EAOJC,KAPI,CAOGC,QAAD,IAAc;AACnBC,YAAAA,OAAO,CAACjB,KAAR,CAAc,uDAAd,EAAuEO,IAAvE;AAEA,mBAAOzB,QAAQ,CAACoC,UAAT,CAAoBV,UAApB,EAAgC,GAAGC,IAAnC,EAAyCE,OAAzC,EACJE,IADI,CACEM,MAAD,IAAY;AAChBF,cAAAA,OAAO,CAACjB,KAAR,CAAc,sDAAd,EAAsEO,IAAtE,EAA4ES,QAA5E,EAAsFG,MAAtF;AACA,qBAAO;AAAEZ,gBAAAA,IAAF;AAAQP,gBAAAA,KAAK,EAAE,IAAIoB,KAAJ,CAAU,6DAAV;AAAf,eAAP;AACD,aAJI,EAKJL,KALI,CAKGM,SAAD,IAAe;AAAA;;AACpBJ,cAAAA,OAAO,CAACjB,KAAR,CAAc,kBAAd,EAAkCO,IAAlC,EAAwCc,SAAxC;AACA,oBAAMC,MAAc,GAAGD,SAAS,CAACC,MAAV,wBAAoBD,SAAS,CAACE,IAA9B,oDAAoB,gBAAgBC,OAApC,KAA+CH,SAAS,CAACG,OAAhF;AACA,oBAAMC,YAAY,GAAI,gDACpBH,MADmB,aACnBA,MADmB,cACnBA,MADmB,GACT,+BACX,GAFD;AAIA,qBAAO;AAAEf,gBAAAA,IAAF;AAAQP,gBAAAA,KAAK,EAAE,IAAIoB,KAAJ,CAAUK,YAAV;AAAf,eAAP;AACD,aAbI,CAAP;AAcD,WAxBI,CAAP;AAyBD,SAhCD,CADgD,CAAlD,CADiD,CAqCjD;;AACA,cAAMC,oBAAoB,GAAGtB,cAAc,CAACuB,IAAf,CAC3B,CAACC,EAAD,EAAKC,EAAL,EAASC,IAAT,KACE,iBAAiBF,EAAjB,KAAwBC,EAAE,KAAKC,IAAI,CAACC,MAAL,GAAc,CAArB,IAA0B,iBAAiBD,IAAI,CAACD,EAAE,GAAG,CAAN,CAAvE,CAFyB,CAA7B;;AAKA,YAAI,CAACH,oBAAL,EAA2B;AACzB,gBAAMM,UAAU,GAAG5B,cAAc,CAAC6B,MAAf,CAAuB1B,IAAD,IAA8B,WAAWA,IAA/D,CAAnB;AACA,cAAIyB,UAAU,CAACD,MAAX,GAAoB,CAAxB,EAA2B,MAAMC,UAAU,CAACA,UAAU,CAACD,MAAX,GAAoB,CAArB,CAAV,CAAkC/B,KAAxC;AAC3B,gBAAM,IAAIoB,KAAJ,CAAU,4EAAV,CAAN;AACD;;AAED,cAAM;AACJb,UAAAA,IAAI,EAAE;AACJzB,YAAAA,QADI;AAEJU,YAAAA,UAAU,EAAE;AAAEgB,cAAAA,UAAF;AAAcC,cAAAA,IAAd;AAAoBC,cAAAA;AAApB;AAFR,WADF;AAKJI,UAAAA;AALI,YAMFY,oBANJ;AAQA,eAAO5C,QAAQ,CAAC0B,UAAD,CAAR,CAAqB,GAAGC,IAAxB,EAA8B;AACnCyB,UAAAA,QAAQ,EAAEtE,kBAAkB,CAACkD,WAAD,CADO;AAEnCpB,UAAAA,QAFmC;AAGnC,cAAIgB,KAAK,IAAI,CAAC3C,MAAM,CAAC2C,KAAD,CAAhB,GAA0B;AAAEA,YAAAA,KAAF;AAASyB,YAAAA,IAAI,EAAE5D;AAAf,WAA1B,GAAqD;AAAE4D,YAAAA,IAAI,EAAE5D;AAAR,WAAzD;AAHmC,SAA9B,EAKJsC,IALI,CAKEuB,QAAD,IAAmB;AACvB,gBAAMC,WAAW,GAAGjE,KAAK,CAACkE,WAAN,CAAkBC,QAAlB,CAA2BC,MAA/C;AACA,gBAAMC,YAAY,GAAGrE,KAAK,CAACsE,YAAN,CAAmBH,QAAnB,CAA4BC,MAAjD;AACA,gBAAMF,WAAW,GAAGlE,KAAK,CAACkE,WAAN,CAAkBK,aAAlB,CAAgC,CAAhC,CAApB;AACA,gBAAMD,YAAY,GAAGtE,KAAK,CAACsE,YAAN,CAAmBC,aAAnB,CAAiC,CAAjC,CAArB;AAEA,gBAAMC,IAAI,GAAI,QAAON,WAAY,IAAGD,WAAY,QAAOK,YAAa,IAAGD,YAAa,EAApF;AACA,gBAAMI,aAAa,GACjBjE,SAAS,KAAKL,OAAd,GACIqE,IADJ,GAEK,GAAEA,IAAK,OACNtE,sBAAsB,IAAIR,SAAS,CAACQ,sBAAD,CAAnC,GACId,YAAY,CAACc,sBAAD,CADhB,GAEIA,sBACL,EAPP;AASAsB,UAAAA,cAAc,CAACwC,QAAD,EAAW;AACvBU,YAAAA,OAAO,EAAED;AADc,WAAX,CAAd;AAIA,iBAAOT,QAAQ,CAACW,IAAhB;AACD,SA1BI,EA2BJhC,KA3BI,CA2BGf,KAAD,IAAgB;AACrB;AACA,cAAI,CAAAA,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEgD,IAAP,MAAgB,IAApB,EAA0B;AACxB,kBAAM,IAAI5B,KAAJ,CAAU,uBAAV,CAAN;AACD,WAFD,MAEO;AACL;AACAH,YAAAA,OAAO,CAACjB,KAAR,CAAe,aAAf,EAA6BA,KAA7B,EAAoCQ,UAApC,EAAgDC,IAAhD,EAAsDC,KAAtD;AACA,kBAAM,IAAIU,KAAJ,CAAW,gBAAepB,KAAK,CAACwB,OAAQ,EAAxC,CAAN;AACD;AACF,SApCI,CAAP;AAqCD,OAhGI;AAiGLxB,MAAAA,KAAK,EAAE;AAjGF,KAAP;AAmGD,GA9Ga,EA8GX,CAAC5B,KAAD,EAAQK,OAAR,EAAiBF,OAAjB,EAA0BC,OAA1B,EAAmCI,SAAnC,EAA8CN,sBAA9C,EAAsEqB,SAAtE,EAAiFC,cAAjF,EAAiGF,QAAjG,CA9GW,CAAd;AA+GD;;IA9HeD,e;UAKwBnC,kB,EACrBC,W,EAECY,oB,EAEKR,mB,EAEeM,M","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { JSBI, Percent, Router, SwapParameters, Trade, TradeType } from '@pancakeswap/sdk'\nimport { useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { useGasPrice } from 'state/user/hooks'\nimport truncateHash from 'utils/truncateHash'\nimport { BIPS_BASE, INITIAL_ALLOWED_SLIPPAGE } from '../config/constants'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { calculateGasMargin, getRouterContract, isAddress } from '../utils'\nimport isZero from '../utils/isZero'\nimport useTransactionDeadline from './useTransactionDeadline'\nimport useENS from './ENS/useENS'\n\nexport enum SwapCallbackState {\n  INVALID,\n  LOADING,\n  VALID,\n}\n\ninterface SwapCall {\n  contract: Contract\n  parameters: SwapParameters\n}\n\ninterface SuccessfulCall {\n  call: SwapCall\n  gasEstimate: BigNumber\n}\n\ninterface FailedCall {\n  call: SwapCall\n  error: Error\n}\n\ntype EstimatedSwapCall = SuccessfulCall | FailedCall\n\n/**\n * Returns the swap calls that can be used to make the trade\n * @param trade trade to execute\n * @param allowedSlippage user allowed slippage\n * @param recipientAddressOrName\n */\nfunction useSwapCallArguments(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddressOrName: string | null, // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): SwapCall[] {\n  const { account, chainId, library } = useActiveWeb3React()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n  const deadline = useTransactionDeadline()\n\n  return useMemo(() => {\n    if (!trade || !recipient || !library || !account || !chainId || !deadline) return []\n\n    const contract: Contract | null = getRouterContract(chainId, library, account)\n    if (!contract) {\n      return []\n    }\n\n    const swapMethods = []\n\n    swapMethods.push(\n      Router.swapCallParameters(trade, {\n        feeOnTransfer: false,\n        allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n        recipient,\n        deadline: deadline.toNumber(),\n      }),\n    )\n\n    if (trade.tradeType === TradeType.EXACT_INPUT) {\n      swapMethods.push(\n        Router.swapCallParameters(trade, {\n          feeOnTransfer: true,\n          allowedSlippage: new Percent(JSBI.BigInt(allowedSlippage), BIPS_BASE),\n          recipient,\n          deadline: deadline.toNumber(),\n        }),\n      )\n    }\n\n    return swapMethods.map((parameters) => ({ parameters, contract }))\n  }, [account, allowedSlippage, chainId, deadline, library, recipient, trade])\n}\n\n// returns a function that will execute a swap, if the parameters are all valid\n// and the user has approved the slippage adjusted input amount for the trade\nexport function useSwapCallback(\n  trade: Trade | undefined, // trade to execute, required\n  allowedSlippage: number = INITIAL_ALLOWED_SLIPPAGE, // in bips\n  recipientAddressOrName: string | null, // the ENS name or address of the recipient of the trade, or null if swap should be returned to sender\n): { state: SwapCallbackState; callback: null | (() => Promise<string>); error: string | null } {\n  const { account, chainId, library } = useActiveWeb3React()\n  const gasPrice = useGasPrice()\n\n  const swapCalls = useSwapCallArguments(trade, allowedSlippage, recipientAddressOrName)\n\n  const addTransaction = useTransactionAdder()\n\n  const { address: recipientAddress } = useENS(recipientAddressOrName)\n  const recipient = recipientAddressOrName === null ? account : recipientAddress\n\n  return useMemo(() => {\n    if (!trade || !library || !account || !chainId) {\n      return { state: SwapCallbackState.INVALID, callback: null, error: 'Missing dependencies' }\n    }\n    if (!recipient) {\n      if (recipientAddressOrName !== null) {\n        return { state: SwapCallbackState.INVALID, callback: null, error: 'Invalid recipient' }\n      }\n      return { state: SwapCallbackState.LOADING, callback: null, error: null }\n    }\n\n    return {\n      state: SwapCallbackState.VALID,\n      callback: async function onSwap(): Promise<string> {\n        const estimatedCalls: EstimatedSwapCall[] = await Promise.all(\n          swapCalls.map((call) => {\n            const {\n              parameters: { methodName, args, value },\n              contract,\n            } = call\n            const options = !value || isZero(value) ? {} : { value }\n\n            return contract.estimateGas[methodName](...args, options)\n              .then((gasEstimate) => {\n                return {\n                  call,\n                  gasEstimate,\n                }\n              })\n              .catch((gasError) => {\n                console.error('Gas estimate failed, trying eth_call to extract error', call)\n\n                return contract.callStatic[methodName](...args, options)\n                  .then((result) => {\n                    console.error('Unexpected successful call after failed estimate gas', call, gasError, result)\n                    return { call, error: new Error('Unexpected issue with estimating the gas. Please try again.') }\n                  })\n                  .catch((callError) => {\n                    console.error('Call threw error', call, callError)\n                    const reason: string = callError.reason || callError.data?.message || callError.message\n                    const errorMessage = `The transaction cannot succeed due to error: ${\n                      reason ?? 'Unknown error, check the logs'\n                    }.`\n\n                    return { call, error: new Error(errorMessage) }\n                  })\n              })\n          }),\n        )\n\n        // a successful estimation is a bignumber gas estimate and the next call is also a bignumber gas estimate\n        const successfulEstimation = estimatedCalls.find(\n          (el, ix, list): el is SuccessfulCall =>\n            'gasEstimate' in el && (ix === list.length - 1 || 'gasEstimate' in list[ix + 1]),\n        )\n\n        if (!successfulEstimation) {\n          const errorCalls = estimatedCalls.filter((call): call is FailedCall => 'error' in call)\n          if (errorCalls.length > 0) throw errorCalls[errorCalls.length - 1].error\n          throw new Error('Unexpected error. Please contact support: none of the calls threw an error')\n        }\n\n        const {\n          call: {\n            contract,\n            parameters: { methodName, args, value },\n          },\n          gasEstimate,\n        } = successfulEstimation\n\n        return contract[methodName](...args, {\n          gasLimit: calculateGasMargin(gasEstimate),\n          gasPrice,\n          ...(value && !isZero(value) ? { value, from: account } : { from: account }),\n        })\n          .then((response: any) => {\n            const inputSymbol = trade.inputAmount.currency.symbol\n            const outputSymbol = trade.outputAmount.currency.symbol\n            const inputAmount = trade.inputAmount.toSignificant(3)\n            const outputAmount = trade.outputAmount.toSignificant(3)\n\n            const base = `Swap ${inputAmount} ${inputSymbol} for ${outputAmount} ${outputSymbol}`\n            const withRecipient =\n              recipient === account\n                ? base\n                : `${base} to ${\n                    recipientAddressOrName && isAddress(recipientAddressOrName)\n                      ? truncateHash(recipientAddressOrName)\n                      : recipientAddressOrName\n                  }`\n\n            addTransaction(response, {\n              summary: withRecipient,\n            })\n\n            return response.hash\n          })\n          .catch((error: any) => {\n            // if the user rejected the tx, pass this along\n            if (error?.code === 4001) {\n              throw new Error('Transaction rejected.')\n            } else {\n              // otherwise, the error was unexpected and we need to convey that\n              console.error(`Swap failed`, error, methodName, args, value)\n              throw new Error(`Swap failed: ${error.message}`)\n            }\n          })\n      },\n      error: null,\n    }\n  }, [trade, library, account, chainId, recipient, recipientAddressOrName, swapCalls, addTransaction, gasPrice])\n}\n"]},"metadata":{},"sourceType":"module"}