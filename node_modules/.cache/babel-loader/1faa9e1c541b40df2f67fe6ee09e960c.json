{"ast":null,"code":"import _toConsumableArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{configureStore,getDefaultMiddleware}from'@reduxjs/toolkit';import{save,load}from'redux-localstorage-simple';import{useDispatch}from'react-redux';import farmsReducer from'./farms';import poolsReducer from'./pools';import predictionsReducer from'./predictions';import profileReducer from'./profile';import teamsReducer from'./teams';import achievementsReducer from'./achievements';import blockReducer from'./block';import votingReducer from'./voting';import lotteryReducer from'./lottery';import infoReducer from'./info';import{updateVersion}from'./global/actions';import user from'./user/reducer';import transactions from'./transactions/reducer';import swap from'./swap/reducer';import mint from'./mint/reducer';import lists from'./lists/reducer';import burn from'./burn/reducer';import multicall from'./multicall/reducer';import nftMarketReducer from'./nftMarket/reducer';var PERSISTED_KEYS=['user','transactions','lists','profile'];var store=configureStore({devTools:process.env.NODE_ENV!=='production',reducer:{achievements:achievementsReducer,block:blockReducer,farms:farmsReducer,pools:poolsReducer,predictions:predictionsReducer,profile:profileReducer,teams:teamsReducer,voting:votingReducer,lottery:lotteryReducer,info:infoReducer,nftMarket:nftMarketReducer,// Exchange\nuser:user,transactions:transactions,swap:swap,mint:mint,burn:burn,multicall:multicall,lists:lists},middleware:[].concat(_toConsumableArray(getDefaultMiddleware({thunk:true})),[save({states:PERSISTED_KEYS})]),preloadedState:load({states:PERSISTED_KEYS})});store.dispatch(updateVersion());/**\n * @see https://redux-toolkit.js.org/usage/usage-with-typescript#getting-the-dispatch-type\n */export var useAppDispatch=function useAppDispatch(){return useDispatch();};export default store;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/index.ts"],"names":["configureStore","getDefaultMiddleware","save","load","useDispatch","farmsReducer","poolsReducer","predictionsReducer","profileReducer","teamsReducer","achievementsReducer","blockReducer","votingReducer","lotteryReducer","infoReducer","updateVersion","user","transactions","swap","mint","lists","burn","multicall","nftMarketReducer","PERSISTED_KEYS","store","devTools","process","env","NODE_ENV","reducer","achievements","block","farms","pools","predictions","profile","teams","voting","lottery","info","nftMarket","middleware","thunk","states","preloadedState","dispatch","useAppDispatch"],"mappings":"gKAAA,OAASA,cAAT,CAAyBC,oBAAzB,KAAqD,kBAArD,CACA,OAASC,IAAT,CAAeC,IAAf,KAA2B,2BAA3B,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,MAAOC,CAAAA,YAAP,KAAyB,SAAzB,CACA,MAAOC,CAAAA,YAAP,KAAyB,SAAzB,CACA,MAAOC,CAAAA,kBAAP,KAA+B,eAA/B,CACA,MAAOC,CAAAA,cAAP,KAA2B,WAA3B,CACA,MAAOC,CAAAA,YAAP,KAAyB,SAAzB,CACA,MAAOC,CAAAA,mBAAP,KAAgC,gBAAhC,CACA,MAAOC,CAAAA,YAAP,KAAyB,SAAzB,CACA,MAAOC,CAAAA,aAAP,KAA0B,UAA1B,CACA,MAAOC,CAAAA,cAAP,KAA2B,WAA3B,CACA,MAAOC,CAAAA,WAAP,KAAwB,QAAxB,CACA,OAASC,aAAT,KAA8B,kBAA9B,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CACA,MAAOC,CAAAA,YAAP,KAAyB,wBAAzB,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CACA,MAAOC,CAAAA,KAAP,KAAkB,iBAAlB,CACA,MAAOC,CAAAA,IAAP,KAAiB,gBAAjB,CACA,MAAOC,CAAAA,SAAP,KAAsB,qBAAtB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,qBAA7B,CAEA,GAAMC,CAAAA,cAAwB,CAAG,CAAC,MAAD,CAAS,cAAT,CAAyB,OAAzB,CAAkC,SAAlC,CAAjC,CAEA,GAAMC,CAAAA,KAAK,CAAGzB,cAAc,CAAC,CAC3B0B,QAAQ,CAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,YADR,CAE3BC,OAAO,CAAE,CACPC,YAAY,CAAErB,mBADP,CAEPsB,KAAK,CAAErB,YAFA,CAGPsB,KAAK,CAAE5B,YAHA,CAIP6B,KAAK,CAAE5B,YAJA,CAKP6B,WAAW,CAAE5B,kBALN,CAMP6B,OAAO,CAAE5B,cANF,CAOP6B,KAAK,CAAE5B,YAPA,CAQP6B,MAAM,CAAE1B,aARD,CASP2B,OAAO,CAAE1B,cATF,CAUP2B,IAAI,CAAE1B,WAVC,CAWP2B,SAAS,CAAElB,gBAXJ,CAaP;AACAP,IAAI,CAAJA,IAdO,CAePC,YAAY,CAAZA,YAfO,CAgBPC,IAAI,CAAJA,IAhBO,CAiBPC,IAAI,CAAJA,IAjBO,CAkBPE,IAAI,CAAJA,IAlBO,CAmBPC,SAAS,CAATA,SAnBO,CAoBPF,KAAK,CAALA,KApBO,CAFkB,CAwB3BsB,UAAU,8BAAMzC,oBAAoB,CAAC,CAAE0C,KAAK,CAAE,IAAT,CAAD,CAA1B,GAA6CzC,IAAI,CAAC,CAAE0C,MAAM,CAAEpB,cAAV,CAAD,CAAjD,EAxBiB,CAyB3BqB,cAAc,CAAE1C,IAAI,CAAC,CAAEyC,MAAM,CAAEpB,cAAV,CAAD,CAzBO,CAAD,CAA5B,CA4BAC,KAAK,CAACqB,QAAN,CAAe/B,aAAa,EAA5B,EAEA;AACA;AACA,GAGA,MAAO,IAAMgC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,SAAM3C,CAAAA,WAAW,EAAjB,EAAvB,CAEP,cAAeqB,CAAAA,KAAf","sourcesContent":["import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit'\nimport { save, load } from 'redux-localstorage-simple'\nimport { useDispatch } from 'react-redux'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\nimport predictionsReducer from './predictions'\nimport profileReducer from './profile'\nimport teamsReducer from './teams'\nimport achievementsReducer from './achievements'\nimport blockReducer from './block'\nimport votingReducer from './voting'\nimport lotteryReducer from './lottery'\nimport infoReducer from './info'\nimport { updateVersion } from './global/actions'\nimport user from './user/reducer'\nimport transactions from './transactions/reducer'\nimport swap from './swap/reducer'\nimport mint from './mint/reducer'\nimport lists from './lists/reducer'\nimport burn from './burn/reducer'\nimport multicall from './multicall/reducer'\nimport nftMarketReducer from './nftMarket/reducer'\n\nconst PERSISTED_KEYS: string[] = ['user', 'transactions', 'lists', 'profile']\n\nconst store = configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    achievements: achievementsReducer,\n    block: blockReducer,\n    farms: farmsReducer,\n    pools: poolsReducer,\n    predictions: predictionsReducer,\n    profile: profileReducer,\n    teams: teamsReducer,\n    voting: votingReducer,\n    lottery: lotteryReducer,\n    info: infoReducer,\n    nftMarket: nftMarketReducer,\n\n    // Exchange\n    user,\n    transactions,\n    swap,\n    mint,\n    burn,\n    multicall,\n    lists,\n  },\n  middleware: [...getDefaultMiddleware({ thunk: true }), save({ states: PERSISTED_KEYS })],\n  preloadedState: load({ states: PERSISTED_KEYS }),\n})\n\nstore.dispatch(updateVersion())\n\n/**\n * @see https://redux-toolkit.js.org/usage/usage-with-typescript#getting-the-dispatch-type\n */\nexport type AppDispatch = typeof store.dispatch\nexport type AppState = ReturnType<typeof store.getState>\nexport const useAppDispatch = () => useDispatch()\n\nexport default store\n"]},"metadata":{},"sourceType":"module"}