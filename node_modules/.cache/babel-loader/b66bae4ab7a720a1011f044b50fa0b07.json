{"ast":null,"code":"import _defineProperty from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import BigNumber from'bignumber.js';import poolsConfig from'config/constants/pools';import sousChefABI from'config/abi/sousChef.json';import cakeABI from'config/abi/cake.json';import wbnbABI from'config/abi/weth.json';import multicall from'utils/multicall';import{getAddress}from'utils/addressHelpers';import{BIG_ZERO}from'utils/bigNumber';import{getSouschefV2Contract}from'utils/contractHelpers';import tokens from'config/constants/tokens';export var fetchPoolsBlockLimits=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var poolsWithEnd,callsStartBlock,callsEndBlock,starts,ends;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:poolsWithEnd=poolsConfig.filter(function(p){return p.sousId!==0;});callsStartBlock=poolsWithEnd.map(function(poolConfig){return{address:getAddress(poolConfig.contractAddress),name:'startBlock'};});callsEndBlock=poolsWithEnd.map(function(poolConfig){return{address:getAddress(poolConfig.contractAddress),name:'bonusEndBlock'};});_context.next=5;return multicall(sousChefABI,callsStartBlock);case 5:starts=_context.sent;_context.next=8;return multicall(sousChefABI,callsEndBlock);case 8:ends=_context.sent;return _context.abrupt(\"return\",poolsWithEnd.map(function(cakePoolConfig,index){var startBlock=starts[index];var endBlock=ends[index];return{sousId:cakePoolConfig.sousId,startBlock:new BigNumber(startBlock).toJSON(),endBlock:new BigNumber(endBlock).toJSON()};}));case 10:case\"end\":return _context.stop();}}},_callee);}));return function fetchPoolsBlockLimits(){return _ref.apply(this,arguments);};}();export var fetchPoolsTotalStaking=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var nonBnbPools,bnbPool,callsNonBnbPools,callsBnbPools,nonBnbPoolsTotalStaked,bnbPoolsTotalStaked;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:nonBnbPools=poolsConfig.filter(function(p){return p.stakingToken.symbol!=='BNB';});bnbPool=poolsConfig.filter(function(p){return p.stakingToken.symbol==='BNB';});callsNonBnbPools=nonBnbPools.map(function(poolConfig){return{address:poolConfig.stakingToken.address,name:'balanceOf',params:[getAddress(poolConfig.contractAddress)]};});callsBnbPools=bnbPool.map(function(poolConfig){return{address:tokens.wbnb.address,name:'balanceOf',params:[getAddress(poolConfig.contractAddress)]};});_context2.next=6;return multicall(cakeABI,callsNonBnbPools);case 6:nonBnbPoolsTotalStaked=_context2.sent;_context2.next=9;return multicall(wbnbABI,callsBnbPools);case 9:bnbPoolsTotalStaked=_context2.sent;return _context2.abrupt(\"return\",[].concat(_toConsumableArray(nonBnbPools.map(function(p,index){return{sousId:p.sousId,totalStaked:new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON()};})),_toConsumableArray(bnbPool.map(function(p,index){return{sousId:p.sousId,totalStaked:new BigNumber(bnbPoolsTotalStaked[index]).toJSON()};}))));case 11:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchPoolsTotalStaking(){return _ref2.apply(this,arguments);};}();export var fetchPoolStakingLimit=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(sousId){var sousContract,stakingLimit;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;sousContract=getSouschefV2Contract(sousId);_context3.next=4;return sousContract.poolLimitPerUser();case 4:stakingLimit=_context3.sent;return _context3.abrupt(\"return\",new BigNumber(stakingLimit.toString()));case 8:_context3.prev=8;_context3.t0=_context3[\"catch\"](0);return _context3.abrupt(\"return\",BIG_ZERO);case 11:case\"end\":return _context3.stop();}}},_callee3,null,[[0,8]]);}));return function fetchPoolStakingLimit(_x){return _ref3.apply(this,arguments);};}();export var fetchPoolsStakingLimits=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(poolsWithStakingLimit){var validPools,stakingLimitPromises,stakingLimits;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:validPools=poolsConfig.filter(function(p){return p.stakingToken.symbol!=='BNB'&&!p.isFinished;}).filter(function(p){return!poolsWithStakingLimit.includes(p.sousId);});// Get the staking limit for each valid pool\n// Note: We cannot batch the calls via multicall because V1 pools do not have \"poolLimitPerUser\" and will throw an error\nstakingLimitPromises=validPools.map(function(validPool){return fetchPoolStakingLimit(validPool.sousId);});_context4.next=4;return Promise.all(stakingLimitPromises);case 4:stakingLimits=_context4.sent;return _context4.abrupt(\"return\",stakingLimits.reduce(function(accum,stakingLimit,index){return _objectSpread(_objectSpread({},accum),{},_defineProperty({},validPools[index].sousId,stakingLimit));},{}));case 6:case\"end\":return _context4.stop();}}},_callee4);}));return function fetchPoolsStakingLimits(_x2){return _ref4.apply(this,arguments);};}();","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/pools/fetchPools.ts"],"names":["BigNumber","poolsConfig","sousChefABI","cakeABI","wbnbABI","multicall","getAddress","BIG_ZERO","getSouschefV2Contract","tokens","fetchPoolsBlockLimits","poolsWithEnd","filter","p","sousId","callsStartBlock","map","poolConfig","address","contractAddress","name","callsEndBlock","starts","ends","cakePoolConfig","index","startBlock","endBlock","toJSON","fetchPoolsTotalStaking","nonBnbPools","stakingToken","symbol","bnbPool","callsNonBnbPools","params","callsBnbPools","wbnb","nonBnbPoolsTotalStaked","bnbPoolsTotalStaked","totalStaked","fetchPoolStakingLimit","sousContract","poolLimitPerUser","stakingLimit","toString","fetchPoolsStakingLimits","poolsWithStakingLimit","validPools","isFinished","includes","stakingLimitPromises","validPool","Promise","all","stakingLimits","reduce","accum"],"mappings":"8vBAAA,MAAOA,CAAAA,SAAP,KAAsB,cAAtB,CACA,MAAOC,CAAAA,WAAP,KAAwB,wBAAxB,CACA,MAAOC,CAAAA,WAAP,KAAwB,0BAAxB,CACA,MAAOC,CAAAA,OAAP,KAAoB,sBAApB,CACA,MAAOC,CAAAA,OAAP,KAAoB,sBAApB,CACA,MAAOC,CAAAA,SAAP,KAAsB,iBAAtB,CACA,OAASC,UAAT,KAA2B,sBAA3B,CACA,OAASC,QAAT,KAAyB,iBAAzB,CACA,OAASC,qBAAT,KAAsC,uBAAtC,CACA,MAAOC,CAAAA,MAAP,KAAmB,yBAAnB,CAEA,MAAO,IAAMC,CAAAA,qBAAqB,0FAAG,8LAC7BC,YAD6B,CACdV,WAAW,CAACW,MAAZ,CAAmB,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACC,MAAF,GAAa,CAApB,EAAnB,CADc,CAE7BC,eAF6B,CAEXJ,YAAY,CAACK,GAAb,CAAiB,SAACC,UAAD,CAAgB,CACvD,MAAO,CACLC,OAAO,CAAEZ,UAAU,CAACW,UAAU,CAACE,eAAZ,CADd,CAELC,IAAI,CAAE,YAFD,CAAP,CAID,CALuB,CAFW,CAQ7BC,aAR6B,CAQbV,YAAY,CAACK,GAAb,CAAiB,SAACC,UAAD,CAAgB,CACrD,MAAO,CACLC,OAAO,CAAEZ,UAAU,CAACW,UAAU,CAACE,eAAZ,CADd,CAELC,IAAI,CAAE,eAFD,CAAP,CAID,CALqB,CARa,uBAedf,CAAAA,SAAS,CAACH,WAAD,CAAca,eAAd,CAfK,QAe7BO,MAf6B,qCAgBhBjB,CAAAA,SAAS,CAACH,WAAD,CAAcmB,aAAd,CAhBO,QAgB7BE,IAhB6B,+CAkB5BZ,YAAY,CAACK,GAAb,CAAiB,SAACQ,cAAD,CAAiBC,KAAjB,CAA2B,CACjD,GAAMC,CAAAA,UAAU,CAAGJ,MAAM,CAACG,KAAD,CAAzB,CACA,GAAME,CAAAA,QAAQ,CAAGJ,IAAI,CAACE,KAAD,CAArB,CACA,MAAO,CACLX,MAAM,CAAEU,cAAc,CAACV,MADlB,CAELY,UAAU,CAAE,GAAI1B,CAAAA,SAAJ,CAAc0B,UAAd,EAA0BE,MAA1B,EAFP,CAGLD,QAAQ,CAAE,GAAI3B,CAAAA,SAAJ,CAAc2B,QAAd,EAAwBC,MAAxB,EAHL,CAAP,CAKD,CARM,CAlB4B,yDAAH,kBAArBlB,CAAAA,qBAAqB,0CAA3B,CA6BP,MAAO,IAAMmB,CAAAA,sBAAsB,2FAAG,0OAC9BC,WAD8B,CAChB7B,WAAW,CAACW,MAAZ,CAAmB,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACkB,YAAF,CAAeC,MAAf,GAA0B,KAAjC,EAAnB,CADgB,CAE9BC,OAF8B,CAEpBhC,WAAW,CAACW,MAAZ,CAAmB,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACkB,YAAF,CAAeC,MAAf,GAA0B,KAAjC,EAAnB,CAFoB,CAI9BE,gBAJ8B,CAIXJ,WAAW,CAACd,GAAZ,CAAgB,SAACC,UAAD,CAAgB,CACvD,MAAO,CACLC,OAAO,CAAED,UAAU,CAACc,YAAX,CAAwBb,OAD5B,CAELE,IAAI,CAAE,WAFD,CAGLe,MAAM,CAAE,CAAC7B,UAAU,CAACW,UAAU,CAACE,eAAZ,CAAX,CAHH,CAAP,CAKD,CANwB,CAJW,CAY9BiB,aAZ8B,CAYdH,OAAO,CAACjB,GAAR,CAAY,SAACC,UAAD,CAAgB,CAChD,MAAO,CACLC,OAAO,CAAET,MAAM,CAAC4B,IAAP,CAAYnB,OADhB,CAELE,IAAI,CAAE,WAFD,CAGLe,MAAM,CAAE,CAAC7B,UAAU,CAACW,UAAU,CAACE,eAAZ,CAAX,CAHH,CAAP,CAKD,CANqB,CAZc,wBAoBCd,CAAAA,SAAS,CAACF,OAAD,CAAU+B,gBAAV,CApBV,QAoB9BI,sBApB8B,uCAqBFjC,CAAAA,SAAS,CAACD,OAAD,CAAUgC,aAAV,CArBP,QAqB9BG,mBArB8B,8EAwB/BT,WAAW,CAACd,GAAZ,CAAgB,SAACH,CAAD,CAAIY,KAAJ,QAAe,CAChCX,MAAM,CAAED,CAAC,CAACC,MADsB,CAEhC0B,WAAW,CAAE,GAAIxC,CAAAA,SAAJ,CAAcsC,sBAAsB,CAACb,KAAD,CAApC,EAA6CG,MAA7C,EAFmB,CAAf,EAAhB,CAxB+B,qBA4B/BK,OAAO,CAACjB,GAAR,CAAY,SAACH,CAAD,CAAIY,KAAJ,QAAe,CAC5BX,MAAM,CAAED,CAAC,CAACC,MADkB,CAE5B0B,WAAW,CAAE,GAAIxC,CAAAA,SAAJ,CAAcuC,mBAAmB,CAACd,KAAD,CAAjC,EAA0CG,MAA1C,EAFe,CAAf,EAAZ,CA5B+B,6DAAH,kBAAtBC,CAAAA,sBAAsB,2CAA5B,CAmCP,MAAO,IAAMY,CAAAA,qBAAqB,2FAAG,kBAAO3B,MAAP,qKAE3B4B,YAF2B,CAEZlC,qBAAqB,CAACM,MAAD,CAFT,wBAGN4B,CAAAA,YAAY,CAACC,gBAAb,EAHM,QAG3BC,YAH2B,iDAI1B,GAAI5C,CAAAA,SAAJ,CAAc4C,YAAY,CAACC,QAAb,EAAd,CAJ0B,8FAM1BtC,QAN0B,wEAAH,kBAArBkC,CAAAA,qBAAqB,6CAA3B,CAUP,MAAO,IAAMK,CAAAA,uBAAuB,2FAAG,kBACrCC,qBADqC,wKAG/BC,UAH+B,CAGlB/C,WAAW,CAC3BW,MADgB,CACT,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACkB,YAAF,CAAeC,MAAf,GAA0B,KAA1B,EAAmC,CAACnB,CAAC,CAACoC,UAA7C,EADS,EAEhBrC,MAFgB,CAET,SAACC,CAAD,QAAO,CAACkC,qBAAqB,CAACG,QAAtB,CAA+BrC,CAAC,CAACC,MAAjC,CAAR,EAFS,CAHkB,CAOrC;AACA;AACMqC,oBAT+B,CASRH,UAAU,CAAChC,GAAX,CAAe,SAACoC,SAAD,QAAeX,CAAAA,qBAAqB,CAACW,SAAS,CAACtC,MAAX,CAApC,EAAf,CATQ,wBAUTuC,CAAAA,OAAO,CAACC,GAAR,CAAYH,oBAAZ,CAVS,QAU/BI,aAV+B,iDAY9BA,aAAa,CAACC,MAAd,CAAqB,SAACC,KAAD,CAAQb,YAAR,CAAsBnB,KAAtB,CAAgC,CAC1D,sCACKgC,KADL,wBAEGT,UAAU,CAACvB,KAAD,CAAV,CAAkBX,MAFrB,CAE8B8B,YAF9B,GAID,CALM,CAKJ,EALI,CAZ8B,0DAAH,kBAAvBE,CAAAA,uBAAuB,8CAA7B","sourcesContent":["import BigNumber from 'bignumber.js'\nimport poolsConfig from 'config/constants/pools'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport cakeABI from 'config/abi/cake.json'\nimport wbnbABI from 'config/abi/weth.json'\nimport multicall from 'utils/multicall'\nimport { getAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getSouschefV2Contract } from 'utils/contractHelpers'\nimport tokens from 'config/constants/tokens'\n\nexport const fetchPoolsBlockLimits = async () => {\n  const poolsWithEnd = poolsConfig.filter((p) => p.sousId !== 0)\n  const callsStartBlock = poolsWithEnd.map((poolConfig) => {\n    return {\n      address: getAddress(poolConfig.contractAddress),\n      name: 'startBlock',\n    }\n  })\n  const callsEndBlock = poolsWithEnd.map((poolConfig) => {\n    return {\n      address: getAddress(poolConfig.contractAddress),\n      name: 'bonusEndBlock',\n    }\n  })\n\n  const starts = await multicall(sousChefABI, callsStartBlock)\n  const ends = await multicall(sousChefABI, callsEndBlock)\n\n  return poolsWithEnd.map((cakePoolConfig, index) => {\n    const startBlock = starts[index]\n    const endBlock = ends[index]\n    return {\n      sousId: cakePoolConfig.sousId,\n      startBlock: new BigNumber(startBlock).toJSON(),\n      endBlock: new BigNumber(endBlock).toJSON(),\n    }\n  })\n}\n\nexport const fetchPoolsTotalStaking = async () => {\n  const nonBnbPools = poolsConfig.filter((p) => p.stakingToken.symbol !== 'BNB')\n  const bnbPool = poolsConfig.filter((p) => p.stakingToken.symbol === 'BNB')\n\n  const callsNonBnbPools = nonBnbPools.map((poolConfig) => {\n    return {\n      address: poolConfig.stakingToken.address,\n      name: 'balanceOf',\n      params: [getAddress(poolConfig.contractAddress)],\n    }\n  })\n\n  const callsBnbPools = bnbPool.map((poolConfig) => {\n    return {\n      address: tokens.wbnb.address,\n      name: 'balanceOf',\n      params: [getAddress(poolConfig.contractAddress)],\n    }\n  })\n\n  const nonBnbPoolsTotalStaked = await multicall(cakeABI, callsNonBnbPools)\n  const bnbPoolsTotalStaked = await multicall(wbnbABI, callsBnbPools)\n\n  return [\n    ...nonBnbPools.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(nonBnbPoolsTotalStaked[index]).toJSON(),\n    })),\n    ...bnbPool.map((p, index) => ({\n      sousId: p.sousId,\n      totalStaked: new BigNumber(bnbPoolsTotalStaked[index]).toJSON(),\n    })),\n  ]\n}\n\nexport const fetchPoolStakingLimit = async (sousId: number): Promise<BigNumber> => {\n  try {\n    const sousContract = getSouschefV2Contract(sousId)\n    const stakingLimit = await sousContract.poolLimitPerUser()\n    return new BigNumber(stakingLimit.toString())\n  } catch (error) {\n    return BIG_ZERO\n  }\n}\n\nexport const fetchPoolsStakingLimits = async (\n  poolsWithStakingLimit: number[],\n): Promise<{ [key: string]: BigNumber }> => {\n  const validPools = poolsConfig\n    .filter((p) => p.stakingToken.symbol !== 'BNB' && !p.isFinished)\n    .filter((p) => !poolsWithStakingLimit.includes(p.sousId))\n\n  // Get the staking limit for each valid pool\n  // Note: We cannot batch the calls via multicall because V1 pools do not have \"poolLimitPerUser\" and will throw an error\n  const stakingLimitPromises = validPools.map((validPool) => fetchPoolStakingLimit(validPool.sousId))\n  const stakingLimits = await Promise.all(stakingLimitPromises)\n\n  return stakingLimits.reduce((accum, stakingLimit, index) => {\n    return {\n      ...accum,\n      [validPools[index].sousId]: stakingLimit,\n    }\n  }, {})\n}\n"]},"metadata":{},"sourceType":"module"}