{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Home/Newest.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Heading, Flex, Button, Grid, ChevronRightIcon } from '@pancakeswap/uikit';\nimport { Link } from 'react-router-dom';\nimport { getLatestListedNfts, getNftsFromDifferentCollectionsApi } from 'state/nftMarket/helpers';\nimport { TMP_SEE_ALL_LINK } from 'views/Nft/market/constants';\nimport { CollectibleLinkCard } from '../components/CollectibleCard';\nimport GridPlaceholder from '../components/GridPlaceholder';\n/**\n * Fetch latest NFTs data from SG+API and combine them\n * @returns Array of NftToken\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst useNewestNfts = () => {\n  _s();\n\n  const [newestNfts, setNewestNfts] = useState(null);\n  useEffect(() => {\n    const fetchNewestNfts = async () => {\n      const nftsFromSg = await getLatestListedNfts(8);\n      const nftsFromApi = await getNftsFromDifferentCollectionsApi(nftsFromSg.map(nft => ({\n        collectionAddress: nft.collection.id,\n        tokenId: nft.tokenId\n      })));\n      const nfts = nftsFromSg.map((nftFromSg, index) => {\n        const nftFromApi = nftsFromApi[index];\n        return { ...nftFromApi,\n          marketData: nftFromSg\n        };\n      });\n      setNewestNfts(nfts);\n    };\n\n    fetchNewestNfts();\n  }, []);\n  return newestNfts;\n};\n\n_s(useNewestNfts, \"SCSpvsQjxhcvbAAOu1wFZqxIDTg=\");\n\nconst Newest = () => {\n  _s2();\n\n  const nfts = useNewestNfts();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      mb: \"26px\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        children: \"Newest Arrivals\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        as: Link,\n        to: TMP_SEE_ALL_LINK,\n        variant: \"secondary\",\n        scale: \"sm\",\n        endIcon: /*#__PURE__*/_jsxDEV(ChevronRightIcon, {\n          color: \"primary\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 20\n        }, this),\n        children: \"View All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), nfts ? /*#__PURE__*/_jsxDEV(Grid, {\n      gridRowGap: \"24px\",\n      gridColumnGap: \"16px\",\n      gridTemplateColumns: ['1fr', 'repeat(2, 1fr)', 'repeat(2, 1fr)', 'repeat(4, 1fr)'],\n      children: nfts.map(nft => {\n        return /*#__PURE__*/_jsxDEV(CollectibleLinkCard, {\n          nft: nft\n        }, nft.collectionAddress + nft.tokenId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 20\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(GridPlaceholder, {\n      numItems: 8\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Newest, \"/fp9LDHxs6mIHkTmGQQuMNH9Yo8=\", false, function () {\n  return [useNewestNfts];\n});\n\n_c = Newest;\nexport default Newest;\n\nvar _c;\n\n$RefreshReg$(_c, \"Newest\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Home/Newest.tsx"],"names":["React","useState","useEffect","Heading","Flex","Button","Grid","ChevronRightIcon","Link","getLatestListedNfts","getNftsFromDifferentCollectionsApi","TMP_SEE_ALL_LINK","CollectibleLinkCard","GridPlaceholder","useNewestNfts","newestNfts","setNewestNfts","fetchNewestNfts","nftsFromSg","nftsFromApi","map","nft","collectionAddress","collection","id","tokenId","nfts","nftFromSg","index","nftFromApi","marketData","Newest"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Heading, Flex, Button, Grid, ChevronRightIcon } from '@pancakeswap/uikit'\nimport { Link } from 'react-router-dom'\nimport { NftToken } from 'state/nftMarket/types'\nimport { getLatestListedNfts, getNftsFromDifferentCollectionsApi } from 'state/nftMarket/helpers'\nimport { TMP_SEE_ALL_LINK } from 'views/Nft/market/constants'\nimport { CollectibleLinkCard } from '../components/CollectibleCard'\nimport GridPlaceholder from '../components/GridPlaceholder'\n\n/**\n * Fetch latest NFTs data from SG+API and combine them\n * @returns Array of NftToken\n */\nconst useNewestNfts = () => {\n  const [newestNfts, setNewestNfts] = useState<NftToken[]>(null)\n\n  useEffect(() => {\n    const fetchNewestNfts = async () => {\n      const nftsFromSg = await getLatestListedNfts(8)\n      const nftsFromApi = await getNftsFromDifferentCollectionsApi(\n        nftsFromSg.map((nft) => ({ collectionAddress: nft.collection.id, tokenId: nft.tokenId })),\n      )\n\n      const nfts = nftsFromSg.map((nftFromSg, index) => {\n        const nftFromApi = nftsFromApi[index]\n        return { ...nftFromApi, marketData: nftFromSg }\n      })\n      setNewestNfts(nfts)\n    }\n    fetchNewestNfts()\n  }, [])\n\n  return newestNfts\n}\n\nconst Newest: React.FC = () => {\n  const nfts = useNewestNfts()\n\n  return (\n    <div>\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"26px\">\n        <Heading>Newest Arrivals</Heading>\n        <Button\n          as={Link}\n          to={TMP_SEE_ALL_LINK}\n          variant=\"secondary\"\n          scale=\"sm\"\n          endIcon={<ChevronRightIcon color=\"primary\" />}\n        >\n          View All\n        </Button>\n      </Flex>\n      {nfts ? (\n        <Grid\n          gridRowGap=\"24px\"\n          gridColumnGap=\"16px\"\n          gridTemplateColumns={['1fr', 'repeat(2, 1fr)', 'repeat(2, 1fr)', 'repeat(4, 1fr)']}\n        >\n          {nfts.map((nft) => {\n            return <CollectibleLinkCard key={nft.collectionAddress + nft.tokenId} nft={nft} />\n          })}\n        </Grid>\n      ) : (\n        <GridPlaceholder numItems={8} />\n      )}\n    </div>\n  )\n}\n\nexport default Newest\n"]},"metadata":{},"sourceType":"module"}