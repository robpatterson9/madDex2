{"ast":null,"code":"import _toConsumableArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _defineProperty from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';import{ethers}from'ethers';import{formatUnits}from'ethers/lib/utils';import maxBy from'lodash/maxBy';import merge from'lodash/merge';import range from'lodash/range';import{BIG_ZERO}from'utils/bigNumber';import{HistoryFilter,PredictionStatus,BetPosition,LeaderboardLoadingState}from'state/types';import{getPredictionsContract}from'utils/contractHelpers';import{FUTURE_ROUND_COUNT,LEADERBOARD_MIN_ROUNDS_PLAYED,PAST_ROUND_COUNT,ROUNDS_PER_PAGE,ROUND_BUFFER}from'./config';import{getBetHistory,transformBetResponse,makeFutureRoundResponse,makeRoundData,getRoundsData,getPredictionData,getLedgerData,makeLedgerData,serializePredictionsRoundsResponse,getClaimStatuses,fetchUsersRoundsLength,fetchUserRounds,getPredictionUsers,transformUserResponse,LEADERBOARD_RESULTS_PER_PAGE,getPredictionUser}from'./helpers';var initialState={status:PredictionStatus.INITIAL,isLoading:false,isHistoryPaneOpen:false,isChartPaneOpen:false,isFetchingHistory:false,historyFilter:HistoryFilter.ALL,currentEpoch:0,intervalSeconds:300,minBetAmount:'10000000000000',bufferSeconds:60,lastOraclePrice:BIG_ZERO.toJSON(),rounds:{},history:[],totalHistory:0,currentHistoryPage:1,hasHistoryLoaded:false,ledgers:{},claimableStatuses:{},leaderboard:{selectedAddress:null,loadingState:LeaderboardLoadingState.INITIAL,filters:{address:null,orderBy:'netBNB',timePeriod:'all'},skip:0,hasMoreResults:true,addressResults:{},results:[]}};// Thunks\nexport var initializePredictions=createAsyncThunk('predictions/intialize',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var account,marketData,epochs,roundsResponse,initialRoundData,initializedData,ledgerResponses,claimableStatuses,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:account=_args.length>0&&_args[0]!==undefined?_args[0]:null;_context.next=3;return getPredictionData();case 3:marketData=_context.sent;epochs=marketData.currentEpoch>PAST_ROUND_COUNT?range(marketData.currentEpoch,marketData.currentEpoch-PAST_ROUND_COUNT):[marketData.currentEpoch];// Round data\n_context.next=7;return getRoundsData(epochs);case 7:roundsResponse=_context.sent;initialRoundData=roundsResponse.reduce(function(accum,roundResponse){var reduxNodeRound=serializePredictionsRoundsResponse(roundResponse);return _objectSpread(_objectSpread({},accum),{},_defineProperty({},reduxNodeRound.epoch.toString(),reduxNodeRound));},{});initializedData=_objectSpread(_objectSpread({},marketData),{},{rounds:initialRoundData,ledgers:{},claimableStatuses:{}});if(account){_context.next=12;break;}return _context.abrupt(\"return\",initializedData);case 12:_context.next=14;return getLedgerData(account,epochs);case 14:ledgerResponses=_context.sent;_context.next=17;return getClaimStatuses(account,epochs);case 17:claimableStatuses=_context.sent;return _context.abrupt(\"return\",merge({},initializedData,{ledgers:makeLedgerData(account,ledgerResponses,epochs),claimableStatuses:claimableStatuses}));case 19:case\"end\":return _context.stop();}}},_callee);})));export var fetchRound=createAsyncThunk('predictions/fetchRound',/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(epoch){var predictionContract,response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:predictionContract=getPredictionsContract();_context2.next=3;return predictionContract.rounds(epoch);case 3:response=_context2.sent;return _context2.abrupt(\"return\",serializePredictionsRoundsResponse(response));case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x){return _ref2.apply(this,arguments);};}());export var fetchRounds=createAsyncThunk('predictions/fetchRounds',/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(epochs){var rounds;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return getRoundsData(epochs);case 2:rounds=_context3.sent;return _context3.abrupt(\"return\",rounds.reduce(function(accum,round){if(!round){return accum;}var reduxNodeRound=serializePredictionsRoundsResponse(round);return _objectSpread(_objectSpread({},accum),{},_defineProperty({},reduxNodeRound.epoch.toString(),reduxNodeRound));},{}));case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x2){return _ref3.apply(this,arguments);};}());export var fetchMarketData=createAsyncThunk('predictions/fetchMarketData',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(){var marketData;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return getPredictionData();case 2:marketData=_context4.sent;return _context4.abrupt(\"return\",marketData);case 4:case\"end\":return _context4.stop();}}},_callee4);})));export var fetchLedgerData=createAsyncThunk('predictions/fetchLedgerData',/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(_ref5){var account,epochs,ledgers;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:account=_ref5.account,epochs=_ref5.epochs;_context5.next=3;return getLedgerData(account,epochs);case 3:ledgers=_context5.sent;return _context5.abrupt(\"return\",makeLedgerData(account,ledgers,epochs));case 5:case\"end\":return _context5.stop();}}},_callee5);}));return function(_x3){return _ref6.apply(this,arguments);};}());export var fetchClaimableStatuses=createAsyncThunk('predictions/fetchClaimableStatuses',/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref7){var account,epochs,ledgers;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:account=_ref7.account,epochs=_ref7.epochs;_context6.next=3;return getClaimStatuses(account,epochs);case 3:ledgers=_context6.sent;return _context6.abrupt(\"return\",ledgers);case 5:case\"end\":return _context6.stop();}}},_callee6);}));return function(_x4){return _ref8.apply(this,arguments);};}());export var fetchHistory=createAsyncThunk('predictions/fetchHistory',/*#__PURE__*/function(){var _ref10=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(_ref9){var account,claimed,response,bets;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:account=_ref9.account,claimed=_ref9.claimed;_context7.next=3;return getBetHistory({user:account.toLowerCase(),claimed:claimed});case 3:response=_context7.sent;bets=response.map(transformBetResponse);return _context7.abrupt(\"return\",{account:account,bets:bets});case 6:case\"end\":return _context7.stop();}}},_callee7);}));return function(_x5){return _ref10.apply(this,arguments);};}());export var fetchNodeHistory=createAsyncThunk('predictions/fetchNodeHistory',/*#__PURE__*/function(){var _ref12=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(_ref11){var account,_ref11$page,page,userRoundsLength,emptyResult,maxPages,cursor,size,userRounds,epochs,roundData,claimableStatuses,bets;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:account=_ref11.account,_ref11$page=_ref11.page,page=_ref11$page===void 0?1:_ref11$page;_context8.next=3;return fetchUsersRoundsLength(account);case 3:userRoundsLength=_context8.sent;emptyResult={bets:[],claimableStatuses:{},totalHistory:userRoundsLength.toNumber()};maxPages=userRoundsLength.lte(ROUNDS_PER_PAGE)?1:Math.ceil(userRoundsLength.toNumber()/ROUNDS_PER_PAGE);if(!userRoundsLength.eq(0)){_context8.next=8;break;}return _context8.abrupt(\"return\",emptyResult);case 8:if(!(page>maxPages)){_context8.next=10;break;}return _context8.abrupt(\"return\",emptyResult);case 10:cursor=userRoundsLength.sub(ROUNDS_PER_PAGE*page);// If the page request is the final one we only want to retrieve the amount of rounds up to the next cursor.\nsize=maxPages===page?userRoundsLength.sub(ROUNDS_PER_PAGE*(page-1))// Previous page's cursor\n.toNumber():ROUNDS_PER_PAGE;_context8.next=14;return fetchUserRounds(account,cursor.lt(0)?0:cursor.toNumber(),size);case 14:userRounds=_context8.sent;if(userRounds){_context8.next=17;break;}return _context8.abrupt(\"return\",emptyResult);case 17:epochs=Object.keys(userRounds).map(function(epochStr){return Number(epochStr);});_context8.next=20;return getRoundsData(epochs);case 20:roundData=_context8.sent;_context8.next=23;return getClaimStatuses(account,epochs);case 23:claimableStatuses=_context8.sent;// Turn the data from the node into an Bet object that comes from the graph\nbets=roundData.reduce(function(accum,round){var reduxRound=serializePredictionsRoundsResponse(round);var ledger=userRounds[reduxRound.epoch];var ledgerAmount=ethers.BigNumber.from(ledger.amount);var closePrice=round.closePrice?parseFloat(formatUnits(round.closePrice,8)):null;var lockPrice=round.lockPrice?parseFloat(formatUnits(round.lockPrice,8)):null;var getRoundPosition=function getRoundPosition(){if(!closePrice){return null;}if(round.closePrice.eq(round.lockPrice)){return BetPosition.HOUSE;}return round.closePrice.gt(round.lockPrice)?BetPosition.BULL:BetPosition.BEAR;};return[].concat(_toConsumableArray(accum),[{id:null,hash:null,amount:parseFloat(formatUnits(ledgerAmount)),position:ledger.position,claimed:ledger.claimed,claimedAt:null,claimedHash:null,claimedBNB:0,claimedNetBNB:0,createdAt:null,updatedAt:null,block:0,round:{id:null,epoch:round.epoch.toNumber(),failed:false,startBlock:null,startAt:round.startTimestamp?round.startTimestamp.toNumber():null,startHash:null,lockAt:round.lockTimestamp?round.lockTimestamp.toNumber():null,lockBlock:null,lockPrice:lockPrice,lockHash:null,lockRoundId:round.lockOracleId?round.lockOracleId.toString():null,closeRoundId:round.closeOracleId?round.closeOracleId.toString():null,closeHash:null,closeAt:null,closePrice:closePrice,closeBlock:null,totalBets:0,totalAmount:parseFloat(formatUnits(round.totalAmount)),bullBets:0,bullAmount:parseFloat(formatUnits(round.bullAmount)),bearBets:0,bearAmount:parseFloat(formatUnits(round.bearAmount)),position:getRoundPosition()}}]);},[]);return _context8.abrupt(\"return\",{bets:bets,claimableStatuses:claimableStatuses,page:page,totalHistory:userRoundsLength.toNumber()});case 26:case\"end\":return _context8.stop();}}},_callee8);}));return function(_x6){return _ref12.apply(this,arguments);};}());// Leaderboard\nexport var filterLeaderboard=createAsyncThunk('predictions/filterLeaderboard',/*#__PURE__*/function(){var _ref14=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(_ref13){var filters,usersResponse;return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:filters=_ref13.filters;_context9.next=3;return getPredictionUsers({skip:0,orderBy:filters.orderBy,where:_defineProperty({totalBets_gte:LEADERBOARD_MIN_ROUNDS_PLAYED},\"\".concat(filters.orderBy,\"_gt\"),0)});case 3:usersResponse=_context9.sent;return _context9.abrupt(\"return\",{results:usersResponse.map(transformUserResponse)});case 5:case\"end\":return _context9.stop();}}},_callee9);}));return function(_x7){return _ref14.apply(this,arguments);};}());export var fetchAddressResult=createAsyncThunk('predictions/fetchAddressResult',/*#__PURE__*/function(){var _ref16=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(account,_ref15){var rejectWithValue,userResponse;return _regeneratorRuntime.wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:rejectWithValue=_ref15.rejectWithValue;_context10.next=3;return getPredictionUser(account);case 3:userResponse=_context10.sent;if(userResponse){_context10.next=6;break;}return _context10.abrupt(\"return\",rejectWithValue(account));case 6:return _context10.abrupt(\"return\",{account:account,data:transformUserResponse(userResponse)});case 7:case\"end\":return _context10.stop();}}},_callee10);}));return function(_x8,_x9){return _ref16.apply(this,arguments);};}());export var filterNextPageLeaderboard=createAsyncThunk('predictions/filterNextPageLeaderboard',/*#__PURE__*/function(){var _ref18=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee11(skip,_ref17){var getState,state,usersResponse;return _regeneratorRuntime.wrap(function _callee11$(_context11){while(1){switch(_context11.prev=_context11.next){case 0:getState=_ref17.getState;state=getState();_context11.next=4;return getPredictionUsers({skip:skip,orderBy:state.predictions.leaderboard.filters.orderBy,where:_defineProperty({totalBets_gte:LEADERBOARD_MIN_ROUNDS_PLAYED},\"\".concat(state.predictions.leaderboard.filters.orderBy,\"_gt\"),0)});case 4:usersResponse=_context11.sent;return _context11.abrupt(\"return\",{results:usersResponse.map(transformUserResponse),skip:skip});case 6:case\"end\":return _context11.stop();}}},_callee11);}));return function(_x10,_x11){return _ref18.apply(this,arguments);};}());export var predictionsSlice=createSlice({name:'predictions',initialState:initialState,reducers:{setLeaderboardFilter:function setLeaderboardFilter(state,action){state.leaderboard.filters=_objectSpread(_objectSpread({},state.leaderboard.filters),action.payload);// Anytime we filters change we need to reset back to page 1\nstate.leaderboard.skip=0;state.leaderboard.hasMoreResults=true;},setPredictionStatus:function setPredictionStatus(state,action){state.status=action.payload;},setHistoryPaneState:function setHistoryPaneState(state,action){state.isHistoryPaneOpen=action.payload;state.historyFilter=HistoryFilter.ALL;},setChartPaneState:function setChartPaneState(state,action){state.isChartPaneOpen=action.payload;},setHistoryFilter:function setHistoryFilter(state,action){state.historyFilter=action.payload;},setCurrentEpoch:function setCurrentEpoch(state,action){state.currentEpoch=action.payload;},setLastOraclePrice:function setLastOraclePrice(state,action){state.lastOraclePrice=action.payload;},markAsCollected:function markAsCollected(state,action){state.claimableStatuses=_objectSpread(_objectSpread({},state.claimableStatuses),action.payload);},setSelectedAddress:function setSelectedAddress(state,action){state.leaderboard.selectedAddress=action.payload;}},extraReducers:function extraReducers(builder){// Leaderboard filter\nbuilder.addCase(filterLeaderboard.pending,function(state){// Only mark as loading if we come from IDLE. This allows initialization.\nif(state.leaderboard.loadingState===LeaderboardLoadingState.IDLE){state.leaderboard.loadingState=LeaderboardLoadingState.LOADING;}});builder.addCase(filterLeaderboard.fulfilled,function(state,action){var results=action.payload.results;state.leaderboard.loadingState=LeaderboardLoadingState.IDLE;state.leaderboard.results=results;if(results.length<LEADERBOARD_RESULTS_PER_PAGE){state.leaderboard.hasMoreResults=false;}// Populate address results to reduce calls\nstate.leaderboard.addressResults=_objectSpread(_objectSpread({},state.leaderboard.addressResults),results.reduce(function(accum,result){return _objectSpread(_objectSpread({},accum),{},_defineProperty({},result.id,result));},{}));});// Leaderboard account result\nbuilder.addCase(fetchAddressResult.pending,function(state){state.leaderboard.loadingState=LeaderboardLoadingState.LOADING;});builder.addCase(fetchAddressResult.fulfilled,function(state,action){var _action$payload=action.payload,account=_action$payload.account,data=_action$payload.data;state.leaderboard.loadingState=LeaderboardLoadingState.IDLE;state.leaderboard.addressResults[account]=data;});builder.addCase(fetchAddressResult.rejected,function(state,action){state.leaderboard.loadingState=LeaderboardLoadingState.IDLE;state.leaderboard.addressResults[action.payload]=null;});// Leaderboard next page\nbuilder.addCase(filterNextPageLeaderboard.pending,function(state){state.leaderboard.loadingState=LeaderboardLoadingState.LOADING;});builder.addCase(filterNextPageLeaderboard.fulfilled,function(state,action){var _action$payload2=action.payload,results=_action$payload2.results,skip=_action$payload2.skip;state.leaderboard.loadingState=LeaderboardLoadingState.IDLE;state.leaderboard.results=[].concat(_toConsumableArray(state.leaderboard.results),_toConsumableArray(results));state.leaderboard.skip=skip;if(results.length<LEADERBOARD_RESULTS_PER_PAGE){state.leaderboard.hasMoreResults=false;}});// Claimable statuses\nbuilder.addCase(fetchClaimableStatuses.fulfilled,function(state,action){state.claimableStatuses=merge({},state.claimableStatuses,action.payload);});// Ledger (bet) records\nbuilder.addCase(fetchLedgerData.fulfilled,function(state,action){state.ledgers=merge({},state.ledgers,action.payload);});// Get static market data\nbuilder.addCase(fetchMarketData.fulfilled,function(state,action){var _action$payload3=action.payload,status=_action$payload3.status,currentEpoch=_action$payload3.currentEpoch,intervalSeconds=_action$payload3.intervalSeconds,minBetAmount=_action$payload3.minBetAmount;// If the round has change add a new future round\nif(state.currentEpoch!==currentEpoch){var newestRound=maxBy(Object.values(state.rounds),'epoch');var futureRound=makeFutureRoundResponse(newestRound.epoch+1,newestRound.startTimestamp+intervalSeconds+ROUND_BUFFER);state.rounds[futureRound.epoch]=futureRound;}state.status=status;state.currentEpoch=currentEpoch;state.intervalSeconds=intervalSeconds;state.minBetAmount=minBetAmount;});// Initialize predictions\nbuilder.addCase(initializePredictions.fulfilled,function(state,action){var _action$payload4=action.payload,status=_action$payload4.status,currentEpoch=_action$payload4.currentEpoch,intervalSeconds=_action$payload4.intervalSeconds,bufferSeconds=_action$payload4.bufferSeconds,rounds=_action$payload4.rounds,claimableStatuses=_action$payload4.claimableStatuses,ledgers=_action$payload4.ledgers;var futureRounds=[];var currentRound=rounds[currentEpoch];for(var i=1;i<=FUTURE_ROUND_COUNT;i++){futureRounds.push(makeFutureRoundResponse(currentEpoch+i,currentRound.startTimestamp+intervalSeconds*i));}return _objectSpread(_objectSpread({},state),{},{status:status,currentEpoch:currentEpoch,intervalSeconds:intervalSeconds,bufferSeconds:bufferSeconds,claimableStatuses:claimableStatuses,ledgers:ledgers,rounds:merge({},rounds,makeRoundData(futureRounds))});});// Get single round\nbuilder.addCase(fetchRound.fulfilled,function(state,action){state.rounds=merge({},state.rounds,_defineProperty({},action.payload.epoch.toString(),action.payload));});// Get multiple rounds\nbuilder.addCase(fetchRounds.fulfilled,function(state,action){state.rounds=merge({},state.rounds,action.payload);});// Show History\nbuilder.addCase(fetchHistory.pending,function(state){state.isFetchingHistory=true;});builder.addCase(fetchHistory.rejected,function(state){state.isFetchingHistory=false;});builder.addCase(fetchHistory.fulfilled,function(state,action){var _state$history$accoun;var _action$payload5=action.payload,account=_action$payload5.account,bets=_action$payload5.bets;state.isFetchingHistory=false;state.history[account]=merge([],(_state$history$accoun=state.history[account])!==null&&_state$history$accoun!==void 0?_state$history$accoun:[],bets);});// History from the node\nbuilder.addCase(fetchNodeHistory.pending,function(state){state.isFetchingHistory=true;});builder.addCase(fetchNodeHistory.rejected,function(state){state.isFetchingHistory=false;});builder.addCase(fetchNodeHistory.fulfilled,function(state,action){var _action$payload6=action.payload,bets=_action$payload6.bets,claimableStatuses=_action$payload6.claimableStatuses,page=_action$payload6.page,totalHistory=_action$payload6.totalHistory;state.isFetchingHistory=false;state.history=page===1?bets:[].concat(_toConsumableArray(state.history),_toConsumableArray(bets));state.claimableStatuses=_objectSpread(_objectSpread({},state.claimableStatuses),claimableStatuses);state.hasHistoryLoaded=state.history.length===totalHistory||bets.length===0;state.totalHistory=totalHistory;state.currentHistoryPage=page;});}});// Actions\nvar _predictionsSlice$act=predictionsSlice.actions,setChartPaneState=_predictionsSlice$act.setChartPaneState,setCurrentEpoch=_predictionsSlice$act.setCurrentEpoch,setHistoryFilter=_predictionsSlice$act.setHistoryFilter,setHistoryPaneState=_predictionsSlice$act.setHistoryPaneState,setPredictionStatus=_predictionsSlice$act.setPredictionStatus,setLastOraclePrice=_predictionsSlice$act.setLastOraclePrice,markAsCollected=_predictionsSlice$act.markAsCollected,setLeaderboardFilter=_predictionsSlice$act.setLeaderboardFilter,setSelectedAddress=_predictionsSlice$act.setSelectedAddress;export{setChartPaneState,setCurrentEpoch,setHistoryFilter,setHistoryPaneState,setPredictionStatus,setLastOraclePrice,markAsCollected,setLeaderboardFilter,setSelectedAddress};export default predictionsSlice.reducer;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/predictions/index.ts"],"names":["createAsyncThunk","createSlice","ethers","formatUnits","maxBy","merge","range","BIG_ZERO","HistoryFilter","PredictionStatus","BetPosition","LeaderboardLoadingState","getPredictionsContract","FUTURE_ROUND_COUNT","LEADERBOARD_MIN_ROUNDS_PLAYED","PAST_ROUND_COUNT","ROUNDS_PER_PAGE","ROUND_BUFFER","getBetHistory","transformBetResponse","makeFutureRoundResponse","makeRoundData","getRoundsData","getPredictionData","getLedgerData","makeLedgerData","serializePredictionsRoundsResponse","getClaimStatuses","fetchUsersRoundsLength","fetchUserRounds","getPredictionUsers","transformUserResponse","LEADERBOARD_RESULTS_PER_PAGE","getPredictionUser","initialState","status","INITIAL","isLoading","isHistoryPaneOpen","isChartPaneOpen","isFetchingHistory","historyFilter","ALL","currentEpoch","intervalSeconds","minBetAmount","bufferSeconds","lastOraclePrice","toJSON","rounds","history","totalHistory","currentHistoryPage","hasHistoryLoaded","ledgers","claimableStatuses","leaderboard","selectedAddress","loadingState","filters","address","orderBy","timePeriod","skip","hasMoreResults","addressResults","results","initializePredictions","account","marketData","epochs","roundsResponse","initialRoundData","reduce","accum","roundResponse","reduxNodeRound","epoch","toString","initializedData","ledgerResponses","fetchRound","predictionContract","response","fetchRounds","round","fetchMarketData","fetchLedgerData","fetchClaimableStatuses","fetchHistory","claimed","user","toLowerCase","bets","map","fetchNodeHistory","page","userRoundsLength","emptyResult","toNumber","maxPages","lte","Math","ceil","eq","cursor","sub","size","lt","userRounds","Object","keys","epochStr","Number","roundData","reduxRound","ledger","ledgerAmount","BigNumber","from","amount","closePrice","parseFloat","lockPrice","getRoundPosition","HOUSE","gt","BULL","BEAR","id","hash","position","claimedAt","claimedHash","claimedBNB","claimedNetBNB","createdAt","updatedAt","block","failed","startBlock","startAt","startTimestamp","startHash","lockAt","lockTimestamp","lockBlock","lockHash","lockRoundId","lockOracleId","closeRoundId","closeOracleId","closeHash","closeAt","closeBlock","totalBets","totalAmount","bullBets","bullAmount","bearBets","bearAmount","filterLeaderboard","where","totalBets_gte","usersResponse","fetchAddressResult","rejectWithValue","userResponse","data","filterNextPageLeaderboard","getState","state","predictions","predictionsSlice","name","reducers","setLeaderboardFilter","action","payload","setPredictionStatus","setHistoryPaneState","setChartPaneState","setHistoryFilter","setCurrentEpoch","setLastOraclePrice","markAsCollected","setSelectedAddress","extraReducers","builder","addCase","pending","IDLE","LOADING","fulfilled","length","result","rejected","newestRound","values","futureRound","futureRounds","currentRound","i","push","actions","reducer"],"mappings":"8vBAAA,OAASA,gBAAT,CAA2BC,WAA3B,KAA6D,kBAA7D,CACA,OAASC,MAAT,KAAuB,QAAvB,CACA,OAASC,WAAT,KAA4B,kBAA5B,CACA,MAAOC,CAAAA,KAAP,KAAkB,cAAlB,CACA,MAAOC,CAAAA,KAAP,KAAkB,cAAlB,CACA,MAAOC,CAAAA,KAAP,KAAkB,cAAlB,CACA,OAASC,QAAT,KAAyB,iBAAzB,CACA,OAGEC,aAHF,CAKEC,gBALF,CAOEC,WAPF,CAQEC,uBARF,KAYO,aAZP,CAaA,OAASC,sBAAT,KAAuC,uBAAvC,CACA,OACEC,kBADF,CAEEC,6BAFF,CAGEC,gBAHF,CAIEC,eAJF,CAKEC,YALF,KAMO,UANP,CAOA,OACEC,aADF,CAEEC,oBAFF,CAGEC,uBAHF,CAIEC,aAJF,CAKEC,aALF,CAMEC,iBANF,CAQEC,aARF,CASEC,cATF,CAUEC,kCAVF,CAWEC,gBAXF,CAYEC,sBAZF,CAaEC,eAbF,CAcEC,kBAdF,CAeEC,qBAfF,CAgBEC,4BAhBF,CAiBEC,iBAjBF,KAkBO,WAlBP,CAoBA,GAAMC,CAAAA,YAA8B,CAAG,CACrCC,MAAM,CAAE1B,gBAAgB,CAAC2B,OADY,CAErCC,SAAS,CAAE,KAF0B,CAGrCC,iBAAiB,CAAE,KAHkB,CAIrCC,eAAe,CAAE,KAJoB,CAKrCC,iBAAiB,CAAE,KALkB,CAMrCC,aAAa,CAAEjC,aAAa,CAACkC,GANQ,CAOrCC,YAAY,CAAE,CAPuB,CAQrCC,eAAe,CAAE,GARoB,CASrCC,YAAY,CAAE,gBATuB,CAUrCC,aAAa,CAAE,EAVsB,CAWrCC,eAAe,CAAExC,QAAQ,CAACyC,MAAT,EAXoB,CAYrCC,MAAM,CAAE,EAZ6B,CAarCC,OAAO,CAAE,EAb4B,CAcrCC,YAAY,CAAE,CAduB,CAerCC,kBAAkB,CAAE,CAfiB,CAgBrCC,gBAAgB,CAAE,KAhBmB,CAiBrCC,OAAO,CAAE,EAjB4B,CAkBrCC,iBAAiB,CAAE,EAlBkB,CAmBrCC,WAAW,CAAE,CACXC,eAAe,CAAE,IADN,CAEXC,YAAY,CAAE/C,uBAAuB,CAACyB,OAF3B,CAGXuB,OAAO,CAAE,CACPC,OAAO,CAAE,IADF,CAEPC,OAAO,CAAE,QAFF,CAGPC,UAAU,CAAE,KAHL,CAHE,CAQXC,IAAI,CAAE,CARK,CASXC,cAAc,CAAE,IATL,CAUXC,cAAc,CAAE,EAVL,CAWXC,OAAO,CAAE,EAXE,CAnBwB,CAAvC,CAkCA;AAYA,MAAO,IAAMC,CAAAA,qBAAqB,CAAGnE,gBAAgB,CACnD,uBADmD,sEAEnD,mQAAOoE,OAAP,+CAAiB,IAAjB,uBAE2B7C,CAAAA,iBAAiB,EAF5C,QAEQ8C,UAFR,eAGQC,MAHR,CAIID,UAAU,CAAC1B,YAAX,CAA0B5B,gBAA1B,CACIT,KAAK,CAAC+D,UAAU,CAAC1B,YAAZ,CAA0B0B,UAAU,CAAC1B,YAAX,CAA0B5B,gBAApD,CADT,CAEI,CAACsD,UAAU,CAAC1B,YAAZ,CANR,CAQE;AARF,sBAS+BrB,CAAAA,aAAa,CAACgD,MAAD,CAT5C,QASQC,cATR,eAUQC,gBAVR,CAU8DD,cAAc,CAACE,MAAf,CAAsB,SAACC,KAAD,CAAQC,aAAR,CAA0B,CAC1G,GAAMC,CAAAA,cAAc,CAAGlD,kCAAkC,CAACiD,aAAD,CAAzD,CAEA,sCACKD,KADL,wBAEGE,cAAc,CAACC,KAAf,CAAqBC,QAArB,EAFH,CAEqCF,cAFrC,GAID,CAP2D,CAOzD,EAPyD,CAV9D,CAmBQG,eAnBR,gCAoBOV,UApBP,MAqBIpB,MAAM,CAAEuB,gBArBZ,CAsBIlB,OAAO,CAAE,EAtBb,CAuBIC,iBAAiB,CAAE,EAvBvB,MA0BOa,OA1BP,0DA2BWW,eA3BX,iCA+BgCvD,CAAAA,aAAa,CAAC4C,OAAD,CAAUE,MAAV,CA/B7C,SA+BQU,eA/BR,sCAkCkCrD,CAAAA,gBAAgB,CAACyC,OAAD,CAAUE,MAAV,CAlClD,SAkCQf,iBAlCR,+CAoCSlD,KAAK,CAAC,EAAD,CAAK0E,eAAL,CAAsB,CAChCzB,OAAO,CAAE7B,cAAc,CAAC2C,OAAD,CAAUY,eAAV,CAA2BV,MAA3B,CADS,CAEhCf,iBAAiB,CAAjBA,iBAFgC,CAAtB,CApCd,yDAFmD,GAA9C,CA6CP,MAAO,IAAM0B,CAAAA,UAAU,CAAGjF,gBAAgB,CAAyB,wBAAzB,2FAAmD,kBAAO6E,KAAP,sJACrFK,kBADqF,CAChEtE,sBAAsB,EAD0C,wBAEpEsE,CAAAA,kBAAkB,CAACjC,MAAnB,CAA0B4B,KAA1B,CAFoE,QAErFM,QAFqF,iDAGpFzD,kCAAkC,CAACyD,QAAD,CAHkD,0DAAnD,gEAAnC,CAMP,MAAO,IAAMC,CAAAA,WAAW,CAAGpF,gBAAgB,CACzC,yBADyC,2FAEzC,kBAAOsE,MAAP,wJACuBhD,CAAAA,aAAa,CAACgD,MAAD,CADpC,QACQrB,MADR,iDAESA,MAAM,CAACwB,MAAP,CAAc,SAACC,KAAD,CAAQW,KAAR,CAAkB,CACrC,GAAI,CAACA,KAAL,CAAY,CACV,MAAOX,CAAAA,KAAP,CACD,CAED,GAAME,CAAAA,cAAc,CAAGlD,kCAAkC,CAAC2D,KAAD,CAAzD,CAEA,sCACKX,KADL,wBAEGE,cAAc,CAACC,KAAf,CAAqBC,QAArB,EAFH,CAEqCF,cAFrC,GAID,CAXM,CAWJ,EAXI,CAFT,0DAFyC,iEAApC,CAmBP,MAAO,IAAMU,CAAAA,eAAe,CAAGtF,gBAAgB,CAAa,6BAAb,sEAA4C,8KAChEuB,CAAAA,iBAAiB,EAD+C,QACnF8C,UADmF,iDAElFA,UAFkF,0DAA5C,GAAxC,CAKP,MAAO,IAAMkB,CAAAA,eAAe,CAAGvF,gBAAgB,CAC7C,6BAD6C,2FAE7C,wKAASoE,OAAT,OAASA,OAAT,CAAkBE,MAAlB,OAAkBA,MAAlB,wBACwB9C,CAAAA,aAAa,CAAC4C,OAAD,CAAUE,MAAV,CADrC,QACQhB,OADR,iDAES7B,cAAc,CAAC2C,OAAD,CAAUd,OAAV,CAAmBgB,MAAnB,CAFvB,0DAF6C,iEAAxC,CAQP,MAAO,IAAMkB,CAAAA,sBAAsB,CAAGxF,gBAAgB,CAGpD,oCAHoD,2FAGd,wKAASoE,OAAT,OAASA,OAAT,CAAkBE,MAAlB,OAAkBA,MAAlB,wBAChB3C,CAAAA,gBAAgB,CAACyC,OAAD,CAAUE,MAAV,CADA,QAChChB,OADgC,iDAE/BA,OAF+B,0DAHc,iEAA/C,CAQP,MAAO,IAAMmC,CAAAA,YAAY,CAAGzF,gBAAgB,CAC1C,0BAD0C,4FAE1C,+KAASoE,OAAT,OAASA,OAAT,CAAkBsB,OAAlB,OAAkBA,OAAlB,wBACyBxE,CAAAA,aAAa,CAAC,CACnCyE,IAAI,CAAEvB,OAAO,CAACwB,WAAR,EAD6B,CAEnCF,OAAO,CAAPA,OAFmC,CAAD,CADtC,QACQP,QADR,gBAKQU,IALR,CAKeV,QAAQ,CAACW,GAAT,CAAa3E,oBAAb,CALf,kCAOS,CAAEiD,OAAO,CAAPA,OAAF,CAAWyB,IAAI,CAAJA,IAAX,CAPT,0DAF0C,kEAArC,CAaP,MAAO,IAAME,CAAAA,gBAAgB,CAAG/F,gBAAgB,CAG9C,8BAH8C,4FAGd,gRAASoE,OAAT,QAASA,OAAT,oBAAkB4B,IAAlB,CAAkBA,IAAlB,sBAAyB,CAAzB,oCACDpE,CAAAA,sBAAsB,CAACwC,OAAD,CADrB,QAC1B6B,gBAD0B,gBAE1BC,WAF0B,CAEZ,CAAEL,IAAI,CAAE,EAAR,CAAYtC,iBAAiB,CAAE,EAA/B,CAAmCJ,YAAY,CAAE8C,gBAAgB,CAACE,QAAjB,EAAjD,CAFY,CAG1BC,QAH0B,CAGfH,gBAAgB,CAACI,GAAjB,CAAqBrF,eAArB,EAAwC,CAAxC,CAA4CsF,IAAI,CAACC,IAAL,CAAUN,gBAAgB,CAACE,QAAjB,GAA8BnF,eAAxC,CAH7B,KAK5BiF,gBAAgB,CAACO,EAAjB,CAAoB,CAApB,CAL4B,2DAMvBN,WANuB,cAS5BF,IAAI,CAAGI,QATqB,6DAUvBF,WAVuB,UAa1BO,MAb0B,CAajBR,gBAAgB,CAACS,GAAjB,CAAqB1F,eAAe,CAAGgF,IAAvC,CAbiB,CAehC;AACMW,IAhB0B,CAiB9BP,QAAQ,GAAKJ,IAAb,CACIC,gBAAgB,CACbS,GADH,CACO1F,eAAe,EAAIgF,IAAI,CAAG,CAAX,CADtB,CACqC;AADrC,CAEGG,QAFH,EADJ,CAIInF,eArB0B,yBAsBPa,CAAAA,eAAe,CAACuC,OAAD,CAAUqC,MAAM,CAACG,EAAP,CAAU,CAAV,EAAe,CAAf,CAAmBH,MAAM,CAACN,QAAP,EAA7B,CAAgDQ,IAAhD,CAtBR,SAsB1BE,UAtB0B,mBAwB3BA,UAxB2B,4DAyBvBX,WAzBuB,UA4B1B5B,MA5B0B,CA4BjBwC,MAAM,CAACC,IAAP,CAAYF,UAAZ,EAAwBf,GAAxB,CAA4B,SAACkB,QAAD,QAAcC,CAAAA,MAAM,CAACD,QAAD,CAApB,EAA5B,CA5BiB,yBA6BR1F,CAAAA,aAAa,CAACgD,MAAD,CA7BL,SA6B1B4C,SA7B0B,wCA8BAvF,CAAAA,gBAAgB,CAACyC,OAAD,CAAUE,MAAV,CA9BhB,SA8B1Bf,iBA9B0B,gBAgChC;AACMsC,IAjC0B,CAiCZqB,SAAS,CAACzC,MAAV,CAAiB,SAACC,KAAD,CAAQW,KAAR,CAAkB,CACrD,GAAM8B,CAAAA,UAAU,CAAGzF,kCAAkC,CAAC2D,KAAD,CAArD,CACA,GAAM+B,CAAAA,MAAM,CAAGP,UAAU,CAACM,UAAU,CAACtC,KAAZ,CAAzB,CACA,GAAMwC,CAAAA,YAAY,CAAGnH,MAAM,CAACoH,SAAP,CAAiBC,IAAjB,CAAsBH,MAAM,CAACI,MAA7B,CAArB,CACA,GAAMC,CAAAA,UAAU,CAAGpC,KAAK,CAACoC,UAAN,CAAmBC,UAAU,CAACvH,WAAW,CAACkF,KAAK,CAACoC,UAAP,CAAmB,CAAnB,CAAZ,CAA7B,CAAkE,IAArF,CACA,GAAME,CAAAA,SAAS,CAAGtC,KAAK,CAACsC,SAAN,CAAkBD,UAAU,CAACvH,WAAW,CAACkF,KAAK,CAACsC,SAAP,CAAkB,CAAlB,CAAZ,CAA5B,CAAgE,IAAlF,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,EAAM,CAC7B,GAAI,CAACH,UAAL,CAAiB,CACf,MAAO,KAAP,CACD,CAED,GAAIpC,KAAK,CAACoC,UAAN,CAAiBjB,EAAjB,CAAoBnB,KAAK,CAACsC,SAA1B,CAAJ,CAA0C,CACxC,MAAOjH,CAAAA,WAAW,CAACmH,KAAnB,CACD,CAED,MAAOxC,CAAAA,KAAK,CAACoC,UAAN,CAAiBK,EAAjB,CAAoBzC,KAAK,CAACsC,SAA1B,EAAuCjH,WAAW,CAACqH,IAAnD,CAA0DrH,WAAW,CAACsH,IAA7E,CACD,CAVD,CAYA,mCACKtD,KADL,GAEE,CACEuD,EAAE,CAAE,IADN,CAEEC,IAAI,CAAE,IAFR,CAGEV,MAAM,CAAEE,UAAU,CAACvH,WAAW,CAACkH,YAAD,CAAZ,CAHpB,CAIEc,QAAQ,CAAEf,MAAM,CAACe,QAJnB,CAKEzC,OAAO,CAAE0B,MAAM,CAAC1B,OALlB,CAME0C,SAAS,CAAE,IANb,CAOEC,WAAW,CAAE,IAPf,CAQEC,UAAU,CAAE,CARd,CASEC,aAAa,CAAE,CATjB,CAUEC,SAAS,CAAE,IAVb,CAWEC,SAAS,CAAE,IAXb,CAYEC,KAAK,CAAE,CAZT,CAaErD,KAAK,CAAE,CACL4C,EAAE,CAAE,IADC,CAELpD,KAAK,CAAEQ,KAAK,CAACR,KAAN,CAAYsB,QAAZ,EAFF,CAGLwC,MAAM,CAAE,KAHH,CAILC,UAAU,CAAE,IAJP,CAKLC,OAAO,CAAExD,KAAK,CAACyD,cAAN,CAAuBzD,KAAK,CAACyD,cAAN,CAAqB3C,QAArB,EAAvB,CAAyD,IAL7D,CAML4C,SAAS,CAAE,IANN,CAOLC,MAAM,CAAE3D,KAAK,CAAC4D,aAAN,CAAsB5D,KAAK,CAAC4D,aAAN,CAAoB9C,QAApB,EAAtB,CAAuD,IAP1D,CAQL+C,SAAS,CAAE,IARN,CASLvB,SAAS,CAATA,SATK,CAULwB,QAAQ,CAAE,IAVL,CAWLC,WAAW,CAAE/D,KAAK,CAACgE,YAAN,CAAqBhE,KAAK,CAACgE,YAAN,CAAmBvE,QAAnB,EAArB,CAAqD,IAX7D,CAYLwE,YAAY,CAAEjE,KAAK,CAACkE,aAAN,CAAsBlE,KAAK,CAACkE,aAAN,CAAoBzE,QAApB,EAAtB,CAAuD,IAZhE,CAaL0E,SAAS,CAAE,IAbN,CAcLC,OAAO,CAAE,IAdJ,CAeLhC,UAAU,CAAVA,UAfK,CAgBLiC,UAAU,CAAE,IAhBP,CAiBLC,SAAS,CAAE,CAjBN,CAkBLC,WAAW,CAAElC,UAAU,CAACvH,WAAW,CAACkF,KAAK,CAACuE,WAAP,CAAZ,CAlBlB,CAmBLC,QAAQ,CAAE,CAnBL,CAoBLC,UAAU,CAAEpC,UAAU,CAACvH,WAAW,CAACkF,KAAK,CAACyE,UAAP,CAAZ,CApBjB,CAqBLC,QAAQ,CAAE,CArBL,CAsBLC,UAAU,CAAEtC,UAAU,CAACvH,WAAW,CAACkF,KAAK,CAAC2E,UAAP,CAAZ,CAtBjB,CAuBL7B,QAAQ,CAAEP,gBAAgB,EAvBrB,CAbT,CAFF,GA0CD,CA7DmB,CA6DjB,EA7DiB,CAjCY,kCAgGzB,CAAE/B,IAAI,CAAJA,IAAF,CAAQtC,iBAAiB,CAAjBA,iBAAR,CAA2ByC,IAAI,CAAJA,IAA3B,CAAiC7C,YAAY,CAAE8C,gBAAgB,CAACE,QAAjB,EAA/C,CAhGyB,2DAHc,kEAAzC,CAsGP;AACA,MAAO,IAAM8D,CAAAA,iBAAiB,CAAGjK,gBAAgB,CAC/C,+BAD+C,4FAE/C,wKAAS2D,OAAT,QAASA,OAAT,wBAC8B7B,CAAAA,kBAAkB,CAAC,CAC7CiC,IAAI,CAAE,CADuC,CAE7CF,OAAO,CAAEF,OAAO,CAACE,OAF4B,CAG7CqG,KAAK,kBAAIC,aAAa,CAAErJ,6BAAnB,YAAsD6C,OAAO,CAACE,OAA9D,QAA6E,CAA7E,CAHwC,CAAD,CADhD,QACQuG,aADR,iDAOS,CAAElG,OAAO,CAAEkG,aAAa,CAACtE,GAAd,CAAkB/D,qBAAlB,CAAX,CAPT,0DAF+C,kEAA1C,CAaP,MAAO,IAAMsI,CAAAA,kBAAkB,CAAGrK,gBAAgB,CAIhD,gCAJgD,4FAId,mBAAOoE,OAAP,kKAAkBkG,eAAlB,QAAkBA,eAAlB,yBACPrI,CAAAA,iBAAiB,CAACmC,OAAD,CADV,QAC5BmG,YAD4B,oBAG7BA,YAH6B,6DAIzBD,eAAe,CAAClG,OAAD,CAJU,2CAO3B,CAAEA,OAAO,CAAPA,OAAF,CAAWoG,IAAI,CAAEzI,qBAAqB,CAACwI,YAAD,CAAtC,CAP2B,4DAJc,sEAA3C,CAcP,MAAO,IAAME,CAAAA,yBAAyB,CAAGzK,gBAAgB,CAIvD,uCAJuD,4FAId,mBAAO+D,IAAP,kKAAe2G,QAAf,QAAeA,QAAf,CACnCC,KADmC,CAC3BD,QAAQ,EADmB,yBAEb5I,CAAAA,kBAAkB,CAAC,CAC7CiC,IAAI,CAAJA,IAD6C,CAE7CF,OAAO,CAAE8G,KAAK,CAACC,WAAN,CAAkBpH,WAAlB,CAA8BG,OAA9B,CAAsCE,OAFF,CAG7CqG,KAAK,kBAAIC,aAAa,CAAErJ,6BAAnB,YAAsD6J,KAAK,CAACC,WAAN,CAAkBpH,WAAlB,CAA8BG,OAA9B,CAAsCE,OAA5F,QAA2G,CAA3G,CAHwC,CAAD,CAFL,QAEnCuG,aAFmC,mDAQlC,CAAElG,OAAO,CAAEkG,aAAa,CAACtE,GAAd,CAAkB/D,qBAAlB,CAAX,CAAqDgC,IAAI,CAAJA,IAArD,CARkC,4DAJc,wEAAlD,CAeP,MAAO,IAAM8G,CAAAA,gBAAgB,CAAG5K,WAAW,CAAC,CAC1C6K,IAAI,CAAE,aADoC,CAE1C5I,YAAY,CAAZA,YAF0C,CAG1C6I,QAAQ,CAAE,CACRC,oBAAoB,CAAE,8BAACL,KAAD,CAAQM,MAAR,CAA8D,CAClFN,KAAK,CAACnH,WAAN,CAAkBG,OAAlB,gCACKgH,KAAK,CAACnH,WAAN,CAAkBG,OADvB,EAEKsH,MAAM,CAACC,OAFZ,EAKA;AACAP,KAAK,CAACnH,WAAN,CAAkBO,IAAlB,CAAyB,CAAzB,CACA4G,KAAK,CAACnH,WAAN,CAAkBQ,cAAlB,CAAmC,IAAnC,CACD,CAVO,CAWRmH,mBAAmB,CAAE,6BAACR,KAAD,CAAQM,MAAR,CAAoD,CACvEN,KAAK,CAACxI,MAAN,CAAe8I,MAAM,CAACC,OAAtB,CACD,CAbO,CAcRE,mBAAmB,CAAE,6BAACT,KAAD,CAAQM,MAAR,CAA2C,CAC9DN,KAAK,CAACrI,iBAAN,CAA0B2I,MAAM,CAACC,OAAjC,CACAP,KAAK,CAAClI,aAAN,CAAsBjC,aAAa,CAACkC,GAApC,CACD,CAjBO,CAkBR2I,iBAAiB,CAAE,2BAACV,KAAD,CAAQM,MAAR,CAA2C,CAC5DN,KAAK,CAACpI,eAAN,CAAwB0I,MAAM,CAACC,OAA/B,CACD,CApBO,CAqBRI,gBAAgB,CAAE,0BAACX,KAAD,CAAQM,MAAR,CAAiD,CACjEN,KAAK,CAAClI,aAAN,CAAsBwI,MAAM,CAACC,OAA7B,CACD,CAvBO,CAwBRK,eAAe,CAAE,yBAACZ,KAAD,CAAQM,MAAR,CAA0C,CACzDN,KAAK,CAAChI,YAAN,CAAqBsI,MAAM,CAACC,OAA5B,CACD,CA1BO,CA2BRM,kBAAkB,CAAE,4BAACb,KAAD,CAAQM,MAAR,CAA0C,CAC5DN,KAAK,CAAC5H,eAAN,CAAwBkI,MAAM,CAACC,OAA/B,CACD,CA7BO,CA8BRO,eAAe,CAAE,yBAACd,KAAD,CAAQM,MAAR,CAA8D,CAC7EN,KAAK,CAACpH,iBAAN,gCAA+BoH,KAAK,CAACpH,iBAArC,EAA2D0H,MAAM,CAACC,OAAlE,EACD,CAhCO,CAiCRQ,kBAAkB,CAAE,4BAACf,KAAD,CAAQM,MAAR,CAA0C,CAC5DN,KAAK,CAACnH,WAAN,CAAkBC,eAAlB,CAAoCwH,MAAM,CAACC,OAA3C,CACD,CAnCO,CAHgC,CAwC1CS,aAAa,CAAE,uBAACC,OAAD,CAAa,CAC1B;AACAA,OAAO,CAACC,OAAR,CAAgB5B,iBAAiB,CAAC6B,OAAlC,CAA2C,SAACnB,KAAD,CAAW,CACpD;AACA,GAAIA,KAAK,CAACnH,WAAN,CAAkBE,YAAlB,GAAmC/C,uBAAuB,CAACoL,IAA/D,CAAqE,CACnEpB,KAAK,CAACnH,WAAN,CAAkBE,YAAlB,CAAiC/C,uBAAuB,CAACqL,OAAzD,CACD,CACF,CALD,EAMAJ,OAAO,CAACC,OAAR,CAAgB5B,iBAAiB,CAACgC,SAAlC,CAA6C,SAACtB,KAAD,CAAQM,MAAR,CAAmB,CAC9D,GAAQ/G,CAAAA,OAAR,CAAoB+G,MAAM,CAACC,OAA3B,CAAQhH,OAAR,CAEAyG,KAAK,CAACnH,WAAN,CAAkBE,YAAlB,CAAiC/C,uBAAuB,CAACoL,IAAzD,CACApB,KAAK,CAACnH,WAAN,CAAkBU,OAAlB,CAA4BA,OAA5B,CAEA,GAAIA,OAAO,CAACgI,MAAR,CAAiBlK,4BAArB,CAAmD,CACjD2I,KAAK,CAACnH,WAAN,CAAkBQ,cAAlB,CAAmC,KAAnC,CACD,CAED;AACA2G,KAAK,CAACnH,WAAN,CAAkBS,cAAlB,gCACK0G,KAAK,CAACnH,WAAN,CAAkBS,cADvB,EAEKC,OAAO,CAACO,MAAR,CAAe,SAACC,KAAD,CAAQyH,MAAR,CAAmB,CACnC,sCACKzH,KADL,wBAEGyH,MAAM,CAAClE,EAFV,CAEekE,MAFf,GAID,CALE,CAKA,EALA,CAFL,EASD,CApBD,EAsBA;AACAP,OAAO,CAACC,OAAR,CAAgBxB,kBAAkB,CAACyB,OAAnC,CAA4C,SAACnB,KAAD,CAAW,CACrDA,KAAK,CAACnH,WAAN,CAAkBE,YAAlB,CAAiC/C,uBAAuB,CAACqL,OAAzD,CACD,CAFD,EAGAJ,OAAO,CAACC,OAAR,CAAgBxB,kBAAkB,CAAC4B,SAAnC,CAA8C,SAACtB,KAAD,CAAQM,MAAR,CAAmB,CAC/D,oBAA0BA,MAAM,CAACC,OAAjC,CAAQ9G,OAAR,iBAAQA,OAAR,CAAiBoG,IAAjB,iBAAiBA,IAAjB,CACAG,KAAK,CAACnH,WAAN,CAAkBE,YAAlB,CAAiC/C,uBAAuB,CAACoL,IAAzD,CACApB,KAAK,CAACnH,WAAN,CAAkBS,cAAlB,CAAiCG,OAAjC,EAA4CoG,IAA5C,CACD,CAJD,EAKAoB,OAAO,CAACC,OAAR,CAAgBxB,kBAAkB,CAAC+B,QAAnC,CAA6C,SAACzB,KAAD,CAAQM,MAAR,CAAmB,CAC9DN,KAAK,CAACnH,WAAN,CAAkBE,YAAlB,CAAiC/C,uBAAuB,CAACoL,IAAzD,CACApB,KAAK,CAACnH,WAAN,CAAkBS,cAAlB,CAAiCgH,MAAM,CAACC,OAAxC,EAAmD,IAAnD,CACD,CAHD,EAKA;AACAU,OAAO,CAACC,OAAR,CAAgBpB,yBAAyB,CAACqB,OAA1C,CAAmD,SAACnB,KAAD,CAAW,CAC5DA,KAAK,CAACnH,WAAN,CAAkBE,YAAlB,CAAiC/C,uBAAuB,CAACqL,OAAzD,CACD,CAFD,EAGAJ,OAAO,CAACC,OAAR,CAAgBpB,yBAAyB,CAACwB,SAA1C,CAAqD,SAACtB,KAAD,CAAQM,MAAR,CAAmB,CACtE,qBAA0BA,MAAM,CAACC,OAAjC,CAAQhH,OAAR,kBAAQA,OAAR,CAAiBH,IAAjB,kBAAiBA,IAAjB,CAEA4G,KAAK,CAACnH,WAAN,CAAkBE,YAAlB,CAAiC/C,uBAAuB,CAACoL,IAAzD,CACApB,KAAK,CAACnH,WAAN,CAAkBU,OAAlB,8BAAgCyG,KAAK,CAACnH,WAAN,CAAkBU,OAAlD,qBAA8DA,OAA9D,GACAyG,KAAK,CAACnH,WAAN,CAAkBO,IAAlB,CAAyBA,IAAzB,CAEA,GAAIG,OAAO,CAACgI,MAAR,CAAiBlK,4BAArB,CAAmD,CACjD2I,KAAK,CAACnH,WAAN,CAAkBQ,cAAlB,CAAmC,KAAnC,CACD,CACF,CAVD,EAYA;AACA4H,OAAO,CAACC,OAAR,CAAgBrG,sBAAsB,CAACyG,SAAvC,CAAkD,SAACtB,KAAD,CAAQM,MAAR,CAAmB,CACnEN,KAAK,CAACpH,iBAAN,CAA0BlD,KAAK,CAAC,EAAD,CAAKsK,KAAK,CAACpH,iBAAX,CAA8B0H,MAAM,CAACC,OAArC,CAA/B,CACD,CAFD,EAIA;AACAU,OAAO,CAACC,OAAR,CAAgBtG,eAAe,CAAC0G,SAAhC,CAA2C,SAACtB,KAAD,CAAQM,MAAR,CAAmB,CAC5DN,KAAK,CAACrH,OAAN,CAAgBjD,KAAK,CAAC,EAAD,CAAKsK,KAAK,CAACrH,OAAX,CAAoB2H,MAAM,CAACC,OAA3B,CAArB,CACD,CAFD,EAIA;AACAU,OAAO,CAACC,OAAR,CAAgBvG,eAAe,CAAC2G,SAAhC,CAA2C,SAACtB,KAAD,CAAQM,MAAR,CAAmB,CAC5D,qBAAgEA,MAAM,CAACC,OAAvE,CAAQ/I,MAAR,kBAAQA,MAAR,CAAgBQ,YAAhB,kBAAgBA,YAAhB,CAA8BC,eAA9B,kBAA8BA,eAA9B,CAA+CC,YAA/C,kBAA+CA,YAA/C,CAEA;AACA,GAAI8H,KAAK,CAAChI,YAAN,GAAuBA,YAA3B,CAAyC,CACvC,GAAM0J,CAAAA,WAAW,CAAGjM,KAAK,CAAC0G,MAAM,CAACwF,MAAP,CAAc3B,KAAK,CAAC1H,MAApB,CAAD,CAA8B,OAA9B,CAAzB,CACA,GAAMsJ,CAAAA,WAAW,CAAGnL,uBAAuB,CACzCiL,WAAW,CAACxH,KAAZ,CAAoB,CADqB,CAEzCwH,WAAW,CAACvD,cAAZ,CAA6BlG,eAA7B,CAA+C3B,YAFN,CAA3C,CAKA0J,KAAK,CAAC1H,MAAN,CAAasJ,WAAW,CAAC1H,KAAzB,EAAkC0H,WAAlC,CACD,CAED5B,KAAK,CAACxI,MAAN,CAAeA,MAAf,CACAwI,KAAK,CAAChI,YAAN,CAAqBA,YAArB,CACAgI,KAAK,CAAC/H,eAAN,CAAwBA,eAAxB,CACA+H,KAAK,CAAC9H,YAAN,CAAqBA,YAArB,CACD,CAlBD,EAoBA;AACA+I,OAAO,CAACC,OAAR,CAAgB1H,qBAAqB,CAAC8H,SAAtC,CAAiD,SAACtB,KAAD,CAAQM,MAAR,CAAmB,CAClE,qBACEA,MAAM,CAACC,OADT,CAAQ/I,MAAR,kBAAQA,MAAR,CAAgBQ,YAAhB,kBAAgBA,YAAhB,CAA8BC,eAA9B,kBAA8BA,eAA9B,CAA+CE,aAA/C,kBAA+CA,aAA/C,CAA8DG,MAA9D,kBAA8DA,MAA9D,CAAsEM,iBAAtE,kBAAsEA,iBAAtE,CAAyFD,OAAzF,kBAAyFA,OAAzF,CAEA,GAAMkJ,CAAAA,YAA8B,CAAG,EAAvC,CACA,GAAMC,CAAAA,YAAY,CAAGxJ,MAAM,CAACN,YAAD,CAA3B,CAEA,IAAK,GAAI+J,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,EAAI7L,kBAArB,CAAyC6L,CAAC,EAA1C,CAA8C,CAC5CF,YAAY,CAACG,IAAb,CAAkBvL,uBAAuB,CAACuB,YAAY,CAAG+J,CAAhB,CAAmBD,YAAY,CAAC3D,cAAb,CAA8BlG,eAAe,CAAG8J,CAAnE,CAAzC,EACD,CAED,sCACK/B,KADL,MAEExI,MAAM,CAANA,MAFF,CAGEQ,YAAY,CAAZA,YAHF,CAIEC,eAAe,CAAfA,eAJF,CAKEE,aAAa,CAAbA,aALF,CAMES,iBAAiB,CAAjBA,iBANF,CAOED,OAAO,CAAPA,OAPF,CAQEL,MAAM,CAAE5C,KAAK,CAAC,EAAD,CAAK4C,MAAL,CAAa5B,aAAa,CAACmL,YAAD,CAA1B,CARf,GAUD,CApBD,EAsBA;AACAZ,OAAO,CAACC,OAAR,CAAgB5G,UAAU,CAACgH,SAA3B,CAAsC,SAACtB,KAAD,CAAQM,MAAR,CAAmB,CACvDN,KAAK,CAAC1H,MAAN,CAAe5C,KAAK,CAAC,EAAD,CAAKsK,KAAK,CAAC1H,MAAX,oBACjBgI,MAAM,CAACC,OAAP,CAAerG,KAAf,CAAqBC,QAArB,EADiB,CACiBmG,MAAM,CAACC,OADxB,EAApB,CAGD,CAJD,EAMA;AACAU,OAAO,CAACC,OAAR,CAAgBzG,WAAW,CAAC6G,SAA5B,CAAuC,SAACtB,KAAD,CAAQM,MAAR,CAAmB,CACxDN,KAAK,CAAC1H,MAAN,CAAe5C,KAAK,CAAC,EAAD,CAAKsK,KAAK,CAAC1H,MAAX,CAAmBgI,MAAM,CAACC,OAA1B,CAApB,CACD,CAFD,EAIA;AACAU,OAAO,CAACC,OAAR,CAAgBpG,YAAY,CAACqG,OAA7B,CAAsC,SAACnB,KAAD,CAAW,CAC/CA,KAAK,CAACnI,iBAAN,CAA0B,IAA1B,CACD,CAFD,EAGAoJ,OAAO,CAACC,OAAR,CAAgBpG,YAAY,CAAC2G,QAA7B,CAAuC,SAACzB,KAAD,CAAW,CAChDA,KAAK,CAACnI,iBAAN,CAA0B,KAA1B,CACD,CAFD,EAGAoJ,OAAO,CAACC,OAAR,CAAgBpG,YAAY,CAACwG,SAA7B,CAAwC,SAACtB,KAAD,CAAQM,MAAR,CAAmB,2BACzD,qBAA0BA,MAAM,CAACC,OAAjC,CAAQ9G,OAAR,kBAAQA,OAAR,CAAiByB,IAAjB,kBAAiBA,IAAjB,CAEA8E,KAAK,CAACnI,iBAAN,CAA0B,KAA1B,CACAmI,KAAK,CAACzH,OAAN,CAAckB,OAAd,EAAyB/D,KAAK,CAAC,EAAD,wBAAKsK,KAAK,CAACzH,OAAN,CAAckB,OAAd,CAAL,+DAA+B,EAA/B,CAAmCyB,IAAnC,CAA9B,CACD,CALD,EAOA;AACA+F,OAAO,CAACC,OAAR,CAAgB9F,gBAAgB,CAAC+F,OAAjC,CAA0C,SAACnB,KAAD,CAAW,CACnDA,KAAK,CAACnI,iBAAN,CAA0B,IAA1B,CACD,CAFD,EAGAoJ,OAAO,CAACC,OAAR,CAAgB9F,gBAAgB,CAACqG,QAAjC,CAA2C,SAACzB,KAAD,CAAW,CACpDA,KAAK,CAACnI,iBAAN,CAA0B,KAA1B,CACD,CAFD,EAGAoJ,OAAO,CAACC,OAAR,CAAgB9F,gBAAgB,CAACkG,SAAjC,CAA4C,SAACtB,KAAD,CAAQM,MAAR,CAAmB,CAC7D,qBAAwDA,MAAM,CAACC,OAA/D,CAAQrF,IAAR,kBAAQA,IAAR,CAActC,iBAAd,kBAAcA,iBAAd,CAAiCyC,IAAjC,kBAAiCA,IAAjC,CAAuC7C,YAAvC,kBAAuCA,YAAvC,CAEAwH,KAAK,CAACnI,iBAAN,CAA0B,KAA1B,CACAmI,KAAK,CAACzH,OAAN,CAAgB8C,IAAI,GAAK,CAAT,CAAaH,IAAb,8BAAwB8E,KAAK,CAACzH,OAA9B,qBAA0C2C,IAA1C,EAAhB,CACA8E,KAAK,CAACpH,iBAAN,gCAA+BoH,KAAK,CAACpH,iBAArC,EAA2DA,iBAA3D,EACAoH,KAAK,CAACtH,gBAAN,CAAyBsH,KAAK,CAACzH,OAAN,CAAcgJ,MAAd,GAAyB/I,YAAzB,EAAyC0C,IAAI,CAACqG,MAAL,GAAgB,CAAlF,CACAvB,KAAK,CAACxH,YAAN,CAAqBA,YAArB,CACAwH,KAAK,CAACvH,kBAAN,CAA2B4C,IAA3B,CACD,CATD,EAUD,CArMyC,CAAD,CAApC,CAwMP;AACO,0BAUH6E,gBAAgB,CAAC+B,OAVd,CACLvB,iBADK,uBACLA,iBADK,CAELE,eAFK,uBAELA,eAFK,CAGLD,gBAHK,uBAGLA,gBAHK,CAILF,mBAJK,uBAILA,mBAJK,CAKLD,mBALK,uBAKLA,mBALK,CAMLK,kBANK,uBAMLA,kBANK,CAOLC,eAPK,uBAOLA,eAPK,CAQLT,oBARK,uBAQLA,oBARK,CASLU,kBATK,uBASLA,kBATK,C,8KAYP,cAAeb,CAAAA,gBAAgB,CAACgC,OAAhC","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { ethers } from 'ethers'\nimport { formatUnits } from 'ethers/lib/utils'\nimport maxBy from 'lodash/maxBy'\nimport merge from 'lodash/merge'\nimport range from 'lodash/range'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport {\n  Bet,\n  LedgerData,\n  HistoryFilter,\n  PredictionsState,\n  PredictionStatus,\n  ReduxNodeRound,\n  BetPosition,\n  LeaderboardLoadingState,\n  PredictionUser,\n  LeaderboardFilter,\n  State,\n} from 'state/types'\nimport { getPredictionsContract } from 'utils/contractHelpers'\nimport {\n  FUTURE_ROUND_COUNT,\n  LEADERBOARD_MIN_ROUNDS_PLAYED,\n  PAST_ROUND_COUNT,\n  ROUNDS_PER_PAGE,\n  ROUND_BUFFER,\n} from './config'\nimport {\n  getBetHistory,\n  transformBetResponse,\n  makeFutureRoundResponse,\n  makeRoundData,\n  getRoundsData,\n  getPredictionData,\n  MarketData,\n  getLedgerData,\n  makeLedgerData,\n  serializePredictionsRoundsResponse,\n  getClaimStatuses,\n  fetchUsersRoundsLength,\n  fetchUserRounds,\n  getPredictionUsers,\n  transformUserResponse,\n  LEADERBOARD_RESULTS_PER_PAGE,\n  getPredictionUser,\n} from './helpers'\n\nconst initialState: PredictionsState = {\n  status: PredictionStatus.INITIAL,\n  isLoading: false,\n  isHistoryPaneOpen: false,\n  isChartPaneOpen: false,\n  isFetchingHistory: false,\n  historyFilter: HistoryFilter.ALL,\n  currentEpoch: 0,\n  intervalSeconds: 300,\n  minBetAmount: '10000000000000',\n  bufferSeconds: 60,\n  lastOraclePrice: BIG_ZERO.toJSON(),\n  rounds: {},\n  history: [],\n  totalHistory: 0,\n  currentHistoryPage: 1,\n  hasHistoryLoaded: false,\n  ledgers: {},\n  claimableStatuses: {},\n  leaderboard: {\n    selectedAddress: null,\n    loadingState: LeaderboardLoadingState.INITIAL,\n    filters: {\n      address: null,\n      orderBy: 'netBNB',\n      timePeriod: 'all',\n    },\n    skip: 0,\n    hasMoreResults: true,\n    addressResults: {},\n    results: [],\n  },\n}\n\n// Thunks\ntype PredictionInitialization = Pick<\n  PredictionsState,\n  | 'status'\n  | 'currentEpoch'\n  | 'intervalSeconds'\n  | 'minBetAmount'\n  | 'rounds'\n  | 'ledgers'\n  | 'claimableStatuses'\n  | 'bufferSeconds'\n>\nexport const initializePredictions = createAsyncThunk<PredictionInitialization, string>(\n  'predictions/intialize',\n  async (account = null) => {\n    // Static values\n    const marketData = await getPredictionData()\n    const epochs =\n      marketData.currentEpoch > PAST_ROUND_COUNT\n        ? range(marketData.currentEpoch, marketData.currentEpoch - PAST_ROUND_COUNT)\n        : [marketData.currentEpoch]\n\n    // Round data\n    const roundsResponse = await getRoundsData(epochs)\n    const initialRoundData: { [key: string]: ReduxNodeRound } = roundsResponse.reduce((accum, roundResponse) => {\n      const reduxNodeRound = serializePredictionsRoundsResponse(roundResponse)\n\n      return {\n        ...accum,\n        [reduxNodeRound.epoch.toString()]: reduxNodeRound,\n      }\n    }, {})\n\n    const initializedData = {\n      ...marketData,\n      rounds: initialRoundData,\n      ledgers: {},\n      claimableStatuses: {},\n    }\n\n    if (!account) {\n      return initializedData\n    }\n\n    // Bet data\n    const ledgerResponses = await getLedgerData(account, epochs)\n\n    // Claim statuses\n    const claimableStatuses = await getClaimStatuses(account, epochs)\n\n    return merge({}, initializedData, {\n      ledgers: makeLedgerData(account, ledgerResponses, epochs),\n      claimableStatuses,\n    })\n  },\n)\n\nexport const fetchRound = createAsyncThunk<ReduxNodeRound, number>('predictions/fetchRound', async (epoch) => {\n  const predictionContract = getPredictionsContract()\n  const response = await predictionContract.rounds(epoch)\n  return serializePredictionsRoundsResponse(response)\n})\n\nexport const fetchRounds = createAsyncThunk<{ [key: string]: ReduxNodeRound }, number[]>(\n  'predictions/fetchRounds',\n  async (epochs) => {\n    const rounds = await getRoundsData(epochs)\n    return rounds.reduce((accum, round) => {\n      if (!round) {\n        return accum\n      }\n\n      const reduxNodeRound = serializePredictionsRoundsResponse(round)\n\n      return {\n        ...accum,\n        [reduxNodeRound.epoch.toString()]: reduxNodeRound,\n      }\n    }, {})\n  },\n)\n\nexport const fetchMarketData = createAsyncThunk<MarketData>('predictions/fetchMarketData', async () => {\n  const marketData = await getPredictionData()\n  return marketData\n})\n\nexport const fetchLedgerData = createAsyncThunk<LedgerData, { account: string; epochs: number[] }>(\n  'predictions/fetchLedgerData',\n  async ({ account, epochs }) => {\n    const ledgers = await getLedgerData(account, epochs)\n    return makeLedgerData(account, ledgers, epochs)\n  },\n)\n\nexport const fetchClaimableStatuses = createAsyncThunk<\n  PredictionsState['claimableStatuses'],\n  { account: string; epochs: number[] }\n>('predictions/fetchClaimableStatuses', async ({ account, epochs }) => {\n  const ledgers = await getClaimStatuses(account, epochs)\n  return ledgers\n})\n\nexport const fetchHistory = createAsyncThunk<{ account: string; bets: Bet[] }, { account: string; claimed?: boolean }>(\n  'predictions/fetchHistory',\n  async ({ account, claimed }) => {\n    const response = await getBetHistory({\n      user: account.toLowerCase(),\n      claimed,\n    })\n    const bets = response.map(transformBetResponse)\n\n    return { account, bets }\n  },\n)\n\nexport const fetchNodeHistory = createAsyncThunk<\n  { bets: Bet[]; claimableStatuses: PredictionsState['claimableStatuses']; page?: number; totalHistory: number },\n  { account: string; page?: number }\n>('predictions/fetchNodeHistory', async ({ account, page = 1 }) => {\n  const userRoundsLength = await fetchUsersRoundsLength(account)\n  const emptyResult = { bets: [], claimableStatuses: {}, totalHistory: userRoundsLength.toNumber() }\n  const maxPages = userRoundsLength.lte(ROUNDS_PER_PAGE) ? 1 : Math.ceil(userRoundsLength.toNumber() / ROUNDS_PER_PAGE)\n\n  if (userRoundsLength.eq(0)) {\n    return emptyResult\n  }\n\n  if (page > maxPages) {\n    return emptyResult\n  }\n\n  const cursor = userRoundsLength.sub(ROUNDS_PER_PAGE * page)\n\n  // If the page request is the final one we only want to retrieve the amount of rounds up to the next cursor.\n  const size =\n    maxPages === page\n      ? userRoundsLength\n          .sub(ROUNDS_PER_PAGE * (page - 1)) // Previous page's cursor\n          .toNumber()\n      : ROUNDS_PER_PAGE\n  const userRounds = await fetchUserRounds(account, cursor.lt(0) ? 0 : cursor.toNumber(), size)\n\n  if (!userRounds) {\n    return emptyResult\n  }\n\n  const epochs = Object.keys(userRounds).map((epochStr) => Number(epochStr))\n  const roundData = await getRoundsData(epochs)\n  const claimableStatuses = await getClaimStatuses(account, epochs)\n\n  // Turn the data from the node into an Bet object that comes from the graph\n  const bets: Bet[] = roundData.reduce((accum, round) => {\n    const reduxRound = serializePredictionsRoundsResponse(round)\n    const ledger = userRounds[reduxRound.epoch]\n    const ledgerAmount = ethers.BigNumber.from(ledger.amount)\n    const closePrice = round.closePrice ? parseFloat(formatUnits(round.closePrice, 8)) : null\n    const lockPrice = round.lockPrice ? parseFloat(formatUnits(round.lockPrice, 8)) : null\n\n    const getRoundPosition = () => {\n      if (!closePrice) {\n        return null\n      }\n\n      if (round.closePrice.eq(round.lockPrice)) {\n        return BetPosition.HOUSE\n      }\n\n      return round.closePrice.gt(round.lockPrice) ? BetPosition.BULL : BetPosition.BEAR\n    }\n\n    return [\n      ...accum,\n      {\n        id: null,\n        hash: null,\n        amount: parseFloat(formatUnits(ledgerAmount)),\n        position: ledger.position,\n        claimed: ledger.claimed,\n        claimedAt: null,\n        claimedHash: null,\n        claimedBNB: 0,\n        claimedNetBNB: 0,\n        createdAt: null,\n        updatedAt: null,\n        block: 0,\n        round: {\n          id: null,\n          epoch: round.epoch.toNumber(),\n          failed: false,\n          startBlock: null,\n          startAt: round.startTimestamp ? round.startTimestamp.toNumber() : null,\n          startHash: null,\n          lockAt: round.lockTimestamp ? round.lockTimestamp.toNumber() : null,\n          lockBlock: null,\n          lockPrice,\n          lockHash: null,\n          lockRoundId: round.lockOracleId ? round.lockOracleId.toString() : null,\n          closeRoundId: round.closeOracleId ? round.closeOracleId.toString() : null,\n          closeHash: null,\n          closeAt: null,\n          closePrice,\n          closeBlock: null,\n          totalBets: 0,\n          totalAmount: parseFloat(formatUnits(round.totalAmount)),\n          bullBets: 0,\n          bullAmount: parseFloat(formatUnits(round.bullAmount)),\n          bearBets: 0,\n          bearAmount: parseFloat(formatUnits(round.bearAmount)),\n          position: getRoundPosition(),\n        },\n      },\n    ]\n  }, [])\n\n  return { bets, claimableStatuses, page, totalHistory: userRoundsLength.toNumber() }\n})\n\n// Leaderboard\nexport const filterLeaderboard = createAsyncThunk<{ results: PredictionUser[] }, { filters: LeaderboardFilter }>(\n  'predictions/filterLeaderboard',\n  async ({ filters }) => {\n    const usersResponse = await getPredictionUsers({\n      skip: 0,\n      orderBy: filters.orderBy,\n      where: { totalBets_gte: LEADERBOARD_MIN_ROUNDS_PLAYED, [`${filters.orderBy}_gt`]: 0 },\n    })\n\n    return { results: usersResponse.map(transformUserResponse) }\n  },\n)\n\nexport const fetchAddressResult = createAsyncThunk<\n  { account: string; data: PredictionUser },\n  string,\n  { rejectValue: string }\n>('predictions/fetchAddressResult', async (account, { rejectWithValue }) => {\n  const userResponse = await getPredictionUser(account)\n\n  if (!userResponse) {\n    return rejectWithValue(account)\n  }\n\n  return { account, data: transformUserResponse(userResponse) }\n})\n\nexport const filterNextPageLeaderboard = createAsyncThunk<\n  { results: PredictionUser[]; skip: number },\n  number,\n  { state: State }\n>('predictions/filterNextPageLeaderboard', async (skip, { getState }) => {\n  const state = getState()\n  const usersResponse = await getPredictionUsers({\n    skip,\n    orderBy: state.predictions.leaderboard.filters.orderBy,\n    where: { totalBets_gte: LEADERBOARD_MIN_ROUNDS_PLAYED, [`${state.predictions.leaderboard.filters.orderBy}_gt`]: 0 },\n  })\n\n  return { results: usersResponse.map(transformUserResponse), skip }\n})\n\nexport const predictionsSlice = createSlice({\n  name: 'predictions',\n  initialState,\n  reducers: {\n    setLeaderboardFilter: (state, action: PayloadAction<Partial<LeaderboardFilter>>) => {\n      state.leaderboard.filters = {\n        ...state.leaderboard.filters,\n        ...action.payload,\n      }\n\n      // Anytime we filters change we need to reset back to page 1\n      state.leaderboard.skip = 0\n      state.leaderboard.hasMoreResults = true\n    },\n    setPredictionStatus: (state, action: PayloadAction<PredictionStatus>) => {\n      state.status = action.payload\n    },\n    setHistoryPaneState: (state, action: PayloadAction<boolean>) => {\n      state.isHistoryPaneOpen = action.payload\n      state.historyFilter = HistoryFilter.ALL\n    },\n    setChartPaneState: (state, action: PayloadAction<boolean>) => {\n      state.isChartPaneOpen = action.payload\n    },\n    setHistoryFilter: (state, action: PayloadAction<HistoryFilter>) => {\n      state.historyFilter = action.payload\n    },\n    setCurrentEpoch: (state, action: PayloadAction<number>) => {\n      state.currentEpoch = action.payload\n    },\n    setLastOraclePrice: (state, action: PayloadAction<string>) => {\n      state.lastOraclePrice = action.payload\n    },\n    markAsCollected: (state, action: PayloadAction<{ [key: string]: boolean }>) => {\n      state.claimableStatuses = { ...state.claimableStatuses, ...action.payload }\n    },\n    setSelectedAddress: (state, action: PayloadAction<string>) => {\n      state.leaderboard.selectedAddress = action.payload\n    },\n  },\n  extraReducers: (builder) => {\n    // Leaderboard filter\n    builder.addCase(filterLeaderboard.pending, (state) => {\n      // Only mark as loading if we come from IDLE. This allows initialization.\n      if (state.leaderboard.loadingState === LeaderboardLoadingState.IDLE) {\n        state.leaderboard.loadingState = LeaderboardLoadingState.LOADING\n      }\n    })\n    builder.addCase(filterLeaderboard.fulfilled, (state, action) => {\n      const { results } = action.payload\n\n      state.leaderboard.loadingState = LeaderboardLoadingState.IDLE\n      state.leaderboard.results = results\n\n      if (results.length < LEADERBOARD_RESULTS_PER_PAGE) {\n        state.leaderboard.hasMoreResults = false\n      }\n\n      // Populate address results to reduce calls\n      state.leaderboard.addressResults = {\n        ...state.leaderboard.addressResults,\n        ...results.reduce((accum, result) => {\n          return {\n            ...accum,\n            [result.id]: result,\n          }\n        }, {}),\n      }\n    })\n\n    // Leaderboard account result\n    builder.addCase(fetchAddressResult.pending, (state) => {\n      state.leaderboard.loadingState = LeaderboardLoadingState.LOADING\n    })\n    builder.addCase(fetchAddressResult.fulfilled, (state, action) => {\n      const { account, data } = action.payload\n      state.leaderboard.loadingState = LeaderboardLoadingState.IDLE\n      state.leaderboard.addressResults[account] = data\n    })\n    builder.addCase(fetchAddressResult.rejected, (state, action) => {\n      state.leaderboard.loadingState = LeaderboardLoadingState.IDLE\n      state.leaderboard.addressResults[action.payload] = null\n    })\n\n    // Leaderboard next page\n    builder.addCase(filterNextPageLeaderboard.pending, (state) => {\n      state.leaderboard.loadingState = LeaderboardLoadingState.LOADING\n    })\n    builder.addCase(filterNextPageLeaderboard.fulfilled, (state, action) => {\n      const { results, skip } = action.payload\n\n      state.leaderboard.loadingState = LeaderboardLoadingState.IDLE\n      state.leaderboard.results = [...state.leaderboard.results, ...results]\n      state.leaderboard.skip = skip\n\n      if (results.length < LEADERBOARD_RESULTS_PER_PAGE) {\n        state.leaderboard.hasMoreResults = false\n      }\n    })\n\n    // Claimable statuses\n    builder.addCase(fetchClaimableStatuses.fulfilled, (state, action) => {\n      state.claimableStatuses = merge({}, state.claimableStatuses, action.payload)\n    })\n\n    // Ledger (bet) records\n    builder.addCase(fetchLedgerData.fulfilled, (state, action) => {\n      state.ledgers = merge({}, state.ledgers, action.payload)\n    })\n\n    // Get static market data\n    builder.addCase(fetchMarketData.fulfilled, (state, action) => {\n      const { status, currentEpoch, intervalSeconds, minBetAmount } = action.payload\n\n      // If the round has change add a new future round\n      if (state.currentEpoch !== currentEpoch) {\n        const newestRound = maxBy(Object.values(state.rounds), 'epoch')\n        const futureRound = makeFutureRoundResponse(\n          newestRound.epoch + 1,\n          newestRound.startTimestamp + intervalSeconds + ROUND_BUFFER,\n        )\n\n        state.rounds[futureRound.epoch] = futureRound\n      }\n\n      state.status = status\n      state.currentEpoch = currentEpoch\n      state.intervalSeconds = intervalSeconds\n      state.minBetAmount = minBetAmount\n    })\n\n    // Initialize predictions\n    builder.addCase(initializePredictions.fulfilled, (state, action) => {\n      const { status, currentEpoch, intervalSeconds, bufferSeconds, rounds, claimableStatuses, ledgers } =\n        action.payload\n      const futureRounds: ReduxNodeRound[] = []\n      const currentRound = rounds[currentEpoch]\n\n      for (let i = 1; i <= FUTURE_ROUND_COUNT; i++) {\n        futureRounds.push(makeFutureRoundResponse(currentEpoch + i, currentRound.startTimestamp + intervalSeconds * i))\n      }\n\n      return {\n        ...state,\n        status,\n        currentEpoch,\n        intervalSeconds,\n        bufferSeconds,\n        claimableStatuses,\n        ledgers,\n        rounds: merge({}, rounds, makeRoundData(futureRounds)),\n      }\n    })\n\n    // Get single round\n    builder.addCase(fetchRound.fulfilled, (state, action) => {\n      state.rounds = merge({}, state.rounds, {\n        [action.payload.epoch.toString()]: action.payload,\n      })\n    })\n\n    // Get multiple rounds\n    builder.addCase(fetchRounds.fulfilled, (state, action) => {\n      state.rounds = merge({}, state.rounds, action.payload)\n    })\n\n    // Show History\n    builder.addCase(fetchHistory.pending, (state) => {\n      state.isFetchingHistory = true\n    })\n    builder.addCase(fetchHistory.rejected, (state) => {\n      state.isFetchingHistory = false\n    })\n    builder.addCase(fetchHistory.fulfilled, (state, action) => {\n      const { account, bets } = action.payload\n\n      state.isFetchingHistory = false\n      state.history[account] = merge([], state.history[account] ?? [], bets)\n    })\n\n    // History from the node\n    builder.addCase(fetchNodeHistory.pending, (state) => {\n      state.isFetchingHistory = true\n    })\n    builder.addCase(fetchNodeHistory.rejected, (state) => {\n      state.isFetchingHistory = false\n    })\n    builder.addCase(fetchNodeHistory.fulfilled, (state, action) => {\n      const { bets, claimableStatuses, page, totalHistory } = action.payload\n\n      state.isFetchingHistory = false\n      state.history = page === 1 ? bets : [...state.history, ...bets]\n      state.claimableStatuses = { ...state.claimableStatuses, ...claimableStatuses }\n      state.hasHistoryLoaded = state.history.length === totalHistory || bets.length === 0\n      state.totalHistory = totalHistory\n      state.currentHistoryPage = page\n    })\n  },\n})\n\n// Actions\nexport const {\n  setChartPaneState,\n  setCurrentEpoch,\n  setHistoryFilter,\n  setHistoryPaneState,\n  setPredictionStatus,\n  setLastOraclePrice,\n  markAsCollected,\n  setLeaderboardFilter,\n  setSelectedAddress,\n} = predictionsSlice.actions\n\nexport default predictionsSlice.reducer\n"]},"metadata":{},"sourceType":"module"}