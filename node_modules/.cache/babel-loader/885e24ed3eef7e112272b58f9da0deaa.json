{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useMemo}from'react';import useFetchProtocolData from'state/info/queries/protocol/overview';import useFetchGlobalChartData from'state/info/queries/protocol/chart';import fetchTopTransactions from'state/info/queries/protocol/transactions';import useTopPoolAddresses from'state/info/queries/pools/topPools';import usePoolDatas from'state/info/queries/pools/poolData';import useFetchedTokenDatas from'state/info/queries/tokens/tokenData';import useTopTokenAddresses from'state/info/queries/tokens/topTokens';import{useProtocolData,useProtocolChartData,useProtocolTransactions,useUpdatePoolData,useAllPoolData,useAddPoolKeys,useAllTokenData,useUpdateTokenData,useAddTokenKeys}from'./hooks';export var ProtocolUpdater=function ProtocolUpdater(){var _useProtocolData=useProtocolData(),_useProtocolData2=_slicedToArray(_useProtocolData,2),protocolData=_useProtocolData2[0],setProtocolData=_useProtocolData2[1];var _useFetchProtocolData=useFetchProtocolData(),fetchedProtocolData=_useFetchProtocolData.data,error=_useFetchProtocolData.error;var _useProtocolChartData=useProtocolChartData(),_useProtocolChartData2=_slicedToArray(_useProtocolChartData,2),chartData=_useProtocolChartData2[0],updateChartData=_useProtocolChartData2[1];var _useFetchGlobalChartD=useFetchGlobalChartData(),fetchedChartData=_useFetchGlobalChartD.data,chartError=_useFetchGlobalChartD.error;var _useProtocolTransacti=useProtocolTransactions(),_useProtocolTransacti2=_slicedToArray(_useProtocolTransacti,2),transactions=_useProtocolTransacti2[0],updateTransactions=_useProtocolTransacti2[1];// update overview data if available and not set\nuseEffect(function(){if(protocolData===undefined&&fetchedProtocolData&&!error){setProtocolData(fetchedProtocolData);}},[error,fetchedProtocolData,protocolData,setProtocolData]);// update global chart data if available and not set\nuseEffect(function(){if(chartData===undefined&&fetchedChartData&&!chartError){updateChartData(fetchedChartData);}},[chartData,chartError,fetchedChartData,updateChartData]);useEffect(function(){var fetch=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchTopTransactions();case 2:data=_context.sent;if(data){updateTransactions(data);}case 4:case\"end\":return _context.stop();}}},_callee);}));return function fetch(){return _ref.apply(this,arguments);};}();if(!transactions){fetch();}},[transactions,updateTransactions]);return null;};export var PoolUpdater=function PoolUpdater(){var updatePoolData=useUpdatePoolData();var addPoolKeys=useAddPoolKeys();var allPoolData=useAllPoolData();var addresses=useTopPoolAddresses();// add top pools on first load\nuseEffect(function(){if(addresses.length>0){addPoolKeys(addresses);}},[addPoolKeys,addresses]);// detect for which addresses we havent loaded pool data yet\nvar unfetchedPoolAddresses=useMemo(function(){return Object.keys(allPoolData).reduce(function(accum,address){var poolData=allPoolData[address];if(!poolData.data){accum.push(address);}return accum;},[]);},[allPoolData]);// fetch data for unfetched pools and update them\nvar _usePoolDatas=usePoolDatas(unfetchedPoolAddresses),poolDataError=_usePoolDatas.error,poolDatas=_usePoolDatas.data;useEffect(function(){if(poolDatas&&!poolDataError){updatePoolData(Object.values(poolDatas));}},[poolDataError,poolDatas,updatePoolData]);return null;};export var TokenUpdater=function TokenUpdater(){var updateTokenDatas=useUpdateTokenData();var addTokenKeys=useAddTokenKeys();var allTokenData=useAllTokenData();var addresses=useTopTokenAddresses();// add top tokens on first load\nuseEffect(function(){if(addresses.length>0){addTokenKeys(addresses);}},[addTokenKeys,addresses]);// detect for which addresses we havent loaded token data yet\nvar unfetchedTokenAddresses=useMemo(function(){return Object.keys(allTokenData).reduce(function(accum,key){var tokenData=allTokenData[key];if(!tokenData.data){accum.push(key);}return accum;},[]);},[allTokenData]);// fetch data for unfetched tokens and update them\nvar _useFetchedTokenDatas=useFetchedTokenDatas(unfetchedTokenAddresses),tokenDataError=_useFetchedTokenDatas.error,tokenDatas=_useFetchedTokenDatas.data;useEffect(function(){if(tokenDatas&&!tokenDataError){updateTokenDatas(Object.values(tokenDatas));}},[tokenDataError,tokenDatas,updateTokenDatas]);return null;};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/updaters.ts"],"names":["useEffect","useMemo","useFetchProtocolData","useFetchGlobalChartData","fetchTopTransactions","useTopPoolAddresses","usePoolDatas","useFetchedTokenDatas","useTopTokenAddresses","useProtocolData","useProtocolChartData","useProtocolTransactions","useUpdatePoolData","useAllPoolData","useAddPoolKeys","useAllTokenData","useUpdateTokenData","useAddTokenKeys","ProtocolUpdater","protocolData","setProtocolData","fetchedProtocolData","data","error","chartData","updateChartData","fetchedChartData","chartError","transactions","updateTransactions","undefined","fetch","PoolUpdater","updatePoolData","addPoolKeys","allPoolData","addresses","length","unfetchedPoolAddresses","Object","keys","reduce","accum","address","poolData","push","poolDataError","poolDatas","values","TokenUpdater","updateTokenDatas","addTokenKeys","allTokenData","unfetchedTokenAddresses","key","tokenData","tokenDataError","tokenDatas"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from 'react'\nimport useFetchProtocolData from 'state/info/queries/protocol/overview'\nimport useFetchGlobalChartData from 'state/info/queries/protocol/chart'\nimport fetchTopTransactions from 'state/info/queries/protocol/transactions'\nimport useTopPoolAddresses from 'state/info/queries/pools/topPools'\nimport usePoolDatas from 'state/info/queries/pools/poolData'\nimport useFetchedTokenDatas from 'state/info/queries/tokens/tokenData'\nimport useTopTokenAddresses from 'state/info/queries/tokens/topTokens'\nimport {\n  useProtocolData,\n  useProtocolChartData,\n  useProtocolTransactions,\n  useUpdatePoolData,\n  useAllPoolData,\n  useAddPoolKeys,\n  useAllTokenData,\n  useUpdateTokenData,\n  useAddTokenKeys,\n} from './hooks'\n\nexport const ProtocolUpdater: React.FC = () => {\n  const [protocolData, setProtocolData] = useProtocolData()\n  const { data: fetchedProtocolData, error } = useFetchProtocolData()\n\n  const [chartData, updateChartData] = useProtocolChartData()\n  const { data: fetchedChartData, error: chartError } = useFetchGlobalChartData()\n\n  const [transactions, updateTransactions] = useProtocolTransactions()\n\n  // update overview data if available and not set\n  useEffect(() => {\n    if (protocolData === undefined && fetchedProtocolData && !error) {\n      setProtocolData(fetchedProtocolData)\n    }\n  }, [error, fetchedProtocolData, protocolData, setProtocolData])\n\n  // update global chart data if available and not set\n  useEffect(() => {\n    if (chartData === undefined && fetchedChartData && !chartError) {\n      updateChartData(fetchedChartData)\n    }\n  }, [chartData, chartError, fetchedChartData, updateChartData])\n\n  useEffect(() => {\n    const fetch = async () => {\n      const data = await fetchTopTransactions()\n      if (data) {\n        updateTransactions(data)\n      }\n    }\n    if (!transactions) {\n      fetch()\n    }\n  }, [transactions, updateTransactions])\n\n  return null\n}\n\nexport const PoolUpdater: React.FC = () => {\n  const updatePoolData = useUpdatePoolData()\n  const addPoolKeys = useAddPoolKeys()\n\n  const allPoolData = useAllPoolData()\n  const addresses = useTopPoolAddresses()\n\n  // add top pools on first load\n  useEffect(() => {\n    if (addresses.length > 0) {\n      addPoolKeys(addresses)\n    }\n  }, [addPoolKeys, addresses])\n\n  // detect for which addresses we havent loaded pool data yet\n  const unfetchedPoolAddresses = useMemo(() => {\n    return Object.keys(allPoolData).reduce((accum: string[], address) => {\n      const poolData = allPoolData[address]\n      if (!poolData.data) {\n        accum.push(address)\n      }\n      return accum\n    }, [])\n  }, [allPoolData])\n\n  // fetch data for unfetched pools and update them\n  const { error: poolDataError, data: poolDatas } = usePoolDatas(unfetchedPoolAddresses)\n  useEffect(() => {\n    if (poolDatas && !poolDataError) {\n      updatePoolData(Object.values(poolDatas))\n    }\n  }, [poolDataError, poolDatas, updatePoolData])\n\n  return null\n}\n\nexport const TokenUpdater = (): null => {\n  const updateTokenDatas = useUpdateTokenData()\n  const addTokenKeys = useAddTokenKeys()\n\n  const allTokenData = useAllTokenData()\n  const addresses = useTopTokenAddresses()\n\n  // add top tokens on first load\n  useEffect(() => {\n    if (addresses.length > 0) {\n      addTokenKeys(addresses)\n    }\n  }, [addTokenKeys, addresses])\n\n  // detect for which addresses we havent loaded token data yet\n  const unfetchedTokenAddresses = useMemo(() => {\n    return Object.keys(allTokenData).reduce((accum: string[], key) => {\n      const tokenData = allTokenData[key]\n      if (!tokenData.data) {\n        accum.push(key)\n      }\n      return accum\n    }, [])\n  }, [allTokenData])\n\n  // fetch data for unfetched tokens and update them\n  const { error: tokenDataError, data: tokenDatas } = useFetchedTokenDatas(unfetchedTokenAddresses)\n  useEffect(() => {\n    if (tokenDatas && !tokenDataError) {\n      updateTokenDatas(Object.values(tokenDatas))\n    }\n  }, [tokenDataError, tokenDatas, updateTokenDatas])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}