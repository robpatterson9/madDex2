{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Farms/components/FarmTable/Actions/StakedAction.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from '@pancakeswap/uikit';\nimport { useLocation } from 'react-router-dom';\nimport { BigNumber } from 'bignumber.js';\nimport ConnectWalletButton from 'components/ConnectWalletButton';\nimport Balance from 'components/Balance';\nimport { useWeb3React } from '@web3-react/core';\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks';\nimport { fetchFarmUserDataAsync } from 'state/farms';\nimport { useTranslation } from 'contexts/Localization';\nimport { useERC20 } from 'hooks/useContract';\nimport { BASE_ADD_LIQUIDITY_URL } from 'config';\nimport { useAppDispatch } from 'state';\nimport { getAddress } from 'utils/addressHelpers';\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts';\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance';\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms';\nimport DepositModal from '../../DepositModal';\nimport WithdrawModal from '../../WithdrawModal';\nimport useStakeFarms from '../../../hooks/useStakeFarms';\nimport useApproveFarm from '../../../hooks/useApproveFarm';\nimport { ActionContainer, ActionTitles, ActionContent } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`;\n_c = IconButtonWrapper;\n\nconst Staked = ({\n  pid,\n  apr,\n  multiplier,\n  lpSymbol,\n  lpLabel,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n  displayApr\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const {\n    allowance,\n    tokenBalance,\n    stakedBalance\n  } = useFarmUser(pid);\n  const {\n    onStake\n  } = useStakeFarms(pid);\n  const {\n    onUnstake\n  } = useUnstakeFarms(pid);\n  const location = useLocation();\n  const lpPrice = useLpTokenPrice(lpSymbol);\n  const cakePrice = usePriceCakeBusd();\n  const isApproved = account && allowance && allowance.isGreaterThan(0);\n  const lpAddress = getAddress(lpAddresses);\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address\n  });\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`;\n\n  const handleStake = async amount => {\n    await onStake(amount);\n    dispatch(fetchFarmUserDataAsync({\n      account,\n      pids: [pid]\n    }));\n  };\n\n  const handleUnstake = async amount => {\n    await onUnstake(amount);\n    dispatch(fetchFarmUserDataAsync({\n      account,\n      pids: [pid]\n    }));\n  };\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance);\n\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN);\n    }\n\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString();\n    }\n\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN);\n  }, [stakedBalance]);\n  const [onPresentDeposit] = useModal( /*#__PURE__*/_jsxDEV(DepositModal, {\n    max: tokenBalance,\n    lpPrice: lpPrice,\n    lpLabel: lpLabel,\n    apr: apr,\n    displayApr: displayApr,\n    stakedBalance: stakedBalance,\n    onConfirm: handleStake,\n    tokenName: lpSymbol,\n    multiplier: multiplier,\n    addLiquidityUrl: addLiquidityUrl,\n    cakePrice: cakePrice\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this));\n  const [onPresentWithdraw] = useModal( /*#__PURE__*/_jsxDEV(WithdrawModal, {\n    max: stakedBalance,\n    onConfirm: handleUnstake,\n    tokenName: lpSymbol\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this));\n  const lpContract = useERC20(lpAddress);\n  const dispatch = useAppDispatch();\n  const {\n    onApprove\n  } = useApproveFarm(lpContract);\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true);\n      await onApprove();\n      dispatch(fetchFarmUserDataAsync({\n        account,\n        pids: [pid]\n      }));\n      setRequestedApproval(false);\n    } catch (e) {\n      console.error(e);\n    }\n  }, [onApprove, dispatch, account, pid]);\n\n  if (!account) {\n    return /*#__PURE__*/_jsxDEV(ActionContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ActionTitles, {\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          textTransform: \"uppercase\",\n          color: \"textSubtle\",\n          fontSize: \"12px\",\n          children: t('Start Farming')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ActionContent, {\n        children: /*#__PURE__*/_jsxDEV(ConnectWalletButton, {\n          width: \"100%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return /*#__PURE__*/_jsxDEV(ActionContainer, {\n        children: [/*#__PURE__*/_jsxDEV(ActionTitles, {\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            bold: true,\n            textTransform: \"uppercase\",\n            color: \"secondary\",\n            fontSize: \"12px\",\n            pr: \"4px\",\n            children: lpSymbol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            bold: true,\n            textTransform: \"uppercase\",\n            color: \"textSubtle\",\n            fontSize: \"12px\",\n            children: t('Staked')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ActionContent, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Heading, {\n              children: displayBalance()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this), stakedBalance.gt(0) && lpPrice.gt(0) && /*#__PURE__*/_jsxDEV(Balance, {\n              fontSize: \"12px\",\n              color: \"textSubtle\",\n              decimals: 2,\n              value: getBalanceNumber(lpPrice.times(stakedBalance)),\n              unit: \" USD\",\n              prefix: \"~\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IconButtonWrapper, {\n            children: [/*#__PURE__*/_jsxDEV(IconButton, {\n              variant: \"secondary\",\n              onClick: onPresentWithdraw,\n              mr: \"6px\",\n              children: /*#__PURE__*/_jsxDEV(MinusIcon, {\n                color: \"primary\",\n                width: \"14px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n              variant: \"secondary\",\n              onClick: onPresentDeposit,\n              disabled: ['history', 'archived'].some(item => location.pathname.includes(item)),\n              children: /*#__PURE__*/_jsxDEV(AddIcon, {\n                color: \"primary\",\n                width: \"14px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 172,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(ActionContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ActionTitles, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          textTransform: \"uppercase\",\n          color: \"textSubtle\",\n          fontSize: \"12px\",\n          pr: \"4px\",\n          children: t('Stake').toUpperCase()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          textTransform: \"uppercase\",\n          color: \"secondary\",\n          fontSize: \"12px\",\n          children: lpSymbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ActionContent, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          width: \"100%\",\n          onClick: onPresentDeposit,\n          variant: \"secondary\",\n          disabled: ['history', 'archived'].some(item => location.pathname.includes(item)),\n          children: t('Stake LP')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (!userDataReady) {\n    return /*#__PURE__*/_jsxDEV(ActionContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ActionTitles, {\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          textTransform: \"uppercase\",\n          color: \"textSubtle\",\n          fontSize: \"12px\",\n          children: t('Start Farming')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ActionContent, {\n        children: /*#__PURE__*/_jsxDEV(Skeleton, {\n          width: 180,\n          marginBottom: 28,\n          marginTop: 14\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ActionContainer, {\n    children: [/*#__PURE__*/_jsxDEV(ActionTitles, {\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"textSubtle\",\n        fontSize: \"12px\",\n        children: t('Enable Farm')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ActionContent, {\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        disabled: requestedApproval,\n        onClick: handleApprove,\n        variant: \"secondary\",\n        children: t('Enable')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Staked, \"QQ6x8+6rjKlVJkt0gtpKbR+NHjA=\", false, function () {\n  return [useTranslation, useWeb3React, useFarmUser, useStakeFarms, useUnstakeFarms, useLocation, useLpTokenPrice, usePriceCakeBusd, useModal, useModal, useERC20, useAppDispatch, useApproveFarm];\n});\n\n_c2 = Staked;\nexport default Staked;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"IconButtonWrapper\");\n$RefreshReg$(_c2, \"Staked\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Farms/components/FarmTable/Actions/StakedAction.tsx"],"names":["React","useState","useCallback","styled","Button","useModal","IconButton","AddIcon","MinusIcon","Skeleton","Text","Heading","useLocation","BigNumber","ConnectWalletButton","Balance","useWeb3React","useFarmUser","useLpTokenPrice","usePriceCakeBusd","fetchFarmUserDataAsync","useTranslation","useERC20","BASE_ADD_LIQUIDITY_URL","useAppDispatch","getAddress","getLiquidityUrlPathParts","getBalanceAmount","getBalanceNumber","getFullDisplayBalance","useUnstakeFarms","DepositModal","WithdrawModal","useStakeFarms","useApproveFarm","ActionContainer","ActionTitles","ActionContent","IconButtonWrapper","div","Staked","pid","apr","multiplier","lpSymbol","lpLabel","lpAddresses","quoteToken","token","userDataReady","displayApr","t","account","requestedApproval","setRequestedApproval","allowance","tokenBalance","stakedBalance","onStake","onUnstake","location","lpPrice","cakePrice","isApproved","isGreaterThan","lpAddress","liquidityUrlPathParts","quoteTokenAddress","address","tokenAddress","addLiquidityUrl","handleStake","amount","dispatch","pids","handleUnstake","displayBalance","stakedBalanceBigNumber","gt","lt","toFixed","ROUND_DOWN","toLocaleString","onPresentDeposit","onPresentWithdraw","lpContract","onApprove","handleApprove","e","console","error","times","some","item","pathname","includes","toUpperCase"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,UAA3B,EAAuCC,OAAvC,EAAgDC,SAAhD,EAA2DC,QAA3D,EAAqEC,IAArE,EAA2EC,OAA3E,QAA0F,oBAA1F;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,mBAAP,MAAgC,gCAAhC;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,WAAT,EAAsBC,eAAtB,EAAuCC,gBAAvC,QAA+D,mBAA/D;AACA,SAASC,sBAAT,QAAuC,aAAvC;AAEA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,sBAAT,QAAuC,QAAvC;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,OAAOC,wBAAP,MAAqC,gCAArC;AACA,SAASC,gBAAT,EAA2BC,gBAA3B,EAA6CC,qBAA7C,QAA0E,qBAA1E;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,YAAP,MAAyB,oBAAzB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,aAAP,MAA0B,8BAA1B;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,SAASC,eAAT,EAA0BC,YAA1B,EAAwCC,aAAxC,QAA6D,UAA7D;;AAEA,MAAMC,iBAAiB,GAAGnC,MAAM,CAACoC,GAAI;AACrC;AACA,CAFA;KAAMD,iB;;AAUN,MAAME,MAAmD,GAAG,CAAC;AAC3DC,EAAAA,GAD2D;AAE3DC,EAAAA,GAF2D;AAG3DC,EAAAA,UAH2D;AAI3DC,EAAAA,QAJ2D;AAK3DC,EAAAA,OAL2D;AAM3DC,EAAAA,WAN2D;AAO3DC,EAAAA,UAP2D;AAQ3DC,EAAAA,KAR2D;AAS3DC,EAAAA,aAT2D;AAU3DC,EAAAA;AAV2D,CAAD,KAWtD;AAAA;;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAQ9B,cAAc,EAA5B;AACA,QAAM;AAAE+B,IAAAA;AAAF,MAAcpC,YAAY,EAAhC;AACA,QAAM,CAACqC,iBAAD,EAAoBC,oBAApB,IAA4CrD,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM;AAAEsD,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA;AAA3B,MAA6CxC,WAAW,CAACwB,GAAD,CAA9D;AACA,QAAM;AAAEiB,IAAAA;AAAF,MAAczB,aAAa,CAACQ,GAAD,CAAjC;AACA,QAAM;AAAEkB,IAAAA;AAAF,MAAgB7B,eAAe,CAACW,GAAD,CAArC;AACA,QAAMmB,QAAQ,GAAGhD,WAAW,EAA5B;AACA,QAAMiD,OAAO,GAAG3C,eAAe,CAAC0B,QAAD,CAA/B;AACA,QAAMkB,SAAS,GAAG3C,gBAAgB,EAAlC;AAEA,QAAM4C,UAAU,GAAGX,OAAO,IAAIG,SAAX,IAAwBA,SAAS,CAACS,aAAV,CAAwB,CAAxB,CAA3C;AAEA,QAAMC,SAAS,GAAGxC,UAAU,CAACqB,WAAD,CAA5B;AACA,QAAMoB,qBAAqB,GAAGxC,wBAAwB,CAAC;AACrDyC,IAAAA,iBAAiB,EAAEpB,UAAU,CAACqB,OADuB;AAErDC,IAAAA,YAAY,EAAErB,KAAK,CAACoB;AAFiC,GAAD,CAAtD;AAIA,QAAME,eAAe,GAAI,GAAE/C,sBAAuB,IAAG2C,qBAAsB,EAA3E;;AAEA,QAAMK,WAAW,GAAG,MAAOC,MAAP,IAA0B;AAC5C,UAAMd,OAAO,CAACc,MAAD,CAAb;AACAC,IAAAA,QAAQ,CAACrD,sBAAsB,CAAC;AAAEgC,MAAAA,OAAF;AAAWsB,MAAAA,IAAI,EAAE,CAACjC,GAAD;AAAjB,KAAD,CAAvB,CAAR;AACD,GAHD;;AAKA,QAAMkC,aAAa,GAAG,MAAOH,MAAP,IAA0B;AAC9C,UAAMb,SAAS,CAACa,MAAD,CAAf;AACAC,IAAAA,QAAQ,CAACrD,sBAAsB,CAAC;AAAEgC,MAAAA,OAAF;AAAWsB,MAAAA,IAAI,EAAE,CAACjC,GAAD;AAAjB,KAAD,CAAvB,CAAR;AACD,GAHD;;AAKA,QAAMmC,cAAc,GAAG1E,WAAW,CAAC,MAAM;AACvC,UAAM2E,sBAAsB,GAAGlD,gBAAgB,CAAC8B,aAAD,CAA/C;;AACA,QAAIoB,sBAAsB,CAACC,EAAvB,CAA0B,CAA1B,KAAgCD,sBAAsB,CAACE,EAAvB,CAA0B,SAA1B,CAApC,EAA0E;AACxE,aAAOF,sBAAsB,CAACG,OAAvB,CAA+B,EAA/B,EAAmCnE,SAAS,CAACoE,UAA7C,CAAP;AACD;;AACD,QAAIJ,sBAAsB,CAACC,EAAvB,CAA0B,CAA1B,KAAgCD,sBAAsB,CAACE,EAAvB,CAA0B,MAA1B,CAApC,EAAuE;AACrE,aAAOlD,qBAAqB,CAAC4B,aAAD,CAArB,CAAqCyB,cAArC,EAAP;AACD;;AACD,WAAOL,sBAAsB,CAACG,OAAvB,CAA+B,CAA/B,EAAkCnE,SAAS,CAACoE,UAA5C,CAAP;AACD,GATiC,EAS/B,CAACxB,aAAD,CAT+B,CAAlC;AAWA,QAAM,CAAC0B,gBAAD,IAAqB9E,QAAQ,eACjC,QAAC,YAAD;AACE,IAAA,GAAG,EAAEmD,YADP;AAEE,IAAA,OAAO,EAAEK,OAFX;AAGE,IAAA,OAAO,EAAEhB,OAHX;AAIE,IAAA,GAAG,EAAEH,GAJP;AAKE,IAAA,UAAU,EAAEQ,UALd;AAME,IAAA,aAAa,EAAEO,aANjB;AAOE,IAAA,SAAS,EAAEc,WAPb;AAQE,IAAA,SAAS,EAAE3B,QARb;AASE,IAAA,UAAU,EAAED,UATd;AAUE,IAAA,eAAe,EAAE2B,eAVnB;AAWE,IAAA,SAAS,EAAER;AAXb;AAAA;AAAA;AAAA;AAAA,UADiC,CAAnC;AAeA,QAAM,CAACsB,iBAAD,IAAsB/E,QAAQ,eAClC,QAAC,aAAD;AAAe,IAAA,GAAG,EAAEoD,aAApB;AAAmC,IAAA,SAAS,EAAEkB,aAA9C;AAA6D,IAAA,SAAS,EAAE/B;AAAxE;AAAA;AAAA;AAAA;AAAA,UADkC,CAApC;AAGA,QAAMyC,UAAU,GAAG/D,QAAQ,CAAC2C,SAAD,CAA3B;AACA,QAAMQ,QAAQ,GAAGjD,cAAc,EAA/B;AACA,QAAM;AAAE8D,IAAAA;AAAF,MAAgBpD,cAAc,CAACmD,UAAD,CAApC;AAEA,QAAME,aAAa,GAAGrF,WAAW,CAAC,YAAY;AAC5C,QAAI;AACFoD,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACA,YAAMgC,SAAS,EAAf;AACAb,MAAAA,QAAQ,CAACrD,sBAAsB,CAAC;AAAEgC,QAAAA,OAAF;AAAWsB,QAAAA,IAAI,EAAE,CAACjC,GAAD;AAAjB,OAAD,CAAvB,CAAR;AAEAa,MAAAA,oBAAoB,CAAC,KAAD,CAApB;AACD,KAND,CAME,OAAOkC,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACD;AACF,GAVgC,EAU9B,CAACF,SAAD,EAAYb,QAAZ,EAAsBrB,OAAtB,EAA+BX,GAA/B,CAV8B,CAAjC;;AAYA,MAAI,CAACW,OAAL,EAAc;AACZ,wBACE,QAAC,eAAD;AAAA,8BACE,QAAC,YAAD;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,aAAa,EAAC,WAAzB;AAAqC,UAAA,KAAK,EAAC,YAA3C;AAAwD,UAAA,QAAQ,EAAC,MAAjE;AAAA,oBACGD,CAAC,CAAC,eAAD;AADJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,aAAD;AAAA,+BACE,QAAC,mBAAD;AAAqB,UAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AAED,MAAIY,UAAJ,EAAgB;AACd,QAAIN,aAAa,CAACqB,EAAd,CAAiB,CAAjB,CAAJ,EAAyB;AACvB,0BACE,QAAC,eAAD;AAAA,gCACE,QAAC,YAAD;AAAA,kCACE,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAW,YAAA,aAAa,EAAC,WAAzB;AAAqC,YAAA,KAAK,EAAC,WAA3C;AAAuD,YAAA,QAAQ,EAAC,MAAhE;AAAuE,YAAA,EAAE,EAAC,KAA1E;AAAA,sBACGlC;AADH;AAAA;AAAA;AAAA;AAAA,kBADF,eAIE,QAAC,IAAD;AAAM,YAAA,IAAI,MAAV;AAAW,YAAA,aAAa,EAAC,WAAzB;AAAqC,YAAA,KAAK,EAAC,YAA3C;AAAwD,YAAA,QAAQ,EAAC,MAAjE;AAAA,sBACGO,CAAC,CAAC,QAAD;AADJ;AAAA;AAAA;AAAA;AAAA,kBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eASE,QAAC,aAAD;AAAA,kCACE;AAAA,oCACE,QAAC,OAAD;AAAA,wBAAUyB,cAAc;AAAxB;AAAA;AAAA;AAAA;AAAA,oBADF,EAEGnB,aAAa,CAACqB,EAAd,CAAiB,CAAjB,KAAuBjB,OAAO,CAACiB,EAAR,CAAW,CAAX,CAAvB,iBACC,QAAC,OAAD;AACE,cAAA,QAAQ,EAAC,MADX;AAEE,cAAA,KAAK,EAAC,YAFR;AAGE,cAAA,QAAQ,EAAE,CAHZ;AAIE,cAAA,KAAK,EAAElD,gBAAgB,CAACiC,OAAO,CAAC8B,KAAR,CAAclC,aAAd,CAAD,CAJzB;AAKE,cAAA,IAAI,EAAC,MALP;AAME,cAAA,MAAM,EAAC;AANT;AAAA;AAAA;AAAA;AAAA,oBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAcE,QAAC,iBAAD;AAAA,oCACE,QAAC,UAAD;AAAY,cAAA,OAAO,EAAC,WAApB;AAAgC,cAAA,OAAO,EAAE2B,iBAAzC;AAA4D,cAAA,EAAE,EAAC,KAA/D;AAAA,qCACE,QAAC,SAAD;AAAW,gBAAA,KAAK,EAAC,SAAjB;AAA2B,gBAAA,KAAK,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBADF,eAIE,QAAC,UAAD;AACE,cAAA,OAAO,EAAC,WADV;AAEE,cAAA,OAAO,EAAED,gBAFX;AAGE,cAAA,QAAQ,EAAE,CAAC,SAAD,EAAY,UAAZ,EAAwBS,IAAxB,CAA8BC,IAAD,IAAUjC,QAAQ,CAACkC,QAAT,CAAkBC,QAAlB,CAA2BF,IAA3B,CAAvC,CAHZ;AAAA,qCAKE,QAAC,OAAD;AAAS,gBAAA,KAAK,EAAC,SAAf;AAAyB,gBAAA,KAAK,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA;AALF;AAAA;AAAA;AAAA;AAAA,oBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAdF;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAuCD;;AAED,wBACE,QAAC,eAAD;AAAA,8BACE,QAAC,YAAD;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,aAAa,EAAC,WAAzB;AAAqC,UAAA,KAAK,EAAC,YAA3C;AAAwD,UAAA,QAAQ,EAAC,MAAjE;AAAwE,UAAA,EAAE,EAAC,KAA3E;AAAA,oBACG1C,CAAC,CAAC,OAAD,CAAD,CAAW6C,WAAX;AADH;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,aAAa,EAAC,WAAzB;AAAqC,UAAA,KAAK,EAAC,WAA3C;AAAuD,UAAA,QAAQ,EAAC,MAAhE;AAAA,oBACGpD;AADH;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eASE,QAAC,aAAD;AAAA,+BACE,QAAC,MAAD;AACE,UAAA,KAAK,EAAC,MADR;AAEE,UAAA,OAAO,EAAEuC,gBAFX;AAGE,UAAA,OAAO,EAAC,WAHV;AAIE,UAAA,QAAQ,EAAE,CAAC,SAAD,EAAY,UAAZ,EAAwBS,IAAxB,CAA8BC,IAAD,IAAUjC,QAAQ,CAACkC,QAAT,CAAkBC,QAAlB,CAA2BF,IAA3B,CAAvC,CAJZ;AAAA,oBAMG1C,CAAC,CAAC,UAAD;AANJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAsBD;;AAED,MAAI,CAACF,aAAL,EAAoB;AAClB,wBACE,QAAC,eAAD;AAAA,8BACE,QAAC,YAAD;AAAA,+BACE,QAAC,IAAD;AAAM,UAAA,IAAI,MAAV;AAAW,UAAA,aAAa,EAAC,WAAzB;AAAqC,UAAA,KAAK,EAAC,YAA3C;AAAwD,UAAA,QAAQ,EAAC,MAAjE;AAAA,oBACGE,CAAC,CAAC,eAAD;AADJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eAME,QAAC,aAAD;AAAA,+BACE,QAAC,QAAD;AAAU,UAAA,KAAK,EAAE,GAAjB;AAAsB,UAAA,YAAY,EAAE,EAApC;AAAwC,UAAA,SAAS,EAAE;AAAnD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;;AAED,sBACE,QAAC,eAAD;AAAA,4BACE,QAAC,YAAD;AAAA,6BACE,QAAC,IAAD;AAAM,QAAA,IAAI,MAAV;AAAW,QAAA,aAAa,EAAC,WAAzB;AAAqC,QAAA,KAAK,EAAC,YAA3C;AAAwD,QAAA,QAAQ,EAAC,MAAjE;AAAA,kBACGA,CAAC,CAAC,aAAD;AADJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME,QAAC,aAAD;AAAA,6BACE,QAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,MAAd;AAAqB,QAAA,QAAQ,EAAEE,iBAA/B;AAAkD,QAAA,OAAO,EAAEkC,aAA3D;AAA0E,QAAA,OAAO,EAAC,WAAlF;AAAA,kBACGpC,CAAC,CAAC,QAAD;AADJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CArMD;;GAAMX,M;UAYUnB,c,EACML,Y,EAE+BC,W,EAC/BgB,a,EACEH,e,EACLlB,W,EACDM,e,EACEC,gB,EAgCSd,Q,EAeCA,Q,EAGTiB,Q,EACFE,c,EACKU,c;;;MAxElBM,M;AAuMN,eAAeA,MAAf","sourcesContent":["import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon, Skeleton, Text, Heading } from '@pancakeswap/uikit'\nimport { useLocation } from 'react-router-dom'\nimport { BigNumber } from 'bignumber.js'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport Balance from 'components/Balance'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser, useLpTokenPrice, usePriceCakeBusd } from 'state/farms/hooks'\nimport { fetchFarmUserDataAsync } from 'state/farms'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useERC20 } from 'hooks/useContract'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport { useAppDispatch } from 'state'\nimport { getAddress } from 'utils/addressHelpers'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceAmount, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport useUnstakeFarms from '../../../hooks/useUnstakeFarms'\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport useStakeFarms from '../../../hooks/useStakeFarms'\nimport useApproveFarm from '../../../hooks/useApproveFarm'\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\ninterface StackedActionProps extends FarmWithStakedValue {\n  userDataReady: boolean\n  lpLabel?: string\n  displayApr?: string\n}\n\nconst Staked: React.FunctionComponent<StackedActionProps> = ({\n  pid,\n  apr,\n  multiplier,\n  lpSymbol,\n  lpLabel,\n  lpAddresses,\n  quoteToken,\n  token,\n  userDataReady,\n  displayApr,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStakeFarms(pid)\n  const { onUnstake } = useUnstakeFarms(pid)\n  const location = useLocation()\n  const lpPrice = useLpTokenPrice(lpSymbol)\n  const cakePrice = usePriceCakeBusd()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpAddress = getAddress(lpAddresses)\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  const handleStake = async (amount: string) => {\n    await onStake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const handleUnstake = async (amount: string) => {\n    await onUnstake(amount)\n    dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n  }\n\n  const displayBalance = useCallback(() => {\n    const stakedBalanceBigNumber = getBalanceAmount(stakedBalance)\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0000001)) {\n      return stakedBalanceBigNumber.toFixed(10, BigNumber.ROUND_DOWN)\n    }\n    if (stakedBalanceBigNumber.gt(0) && stakedBalanceBigNumber.lt(0.0001)) {\n      return getFullDisplayBalance(stakedBalance).toLocaleString()\n    }\n    return stakedBalanceBigNumber.toFixed(3, BigNumber.ROUND_DOWN)\n  }, [stakedBalance])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal\n      max={tokenBalance}\n      lpPrice={lpPrice}\n      lpLabel={lpLabel}\n      apr={apr}\n      displayApr={displayApr}\n      stakedBalance={stakedBalance}\n      onConfirm={handleStake}\n      tokenName={lpSymbol}\n      multiplier={multiplier}\n      addLiquidityUrl={addLiquidityUrl}\n      cakePrice={cakePrice}\n    />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={handleUnstake} tokenName={lpSymbol} />,\n  )\n  const lpContract = useERC20(lpAddress)\n  const dispatch = useAppDispatch()\n  const { onApprove } = useApproveFarm(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\n\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, dispatch, account, pid])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <ConnectWalletButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (stakedBalance.gt(0)) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\n              {lpSymbol}\n            </Text>\n            <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n              {t('Staked')}\n            </Text>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Heading>{displayBalance()}</Heading>\n              {stakedBalance.gt(0) && lpPrice.gt(0) && (\n                <Balance\n                  fontSize=\"12px\"\n                  color=\"textSubtle\"\n                  decimals={2}\n                  value={getBalanceNumber(lpPrice.times(stakedBalance))}\n                  unit=\" USD\"\n                  prefix=\"~\"\n                />\n              )}\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton\n                variant=\"secondary\"\n                onClick={onPresentDeposit}\n                disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n              >\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"4px\">\n            {t('Stake').toUpperCase()}\n          </Text>\n          <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\">\n            {lpSymbol}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Button\n            width=\"100%\"\n            onClick={onPresentDeposit}\n            variant=\"secondary\"\n            disabled={['history', 'archived'].some((item) => location.pathname.includes(item))}\n          >\n            {t('Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (!userDataReady) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n            {t('Start Farming')}\n          </Text>\n        </ActionTitles>\n        <ActionContent>\n          <Skeleton width={180} marginBottom={28} marginTop={14} />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Enable Farm')}\n        </Text>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n"]},"metadata":{},"sourceType":"module"}