{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React,{useState}from'react';import styled from'styled-components';import{Modal,Button,Flex,AutoRenewIcon,Heading,Text,Image,CrownIcon,TrophyGoldIcon,TeamPlayerIcon}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{useTradingCompetitionContract}from'hooks/useContract';import useToast from'hooks/useToast';import{useCallWithGasPrice}from'hooks/useCallWithGasPrice';import{ToastDescriptionWithTx}from'components/Toast';import{useCompetitionCakeRewards,getRewardGroupAchievements}from'../../helpers';import NftBunnies from'../../pngs/syrup-nft.png';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ImageWrapper=styled(Flex)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  justify-content: center;\\n  width: 100%;\\n  height: fit-content;\\n  img {\\n    border-radius: \",\";\\n  }\\n\"])),function(_ref){var theme=_ref.theme;return theme.radii.default;});var ClaimModal=function ClaimModal(_ref2){var onDismiss=_ref2.onDismiss,onClaimSuccess=_ref2.onClaimSuccess,userTradingInformation=_ref2.userTradingInformation;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isConfirming=_useState2[0],setIsConfirming=_useState2[1];var tradingCompetitionContract=useTradingCompetitionContract();var _useToast=useToast(),toastSuccess=_useToast.toastSuccess,toastError=_useToast.toastError;var _useTranslation=useTranslation(),t=_useTranslation.t;var userRewardGroup=userTradingInformation.userRewardGroup,userCakeRewards=userTradingInformation.userCakeRewards,userPointReward=userTradingInformation.userPointReward,canClaimNFT=userTradingInformation.canClaimNFT;var _useCompetitionCakeRe=useCompetitionCakeRewards(userCakeRewards),cakeReward=_useCompetitionCakeRe.cakeReward;var _getRewardGroupAchiev=getRewardGroupAchievements(userRewardGroup),champion=_getRewardGroupAchiev.champion,teamPlayer=_getRewardGroupAchiev.teamPlayer;var _useCallWithGasPrice=useCallWithGasPrice(),callWithGasPrice=_useCallWithGasPrice.callWithGasPrice;var handleClaimClick=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var tx,receipt;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return callWithGasPrice(tradingCompetitionContract,'claimReward');case 2:tx=_context.sent;setIsConfirming(true);_context.next=6;return tx.wait();case 6:receipt=_context.sent;if(receipt.status){toastSuccess(t('You have claimed your rewards!'),/*#__PURE__*/_jsx(ToastDescriptionWithTx,{txHash:receipt.transactionHash}));onDismiss();onClaimSuccess();}else{toastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));setIsConfirming(false);}case 8:case\"end\":return _context.stop();}}},_callee);}));return function handleClaimClick(){return _ref3.apply(this,arguments);};}();return/*#__PURE__*/_jsx(Modal,{title:t('Collect Winnings'),onDismiss:onDismiss,children:/*#__PURE__*/_jsxs(Flex,{width:\"100%\",flexDirection:\"column\",alignItems:\"center\",justifyContent:\"center\",maxWidth:\"360px\",children:[/*#__PURE__*/_jsxs(Text,{color:\"secondary\",bold:true,fontSize:\"16px\",children:[t('Congratulations! You won'),\":\"]}),/*#__PURE__*/_jsxs(Flex,{mt:\"16px\",alignItems:\"center\",children:[/*#__PURE__*/_jsx(TrophyGoldIcon,{mr:[0,'4px']}),champion&&/*#__PURE__*/_jsx(CrownIcon,{mr:[0,'4px']}),teamPlayer&&/*#__PURE__*/_jsx(TeamPlayerIcon,{mr:[0,'4px']}),/*#__PURE__*/_jsxs(Text,{ml:['4px','8px'],children:[\"+\",userPointReward,\" \",t('Points')]})]}),/*#__PURE__*/_jsxs(Heading,{mt:\"16px\",scale:\"md\",mb:canClaimNFT?'16px':'0px',children:[cakeReward.toFixed(2),\" CAKE\"]}),canClaimNFT?/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",flexDirection:\"column\",width:\"100%\",children:[/*#__PURE__*/_jsx(ImageWrapper,{children:/*#__PURE__*/_jsx(Image,{src:NftBunnies,width:128,height:128})}),/*#__PURE__*/_jsx(Text,{mt:\"8px\",fontSize:\"16px\",children:t('Collectible NFT')})]}):null,/*#__PURE__*/_jsx(Button,{mt:\"24px\",width:\"100%\",onClick:handleClaimClick,disabled:isConfirming,isLoading:isConfirming,endIcon:isConfirming?/*#__PURE__*/_jsx(AutoRenewIcon,{spin:true,color:\"currentColor\"}):null,children:t('Confirm')}),/*#__PURE__*/_jsx(Text,{mt:\"24px\",fontSize:\"12px\",color:\"textSubtle\",textAlign:\"center\",children:t('All prizes will be sent directly to your wallet and user account.')})]})});};export default ClaimModal;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/TradingCompetition/components/ClaimModal/index.tsx"],"names":["React","useState","styled","Modal","Button","Flex","AutoRenewIcon","Heading","Text","Image","CrownIcon","TrophyGoldIcon","TeamPlayerIcon","useTranslation","useTradingCompetitionContract","useToast","useCallWithGasPrice","ToastDescriptionWithTx","useCompetitionCakeRewards","getRewardGroupAchievements","NftBunnies","ImageWrapper","theme","radii","default","ClaimModal","onDismiss","onClaimSuccess","userTradingInformation","isConfirming","setIsConfirming","tradingCompetitionContract","toastSuccess","toastError","t","userRewardGroup","userCakeRewards","userPointReward","canClaimNFT","cakeReward","champion","teamPlayer","callWithGasPrice","handleClaimClick","tx","wait","receipt","status","transactionHash","toFixed"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Modal,\n  Button,\n  Flex,\n  AutoRenewIcon,\n  Heading,\n  Text,\n  Image,\n  CrownIcon,\n  TrophyGoldIcon,\n  TeamPlayerIcon,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useTradingCompetitionContract } from 'hooks/useContract'\nimport useToast from 'hooks/useToast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useCompetitionCakeRewards, getRewardGroupAchievements } from '../../helpers'\nimport { CompetitionProps } from '../../types'\nimport NftBunnies from '../../pngs/syrup-nft.png'\n\nconst ImageWrapper = styled(Flex)`\n  justify-content: center;\n  width: 100%;\n  height: fit-content;\n  img {\n    border-radius: ${({ theme }) => theme.radii.default};\n  }\n`\n\nconst ClaimModal: React.FC<CompetitionProps> = ({ onDismiss, onClaimSuccess, userTradingInformation }) => {\n  const [isConfirming, setIsConfirming] = useState(false)\n  const tradingCompetitionContract = useTradingCompetitionContract()\n  const { toastSuccess, toastError } = useToast()\n  const { t } = useTranslation()\n\n  const { userRewardGroup, userCakeRewards, userPointReward, canClaimNFT } = userTradingInformation\n  const { cakeReward } = useCompetitionCakeRewards(userCakeRewards)\n  const { champion, teamPlayer } = getRewardGroupAchievements(userRewardGroup)\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  const handleClaimClick = async () => {\n    const tx = await callWithGasPrice(tradingCompetitionContract, 'claimReward')\n    setIsConfirming(true)\n    const receipt = await tx.wait()\n    if (receipt.status) {\n      toastSuccess(t('You have claimed your rewards!'), <ToastDescriptionWithTx txHash={receipt.transactionHash} />)\n      onDismiss()\n      onClaimSuccess()\n    } else {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setIsConfirming(false)\n    }\n  }\n\n  return (\n    <Modal title={t('Collect Winnings')} onDismiss={onDismiss}>\n      <Flex width=\"100%\" flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\" maxWidth=\"360px\">\n        <Text color=\"secondary\" bold fontSize=\"16px\">\n          {t('Congratulations! You won')}:\n        </Text>\n        <Flex mt=\"16px\" alignItems=\"center\">\n          {/* achievements */}\n          <TrophyGoldIcon mr={[0, '4px']} />\n          {champion && <CrownIcon mr={[0, '4px']} />}\n          {teamPlayer && <TeamPlayerIcon mr={[0, '4px']} />}\n          <Text ml={['4px', '8px']}>\n            +{userPointReward} {t('Points')}\n          </Text>\n        </Flex>\n        {/* cake */}\n        <Heading mt=\"16px\" scale=\"md\" mb={canClaimNFT ? '16px' : '0px'}>\n          {cakeReward.toFixed(2)} CAKE\n        </Heading>\n        {/* NFT */}\n        {canClaimNFT ? (\n          <Flex alignItems=\"center\" flexDirection=\"column\" width=\"100%\">\n            <ImageWrapper>\n              <Image src={NftBunnies} width={128} height={128} />\n            </ImageWrapper>\n            <Text mt=\"8px\" fontSize=\"16px\">\n              {t('Collectible NFT')}\n            </Text>\n          </Flex>\n        ) : null}\n        <Button\n          mt=\"24px\"\n          width=\"100%\"\n          onClick={handleClaimClick}\n          disabled={isConfirming}\n          isLoading={isConfirming}\n          endIcon={isConfirming ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        >\n          {t('Confirm')}\n        </Button>\n        <Text mt=\"24px\" fontSize=\"12px\" color=\"textSubtle\" textAlign=\"center\">\n          {t('All prizes will be sent directly to your wallet and user account.')}\n        </Text>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ClaimModal\n"]},"metadata":{},"sourceType":"module"}