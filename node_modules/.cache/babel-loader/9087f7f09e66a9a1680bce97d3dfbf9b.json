{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Profile/components/ProfileHeader.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Link as ReactRouterLink } from 'react-router-dom';\nimport styled from 'styled-components';\nimport { BscScanIcon, Flex, IconButton, Link, Button, useModal } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { getBscScanLink } from 'utils';\nimport { formatNumber } from 'utils/formatBalance';\nimport truncateHash from 'utils/truncateHash';\nimport { useWeb3React } from '@web3-react/core';\nimport EditProfileAvatar from './EditProfileAvatar';\nimport BannerHeader from '../../components/BannerHeader';\nimport StatBox, { StatBoxItem } from '../../components/StatBox';\nimport MarketPageTitle from '../../components/MarketPageTitle';\nimport EditProfileModal from './EditProfileModal';\nimport AvatarImage from '../../components/BannerHeader/AvatarImage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledIconButton = styled(IconButton)`\n  width: fit-content;\n`; // Account and profile passed down as the profile could be used to render _other_ users' profiles.\n\n_c = StyledIconButton;\n\nconst ProfileHeader = ({\n  accountPath,\n  profile,\n  achievements,\n  nftCollected\n}) => {\n  _s();\n\n  var _profile$nft, _profile$nft$image;\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const [onEditProfileModal] = useModal( /*#__PURE__*/_jsxDEV(EditProfileModal, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 41\n  }, this), false);\n  const isConnectedAccount = (account === null || account === void 0 ? void 0 : account.toLowerCase()) === (accountPath === null || accountPath === void 0 ? void 0 : accountPath.toLowerCase());\n  const numNftCollected = nftCollected ? formatNumber(nftCollected, 0, 0) : '-';\n  const numPoints = (profile === null || profile === void 0 ? void 0 : profile.points) ? formatNumber(profile.points, 0, 0) : '-';\n  const numAchievements = (achievements === null || achievements === void 0 ? void 0 : achievements.length) ? formatNumber(achievements.length, 0, 0) : '-';\n  const avatarImage = (profile === null || profile === void 0 ? void 0 : (_profile$nft = profile.nft) === null || _profile$nft === void 0 ? void 0 : (_profile$nft$image = _profile$nft.image) === null || _profile$nft$image === void 0 ? void 0 : _profile$nft$image.thumbnail) || '/images/nfts/no-profile-md.png';\n\n  const getBannerImage = () => {\n    const imagePath = '/images/teams';\n\n    if (profile) {\n      switch (profile.teamId) {\n        case 1:\n          return `${imagePath}/storm-banner.png`;\n\n        case 2:\n          return `${imagePath}/flippers-banner.png`;\n\n        case 3:\n          return `${imagePath}/cakers-banner.png`;\n\n        default:\n          break;\n      }\n    }\n\n    return `${imagePath}/no-team-banner.png`;\n  };\n\n  const getAvatar = () => {\n    const getIconButtons = () => {\n      return (\n        /*#__PURE__*/\n        // TODO: Share functionality once user profiles routed by ID\n        _jsxDEV(Flex, {\n          display: \"inline-flex\",\n          children: accountPath && /*#__PURE__*/_jsxDEV(StyledIconButton, {\n            target: \"_blank\",\n            as: \"a\",\n            href: getBscScanLink(accountPath, 'address'),\n            alt: t('View BscScan for user address'),\n            children: /*#__PURE__*/_jsxDEV(BscScanIcon, {\n              width: \"20px\",\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }, this)\n      );\n    };\n\n    const getImage = () => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: profile && accountPath && isConnectedAccount ? /*#__PURE__*/_jsxDEV(EditProfileAvatar, {\n          src: avatarImage,\n          alt: t('User profile picture')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(AvatarImage, {\n          src: avatarImage,\n          alt: t('User profile picture')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)\n      }, void 0, false);\n    };\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [getImage(), getIconButtons()]\n    }, void 0, true);\n  };\n\n  const getTitle = () => {\n    if (profile === null || profile === void 0 ? void 0 : profile.username) {\n      return `@${profile.username}`;\n    }\n\n    if (accountPath) {\n      return truncateHash(accountPath, 5, 3);\n    }\n\n    return null;\n  };\n\n  const renderDescription = () => {\n    const getActivateButton = () => {\n      if (!profile) {\n        return /*#__PURE__*/_jsxDEV(ReactRouterLink, {\n          to: \"/create-profile\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            mt: \"16px\",\n            children: t('Activate Profile')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(Button, {\n        width: \"fit-content\",\n        mt: \"16px\",\n        onClick: onEditProfileModal,\n        children: t('Reactivate Profile')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this);\n    };\n\n    return /*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      mb: [16, null, 0],\n      mr: [0, null, 16],\n      children: [accountPath && (profile === null || profile === void 0 ? void 0 : profile.username) && /*#__PURE__*/_jsxDEV(Link, {\n        href: getBscScanLink(accountPath, 'address'),\n        external: true,\n        bold: true,\n        color: \"primary\",\n        children: truncateHash(accountPath)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this), accountPath && isConnectedAccount && (!profile || !(profile === null || profile === void 0 ? void 0 : profile.nft)) && getActivateButton()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(BannerHeader, {\n      bannerImage: getBannerImage(),\n      bannerAlt: t('User team banner'),\n      avatar: getAvatar()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MarketPageTitle, {\n      pb: \"48px\",\n      title: getTitle(),\n      description: renderDescription(),\n      children: /*#__PURE__*/_jsxDEV(StatBox, {\n        children: [/*#__PURE__*/_jsxDEV(StatBoxItem, {\n          title: t('NFT Collected'),\n          stat: numNftCollected\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StatBoxItem, {\n          title: t('Points'),\n          stat: numPoints\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(StatBoxItem, {\n          title: t('Achievements'),\n          stat: numAchievements\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(ProfileHeader, \"6bholwXBfV1p12aC/Z2rHuDTaYw=\", false, function () {\n  return [useTranslation, useWeb3React, useModal];\n});\n\n_c2 = ProfileHeader;\nexport default ProfileHeader;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledIconButton\");\n$RefreshReg$(_c2, \"ProfileHeader\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Profile/components/ProfileHeader.tsx"],"names":["React","Link","ReactRouterLink","styled","BscScanIcon","Flex","IconButton","Button","useModal","useTranslation","getBscScanLink","formatNumber","truncateHash","useWeb3React","EditProfileAvatar","BannerHeader","StatBox","StatBoxItem","MarketPageTitle","EditProfileModal","AvatarImage","StyledIconButton","ProfileHeader","accountPath","profile","achievements","nftCollected","t","account","onEditProfileModal","isConnectedAccount","toLowerCase","numNftCollected","numPoints","points","numAchievements","length","avatarImage","nft","image","thumbnail","getBannerImage","imagePath","teamId","getAvatar","getIconButtons","getImage","getTitle","username","renderDescription","getActivateButton"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Link as ReactRouterLink } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { BscScanIcon, Flex, IconButton, Link, Button, useModal } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBscScanLink } from 'utils'\nimport { formatNumber } from 'utils/formatBalance'\nimport truncateHash from 'utils/truncateHash'\nimport { Achievement, Profile } from 'state/types'\nimport { useWeb3React } from '@web3-react/core'\nimport EditProfileAvatar from './EditProfileAvatar'\nimport BannerHeader from '../../components/BannerHeader'\nimport StatBox, { StatBoxItem } from '../../components/StatBox'\nimport MarketPageTitle from '../../components/MarketPageTitle'\nimport EditProfileModal from './EditProfileModal'\nimport AvatarImage from '../../components/BannerHeader/AvatarImage'\n\ninterface HeaderProps {\n  accountPath: string\n  profile: Profile\n  achievements: Achievement[]\n  nftCollected: number\n}\n\nconst StyledIconButton = styled(IconButton)`\n  width: fit-content;\n`\n\n// Account and profile passed down as the profile could be used to render _other_ users' profiles.\nconst ProfileHeader: React.FC<HeaderProps> = ({ accountPath, profile, achievements, nftCollected }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const [onEditProfileModal] = useModal(<EditProfileModal />, false)\n\n  const isConnectedAccount = account?.toLowerCase() === accountPath?.toLowerCase()\n  const numNftCollected = nftCollected ? formatNumber(nftCollected, 0, 0) : '-'\n  const numPoints = profile?.points ? formatNumber(profile.points, 0, 0) : '-'\n  const numAchievements = achievements?.length ? formatNumber(achievements.length, 0, 0) : '-'\n\n  const avatarImage = profile?.nft?.image?.thumbnail || '/images/nfts/no-profile-md.png'\n\n  const getBannerImage = () => {\n    const imagePath = '/images/teams'\n    if (profile) {\n      switch (profile.teamId) {\n        case 1:\n          return `${imagePath}/storm-banner.png`\n        case 2:\n          return `${imagePath}/flippers-banner.png`\n        case 3:\n          return `${imagePath}/cakers-banner.png`\n        default:\n          break\n      }\n    }\n    return `${imagePath}/no-team-banner.png`\n  }\n\n  const getAvatar = () => {\n    const getIconButtons = () => {\n      return (\n        // TODO: Share functionality once user profiles routed by ID\n        <Flex display=\"inline-flex\">\n          {accountPath && (\n            <StyledIconButton\n              target=\"_blank\"\n              as=\"a\"\n              href={getBscScanLink(accountPath, 'address')}\n              alt={t('View BscScan for user address')}\n            >\n              <BscScanIcon width=\"20px\" color=\"primary\" />\n            </StyledIconButton>\n          )}\n        </Flex>\n      )\n    }\n\n    const getImage = () => {\n      return (\n        <>\n          {profile && accountPath && isConnectedAccount ? (\n            <EditProfileAvatar src={avatarImage} alt={t('User profile picture')} />\n          ) : (\n            <AvatarImage src={avatarImage} alt={t('User profile picture')} />\n          )}\n        </>\n      )\n    }\n    return (\n      <>\n        {getImage()}\n        {getIconButtons()}\n      </>\n    )\n  }\n\n  const getTitle = () => {\n    if (profile?.username) {\n      return `@${profile.username}`\n    }\n\n    if (accountPath) {\n      return truncateHash(accountPath, 5, 3)\n    }\n\n    return null\n  }\n\n  const renderDescription = () => {\n    const getActivateButton = () => {\n      if (!profile) {\n        return (\n          <ReactRouterLink to=\"/create-profile\">\n            <Button mt=\"16px\">{t('Activate Profile')}</Button>\n          </ReactRouterLink>\n        )\n      }\n      return (\n        <Button width=\"fit-content\" mt=\"16px\" onClick={onEditProfileModal}>\n          {t('Reactivate Profile')}\n        </Button>\n      )\n    }\n\n    return (\n      <Flex flexDirection=\"column\" mb={[16, null, 0]} mr={[0, null, 16]}>\n        {accountPath && profile?.username && (\n          <Link href={getBscScanLink(accountPath, 'address')} external bold color=\"primary\">\n            {truncateHash(accountPath)}\n          </Link>\n        )}\n        {accountPath && isConnectedAccount && (!profile || !profile?.nft) && getActivateButton()}\n      </Flex>\n    )\n  }\n\n  return (\n    <>\n      <BannerHeader bannerImage={getBannerImage()} bannerAlt={t('User team banner')} avatar={getAvatar()} />\n      <MarketPageTitle pb=\"48px\" title={getTitle()} description={renderDescription()}>\n        <StatBox>\n          <StatBoxItem title={t('NFT Collected')} stat={numNftCollected} />\n          <StatBoxItem title={t('Points')} stat={numPoints} />\n          <StatBoxItem title={t('Achievements')} stat={numAchievements} />\n        </StatBox>\n      </MarketPageTitle>\n    </>\n  )\n}\n\nexport default ProfileHeader\n"]},"metadata":{},"sourceType":"module"}