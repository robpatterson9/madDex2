{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{getUnixTime,subDays,subWeeks,startOfMinute}from'date-fns';import{request}from'graphql-request';/**\n * Helper function to get large amount GraphQL subqueries\n * @param queryConstructor constructor function that combines subqueries\n * @param subqueries individual queries\n * @param endpoint GraphQL endpoint\n * @param skipCount how many subqueries to fire at a time\n * @returns\n */export var multiQuery=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(queryConstructor,subqueries,endpoint){var skipCount,fetchedData,allFound,skip,end,subqueriesSlice,result,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:skipCount=_args.length>3&&_args[3]!==undefined?_args[3]:1000;fetchedData={};allFound=false;skip=0;_context.prev=4;case 5:if(allFound){_context.next=17;break;}end=subqueries.length;if(skip+skipCount<subqueries.length){end=skip+skipCount;}subqueriesSlice=subqueries.slice(skip,end);// eslint-disable-next-line no-await-in-loop\n_context.next=11;return request(endpoint,queryConstructor(subqueriesSlice));case 11:result=_context.sent;fetchedData=_objectSpread(_objectSpread({},fetchedData),result);allFound=Object.keys(result).length<skipCount||skip+skipCount>subqueries.length;skip+=skipCount;_context.next=5;break;case 17:return _context.abrupt(\"return\",fetchedData);case 20:_context.prev=20;_context.t0=_context[\"catch\"](4);console.error('Failed to fetch info data',_context.t0);return _context.abrupt(\"return\",null);case 24:case\"end\":return _context.stop();}}},_callee,null,[[4,20]]);}));return function multiQuery(_x,_x2,_x3){return _ref.apply(this,arguments);};}();/**\n * Returns UTC timestamps for 24h ago, 48h ago, 7d ago and 14d ago relative to current date and time\n */export var getDeltaTimestamps=function getDeltaTimestamps(){var utcCurrentTime=getUnixTime(new Date())*1000;var t24h=getUnixTime(startOfMinute(subDays(utcCurrentTime,1)));var t48h=getUnixTime(startOfMinute(subDays(utcCurrentTime,2)));var t7d=getUnixTime(startOfMinute(subWeeks(utcCurrentTime,1)));var t14d=getUnixTime(startOfMinute(subWeeks(utcCurrentTime,2)));return[t24h,t48h,t7d,t14d];};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Info/utils/infoQueryHelpers.ts"],"names":["getUnixTime","subDays","subWeeks","startOfMinute","request","multiQuery","queryConstructor","subqueries","endpoint","skipCount","fetchedData","allFound","skip","end","length","subqueriesSlice","slice","result","Object","keys","console","error","getDeltaTimestamps","utcCurrentTime","Date","t24h","t48h","t7d","t14d"],"mappings":"ocAAA,OAASA,WAAT,CAAsBC,OAAtB,CAA+BC,QAA/B,CAAyCC,aAAzC,KAA8D,UAA9D,CACA,OAASC,OAAT,KAAwB,iBAAxB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,UAAU,0FAAG,iBACxBC,gBADwB,CAExBC,UAFwB,CAGxBC,QAHwB,qMAIxBC,SAJwB,+CAIZ,IAJY,CAMpBC,WANoB,CAMN,EANM,CAOpBC,QAPoB,CAOT,KAPS,CAQpBC,IARoB,CAQb,CARa,2BAUdD,QAVc,0BAWhBE,GAXgB,CAWVN,UAAU,CAACO,MAXD,CAYpB,GAAIF,IAAI,CAAGH,SAAP,CAAmBF,UAAU,CAACO,MAAlC,CAA0C,CACxCD,GAAG,CAAGD,IAAI,CAAGH,SAAb,CACD,CACKM,eAfc,CAeIR,UAAU,CAACS,KAAX,CAAiBJ,IAAjB,CAAuBC,GAAvB,CAfJ,CAgBpB;AAhBoB,uBAiBCT,CAAAA,OAAO,CAACI,QAAD,CAAWF,gBAAgB,CAACS,eAAD,CAA3B,CAjBR,SAiBdE,MAjBc,eAkBpBP,WAAW,gCACNA,WADM,EAENO,MAFM,CAAX,CAIAN,QAAQ,CAAGO,MAAM,CAACC,IAAP,CAAYF,MAAZ,EAAoBH,MAApB,CAA6BL,SAA7B,EAA0CG,IAAI,CAAGH,SAAP,CAAmBF,UAAU,CAACO,MAAnF,CACAF,IAAI,EAAIH,SAAR,CAvBoB,8DAyBfC,WAzBe,4DA2BtBU,OAAO,CAACC,KAAR,CAAc,2BAAd,cA3BsB,gCA4Bf,IA5Be,uEAAH,kBAAVhB,CAAAA,UAAU,oDAAhB,CAgCP;AACA;AACA,GACA,MAAO,IAAMiB,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAwC,CACxE,GAAMC,CAAAA,cAAc,CAAGvB,WAAW,CAAC,GAAIwB,CAAAA,IAAJ,EAAD,CAAX,CAA0B,IAAjD,CACA,GAAMC,CAAAA,IAAI,CAAGzB,WAAW,CAACG,aAAa,CAACF,OAAO,CAACsB,cAAD,CAAiB,CAAjB,CAAR,CAAd,CAAxB,CACA,GAAMG,CAAAA,IAAI,CAAG1B,WAAW,CAACG,aAAa,CAACF,OAAO,CAACsB,cAAD,CAAiB,CAAjB,CAAR,CAAd,CAAxB,CACA,GAAMI,CAAAA,GAAG,CAAG3B,WAAW,CAACG,aAAa,CAACD,QAAQ,CAACqB,cAAD,CAAiB,CAAjB,CAAT,CAAd,CAAvB,CACA,GAAMK,CAAAA,IAAI,CAAG5B,WAAW,CAACG,aAAa,CAACD,QAAQ,CAACqB,cAAD,CAAiB,CAAjB,CAAT,CAAd,CAAxB,CACA,MAAO,CAACE,IAAD,CAAOC,IAAP,CAAaC,GAAb,CAAkBC,IAAlB,CAAP,CACD,CAPM","sourcesContent":["import { getUnixTime, subDays, subWeeks, startOfMinute } from 'date-fns'\nimport { request } from 'graphql-request'\n\n/**\n * Helper function to get large amount GraphQL subqueries\n * @param queryConstructor constructor function that combines subqueries\n * @param subqueries individual queries\n * @param endpoint GraphQL endpoint\n * @param skipCount how many subqueries to fire at a time\n * @returns\n */\nexport const multiQuery = async (\n  queryConstructor: (subqueries: string[]) => string,\n  subqueries: string[],\n  endpoint: string,\n  skipCount = 1000,\n) => {\n  let fetchedData = {}\n  let allFound = false\n  let skip = 0\n  try {\n    while (!allFound) {\n      let end = subqueries.length\n      if (skip + skipCount < subqueries.length) {\n        end = skip + skipCount\n      }\n      const subqueriesSlice = subqueries.slice(skip, end)\n      // eslint-disable-next-line no-await-in-loop\n      const result = await request(endpoint, queryConstructor(subqueriesSlice))\n      fetchedData = {\n        ...fetchedData,\n        ...result,\n      }\n      allFound = Object.keys(result).length < skipCount || skip + skipCount > subqueries.length\n      skip += skipCount\n    }\n    return fetchedData\n  } catch (error) {\n    console.error('Failed to fetch info data', error)\n    return null\n  }\n}\n\n/**\n * Returns UTC timestamps for 24h ago, 48h ago, 7d ago and 14d ago relative to current date and time\n */\nexport const getDeltaTimestamps = (): [number, number, number, number] => {\n  const utcCurrentTime = getUnixTime(new Date()) * 1000\n  const t24h = getUnixTime(startOfMinute(subDays(utcCurrentTime, 1)))\n  const t48h = getUnixTime(startOfMinute(subDays(utcCurrentTime, 2)))\n  const t7d = getUnixTime(startOfMinute(subWeeks(utcCurrentTime, 1)))\n  const t14d = getUnixTime(startOfMinute(subWeeks(utcCurrentTime, 2)))\n  return [t24h, t48h, t7d, t14d]\n}\n"]},"metadata":{},"sourceType":"module"}