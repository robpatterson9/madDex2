{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useReducer, useCallback } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { getInterestBreakdown, getPrincipalForInterest, getRoi } from 'utils/compoundApyHelpers';\n/**\n * This hook is handling all the calculator state and calculations.\n * UI connected to it is merely representation of the data and buttons to trigger actions\n */\n// Mapping from the compounding frequency button index to actual compounding frequency\n// in number of compounds per day\n\nconst compoundingIndexToFrequency = {\n  0: 1,\n  1: 0.142857142,\n  2: 0.071428571,\n  // once every 7 days\n  3: 0.033333333 // once every 30 days\n\n};\nconst TOKEN_PRECISION = 10;\nconst USD_PRECISION = 2; // Used to track/react which currency user is editing (i.e. USD amount or Token amount)\n\nexport let EditingCurrency; // Calculator works in 2 modes\n\n(function (EditingCurrency) {\n  EditingCurrency[EditingCurrency[\"TOKEN\"] = 0] = \"TOKEN\";\n  EditingCurrency[EditingCurrency[\"USD\"] = 1] = \"USD\";\n})(EditingCurrency || (EditingCurrency = {}));\n\nexport let CalculatorMode;\n\n(function (CalculatorMode) {\n  CalculatorMode[CalculatorMode[\"ROI_BASED_ON_PRINCIPAL\"] = 0] = \"ROI_BASED_ON_PRINCIPAL\";\n  CalculatorMode[CalculatorMode[\"PRINCIPAL_BASED_ON_ROI\"] = 1] = \"PRINCIPAL_BASED_ON_ROI\";\n})(CalculatorMode || (CalculatorMode = {}));\n\nconst initialState = {\n  controls: {\n    compounding: true,\n    compoundingFrequency: 1,\n    // how many compound in a day , e.g. 1 = once a day, 0.071 - once per 2 weeks\n    activeCompoundingIndex: 0,\n    // active compounding selected in\n    stakingDuration: 3,\n    mode: CalculatorMode.ROI_BASED_ON_PRINCIPAL,\n    editingCurrency: EditingCurrency.USD\n  },\n  data: {\n    principalAsToken: '0.00',\n    principalAsUSD: '',\n    roiUSD: 0,\n    roiTokens: 0,\n    roiPercentage: 0\n  }\n};\n\nconst roiCalculatorReducer = (state, action) => {\n  switch (action.type) {\n    case 'setStakingDuration':\n      {\n        const controls = { ...state.controls,\n          stakingDuration: action.payload\n        };\n        return { ...state,\n          controls\n        };\n      }\n\n    case 'toggleCompounding':\n      {\n        const toggledCompounding = !state.controls.compounding;\n        const controls = { ...state.controls,\n          compounding: toggledCompounding\n        };\n        return { ...state,\n          controls\n        };\n      }\n\n    case 'setCompoundingFrequency':\n      {\n        const {\n          index,\n          autoCompoundFrequency\n        } = action.payload;\n\n        if (autoCompoundFrequency) {\n          return { ...state,\n            controls: { ...state.controls,\n              compoundingFrequency: autoCompoundFrequency\n            }\n          };\n        }\n\n        const compoundingFrequency = compoundingIndexToFrequency[index];\n        const controls = { ...state.controls,\n          compoundingFrequency,\n          activeCompoundingIndex: index\n        };\n        return { ...state,\n          controls\n        };\n      }\n\n    case 'setPrincipal':\n      {\n        const {\n          principalAsUSD,\n          principalAsToken\n        } = action.payload;\n        const data = { ...state.data,\n          principalAsUSD,\n          principalAsToken\n        };\n        const controls = { ...state.controls,\n          mode: CalculatorMode.ROI_BASED_ON_PRINCIPAL\n        };\n        return {\n          controls,\n          data\n        };\n      }\n\n    case 'setPrincipalForTargetRoi':\n      {\n        const {\n          principalAsUSD,\n          principalAsToken,\n          roiPercentage\n        } = action.payload;\n        const data = { ...state.data,\n          principalAsUSD,\n          principalAsToken,\n          roiPercentage\n        };\n        return { ...state,\n          data\n        };\n      }\n\n    case 'setCalculatorMode':\n      {\n        const mode = action.payload;\n        const controls = { ...state.controls,\n          mode\n        };\n\n        if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI) {\n          const roiUSD = parseFloat(state.data.roiUSD.toFixed(USD_PRECISION));\n          const data = { ...state.data,\n            roiUSD\n          };\n          return {\n            controls,\n            data\n          };\n        }\n\n        return { ...state,\n          controls\n        };\n      }\n\n    case 'setRoi':\n      {\n        const data = { ...state.data,\n          ...action.payload\n        };\n        return { ...state,\n          data\n        };\n      }\n\n    case 'setTargetRoi':\n      {\n        const {\n          roiUSD,\n          roiTokens\n        } = action.payload;\n        const data = { ...state.data,\n          roiUSD,\n          roiTokens\n        };\n        const controls = { ...state.controls,\n          mode: CalculatorMode.PRINCIPAL_BASED_ON_ROI\n        };\n        return {\n          controls,\n          data\n        };\n      }\n\n    case 'toggleEditingCurrency':\n      {\n        const currencyAfterChange = state.controls.editingCurrency === EditingCurrency.USD ? EditingCurrency.TOKEN : EditingCurrency.USD;\n        const controls = { ...state.controls,\n          editingCurrency: currencyAfterChange\n        };\n        return { ...state,\n          controls\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst useRoiCalculatorReducer = (stakingTokenPrice, earningTokenPrice, apr, autoCompoundFrequency, performanceFee) => {\n  _s();\n\n  const [state, dispatch] = useReducer(roiCalculatorReducer, initialState);\n  const {\n    principalAsUSD,\n    roiUSD\n  } = state.data;\n  const {\n    compounding,\n    compoundingFrequency,\n    stakingDuration,\n    mode\n  } = state.controls; // If pool is auto-compounding set state's compounding frequency to this pool's auto-compound frequency\n\n  useEffect(() => {\n    if (autoCompoundFrequency > 0) {\n      dispatch({\n        type: 'setCompoundingFrequency',\n        payload: {\n          autoCompoundFrequency\n        }\n      });\n    }\n  }, [autoCompoundFrequency]); // Calculates and sets ROI whenever related values change\n\n  useEffect(() => {\n    if (mode === CalculatorMode.ROI_BASED_ON_PRINCIPAL) {\n      const principalInUSDAsNumber = parseFloat(principalAsUSD);\n      const compoundFrequency = compounding ? compoundingFrequency : 0;\n      const interestBreakdown = getInterestBreakdown({\n        principalInUSD: principalInUSDAsNumber,\n        apr,\n        earningTokenPrice,\n        compoundFrequency,\n        performanceFee\n      });\n      const hasInterest = !Number.isNaN(interestBreakdown[stakingDuration]);\n      const roiTokens = hasInterest ? interestBreakdown[stakingDuration] : 0;\n      const roiAsUSD = hasInterest ? roiTokens * earningTokenPrice : 0;\n      const roiPercentage = hasInterest ? getRoi({\n        amountEarned: roiAsUSD,\n        amountInvested: principalInUSDAsNumber\n      }) : 0;\n      dispatch({\n        type: 'setRoi',\n        payload: {\n          roiUSD: roiAsUSD,\n          roiTokens,\n          roiPercentage\n        }\n      });\n    }\n  }, [principalAsUSD, apr, stakingDuration, earningTokenPrice, performanceFee, compounding, compoundingFrequency, mode]); // Calculates and sets principal based on expected ROI value\n\n  useEffect(() => {\n    if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI) {\n      const principalForExpectedRoi = getPrincipalForInterest(roiUSD, apr, compounding ? compoundingFrequency : 0, performanceFee);\n      const principalUSD = !Number.isNaN(principalForExpectedRoi[stakingDuration]) ? principalForExpectedRoi[stakingDuration] : 0;\n      const principalToken = new BigNumber(principalUSD).div(stakingTokenPrice);\n      const roiPercentage = getRoi({\n        amountEarned: roiUSD,\n        amountInvested: principalUSD\n      });\n      dispatch({\n        type: 'setPrincipalForTargetRoi',\n        payload: {\n          principalAsUSD: principalUSD.toFixed(USD_PRECISION),\n          principalAsToken: principalToken.toFixed(TOKEN_PRECISION),\n          roiPercentage\n        }\n      });\n    }\n  }, [stakingDuration, apr, compounding, compoundingFrequency, mode, roiUSD, stakingTokenPrice, performanceFee]); // Handler for compounding frequency buttons\n\n  const setCompoundingFrequency = index => {\n    dispatch({\n      type: 'setCompoundingFrequency',\n      payload: {\n        index\n      }\n    });\n  }; // Handler for principal input when in USD mode\n\n\n  const setPrincipalFromUSDValue = amount => {\n    const principalAsTokenBN = new BigNumber(amount).div(stakingTokenPrice);\n    const principalAsToken = principalAsTokenBN.gt(0) ? principalAsTokenBN.toFixed(TOKEN_PRECISION) : '0.00';\n    dispatch({\n      type: 'setPrincipal',\n      payload: {\n        principalAsUSD: amount,\n        principalAsToken\n      }\n    });\n  }; // Handler for principal input when in Token mode\n\n\n  const setPrincipalFromTokenValue = useCallback(amount => {\n    const principalAsUsdBN = new BigNumber(amount).times(stakingTokenPrice);\n    const principalAsUsdString = principalAsUsdBN.gt(0) ? principalAsUsdBN.toFixed(USD_PRECISION) : '0.00';\n    dispatch({\n      type: 'setPrincipal',\n      payload: {\n        principalAsUSD: principalAsUsdString,\n        principalAsToken: amount\n      }\n    });\n  }, [stakingTokenPrice]); // Handler for staking duration buttons\n\n  const setStakingDuration = stakingDurationIndex => {\n    dispatch({\n      type: 'setStakingDuration',\n      payload: stakingDurationIndex\n    });\n  }; // Handler for compounding checkbox\n\n\n  const toggleCompounding = () => {\n    dispatch({\n      type: 'toggleCompounding'\n    });\n  }; // Handler for principal input mode switch\n\n\n  const toggleEditingCurrency = () => {\n    dispatch({\n      type: 'toggleEditingCurrency'\n    });\n  };\n\n  const setCalculatorMode = modeToSet => {\n    dispatch({\n      type: 'setCalculatorMode',\n      payload: modeToSet\n    });\n  }; // Handler for ROI input\n\n\n  const setTargetRoi = amount => {\n    const targetRoiAsTokens = new BigNumber(amount).div(earningTokenPrice);\n    dispatch({\n      type: 'setTargetRoi',\n      payload: {\n        roiUSD: amount,\n        roiTokens: targetRoiAsTokens.isNaN() ? 0 : targetRoiAsTokens.toNumber()\n      }\n    });\n  };\n\n  return {\n    state,\n    setPrincipalFromUSDValue,\n    setPrincipalFromTokenValue,\n    setStakingDuration,\n    toggleCompounding,\n    toggleEditingCurrency,\n    setCompoundingFrequency,\n    setCalculatorMode,\n    setTargetRoi\n  };\n};\n\n_s(useRoiCalculatorReducer, \"aHK6ftL5qJ+XRPcif2FRz7tSMSc=\");\n\nexport default useRoiCalculatorReducer;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/components/RoiCalculatorModal/useRoiCalculatorReducer.ts"],"names":["useEffect","useReducer","useCallback","BigNumber","getInterestBreakdown","getPrincipalForInterest","getRoi","compoundingIndexToFrequency","TOKEN_PRECISION","USD_PRECISION","EditingCurrency","CalculatorMode","initialState","controls","compounding","compoundingFrequency","activeCompoundingIndex","stakingDuration","mode","ROI_BASED_ON_PRINCIPAL","editingCurrency","USD","data","principalAsToken","principalAsUSD","roiUSD","roiTokens","roiPercentage","roiCalculatorReducer","state","action","type","payload","toggledCompounding","index","autoCompoundFrequency","PRINCIPAL_BASED_ON_ROI","parseFloat","toFixed","currencyAfterChange","TOKEN","useRoiCalculatorReducer","stakingTokenPrice","earningTokenPrice","apr","performanceFee","dispatch","principalInUSDAsNumber","compoundFrequency","interestBreakdown","principalInUSD","hasInterest","Number","isNaN","roiAsUSD","amountEarned","amountInvested","principalForExpectedRoi","principalUSD","principalToken","div","setCompoundingFrequency","setPrincipalFromUSDValue","amount","principalAsTokenBN","gt","setPrincipalFromTokenValue","principalAsUsdBN","times","principalAsUsdString","setStakingDuration","stakingDurationIndex","toggleCompounding","toggleEditingCurrency","setCalculatorMode","modeToSet","setTargetRoi","targetRoiAsTokens","toNumber"],"mappings":"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","sourcesContent":["import { useEffect, useReducer, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { getInterestBreakdown, getPrincipalForInterest, getRoi } from 'utils/compoundApyHelpers'\n\n/**\n * This hook is handling all the calculator state and calculations.\n * UI connected to it is merely representation of the data and buttons to trigger actions\n */\n\n// Mapping from the compounding frequency button index to actual compounding frequency\n// in number of compounds per day\nconst compoundingIndexToFrequency = {\n  0: 1,\n  1: 0.142857142,\n  2: 0.071428571, // once every 7 days\n  3: 0.033333333, // once every 30 days\n}\n\nconst TOKEN_PRECISION = 10\nconst USD_PRECISION = 2\n\n// Used to track/react which currency user is editing (i.e. USD amount or Token amount)\nexport enum EditingCurrency {\n  TOKEN,\n  USD,\n}\n\n// Calculator works in 2 modes\nexport enum CalculatorMode {\n  ROI_BASED_ON_PRINCIPAL, // User edits principal value and sees what ROI they get\n  PRINCIPAL_BASED_ON_ROI, // User edits ROI value and sees what principal they need to invest to reach it\n}\n\nexport interface RoiCalculatorReducerState {\n  controls: {\n    compounding: boolean // Compounding checkbox state\n    compoundingFrequency: number // Compounding frequency in number of compounds per day\n    activeCompoundingIndex: number // index of active compounding button in ButtonMenu\n    stakingDuration: number // index of active staking duration button in ButtonMenu\n    mode: CalculatorMode\n    editingCurrency: EditingCurrency\n  }\n  data: {\n    principalAsToken: string // Used as value for Inputs\n    principalAsUSD: string // Used as value for Inputs\n    roiUSD: number\n    roiTokens: number\n    roiPercentage: number // ROI expressed in percentage relative to principal\n  }\n}\n\nconst initialState: RoiCalculatorReducerState = {\n  controls: {\n    compounding: true,\n    compoundingFrequency: 1, // how many compound in a day , e.g. 1 = once a day, 0.071 - once per 2 weeks\n    activeCompoundingIndex: 0, // active compounding selected in\n    stakingDuration: 3,\n    mode: CalculatorMode.ROI_BASED_ON_PRINCIPAL,\n    editingCurrency: EditingCurrency.USD,\n  },\n  data: {\n    principalAsToken: '0.00',\n    principalAsUSD: '',\n    roiUSD: 0,\n    roiTokens: 0,\n    roiPercentage: 0,\n  },\n}\n\nconst roiCalculatorReducer = (\n  state: RoiCalculatorReducerState,\n  action: { type: string; payload?: any },\n): RoiCalculatorReducerState => {\n  switch (action.type) {\n    case 'setStakingDuration': {\n      const controls = { ...state.controls, stakingDuration: action.payload }\n      return {\n        ...state,\n        controls,\n      }\n    }\n    case 'toggleCompounding': {\n      const toggledCompounding = !state.controls.compounding\n      const controls = { ...state.controls, compounding: toggledCompounding }\n      return {\n        ...state,\n        controls,\n      }\n    }\n    case 'setCompoundingFrequency': {\n      const { index, autoCompoundFrequency } = action.payload\n      if (autoCompoundFrequency) {\n        return {\n          ...state,\n          controls: {\n            ...state.controls,\n            compoundingFrequency: autoCompoundFrequency,\n          },\n        }\n      }\n      const compoundingFrequency = compoundingIndexToFrequency[index]\n      const controls = { ...state.controls, compoundingFrequency, activeCompoundingIndex: index }\n      return {\n        ...state,\n        controls,\n      }\n    }\n    case 'setPrincipal': {\n      const { principalAsUSD, principalAsToken } = action.payload\n      const data = { ...state.data, principalAsUSD, principalAsToken }\n      const controls = { ...state.controls, mode: CalculatorMode.ROI_BASED_ON_PRINCIPAL }\n      return {\n        controls,\n        data,\n      }\n    }\n    case 'setPrincipalForTargetRoi': {\n      const { principalAsUSD, principalAsToken, roiPercentage } = action.payload\n      const data = { ...state.data, principalAsUSD, principalAsToken, roiPercentage }\n      return {\n        ...state,\n        data,\n      }\n    }\n    case 'setCalculatorMode': {\n      const mode = action.payload\n      const controls = { ...state.controls, mode }\n      if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI) {\n        const roiUSD = parseFloat(state.data.roiUSD.toFixed(USD_PRECISION))\n        const data = { ...state.data, roiUSD }\n        return { controls, data }\n      }\n      return { ...state, controls }\n    }\n    case 'setRoi': {\n      const data = { ...state.data, ...action.payload }\n      return { ...state, data }\n    }\n    case 'setTargetRoi': {\n      const { roiUSD, roiTokens } = action.payload\n      const data = { ...state.data, roiUSD, roiTokens }\n      const controls = { ...state.controls, mode: CalculatorMode.PRINCIPAL_BASED_ON_ROI }\n      return { controls, data }\n    }\n    case 'toggleEditingCurrency': {\n      const currencyAfterChange =\n        state.controls.editingCurrency === EditingCurrency.USD ? EditingCurrency.TOKEN : EditingCurrency.USD\n      const controls = { ...state.controls, editingCurrency: currencyAfterChange }\n      return { ...state, controls }\n    }\n    default:\n      return state\n  }\n}\n\nconst useRoiCalculatorReducer = (\n  stakingTokenPrice: number,\n  earningTokenPrice: number,\n  apr: number,\n  autoCompoundFrequency: number,\n  performanceFee: number,\n) => {\n  const [state, dispatch] = useReducer(roiCalculatorReducer, initialState)\n  const { principalAsUSD, roiUSD } = state.data\n  const { compounding, compoundingFrequency, stakingDuration, mode } = state.controls\n\n  // If pool is auto-compounding set state's compounding frequency to this pool's auto-compound frequency\n  useEffect(() => {\n    if (autoCompoundFrequency > 0) {\n      dispatch({ type: 'setCompoundingFrequency', payload: { autoCompoundFrequency } })\n    }\n  }, [autoCompoundFrequency])\n\n  // Calculates and sets ROI whenever related values change\n  useEffect(() => {\n    if (mode === CalculatorMode.ROI_BASED_ON_PRINCIPAL) {\n      const principalInUSDAsNumber = parseFloat(principalAsUSD)\n      const compoundFrequency = compounding ? compoundingFrequency : 0\n      const interestBreakdown = getInterestBreakdown({\n        principalInUSD: principalInUSDAsNumber,\n        apr,\n        earningTokenPrice,\n        compoundFrequency,\n        performanceFee,\n      })\n      const hasInterest = !Number.isNaN(interestBreakdown[stakingDuration])\n      const roiTokens = hasInterest ? interestBreakdown[stakingDuration] : 0\n      const roiAsUSD = hasInterest ? roiTokens * earningTokenPrice : 0\n      const roiPercentage = hasInterest\n        ? getRoi({\n            amountEarned: roiAsUSD,\n            amountInvested: principalInUSDAsNumber,\n          })\n        : 0\n      dispatch({ type: 'setRoi', payload: { roiUSD: roiAsUSD, roiTokens, roiPercentage } })\n    }\n  }, [principalAsUSD, apr, stakingDuration, earningTokenPrice, performanceFee, compounding, compoundingFrequency, mode])\n\n  // Calculates and sets principal based on expected ROI value\n  useEffect(() => {\n    if (mode === CalculatorMode.PRINCIPAL_BASED_ON_ROI) {\n      const principalForExpectedRoi = getPrincipalForInterest(\n        roiUSD,\n        apr,\n        compounding ? compoundingFrequency : 0,\n        performanceFee,\n      )\n      const principalUSD = !Number.isNaN(principalForExpectedRoi[stakingDuration])\n        ? principalForExpectedRoi[stakingDuration]\n        : 0\n      const principalToken = new BigNumber(principalUSD).div(stakingTokenPrice)\n      const roiPercentage = getRoi({\n        amountEarned: roiUSD,\n        amountInvested: principalUSD,\n      })\n      dispatch({\n        type: 'setPrincipalForTargetRoi',\n        payload: {\n          principalAsUSD: principalUSD.toFixed(USD_PRECISION),\n          principalAsToken: principalToken.toFixed(TOKEN_PRECISION),\n          roiPercentage,\n        },\n      })\n    }\n  }, [stakingDuration, apr, compounding, compoundingFrequency, mode, roiUSD, stakingTokenPrice, performanceFee])\n\n  // Handler for compounding frequency buttons\n  const setCompoundingFrequency = (index: number) => {\n    dispatch({ type: 'setCompoundingFrequency', payload: { index } })\n  }\n\n  // Handler for principal input when in USD mode\n  const setPrincipalFromUSDValue = (amount: string) => {\n    const principalAsTokenBN = new BigNumber(amount).div(stakingTokenPrice)\n    const principalAsToken = principalAsTokenBN.gt(0) ? principalAsTokenBN.toFixed(TOKEN_PRECISION) : '0.00'\n    dispatch({ type: 'setPrincipal', payload: { principalAsUSD: amount, principalAsToken } })\n  }\n\n  // Handler for principal input when in Token mode\n  const setPrincipalFromTokenValue = useCallback(\n    (amount: string) => {\n      const principalAsUsdBN = new BigNumber(amount).times(stakingTokenPrice)\n      const principalAsUsdString = principalAsUsdBN.gt(0) ? principalAsUsdBN.toFixed(USD_PRECISION) : '0.00'\n      dispatch({\n        type: 'setPrincipal',\n        payload: { principalAsUSD: principalAsUsdString, principalAsToken: amount },\n      })\n    },\n    [stakingTokenPrice],\n  )\n\n  // Handler for staking duration buttons\n  const setStakingDuration = (stakingDurationIndex: number) => {\n    dispatch({ type: 'setStakingDuration', payload: stakingDurationIndex })\n  }\n\n  // Handler for compounding checkbox\n  const toggleCompounding = () => {\n    dispatch({ type: 'toggleCompounding' })\n  }\n\n  // Handler for principal input mode switch\n  const toggleEditingCurrency = () => {\n    dispatch({ type: 'toggleEditingCurrency' })\n  }\n\n  const setCalculatorMode = (modeToSet: CalculatorMode) => {\n    dispatch({ type: 'setCalculatorMode', payload: modeToSet })\n  }\n\n  // Handler for ROI input\n  const setTargetRoi = (amount: string) => {\n    const targetRoiAsTokens = new BigNumber(amount).div(earningTokenPrice)\n    dispatch({\n      type: 'setTargetRoi',\n      payload: { roiUSD: amount, roiTokens: targetRoiAsTokens.isNaN() ? 0 : targetRoiAsTokens.toNumber() },\n    })\n  }\n\n  return {\n    state,\n    setPrincipalFromUSDValue,\n    setPrincipalFromTokenValue,\n    setStakingDuration,\n    toggleCompounding,\n    toggleEditingCurrency,\n    setCompoundingFrequency,\n    setCalculatorMode,\n    setTargetRoi,\n  }\n}\n\nexport default useRoiCalculatorReducer\n"]},"metadata":{},"sourceType":"module"}