{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Predictions/components/TradingView.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Box } from '@pancakeswap/uikit';\nimport { useTheme } from 'styled-components';\nimport debounce from 'lodash/debounce';\nimport { useTranslation } from 'contexts/Localization';\nimport useLastUpdated from 'hooks/useLastUpdated';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TRADING_VIEW_COMPONENT_ID = 'tradingview_b239c';\n/**\n * When the script tag is injected the TradingView object is not immediately\n * available on the window. So we listen for when it gets set\n */\n\nconst tradingViewListener = async () => new Promise(resolve => Object.defineProperty(window, 'TradingView', {\n  configurable: true,\n\n  set(value) {\n    this.tv = value;\n    resolve(value);\n  }\n\n}));\n\nconst initializeTradingView = (TradingViewObj, theme, localeCode) => {\n  /* eslint-disable new-cap */\n\n  /* eslint-disable no-new */\n  // @ts-ignore\n  new TradingViewObj.widget({\n    autosize: true,\n    height: '100%',\n    symbol: 'BINANCE:BNBUSDT',\n    interval: '5',\n    timezone: 'Etc/UTC',\n    theme: theme.isDark ? 'dark' : 'light',\n    style: '1',\n    locale: localeCode,\n    toolbar_bg: '#f1f3f6',\n    enable_publishing: false,\n    allow_symbol_change: true,\n    container_id: TRADING_VIEW_COMPONENT_ID\n  });\n};\n\nconst TradingView = () => {\n  _s();\n\n  const {\n    currentLanguage\n  } = useTranslation();\n  const theme = useTheme();\n  const {\n    lastUpdated,\n    setLastUpdated\n  } = useLastUpdated();\n  useEffect(() => {\n    const ele = document.getElementById(TRADING_VIEW_COMPONENT_ID);\n    const debouncedOnResize = debounce(() => {\n      setLastUpdated();\n    }, 500);\n    const resizeObserver = new ResizeObserver(() => {\n      debouncedOnResize();\n    });\n    resizeObserver.observe(ele);\n    return () => {\n      resizeObserver.unobserve(ele);\n    };\n  }, [setLastUpdated]);\n  useEffect(() => {\n    // @ts-ignore\n    if (window.tv) {\n      // @ts-ignore\n      initializeTradingView(window.tv, theme, currentLanguage.code);\n    } else {\n      tradingViewListener().then(tv => {\n        initializeTradingView(tv, theme, currentLanguage.code);\n      });\n    }\n  }, [theme, currentLanguage, lastUpdated]);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    overflow: \"hidden\",\n    className: \"tradingview_container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: TRADING_VIEW_COMPONENT_ID\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TradingView, \"CQxPsBmgKjW9Go85QUWH6eb7Mrc=\", false, function () {\n  return [useTranslation, useTheme, useLastUpdated];\n});\n\n_c = TradingView;\nexport default TradingView;\n\nvar _c;\n\n$RefreshReg$(_c, \"TradingView\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Predictions/components/TradingView.tsx"],"names":["React","useEffect","Box","useTheme","debounce","useTranslation","useLastUpdated","TRADING_VIEW_COMPONENT_ID","tradingViewListener","Promise","resolve","Object","defineProperty","window","configurable","set","value","tv","initializeTradingView","TradingViewObj","theme","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","style","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","lastUpdated","setLastUpdated","ele","document","getElementById","debouncedOnResize","resizeObserver","ResizeObserver","observe","unobserve","code","then"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { Box } from '@pancakeswap/uikit'\nimport { DefaultTheme, useTheme } from 'styled-components'\nimport debounce from 'lodash/debounce'\nimport { useTranslation } from 'contexts/Localization'\nimport useLastUpdated from 'hooks/useLastUpdated'\n\nconst TRADING_VIEW_COMPONENT_ID = 'tradingview_b239c'\n\n/**\n * When the script tag is injected the TradingView object is not immediately\n * available on the window. So we listen for when it gets set\n */\nconst tradingViewListener = async () =>\n  new Promise<void>((resolve) =>\n    Object.defineProperty(window, 'TradingView', {\n      configurable: true,\n      set(value) {\n        this.tv = value\n        resolve(value)\n      },\n    }),\n  )\n\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\n  /* eslint-disable new-cap */\n  /* eslint-disable no-new */\n  // @ts-ignore\n  new TradingViewObj.widget({\n    autosize: true,\n    height: '100%',\n    symbol: 'BINANCE:BNBUSDT',\n    interval: '5',\n    timezone: 'Etc/UTC',\n    theme: theme.isDark ? 'dark' : 'light',\n    style: '1',\n    locale: localeCode,\n    toolbar_bg: '#f1f3f6',\n    enable_publishing: false,\n    allow_symbol_change: true,\n    container_id: TRADING_VIEW_COMPONENT_ID,\n  })\n}\n\nconst TradingView = () => {\n  const { currentLanguage } = useTranslation()\n  const theme = useTheme()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n\n  useEffect(() => {\n    const ele = document.getElementById(TRADING_VIEW_COMPONENT_ID)\n\n    const debouncedOnResize = debounce(() => {\n      setLastUpdated()\n    }, 500)\n\n    const resizeObserver = new ResizeObserver(() => {\n      debouncedOnResize()\n    })\n\n    resizeObserver.observe(ele)\n\n    return () => {\n      resizeObserver.unobserve(ele)\n    }\n  }, [setLastUpdated])\n\n  useEffect(() => {\n    // @ts-ignore\n    if (window.tv) {\n      // @ts-ignore\n      initializeTradingView(window.tv, theme, currentLanguage.code)\n    } else {\n      tradingViewListener().then((tv) => {\n        initializeTradingView(tv, theme, currentLanguage.code)\n      })\n    }\n  }, [theme, currentLanguage, lastUpdated])\n\n  return (\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\n      <div id={TRADING_VIEW_COMPONENT_ID} />\n    </Box>\n  )\n}\n\nexport default TradingView\n"]},"metadata":{},"sourceType":"module"}