{"ast":null,"code":"import { TOTAL_FEE, LP_HOLDERS_FEE, WEEKS_IN_YEAR } from 'config/constants/info';\n/**\n * Get increase/decrease of value compared to the previous value (e.g. 24h volume compared to 24h volume the day before )\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */\n\nexport const getAmountChange = (valueNow, valueBefore) => {\n  if (valueNow && valueBefore) {\n    return valueNow - valueBefore;\n  }\n\n  if (valueNow) {\n    return valueNow;\n  }\n\n  return 0;\n};\n/**\n * Get increase/decrease of value compared to the previous value as a percentage\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */\n\nexport const getPercentChange = (valueNow, valueBefore) => {\n  if (valueNow && valueBefore) {\n    return (valueNow - valueBefore) / valueBefore * 100;\n  }\n\n  return 0;\n};\n/**\n * Given current value and value 1 and 2 periods (e.g. 1day + 2days, 1week - 2weeks) returns the amount change for latest period\n * and percentage change compared to the previous period.\n * @param valueNow - current value\n * @param valueOnePeriodAgo - value 1 period ago (e.g. 1 day or 1 week ago), period unit must be same as valueTwoPeriodsAgo\n * @param valueTwoPeriodsAgo - value 2 periods ago (e.g. 2 days or 2 weeks ago), period unit must be same as valueOnePeriodAgo\n * @returns amount change for the latest period and percentage change compared to previous period\n */\n\nexport const getChangeForPeriod = (valueNow, valueOnePeriodAgo, valueTwoPeriodsAgo) => {\n  const currentPeriodAmount = getAmountChange(valueNow, valueOnePeriodAgo);\n  const previousPeriodAmount = getAmountChange(valueOnePeriodAgo, valueTwoPeriodsAgo);\n  const percentageChange = getPercentChange(currentPeriodAmount, previousPeriodAmount);\n  return [currentPeriodAmount, percentageChange];\n};\nexport const getLpFeesAndApr = (volumeUSD, volumeUSDWeek, liquidityUSD) => {\n  const totalFees24h = volumeUSD * TOTAL_FEE;\n  const totalFees7d = volumeUSDWeek * TOTAL_FEE;\n  const lpFees24h = volumeUSD * LP_HOLDERS_FEE;\n  const lpFees7d = volumeUSDWeek * LP_HOLDERS_FEE;\n  const lpApr7d = liquidityUSD > 0 ? volumeUSDWeek * LP_HOLDERS_FEE * WEEKS_IN_YEAR * 100 / liquidityUSD : 0;\n  return {\n    totalFees24h,\n    totalFees7d,\n    lpFees24h,\n    lpFees7d,\n    lpApr7d: lpApr7d !== Infinity ? lpApr7d : 0\n  };\n};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Info/utils/infoDataHelpers.ts"],"names":["TOTAL_FEE","LP_HOLDERS_FEE","WEEKS_IN_YEAR","getAmountChange","valueNow","valueBefore","getPercentChange","getChangeForPeriod","valueOnePeriodAgo","valueTwoPeriodsAgo","currentPeriodAmount","previousPeriodAmount","percentageChange","getLpFeesAndApr","volumeUSD","volumeUSDWeek","liquidityUSD","totalFees24h","totalFees7d","lpFees24h","lpFees7d","lpApr7d","Infinity"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,EAAoCC,aAApC,QAAyD,uBAAzD;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,eAAe,GAAG,CAACC,QAAD,EAAoBC,WAApB,KAA6C;AAC1E,MAAID,QAAQ,IAAIC,WAAhB,EAA6B;AAC3B,WAAOD,QAAQ,GAAGC,WAAlB;AACD;;AACD,MAAID,QAAJ,EAAc;AACZ,WAAOA,QAAP;AACD;;AACD,SAAO,CAAP;AACD,CARM;AAUP;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,gBAAgB,GAAG,CAACF,QAAD,EAAoBC,WAApB,KAAqD;AACnF,MAAID,QAAQ,IAAIC,WAAhB,EAA6B;AAC3B,WAAQ,CAACD,QAAQ,GAAGC,WAAZ,IAA2BA,WAA5B,GAA2C,GAAlD;AACD;;AACD,SAAO,CAAP;AACD,CALM;AAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAME,kBAAkB,GAAG,CAChCH,QADgC,EAEhCI,iBAFgC,EAGhCC,kBAHgC,KAIX;AACrB,QAAMC,mBAAmB,GAAGP,eAAe,CAACC,QAAD,EAAWI,iBAAX,CAA3C;AACA,QAAMG,oBAAoB,GAAGR,eAAe,CAACK,iBAAD,EAAoBC,kBAApB,CAA5C;AACA,QAAMG,gBAAgB,GAAGN,gBAAgB,CAACI,mBAAD,EAAsBC,oBAAtB,CAAzC;AACA,SAAO,CAACD,mBAAD,EAAsBE,gBAAtB,CAAP;AACD,CATM;AAWP,OAAO,MAAMC,eAAe,GAAG,CAACC,SAAD,EAAoBC,aAApB,EAA2CC,YAA3C,KAAoE;AACjG,QAAMC,YAAY,GAAGH,SAAS,GAAGd,SAAjC;AACA,QAAMkB,WAAW,GAAGH,aAAa,GAAGf,SAApC;AACA,QAAMmB,SAAS,GAAGL,SAAS,GAAGb,cAA9B;AACA,QAAMmB,QAAQ,GAAGL,aAAa,GAAGd,cAAjC;AAEA,QAAMoB,OAAO,GAAGL,YAAY,GAAG,CAAf,GAAoBD,aAAa,GAAGd,cAAhB,GAAiCC,aAAjC,GAAiD,GAAlD,GAAyDc,YAA5E,GAA2F,CAA3G;AACA,SAAO;AACLC,IAAAA,YADK;AAELC,IAAAA,WAFK;AAGLC,IAAAA,SAHK;AAILC,IAAAA,QAJK;AAKLC,IAAAA,OAAO,EAAEA,OAAO,KAAKC,QAAZ,GAAuBD,OAAvB,GAAiC;AALrC,GAAP;AAOD,CAdM","sourcesContent":["import { TOTAL_FEE, LP_HOLDERS_FEE, WEEKS_IN_YEAR } from 'config/constants/info'\n\n/**\n * Get increase/decrease of value compared to the previous value (e.g. 24h volume compared to 24h volume the day before )\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */\nexport const getAmountChange = (valueNow?: number, valueBefore?: number) => {\n  if (valueNow && valueBefore) {\n    return valueNow - valueBefore\n  }\n  if (valueNow) {\n    return valueNow\n  }\n  return 0\n}\n\n/**\n * Get increase/decrease of value compared to the previous value as a percentage\n * @param valueNow - more recent value\n * @param valueBefore - value to compare with\n */\nexport const getPercentChange = (valueNow?: number, valueBefore?: number): number => {\n  if (valueNow && valueBefore) {\n    return ((valueNow - valueBefore) / valueBefore) * 100\n  }\n  return 0\n}\n\n/**\n * Given current value and value 1 and 2 periods (e.g. 1day + 2days, 1week - 2weeks) returns the amount change for latest period\n * and percentage change compared to the previous period.\n * @param valueNow - current value\n * @param valueOnePeriodAgo - value 1 period ago (e.g. 1 day or 1 week ago), period unit must be same as valueTwoPeriodsAgo\n * @param valueTwoPeriodsAgo - value 2 periods ago (e.g. 2 days or 2 weeks ago), period unit must be same as valueOnePeriodAgo\n * @returns amount change for the latest period and percentage change compared to previous period\n */\nexport const getChangeForPeriod = (\n  valueNow?: number,\n  valueOnePeriodAgo?: number,\n  valueTwoPeriodsAgo?: number,\n): [number, number] => {\n  const currentPeriodAmount = getAmountChange(valueNow, valueOnePeriodAgo)\n  const previousPeriodAmount = getAmountChange(valueOnePeriodAgo, valueTwoPeriodsAgo)\n  const percentageChange = getPercentChange(currentPeriodAmount, previousPeriodAmount)\n  return [currentPeriodAmount, percentageChange]\n}\n\nexport const getLpFeesAndApr = (volumeUSD: number, volumeUSDWeek: number, liquidityUSD: number) => {\n  const totalFees24h = volumeUSD * TOTAL_FEE\n  const totalFees7d = volumeUSDWeek * TOTAL_FEE\n  const lpFees24h = volumeUSD * LP_HOLDERS_FEE\n  const lpFees7d = volumeUSDWeek * LP_HOLDERS_FEE\n\n  const lpApr7d = liquidityUSD > 0 ? (volumeUSDWeek * LP_HOLDERS_FEE * WEEKS_IN_YEAR * 100) / liquidityUSD : 0\n  return {\n    totalFees24h,\n    totalFees7d,\n    lpFees24h,\n    lpFees7d,\n    lpApr7d: lpApr7d !== Infinity ? lpApr7d : 0,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}