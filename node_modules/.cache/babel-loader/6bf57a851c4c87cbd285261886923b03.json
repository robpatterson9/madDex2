{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { parseUnits } from 'ethers/lib/utils';\nimport { useAppDispatch } from 'state';\nimport { updateUserStakedBalance, updateUserBalance, updateUserPendingReward } from 'state/actions';\nimport { unstakeFarm } from 'utils/calls';\nimport { useMasterchef, useSousChef } from 'hooks/useContract';\nimport getGasPrice from 'utils/getGasPrice';\n\nconst sousUnstake = async (sousChefContract, amount, decimals) => {\n  const gasPrice = getGasPrice();\n  const units = parseUnits(amount, decimals);\n  const tx = await sousChefContract.withdraw(units.toString(), {\n    gasPrice\n  });\n  const receipt = await tx.wait();\n  return receipt.status;\n};\n\nconst sousEmergencyUnstake = async sousChefContract => {\n  const gasPrice = getGasPrice();\n  const tx = await sousChefContract.emergencyWithdraw({\n    gasPrice\n  });\n  const receipt = await tx.wait();\n  return receipt.status;\n};\n\nconst useUnstakePool = (sousId, enableEmergencyWithdraw = false) => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  const masterChefContract = useMasterchef();\n  const sousChefContract = useSousChef(sousId);\n  const handleUnstake = useCallback(async (amount, decimals) => {\n    if (sousId === 0) {\n      await unstakeFarm(masterChefContract, 0, amount);\n    } else if (enableEmergencyWithdraw) {\n      await sousEmergencyUnstake(sousChefContract);\n    } else {\n      await sousUnstake(sousChefContract, amount, decimals);\n    }\n\n    dispatch(updateUserStakedBalance(sousId, account));\n    dispatch(updateUserBalance(sousId, account));\n    dispatch(updateUserPendingReward(sousId, account));\n  }, [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId]);\n  return {\n    onUnstake: handleUnstake\n  };\n};\n\n_s(useUnstakePool, \"ZdLCx5w3kCXGv4NZYm/42J9apvQ=\", false, function () {\n  return [useAppDispatch, useWeb3React, useMasterchef, useSousChef];\n});\n\nexport default useUnstakePool;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/hooks/useUnstakePool.ts"],"names":["useCallback","useWeb3React","parseUnits","useAppDispatch","updateUserStakedBalance","updateUserBalance","updateUserPendingReward","unstakeFarm","useMasterchef","useSousChef","getGasPrice","sousUnstake","sousChefContract","amount","decimals","gasPrice","units","tx","withdraw","toString","receipt","wait","status","sousEmergencyUnstake","emergencyWithdraw","useUnstakePool","sousId","enableEmergencyWithdraw","dispatch","account","masterChefContract","handleUnstake","onUnstake"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,cAAT,QAA+B,OAA/B;AACA,SAASC,uBAAT,EAAkCC,iBAAlC,EAAqDC,uBAArD,QAAoF,eAApF;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,aAAT,EAAwBC,WAAxB,QAA2C,mBAA3C;AACA,OAAOC,WAAP,MAAwB,mBAAxB;;AAEA,MAAMC,WAAW,GAAG,OAAOC,gBAAP,EAA8BC,MAA9B,EAA8CC,QAA9C,KAAmE;AACrF,QAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAMM,KAAK,GAAGd,UAAU,CAACW,MAAD,EAASC,QAAT,CAAxB;AAEA,QAAMG,EAAE,GAAG,MAAML,gBAAgB,CAACM,QAAjB,CAA0BF,KAAK,CAACG,QAAN,EAA1B,EAA4C;AAC3DJ,IAAAA;AAD2D,GAA5C,CAAjB;AAGA,QAAMK,OAAO,GAAG,MAAMH,EAAE,CAACI,IAAH,EAAtB;AACA,SAAOD,OAAO,CAACE,MAAf;AACD,CATD;;AAWA,MAAMC,oBAAoB,GAAG,MAAOX,gBAAP,IAAiC;AAC5D,QAAMG,QAAQ,GAAGL,WAAW,EAA5B;AACA,QAAMO,EAAE,GAAG,MAAML,gBAAgB,CAACY,iBAAjB,CAAmC;AAAET,IAAAA;AAAF,GAAnC,CAAjB;AACA,QAAMK,OAAO,GAAG,MAAMH,EAAE,CAACI,IAAH,EAAtB;AACA,SAAOD,OAAO,CAACE,MAAf;AACD,CALD;;AAOA,MAAMG,cAAc,GAAG,CAACC,MAAD,EAAiBC,uBAAuB,GAAG,KAA3C,KAAqD;AAAA;;AAC1E,QAAMC,QAAQ,GAAGzB,cAAc,EAA/B;AACA,QAAM;AAAE0B,IAAAA;AAAF,MAAc5B,YAAY,EAAhC;AACA,QAAM6B,kBAAkB,GAAGtB,aAAa,EAAxC;AACA,QAAMI,gBAAgB,GAAGH,WAAW,CAACiB,MAAD,CAApC;AAEA,QAAMK,aAAa,GAAG/B,WAAW,CAC/B,OAAOa,MAAP,EAAuBC,QAAvB,KAA4C;AAC1C,QAAIY,MAAM,KAAK,CAAf,EAAkB;AAChB,YAAMnB,WAAW,CAACuB,kBAAD,EAAqB,CAArB,EAAwBjB,MAAxB,CAAjB;AACD,KAFD,MAEO,IAAIc,uBAAJ,EAA6B;AAClC,YAAMJ,oBAAoB,CAACX,gBAAD,CAA1B;AACD,KAFM,MAEA;AACL,YAAMD,WAAW,CAACC,gBAAD,EAAmBC,MAAnB,EAA2BC,QAA3B,CAAjB;AACD;;AACDc,IAAAA,QAAQ,CAACxB,uBAAuB,CAACsB,MAAD,EAASG,OAAT,CAAxB,CAAR;AACAD,IAAAA,QAAQ,CAACvB,iBAAiB,CAACqB,MAAD,EAASG,OAAT,CAAlB,CAAR;AACAD,IAAAA,QAAQ,CAACtB,uBAAuB,CAACoB,MAAD,EAASG,OAAT,CAAxB,CAAR;AACD,GAZ8B,EAa/B,CAACA,OAAD,EAAUD,QAAV,EAAoBD,uBAApB,EAA6CG,kBAA7C,EAAiElB,gBAAjE,EAAmFc,MAAnF,CAb+B,CAAjC;AAgBA,SAAO;AAAEM,IAAAA,SAAS,EAAED;AAAb,GAAP;AACD,CAvBD;;GAAMN,c;UACatB,c,EACGF,Y,EACOO,a,EACFC,W;;;AAqB3B,eAAegB,cAAf","sourcesContent":["import { useCallback } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { useAppDispatch } from 'state'\nimport { updateUserStakedBalance, updateUserBalance, updateUserPendingReward } from 'state/actions'\nimport { unstakeFarm } from 'utils/calls'\nimport { useMasterchef, useSousChef } from 'hooks/useContract'\nimport getGasPrice from 'utils/getGasPrice'\n\nconst sousUnstake = async (sousChefContract: any, amount: string, decimals: number) => {\n  const gasPrice = getGasPrice()\n  const units = parseUnits(amount, decimals)\n\n  const tx = await sousChefContract.withdraw(units.toString(), {\n    gasPrice,\n  })\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst sousEmergencyUnstake = async (sousChefContract: any) => {\n  const gasPrice = getGasPrice()\n  const tx = await sousChefContract.emergencyWithdraw({ gasPrice })\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nconst useUnstakePool = (sousId: number, enableEmergencyWithdraw = false) => {\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string, decimals: number) => {\n      if (sousId === 0) {\n        await unstakeFarm(masterChefContract, 0, amount)\n      } else if (enableEmergencyWithdraw) {\n        await sousEmergencyUnstake(sousChefContract)\n      } else {\n        await sousUnstake(sousChefContract, amount, decimals)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, enableEmergencyWithdraw, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstakePool\n"]},"metadata":{},"sourceType":"module"}