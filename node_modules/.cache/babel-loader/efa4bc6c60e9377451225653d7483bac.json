{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolsTable/Cells/EarningsCell.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Skeleton, Text, Flex, Box, useModal, useMatchBreakpoints } from '@pancakeswap/uikit';\nimport BigNumber from 'bignumber.js';\nimport { PoolCategory } from 'config/constants/types';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance';\nimport Balance from 'components/Balance';\nimport { useTranslation } from 'contexts/Localization';\nimport BaseCell, { CellContent } from './BaseCell';\nimport CollectModal from '../../PoolCard/Modals/CollectModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledCell = styled(BaseCell)`\n  flex: 4.5;\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    flex: 1 0 120px;\n  }\n`;\n_c = StyledCell;\n\nconst EarningsCell = ({\n  pool,\n  account,\n  userDataLoaded\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    isMobile\n  } = useMatchBreakpoints();\n  const {\n    sousId,\n    earningToken,\n    poolCategory,\n    userData,\n    earningTokenPrice\n  } = pool;\n  const isManualCakePool = sousId === 0;\n  const earnings = (userData === null || userData === void 0 ? void 0 : userData.pendingReward) ? new BigNumber(userData.pendingReward) : BIG_ZERO;\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals);\n  const earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals);\n  const hasEarnings = account && earnings.gt(0);\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals);\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3);\n  const isBnbPool = poolCategory === PoolCategory.BINANCE;\n  const labelText = t('%asset% Earned', {\n    asset: earningToken.symbol\n  });\n  const [onPresentCollect] = useModal( /*#__PURE__*/_jsxDEV(CollectModal, {\n    formattedBalance: formattedBalance,\n    fullBalance: fullBalance,\n    earningToken: earningToken,\n    earningsDollarValue: earningTokenDollarBalance,\n    sousId: sousId,\n    isBnbPool: isBnbPool,\n    isCompoundPool: isManualCakePool\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this));\n\n  const handleEarningsClick = event => {\n    event.stopPropagation();\n    onPresentCollect();\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledCell, {\n    role: \"cell\",\n    children: /*#__PURE__*/_jsxDEV(CellContent, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        textAlign: \"left\",\n        children: labelText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), !userDataLoaded && account ? /*#__PURE__*/_jsxDEV(Skeleton, {\n        width: \"80px\",\n        height: \"16px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(Flex, {\n          children: /*#__PURE__*/_jsxDEV(Box, {\n            mr: \"8px\",\n            height: \"32px\",\n            onClick: hasEarnings ? handleEarningsClick : undefined,\n            children: [/*#__PURE__*/_jsxDEV(Balance, {\n              mt: \"4px\",\n              bold: !isMobile,\n              fontSize: isMobile ? '14px' : '16px',\n              color: hasEarnings ? 'primary' : 'textDisabled',\n              decimals: hasEarnings ? 5 : 1,\n              value: hasEarnings ? earningTokenBalance : 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this), hasEarnings ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: earningTokenPrice > 0 && /*#__PURE__*/_jsxDEV(Balance, {\n                display: \"inline\",\n                fontSize: \"12px\",\n                color: \"textSubtle\",\n                decimals: 2,\n                prefix: \"~\",\n                value: earningTokenDollarBalance,\n                unit: \" USD\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 23\n              }, this)\n            }, void 0, false) : /*#__PURE__*/_jsxDEV(Text, {\n              mt: \"4px\",\n              fontSize: \"12px\",\n              color: \"textDisabled\",\n              children: \"0 USD\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(EarningsCell, \"mxwTJpXVA4slOYjestIYOSVx1WM=\", false, function () {\n  return [useTranslation, useMatchBreakpoints, useModal];\n});\n\n_c2 = EarningsCell;\nexport default EarningsCell;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledCell\");\n$RefreshReg$(_c2, \"EarningsCell\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolsTable/Cells/EarningsCell.tsx"],"names":["React","styled","Skeleton","Text","Flex","Box","useModal","useMatchBreakpoints","BigNumber","PoolCategory","BIG_ZERO","formatNumber","getBalanceNumber","getFullDisplayBalance","Balance","useTranslation","BaseCell","CellContent","CollectModal","StyledCell","theme","mediaQueries","sm","EarningsCell","pool","account","userDataLoaded","t","isMobile","sousId","earningToken","poolCategory","userData","earningTokenPrice","isManualCakePool","earnings","pendingReward","earningTokenBalance","decimals","earningTokenDollarBalance","multipliedBy","hasEarnings","gt","fullBalance","formattedBalance","isBnbPool","BINANCE","labelText","asset","symbol","onPresentCollect","handleEarningsClick","event","stopPropagation","undefined"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Skeleton, Text, Flex, Box, useModal, useMatchBreakpoints } from '@pancakeswap/uikit'\nimport { DeserializedPool } from 'state/types'\nimport BigNumber from 'bignumber.js'\nimport { PoolCategory } from 'config/constants/types'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { formatNumber, getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport Balance from 'components/Balance'\nimport { useTranslation } from 'contexts/Localization'\nimport BaseCell, { CellContent } from './BaseCell'\nimport CollectModal from '../../PoolCard/Modals/CollectModal'\n\ninterface EarningsCellProps {\n  pool: DeserializedPool\n  account: string\n  userDataLoaded: boolean\n}\n\nconst StyledCell = styled(BaseCell)`\n  flex: 4.5;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex: 1 0 120px;\n  }\n`\n\nconst EarningsCell: React.FC<EarningsCellProps> = ({ pool, account, userDataLoaded }) => {\n  const { t } = useTranslation()\n  const { isMobile } = useMatchBreakpoints()\n  const { sousId, earningToken, poolCategory, userData, earningTokenPrice } = pool\n  const isManualCakePool = sousId === 0\n\n  const earnings = userData?.pendingReward ? new BigNumber(userData.pendingReward) : BIG_ZERO\n  const earningTokenBalance = getBalanceNumber(earnings, earningToken.decimals)\n  const earningTokenDollarBalance = getBalanceNumber(earnings.multipliedBy(earningTokenPrice), earningToken.decimals)\n  const hasEarnings = account && earnings.gt(0)\n  const fullBalance = getFullDisplayBalance(earnings, earningToken.decimals)\n  const formattedBalance = formatNumber(earningTokenBalance, 3, 3)\n  const isBnbPool = poolCategory === PoolCategory.BINANCE\n\n  const labelText = t('%asset% Earned', { asset: earningToken.symbol })\n\n  const [onPresentCollect] = useModal(\n    <CollectModal\n      formattedBalance={formattedBalance}\n      fullBalance={fullBalance}\n      earningToken={earningToken}\n      earningsDollarValue={earningTokenDollarBalance}\n      sousId={sousId}\n      isBnbPool={isBnbPool}\n      isCompoundPool={isManualCakePool}\n    />,\n  )\n\n  const handleEarningsClick = (event: React.MouseEvent<HTMLElement>) => {\n    event.stopPropagation()\n    onPresentCollect()\n  }\n\n  return (\n    <StyledCell role=\"cell\">\n      <CellContent>\n        <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"left\">\n          {labelText}\n        </Text>\n        {!userDataLoaded && account ? (\n          <Skeleton width=\"80px\" height=\"16px\" />\n        ) : (\n          <>\n            <Flex>\n              <Box mr=\"8px\" height=\"32px\" onClick={hasEarnings ? handleEarningsClick : undefined}>\n                <Balance\n                  mt=\"4px\"\n                  bold={!isMobile}\n                  fontSize={isMobile ? '14px' : '16px'}\n                  color={hasEarnings ? 'primary' : 'textDisabled'}\n                  decimals={hasEarnings ? 5 : 1}\n                  value={hasEarnings ? earningTokenBalance : 0}\n                />\n                {hasEarnings ? (\n                  <>\n                    {earningTokenPrice > 0 && (\n                      <Balance\n                        display=\"inline\"\n                        fontSize=\"12px\"\n                        color=\"textSubtle\"\n                        decimals={2}\n                        prefix=\"~\"\n                        value={earningTokenDollarBalance}\n                        unit=\" USD\"\n                      />\n                    )}\n                  </>\n                ) : (\n                  <Text mt=\"4px\" fontSize=\"12px\" color=\"textDisabled\">\n                    0 USD\n                  </Text>\n                )}\n              </Box>\n            </Flex>\n          </>\n        )}\n      </CellContent>\n    </StyledCell>\n  )\n}\n\nexport default EarningsCell\n"]},"metadata":{},"sourceType":"module"}