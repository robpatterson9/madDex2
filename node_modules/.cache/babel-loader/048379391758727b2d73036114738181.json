{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';import{getNftsMarketData}from'state/nftMarket/helpers';import{pancakeBunniesAddress}from'../constants';var getBunnyIdFromNft=function getBunnyIdFromNft(nft){var _nft$attributes,_nft$attributes$find;var bunnyId=(_nft$attributes=nft.attributes)===null||_nft$attributes===void 0?void 0:(_nft$attributes$find=_nft$attributes.find(function(attr){return attr.traitType==='bunnyId';}))===null||_nft$attributes$find===void 0?void 0:_nft$attributes$find.value;return bunnyId?bunnyId.toString():null;};export var useGetLowestPriceFromBunnyId=function useGetLowestPriceFromBunnyId(bunnyId){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isFetching=_useState2[0],setIsFetching=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),lowestPrice=_useState4[0],setLowestPrice=_useState4[1];useEffect(function(){var fetchLowestPrice=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response,_response,tokenMarketData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;setIsFetching(true);_context.next=4;return getNftsMarketData({otherId:bunnyId,isTradable:true},1,'currentAskPrice','asc');case 4:response=_context.sent;if(response.length>0){_response=_slicedToArray(response,1),tokenMarketData=_response[0];setLowestPrice(parseFloat(tokenMarketData.currentAskPrice));}case 6:_context.prev=6;setIsFetching(false);return _context.finish(6);case 9:case\"end\":return _context.stop();}}},_callee,null,[[0,,6,9]]);}));return function fetchLowestPrice(){return _ref.apply(this,arguments);};}();if(bunnyId){fetchLowestPrice();}},[bunnyId]);return{isFetching:isFetching,lowestPrice:lowestPrice};};export var useGetLowestPriceFromNft=function useGetLowestPriceFromNft(nft){var _nft$collectionAddres;var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isFetching=_useState6[0],setIsFetching=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),lowestPrice=_useState8[0],setLowestPrice=_useState8[1];var isPancakeBunny=((_nft$collectionAddres=nft.collectionAddress)===null||_nft$collectionAddres===void 0?void 0:_nft$collectionAddres.toLowerCase())===pancakeBunniesAddress.toLowerCase();useEffect(function(){var fetchLowestPrice=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var bunnyIdAttr,response,_response2,tokenMarketData;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:bunnyIdAttr=getBunnyIdFromNft(nft);_context2.prev=1;setIsFetching(true);_context2.next=5;return getNftsMarketData({otherId:bunnyIdAttr,isTradable:true},1,'currentAskPrice','asc');case 5:response=_context2.sent;if(response.length>0){_response2=_slicedToArray(response,1),tokenMarketData=_response2[0];setLowestPrice(parseFloat(tokenMarketData.currentAskPrice));}case 7:_context2.prev=7;setIsFetching(false);return _context2.finish(7);case 10:case\"end\":return _context2.stop();}}},_callee2,null,[[1,,7,10]]);}));return function fetchLowestPrice(){return _ref2.apply(this,arguments);};}();if(isPancakeBunny&&nft){fetchLowestPrice();}},[isPancakeBunny,nft]);return{isFetching:isFetching,lowestPrice:lowestPrice};};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/hooks/useGetLowestPrice.ts"],"names":["useEffect","useState","getNftsMarketData","pancakeBunniesAddress","getBunnyIdFromNft","nft","bunnyId","attributes","find","attr","traitType","value","toString","useGetLowestPriceFromBunnyId","isFetching","setIsFetching","lowestPrice","setLowestPrice","fetchLowestPrice","otherId","isTradable","response","length","tokenMarketData","parseFloat","currentAskPrice","useGetLowestPriceFromNft","isPancakeBunny","collectionAddress","toLowerCase","bunnyIdAttr"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\nimport { getNftsMarketData } from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from '../constants'\n\nexport interface LowestNftPrice {\n  isFetching: boolean\n  lowestPrice: number\n}\n\nconst getBunnyIdFromNft = (nft: NftToken): string => {\n  const bunnyId = nft.attributes?.find((attr) => attr.traitType === 'bunnyId')?.value\n  return bunnyId ? bunnyId.toString() : null\n}\n\nexport const useGetLowestPriceFromBunnyId = (bunnyId: string): LowestNftPrice => {\n  const [isFetching, setIsFetching] = useState<boolean>(false)\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\n\n  useEffect(() => {\n    const fetchLowestPrice = async () => {\n      try {\n        setIsFetching(true)\n        const response = await getNftsMarketData({ otherId: bunnyId, isTradable: true }, 1, 'currentAskPrice', 'asc')\n\n        if (response.length > 0) {\n          const [tokenMarketData] = response\n          setLowestPrice(parseFloat(tokenMarketData.currentAskPrice))\n        }\n      } finally {\n        setIsFetching(false)\n      }\n    }\n\n    if (bunnyId) {\n      fetchLowestPrice()\n    }\n  }, [bunnyId])\n\n  return { isFetching, lowestPrice }\n}\n\nexport const useGetLowestPriceFromNft = (nft: NftToken): LowestNftPrice => {\n  const [isFetching, setIsFetching] = useState<boolean>(false)\n  const [lowestPrice, setLowestPrice] = useState<number>(null)\n  const isPancakeBunny = nft.collectionAddress?.toLowerCase() === pancakeBunniesAddress.toLowerCase()\n\n  useEffect(() => {\n    const fetchLowestPrice = async () => {\n      const bunnyIdAttr = getBunnyIdFromNft(nft)\n      try {\n        setIsFetching(true)\n        const response = await getNftsMarketData(\n          { otherId: bunnyIdAttr, isTradable: true },\n          1,\n          'currentAskPrice',\n          'asc',\n        )\n\n        if (response.length > 0) {\n          const [tokenMarketData] = response\n          setLowestPrice(parseFloat(tokenMarketData.currentAskPrice))\n        }\n      } finally {\n        setIsFetching(false)\n      }\n    }\n\n    if (isPancakeBunny && nft) {\n      fetchLowestPrice()\n    }\n  }, [isPancakeBunny, nft])\n\n  return { isFetching, lowestPrice }\n}\n"]},"metadata":{},"sourceType":"module"}