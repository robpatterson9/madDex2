{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import{request,gql}from'graphql-request';import{INFO_CLIENT}from'config/constants/endpoints';import{mapMints,mapBurns,mapSwaps}from'state/info/queries/helpers';/**\n * Transactions for Transaction table on the Home page\n */var GLOBAL_TRANSACTIONS=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  query overviewTransactions {\\n    mints: mints(first: 33, orderBy: timestamp, orderDirection: desc) {\\n      id\\n      timestamp\\n      pair {\\n        token0 {\\n          id\\n          symbol\\n        }\\n        token1 {\\n          id\\n          symbol\\n        }\\n      }\\n      to\\n      amount0\\n      amount1\\n      amountUSD\\n    }\\n    swaps: swaps(first: 33, orderBy: timestamp, orderDirection: desc) {\\n      id\\n      timestamp\\n      pair {\\n        token0 {\\n          id\\n          symbol\\n        }\\n        token1 {\\n          id\\n          symbol\\n        }\\n      }\\n      from\\n      amount0In\\n      amount1In\\n      amount0Out\\n      amount1Out\\n      amountUSD\\n    }\\n    burns: burns(first: 33, orderBy: timestamp, orderDirection: desc) {\\n      id\\n      timestamp\\n      pair {\\n        token0 {\\n          id\\n          symbol\\n        }\\n        token1 {\\n          id\\n          symbol\\n        }\\n      }\\n      sender\\n      amount0\\n      amount1\\n      amountUSD\\n    }\\n  }\\n\"])));var fetchTopTransactions=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var data,mints,burns,swaps;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return request(INFO_CLIENT,GLOBAL_TRANSACTIONS);case 3:data=_context.sent;if(data){_context.next=6;break;}return _context.abrupt(\"return\",undefined);case 6:mints=data.mints.map(mapMints);burns=data.burns.map(mapBurns);swaps=data.swaps.map(mapSwaps);return _context.abrupt(\"return\",[].concat(_toConsumableArray(mints),_toConsumableArray(burns),_toConsumableArray(swaps)).sort(function(a,b){return parseInt(b.timestamp,10)-parseInt(a.timestamp,10);}));case 12:_context.prev=12;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",undefined);case 15:case\"end\":return _context.stop();}}},_callee,null,[[0,12]]);}));return function fetchTopTransactions(){return _ref.apply(this,arguments);};}();export default fetchTopTransactions;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/queries/protocol/transactions.ts"],"names":["request","gql","INFO_CLIENT","mapMints","mapBurns","mapSwaps","GLOBAL_TRANSACTIONS","fetchTopTransactions","data","undefined","mints","map","burns","swaps","sort","a","b","parseInt","timestamp"],"mappings":"yoBAAA,OAASA,OAAT,CAAkBC,GAAlB,KAA6B,iBAA7B,CACA,OAASC,WAAT,KAA4B,4BAA5B,CAGA,OAASC,QAAT,CAAmBC,QAAnB,CAA6BC,QAA7B,KAA6C,4BAA7C,CAEA;AACA;AACA,GACA,GAAMC,CAAAA,mBAAmB,CAAGL,GAAH,qjCAAzB,CAkEA,GAAMM,CAAAA,oBAAoB,0FAAG,oMAENP,CAAAA,OAAO,CAAqBE,WAArB,CAAkCI,mBAAlC,CAFD,QAEnBE,IAFmB,kBAIpBA,IAJoB,yDAKhBC,SALgB,SAQnBC,KARmB,CAQXF,IAAI,CAACE,KAAL,CAAWC,GAAX,CAAeR,QAAf,CARW,CASnBS,KATmB,CASXJ,IAAI,CAACI,KAAL,CAAWD,GAAX,CAAeP,QAAf,CATW,CAUnBS,KAVmB,CAUXL,IAAI,CAACK,KAAL,CAAWF,GAAX,CAAeN,QAAf,CAVW,iCAYlB,6BAAIK,KAAJ,qBAAcE,KAAd,qBAAwBC,KAAxB,GAA+BC,IAA/B,CAAoC,SAACC,CAAD,CAAIC,CAAJ,CAAU,CACnD,MAAOC,CAAAA,QAAQ,CAACD,CAAC,CAACE,SAAH,CAAc,EAAd,CAAR,CAA4BD,QAAQ,CAACF,CAAC,CAACG,SAAH,CAAc,EAAd,CAA3C,CACD,CAFM,CAZkB,4FAgBlBT,SAhBkB,uEAAH,kBAApBF,CAAAA,oBAAoB,0CAA1B,CAoBA,cAAeA,CAAAA,oBAAf","sourcesContent":["import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { Transaction } from 'state/info/types'\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\n\n/**\n * Transactions for Transaction table on the Home page\n */\nconst GLOBAL_TRANSACTIONS = gql`\n  query overviewTransactions {\n    mints: mints(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps: swaps(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burns: burns(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\ninterface TransactionResults {\n  mints: MintResponse[]\n  swaps: SwapResponse[]\n  burns: BurnResponse[]\n}\n\nconst fetchTopTransactions = async (): Promise<Transaction[] | undefined> => {\n  try {\n    const data = await request<TransactionResults>(INFO_CLIENT, GLOBAL_TRANSACTIONS)\n\n    if (!data) {\n      return undefined\n    }\n\n    const mints = data.mints.map(mapMints)\n    const burns = data.burns.map(mapBurns)\n    const swaps = data.swaps.map(mapSwaps)\n\n    return [...mints, ...burns, ...swaps].sort((a, b) => {\n      return parseInt(b.timestamp, 10) - parseInt(a.timestamp, 10)\n    })\n  } catch {\n    return undefined\n  }\n}\n\nexport default fetchTopTransactions\n"]},"metadata":{},"sourceType":"module"}