{"ast":null,"code":"import _toConsumableArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _templateObject;import{request,gql}from'graphql-request';import{campaignMap}from'config/constants/campaigns';import{GRAPH_API_PROFILE}from'config/constants/endpoints';import{getAchievementTitle,getAchievementDescription}from'utils/achievements';/**\n * Gets all user point increase events on the profile filtered by wallet address\n */export var getUserPointIncreaseEvents=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(account){var _yield$request,user;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return request(GRAPH_API_PROFILE,gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n        query getUserPointIncreaseEvents($account: ID!) {\\n          user(id: $account) {\\n            points {\\n              id\\n              campaignId\\n              points\\n            }\\n          }\\n        }\\n      \"]))),{account:account.toLowerCase()});case 3:_yield$request=_context.sent;user=_yield$request.user;return _context.abrupt(\"return\",user.points);case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",null);case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));return function getUserPointIncreaseEvents(_x){return _ref.apply(this,arguments);};}();/**\n * Gets all user point increase events and adds achievement meta\n */export var getAchievements=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(account){var pointIncreaseEvents;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return getUserPointIncreaseEvents(account);case 2:pointIncreaseEvents=_context2.sent;if(pointIncreaseEvents){_context2.next=5;break;}return _context2.abrupt(\"return\",[]);case 5:return _context2.abrupt(\"return\",pointIncreaseEvents.reduce(function(accum,userPoint){if(!campaignMap.has(userPoint.campaignId)){return accum;}var campaignMeta=campaignMap.get(userPoint.campaignId);return[].concat(_toConsumableArray(accum),[{id:userPoint.campaignId,type:campaignMeta.type,address:userPoint.id,title:getAchievementTitle(campaignMeta),description:getAchievementDescription(campaignMeta),badge:campaignMeta.badge,points:Number(userPoint.points)}]);},[]));case 6:case\"end\":return _context2.stop();}}},_callee2);}));return function getAchievements(_x2){return _ref2.apply(this,arguments);};}();","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/achievements/helpers.ts"],"names":["request","gql","campaignMap","GRAPH_API_PROFILE","getAchievementTitle","getAchievementDescription","getUserPointIncreaseEvents","account","toLowerCase","user","points","getAchievements","pointIncreaseEvents","reduce","accum","userPoint","has","campaignId","campaignMeta","get","id","type","address","title","description","badge","Number"],"mappings":"yoBAAA,OAASA,OAAT,CAAkBC,GAAlB,KAA6B,iBAA7B,CACA,OAASC,WAAT,KAA4B,4BAA5B,CACA,OAASC,iBAAT,KAAkC,4BAAlC,CAEA,OAASC,mBAAT,CAA8BC,yBAA9B,KAA+D,oBAA/D,CAQA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,0BAA0B,0FAAG,iBAAOC,OAAP,gLAEfP,CAAAA,OAAO,CAC5BG,iBAD4B,CAE5BF,GAF4B,oSAa5B,CACEM,OAAO,CAAEA,OAAO,CAACC,WAAR,EADX,CAb4B,CAFQ,qCAE9BC,IAF8B,gBAE9BA,IAF8B,iCAoB/BA,IAAI,CAACC,MApB0B,0FAsB/B,IAtB+B,sEAAH,kBAA1BJ,CAAAA,0BAA0B,4CAAhC,CA0BP;AACA;AACA,GACA,MAAO,IAAMK,CAAAA,eAAe,2FAAG,kBAAOJ,OAAP,qKACKD,CAAAA,0BAA0B,CAACC,OAAD,CAD/B,QACvBK,mBADuB,mBAGxBA,mBAHwB,2DAIpB,EAJoB,0CAOtBA,mBAAmB,CAACC,MAApB,CAA2B,SAACC,KAAD,CAAQC,SAAR,CAAsB,CACtD,GAAI,CAACb,WAAW,CAACc,GAAZ,CAAgBD,SAAS,CAACE,UAA1B,CAAL,CAA4C,CAC1C,MAAOH,CAAAA,KAAP,CACD,CAED,GAAMI,CAAAA,YAAY,CAAGhB,WAAW,CAACiB,GAAZ,CAAgBJ,SAAS,CAACE,UAA1B,CAArB,CAEA,mCACKH,KADL,GAEE,CACEM,EAAE,CAAEL,SAAS,CAACE,UADhB,CAEEI,IAAI,CAAEH,YAAY,CAACG,IAFrB,CAGEC,OAAO,CAAEP,SAAS,CAACK,EAHrB,CAIEG,KAAK,CAAEnB,mBAAmB,CAACc,YAAD,CAJ5B,CAKEM,WAAW,CAAEnB,yBAAyB,CAACa,YAAD,CALxC,CAMEO,KAAK,CAAEP,YAAY,CAACO,KANtB,CAOEf,MAAM,CAAEgB,MAAM,CAACX,SAAS,CAACL,MAAX,CAPhB,CAFF,GAYD,CAnBM,CAmBJ,EAnBI,CAPsB,0DAAH,kBAAfC,CAAAA,eAAe,8CAArB","sourcesContent":["import { request, gql } from 'graphql-request'\nimport { campaignMap } from 'config/constants/campaigns'\nimport { GRAPH_API_PROFILE } from 'config/constants/endpoints'\nimport { Achievement } from 'state/types'\nimport { getAchievementTitle, getAchievementDescription } from 'utils/achievements'\n\ninterface UserPointIncreaseEvent {\n  campaignId: string\n  id: string // wallet address\n  points: string\n}\n\n/**\n * Gets all user point increase events on the profile filtered by wallet address\n */\nexport const getUserPointIncreaseEvents = async (account: string): Promise<UserPointIncreaseEvent[]> => {\n  try {\n    const { user } = await request(\n      GRAPH_API_PROFILE,\n      gql`\n        query getUserPointIncreaseEvents($account: ID!) {\n          user(id: $account) {\n            points {\n              id\n              campaignId\n              points\n            }\n          }\n        }\n      `,\n      {\n        account: account.toLowerCase(),\n      },\n    )\n\n    return user.points\n  } catch (error) {\n    return null\n  }\n}\n\n/**\n * Gets all user point increase events and adds achievement meta\n */\nexport const getAchievements = async (account: string): Promise<Achievement[]> => {\n  const pointIncreaseEvents = await getUserPointIncreaseEvents(account)\n\n  if (!pointIncreaseEvents) {\n    return []\n  }\n\n  return pointIncreaseEvents.reduce((accum, userPoint) => {\n    if (!campaignMap.has(userPoint.campaignId)) {\n      return accum\n    }\n\n    const campaignMeta = campaignMap.get(userPoint.campaignId)\n\n    return [\n      ...accum,\n      {\n        id: userPoint.campaignId,\n        type: campaignMeta.type,\n        address: userPoint.id,\n        title: getAchievementTitle(campaignMeta),\n        description: getAchievementDescription(campaignMeta),\n        badge: campaignMeta.badge,\n        points: Number(userPoint.points),\n      },\n    ]\n  }, [])\n}\n"]},"metadata":{},"sourceType":"module"}