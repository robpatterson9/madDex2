{"ast":null,"code":"import React from'react';import{Box,Text,Flex,Card,CardBody,CardHeader,Heading,Progress,Skeleton,Tag,CheckmarkCircleIcon}from'@pancakeswap/uikit';import{useWeb3React}from'@web3-react/core';import times from'lodash/times';import{VotingStateLoadingStatus}from'state/types';import{useGetVotingStateLoadingStatus}from'state/voting/hooks';import{formatNumber}from'utils/formatBalance';import{useTranslation}from'contexts/Localization';import{calculateVoteResults,getTotalFromVotes}from'../helpers';import TextEllipsis from'../components/TextEllipsis';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Results=function Results(_ref){var choices=_ref.choices,votes=_ref.votes;var _useTranslation=useTranslation(),t=_useTranslation.t;var results=calculateVoteResults(votes);var votingStatus=useGetVotingStateLoadingStatus();var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var totalVotes=getTotalFromVotes(votes);return/*#__PURE__*/_jsxs(Card,{children:[/*#__PURE__*/_jsx(CardHeader,{children:/*#__PURE__*/_jsx(Heading,{as:\"h3\",scale:\"md\",children:t('Current Results')})}),/*#__PURE__*/_jsxs(CardBody,{children:[votingStatus===VotingStateLoadingStatus.IDLE&&choices.map(function(choice,index){var choiceVotes=results[choice]||[];var totalChoiceVote=getTotalFromVotes(choiceVotes);var progress=totalVotes===0?0:totalChoiceVote/totalVotes*100;var hasVoted=choiceVotes.some(function(vote){return account&&vote.voter.toLowerCase()===account.toLowerCase();});return/*#__PURE__*/_jsxs(Box,{mt:index>0?'24px':'0px',children:[/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",mb:\"8px\",children:[/*#__PURE__*/_jsx(TextEllipsis,{mb:\"4px\",title:choice,children:choice}),hasVoted&&/*#__PURE__*/_jsxs(Tag,{variant:\"success\",outline:true,ml:\"8px\",children:[/*#__PURE__*/_jsx(CheckmarkCircleIcon,{mr:\"4px\"}),\" \",t('Voted')]})]}),/*#__PURE__*/_jsx(Box,{mb:\"4px\",children:/*#__PURE__*/_jsx(Progress,{primaryStep:progress,scale:\"sm\"})}),/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",justifyContent:\"space-between\",children:[/*#__PURE__*/_jsx(Text,{color:\"textSubtle\",children:t('%total% Votes',{total:formatNumber(totalChoiceVote,0,2)})}),/*#__PURE__*/_jsxs(Text,{children:[progress.toLocaleString(undefined,{minimumFractionDigits:2,maximumFractionDigits:2}),\"%\"]})]})]},choice);}),votingStatus===VotingStateLoadingStatus.LOADING&&times(choices.length).map(function(count,index){return/*#__PURE__*/_jsx(Box,{mt:index>0?'24px':'0px',children:/*#__PURE__*/_jsx(Skeleton,{height:\"36px\",mb:\"4px\"})},count);})]})]});};export default Results;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Voting/Proposal/Results.tsx"],"names":["React","Box","Text","Flex","Card","CardBody","CardHeader","Heading","Progress","Skeleton","Tag","CheckmarkCircleIcon","useWeb3React","times","VotingStateLoadingStatus","useGetVotingStateLoadingStatus","formatNumber","useTranslation","calculateVoteResults","getTotalFromVotes","TextEllipsis","Results","choices","votes","t","results","votingStatus","account","totalVotes","IDLE","map","choice","index","choiceVotes","totalChoiceVote","progress","hasVoted","some","vote","voter","toLowerCase","total","toLocaleString","undefined","minimumFractionDigits","maximumFractionDigits","LOADING","length","count"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n  Box,\n  Text,\n  Flex,\n  Card,\n  CardBody,\n  CardHeader,\n  Heading,\n  Progress,\n  Skeleton,\n  Tag,\n  CheckmarkCircleIcon,\n} from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport times from 'lodash/times'\nimport { Vote, VotingStateLoadingStatus } from 'state/types'\nimport { useGetVotingStateLoadingStatus } from 'state/voting/hooks'\nimport { formatNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { calculateVoteResults, getTotalFromVotes } from '../helpers'\nimport TextEllipsis from '../components/TextEllipsis'\n\ninterface ResultsProps {\n  choices: string[]\n  votes: Vote[]\n}\n\nconst Results: React.FC<ResultsProps> = ({ choices, votes }) => {\n  const { t } = useTranslation()\n  const results = calculateVoteResults(votes)\n  const votingStatus = useGetVotingStateLoadingStatus()\n  const { account } = useWeb3React()\n  const totalVotes = getTotalFromVotes(votes)\n\n  return (\n    <Card>\n      <CardHeader>\n        <Heading as=\"h3\" scale=\"md\">\n          {t('Current Results')}\n        </Heading>\n      </CardHeader>\n      <CardBody>\n        {votingStatus === VotingStateLoadingStatus.IDLE &&\n          choices.map((choice, index) => {\n            const choiceVotes = results[choice] || []\n            const totalChoiceVote = getTotalFromVotes(choiceVotes)\n            const progress = totalVotes === 0 ? 0 : (totalChoiceVote / totalVotes) * 100\n            const hasVoted = choiceVotes.some((vote) => {\n              return account && vote.voter.toLowerCase() === account.toLowerCase()\n            })\n\n            return (\n              <Box key={choice} mt={index > 0 ? '24px' : '0px'}>\n                <Flex alignItems=\"center\" mb=\"8px\">\n                  <TextEllipsis mb=\"4px\" title={choice}>\n                    {choice}\n                  </TextEllipsis>\n                  {hasVoted && (\n                    <Tag variant=\"success\" outline ml=\"8px\">\n                      <CheckmarkCircleIcon mr=\"4px\" /> {t('Voted')}\n                    </Tag>\n                  )}\n                </Flex>\n                <Box mb=\"4px\">\n                  <Progress primaryStep={progress} scale=\"sm\" />\n                </Box>\n                <Flex alignItems=\"center\" justifyContent=\"space-between\">\n                  <Text color=\"textSubtle\">{t('%total% Votes', { total: formatNumber(totalChoiceVote, 0, 2) })}</Text>\n                  <Text>\n                    {progress.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}%\n                  </Text>\n                </Flex>\n              </Box>\n            )\n          })}\n\n        {votingStatus === VotingStateLoadingStatus.LOADING &&\n          times(choices.length).map((count, index) => {\n            return (\n              <Box key={count} mt={index > 0 ? '24px' : '0px'}>\n                <Skeleton height=\"36px\" mb=\"4px\" />\n              </Box>\n            )\n          })}\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default Results\n"]},"metadata":{},"sourceType":"module"}