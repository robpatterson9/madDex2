{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React,{useState,useEffect,useMemo}from'react';import styled from'styled-components';import{useParams}from'react-router';import{useWeb3React}from'@web3-react/core';import{Flex}from'@pancakeswap/uikit';import orderBy from'lodash/orderBy';import Page from'components/Layout/Page';import{useFetchByBunnyId,useGetAllBunniesByBunnyId}from'state/nftMarket/hooks';import{getNftsFromCollectionApi}from'state/nftMarket/helpers';import PageLoader from'components/Loader/PageLoader';import usePreviousValue from'hooks/usePreviousValue';import useRefresh from'hooks/useRefresh';import MainNFTCard from'./MainNFTCard';import ManageCard from'./ManageCard';import PropertiesCard from'./PropertiesCard';import DetailsCard from'./DetailsCard';import MoreFromThisCollection from'./MoreFromThisCollection';import ForSaleTableCard from'./ForSaleTableCard';import{pancakeBunniesAddress}from'../../constants';import{sortNFTsByPriceBuilder}from'./ForSaleTableCard/utils';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TwoColumnsContainer=styled(Flex)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  gap: 22px;\\n  align-items: flex-start;\\n  & > div:first-child {\\n    flex: 1;\\n    gap: 20px;\\n  }\\n  & > div:last-child {\\n    flex: 2;\\n  }\\n\"])));var IndividualNFTPage=function IndividualNFTPage(){var _cheapestBunny$market,_cheapestBunny$market2;// For PancakeBunnies tokenId in url is really bunnyId\nvar _useWeb3React=useWeb3React(),account=_useWeb3React.account;var _useParams=useParams(),collectionAddress=_useParams.collectionAddress,tokenId=_useParams.tokenId;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),attributesDistribution=_useState2[0],setAttributesDistribution=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),nothingForSaleBunny=_useState4[0],setNothingForSaleBunny=_useState4[1];var allBunnies=useGetAllBunniesByBunnyId(tokenId);var _useState5=useState('asc'),_useState6=_slicedToArray(_useState5,2),priceSort=_useState6[0],setPriceSort=_useState6[1];var previousPriceSort=usePreviousValue(priceSort);var _useFetchByBunnyId=useFetchByBunnyId(tokenId),isFetchingMoreNfts=_useFetchByBunnyId.isFetchingMoreNfts,latestFetchAt=_useFetchByBunnyId.latestFetchAt,fetchMorePancakeBunnies=_useFetchByBunnyId.fetchMorePancakeBunnies;var _useRefresh=useRefresh(),fastRefresh=_useRefresh.fastRefresh;var bunniesSortedByPrice=orderBy(allBunnies,function(nft){return parseFloat(nft.marketData.currentAskPrice);});var allBunniesFromOtherSellers=account?bunniesSortedByPrice.filter(function(bunny){return bunny.marketData.currentSeller!==account.toLowerCase();}):bunniesSortedByPrice;var cheapestBunny=bunniesSortedByPrice[0];var cheapestBunnyFromOtherSellers=allBunniesFromOtherSellers[0];var isPBCollection=collectionAddress.toLowerCase()===pancakeBunniesAddress.toLowerCase();// useUpdateNftInfo(collectionAddress)\nuseEffect(function(){// Fetch first 30 NFTs on page load\n// And then query every 10 sec in case some new (cheaper) NFTs were listed\nvar msSinceLastUpdate=Date.now()-latestFetchAt;// Check for last update is here to prevent too many request due to fetchMorePancakeBunnies updating too often\n// (it can't be reasonably wrapper in useCallback because the tokens are updated every time you call it, which is the whole point)\nif(msSinceLastUpdate>10000&&!isFetchingMoreNfts){fetchMorePancakeBunnies(priceSort);}},[priceSort,fetchMorePancakeBunnies,isFetchingMoreNfts,latestFetchAt,fastRefresh]);useEffect(function(){var fetchTokens=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var apiResponse;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getNftsFromCollectionApi(collectionAddress);case 2:apiResponse=_context.sent;setAttributesDistribution(apiResponse.attributesDistribution);case 4:case\"end\":return _context.stop();}}},_callee);}));return function fetchTokens(){return _ref.apply(this,arguments);};}();fetchTokens();},[collectionAddress,setAttributesDistribution]);useEffect(function(){// Fetch most expensive items if user selects other sorting\nif(previousPriceSort&&previousPriceSort!==priceSort){fetchMorePancakeBunnies(priceSort);}},[fetchMorePancakeBunnies,priceSort,previousPriceSort]);useEffect(function(){var fetchBasicBunnyData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _yield$getNftsFromCol,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return getNftsFromCollectionApi(pancakeBunniesAddress);case 2:_yield$getNftsFromCol=_context2.sent;data=_yield$getNftsFromCol.data;setNothingForSaleBunny({// In this case tokenId doesn't matter, this token can't be bought\ntokenId:data[tokenId].name,name:data[tokenId].name,description:data[tokenId].description,collectionName:data[tokenId].collection.name,collectionAddress:pancakeBunniesAddress,image:data[tokenId].image,attributes:[{traitType:'bunnyId',value:tokenId,displayType:null}]});case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchBasicBunnyData(){return _ref2.apply(this,arguments);};}();// If bunny id has no listings on the market - get basic bunny info\nif(isPBCollection&&!cheapestBunny){fetchBasicBunnyData();}},[cheapestBunny,tokenId,isPBCollection]);var sortedNfts=useMemo(function(){return allBunnies.sort(sortNFTsByPriceBuilder({priceSort:priceSort}));},[allBunnies,priceSort]);if(!cheapestBunny&&!nothingForSaleBunny){// TODO redirect to nft market page if collection or bunny id does not exist (came here from some bad url)\n// That would require tracking loading states and stuff...\n// For now this if is used to show loading spinner while we're getting the data\nreturn/*#__PURE__*/_jsx(PageLoader,{});}var togglePriceSort=function togglePriceSort(){setPriceSort(function(currentValue){return currentValue==='asc'?'desc':'asc';});};var getBunnyIdRarity=function getBunnyIdRarity(){if(attributesDistribution){var total=Object.values(attributesDistribution).reduce(function(acc,cur){return acc+cur;},0);return(attributesDistribution[tokenId]/total*100).toFixed(2);}return null;};var properties=isPBCollection?(cheapestBunny===null||cheapestBunny===void 0?void 0:cheapestBunny.attributes)||(nothingForSaleBunny===null||nothingForSaleBunny===void 0?void 0:nothingForSaleBunny.attributes):[];var propertyRarity=isPBCollection?{bunnyId:getBunnyIdRarity()}:{};return/*#__PURE__*/_jsxs(Page,{children:[/*#__PURE__*/_jsx(MainNFTCard,{cheapestNft:cheapestBunny,cheapestNftFromOtherSellers:cheapestBunnyFromOtherSellers,nothingForSaleBunny:nothingForSaleBunny}),/*#__PURE__*/_jsxs(TwoColumnsContainer,{flexDirection:['column','column','row'],children:[/*#__PURE__*/_jsxs(Flex,{flexDirection:\"column\",width:\"100%\",children:[/*#__PURE__*/_jsx(ManageCard,{bunnyId:tokenId,lowestPrice:cheapestBunny===null||cheapestBunny===void 0?void 0:(_cheapestBunny$market=cheapestBunny.marketData)===null||_cheapestBunny$market===void 0?void 0:_cheapestBunny$market.currentAskPrice}),/*#__PURE__*/_jsx(PropertiesCard,{properties:properties,rarity:propertyRarity}),/*#__PURE__*/_jsx(DetailsCard,{contractAddress:collectionAddress,ipfsJson:cheapestBunny===null||cheapestBunny===void 0?void 0:(_cheapestBunny$market2=cheapestBunny.marketData)===null||_cheapestBunny$market2===void 0?void 0:_cheapestBunny$market2.metadataUrl})]}),/*#__PURE__*/_jsx(ForSaleTableCard,{nftsForSale:sortedNfts,bunnyId:tokenId,totalForSale:allBunnies.length,loadMore:fetchMorePancakeBunnies,priceSort:priceSort,togglePriceSort:togglePriceSort,isFetchingMoreNfts:isFetchingMoreNfts})]}),/*#__PURE__*/_jsx(MoreFromThisCollection,{collectionAddress:collectionAddress,currentTokenName:(cheapestBunny===null||cheapestBunny===void 0?void 0:cheapestBunny.name)||(nothingForSaleBunny===null||nothingForSaleBunny===void 0?void 0:nothingForSaleBunny.name)})]});};export default IndividualNFTPage;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Collection/IndividualNFTPage/index.tsx"],"names":["React","useState","useEffect","useMemo","styled","useParams","useWeb3React","Flex","orderBy","Page","useFetchByBunnyId","useGetAllBunniesByBunnyId","getNftsFromCollectionApi","PageLoader","usePreviousValue","useRefresh","MainNFTCard","ManageCard","PropertiesCard","DetailsCard","MoreFromThisCollection","ForSaleTableCard","pancakeBunniesAddress","sortNFTsByPriceBuilder","TwoColumnsContainer","IndividualNFTPage","account","collectionAddress","tokenId","attributesDistribution","setAttributesDistribution","nothingForSaleBunny","setNothingForSaleBunny","allBunnies","priceSort","setPriceSort","previousPriceSort","isFetchingMoreNfts","latestFetchAt","fetchMorePancakeBunnies","fastRefresh","bunniesSortedByPrice","nft","parseFloat","marketData","currentAskPrice","allBunniesFromOtherSellers","filter","bunny","currentSeller","toLowerCase","cheapestBunny","cheapestBunnyFromOtherSellers","isPBCollection","msSinceLastUpdate","Date","now","fetchTokens","apiResponse","fetchBasicBunnyData","data","name","description","collectionName","collection","image","attributes","traitType","value","displayType","sortedNfts","sort","togglePriceSort","currentValue","getBunnyIdRarity","total","Object","values","reduce","acc","cur","toFixed","properties","propertyRarity","bunnyId","metadataUrl","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\nimport styled from 'styled-components'\nimport { useParams } from 'react-router'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex } from '@pancakeswap/uikit'\nimport orderBy from 'lodash/orderBy'\nimport Page from 'components/Layout/Page'\nimport { useFetchByBunnyId, useGetAllBunniesByBunnyId } from 'state/nftMarket/hooks'\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport PageLoader from 'components/Loader/PageLoader'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport useRefresh from 'hooks/useRefresh'\nimport MainNFTCard from './MainNFTCard'\nimport ManageCard from './ManageCard'\nimport PropertiesCard from './PropertiesCard'\nimport DetailsCard from './DetailsCard'\nimport MoreFromThisCollection from './MoreFromThisCollection'\nimport ForSaleTableCard from './ForSaleTableCard'\nimport { pancakeBunniesAddress } from '../../constants'\nimport { sortNFTsByPriceBuilder } from './ForSaleTableCard/utils'\nimport { SortType } from '../../types'\n\nconst TwoColumnsContainer = styled(Flex)`\n  gap: 22px;\n  align-items: flex-start;\n  & > div:first-child {\n    flex: 1;\n    gap: 20px;\n  }\n  & > div:last-child {\n    flex: 2;\n  }\n`\n\nconst IndividualNFTPage = () => {\n  // For PancakeBunnies tokenId in url is really bunnyId\n  const { account } = useWeb3React()\n  const { collectionAddress, tokenId } = useParams<{ collectionAddress: string; tokenId: string }>()\n  const [attributesDistribution, setAttributesDistribution] = useState<{ [key: string]: number }>(null)\n  const [nothingForSaleBunny, setNothingForSaleBunny] = useState<NftToken>(null)\n  const allBunnies = useGetAllBunniesByBunnyId(tokenId)\n  const [priceSort, setPriceSort] = useState<SortType>('asc')\n  const previousPriceSort = usePreviousValue(priceSort)\n  const { isFetchingMoreNfts, latestFetchAt, fetchMorePancakeBunnies } = useFetchByBunnyId(tokenId)\n  const { fastRefresh } = useRefresh()\n  const bunniesSortedByPrice = orderBy(allBunnies, (nft) => parseFloat(nft.marketData.currentAskPrice))\n  const allBunniesFromOtherSellers = account\n    ? bunniesSortedByPrice.filter((bunny) => bunny.marketData.currentSeller !== account.toLowerCase())\n    : bunniesSortedByPrice\n  const cheapestBunny = bunniesSortedByPrice[0]\n  const cheapestBunnyFromOtherSellers = allBunniesFromOtherSellers[0]\n\n  const isPBCollection = collectionAddress.toLowerCase() === pancakeBunniesAddress.toLowerCase()\n\n  // useUpdateNftInfo(collectionAddress)\n\n  useEffect(() => {\n    // Fetch first 30 NFTs on page load\n    // And then query every 10 sec in case some new (cheaper) NFTs were listed\n    const msSinceLastUpdate = Date.now() - latestFetchAt\n    // Check for last update is here to prevent too many request due to fetchMorePancakeBunnies updating too often\n    // (it can't be reasonably wrapper in useCallback because the tokens are updated every time you call it, which is the whole point)\n    if (msSinceLastUpdate > 10000 && !isFetchingMoreNfts) {\n      fetchMorePancakeBunnies(priceSort)\n    }\n  }, [priceSort, fetchMorePancakeBunnies, isFetchingMoreNfts, latestFetchAt, fastRefresh])\n\n  useEffect(() => {\n    const fetchTokens = async () => {\n      const apiResponse = await getNftsFromCollectionApi(collectionAddress)\n      setAttributesDistribution(apiResponse.attributesDistribution)\n    }\n\n    fetchTokens()\n  }, [collectionAddress, setAttributesDistribution])\n\n  useEffect(() => {\n    // Fetch most expensive items if user selects other sorting\n    if (previousPriceSort && previousPriceSort !== priceSort) {\n      fetchMorePancakeBunnies(priceSort)\n    }\n  }, [fetchMorePancakeBunnies, priceSort, previousPriceSort])\n\n  useEffect(() => {\n    const fetchBasicBunnyData = async () => {\n      const { data } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      setNothingForSaleBunny({\n        // In this case tokenId doesn't matter, this token can't be bought\n        tokenId: data[tokenId].name,\n        name: data[tokenId].name,\n        description: data[tokenId].description,\n        collectionName: data[tokenId].collection.name,\n        collectionAddress: pancakeBunniesAddress,\n        image: data[tokenId].image,\n        attributes: [\n          {\n            traitType: 'bunnyId',\n            value: tokenId,\n            displayType: null,\n          },\n        ],\n      })\n    }\n    // If bunny id has no listings on the market - get basic bunny info\n    if (isPBCollection && !cheapestBunny) {\n      fetchBasicBunnyData()\n    }\n  }, [cheapestBunny, tokenId, isPBCollection])\n\n  const sortedNfts = useMemo(() => allBunnies.sort(sortNFTsByPriceBuilder({ priceSort })), [allBunnies, priceSort])\n\n  if (!cheapestBunny && !nothingForSaleBunny) {\n    // TODO redirect to nft market page if collection or bunny id does not exist (came here from some bad url)\n    // That would require tracking loading states and stuff...\n\n    // For now this if is used to show loading spinner while we're getting the data\n    return <PageLoader />\n  }\n\n  const togglePriceSort = () => {\n    setPriceSort((currentValue) => (currentValue === 'asc' ? 'desc' : 'asc'))\n  }\n\n  const getBunnyIdRarity = () => {\n    if (attributesDistribution) {\n      const total = Object.values(attributesDistribution).reduce((acc, cur) => {\n        return acc + cur\n      }, 0)\n      return ((attributesDistribution[tokenId] / total) * 100).toFixed(2)\n    }\n    return null\n  }\n\n  const properties = isPBCollection ? cheapestBunny?.attributes || nothingForSaleBunny?.attributes : []\n\n  const propertyRarity = isPBCollection ? { bunnyId: getBunnyIdRarity() } : {}\n\n  return (\n    <Page>\n      <MainNFTCard\n        cheapestNft={cheapestBunny}\n        cheapestNftFromOtherSellers={cheapestBunnyFromOtherSellers}\n        nothingForSaleBunny={nothingForSaleBunny}\n      />\n      <TwoColumnsContainer flexDirection={['column', 'column', 'row']}>\n        <Flex flexDirection=\"column\" width=\"100%\">\n          <ManageCard bunnyId={tokenId} lowestPrice={cheapestBunny?.marketData?.currentAskPrice} />\n          <PropertiesCard properties={properties} rarity={propertyRarity} />\n          <DetailsCard contractAddress={collectionAddress} ipfsJson={cheapestBunny?.marketData?.metadataUrl} />\n        </Flex>\n        <ForSaleTableCard\n          nftsForSale={sortedNfts}\n          bunnyId={tokenId}\n          totalForSale={allBunnies.length}\n          loadMore={fetchMorePancakeBunnies}\n          priceSort={priceSort}\n          togglePriceSort={togglePriceSort}\n          isFetchingMoreNfts={isFetchingMoreNfts}\n        />\n      </TwoColumnsContainer>\n      <MoreFromThisCollection\n        collectionAddress={collectionAddress}\n        currentTokenName={cheapestBunny?.name || nothingForSaleBunny?.name}\n      />\n    </Page>\n  )\n}\n\nexport default IndividualNFTPage\n"]},"metadata":{},"sourceType":"module"}