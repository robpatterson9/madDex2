{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useMemo,useState}from'react';import isEmpty from'lodash/isEmpty';import{useGetCollections}from'state/nftMarket/hooks';import{NftLocation}from'state/nftMarket/types';import{getCompleteAccountNftData}from'state/nftMarket/helpers';var useFetchUserNfts=function useFetchUserNfts(account,profile,isProfileFetching){var _profile$tokenId;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),combinedNfts=_useState2[0],setCombinedNfts=_useState2[1];var _useState3=useState(true),_useState4=_slicedToArray(_useState3,2),isLoading=_useState4[0],setIsLoading=_useState4[1];var collections=useGetCollections();var hasProfileNft=profile===null||profile===void 0?void 0:profile.tokenId;var profileNftTokenId=profile===null||profile===void 0?void 0:(_profile$tokenId=profile.tokenId)===null||_profile$tokenId===void 0?void 0:_profile$tokenId.toString();var profileNftCollectionAddress=profile===null||profile===void 0?void 0:profile.collectionAddress;var profileNftWithCollectionAddress=useMemo(function(){if(hasProfileNft){return{tokenId:profileNftTokenId,collectionAddress:profileNftCollectionAddress,nftLocation:NftLocation.PROFILE};}return null;},[profileNftTokenId,profileNftCollectionAddress,hasProfileNft]);useEffect(function(){var getNfts=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var completeNftData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getCompleteAccountNftData(account,collections,profileNftWithCollectionAddress);case 2:completeNftData=_context.sent;setCombinedNfts(completeNftData);setIsLoading(false);case 5:case\"end\":return _context.stop();}}},_callee);}));return function getNfts(){return _ref.apply(this,arguments);};}();if(!isProfileFetching&&!isEmpty(collections)){setIsLoading(true);getNfts();}},[account,collections,isProfileFetching,profileNftWithCollectionAddress]);return{nfts:combinedNfts,isLoading:isLoading};};export default useFetchUserNfts;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Profile/hooks/useGetNftsForAddress.tsx"],"names":["useEffect","useMemo","useState","isEmpty","useGetCollections","NftLocation","getCompleteAccountNftData","useFetchUserNfts","account","profile","isProfileFetching","combinedNfts","setCombinedNfts","isLoading","setIsLoading","collections","hasProfileNft","tokenId","profileNftTokenId","toString","profileNftCollectionAddress","collectionAddress","profileNftWithCollectionAddress","nftLocation","PROFILE","getNfts","completeNftData","nfts"],"mappings":"qcAAA,OAASA,SAAT,CAAoBC,OAApB,CAA6BC,QAA7B,KAA6C,OAA7C,CACA,MAAOC,CAAAA,OAAP,KAAoB,gBAApB,CACA,OAASC,iBAAT,KAAkC,uBAAlC,CACA,OAASC,WAAT,KAAsC,uBAAtC,CAEA,OAASC,yBAAT,KAA0C,yBAA1C,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,OAAD,CAAkBC,OAAlB,CAAoCC,iBAApC,CAAmE,sBAC1F,cAAwCR,QAAQ,CAAa,EAAb,CAAhD,wCAAOS,YAAP,eAAqBC,eAArB,eACA,eAAkCV,QAAQ,CAAC,IAAD,CAA1C,yCAAOW,SAAP,eAAkBC,YAAlB,eACA,GAAMC,CAAAA,WAAW,CAAGX,iBAAiB,EAArC,CAEA,GAAMY,CAAAA,aAAa,CAAGP,OAAH,SAAGA,OAAH,iBAAGA,OAAO,CAAEQ,OAA/B,CACA,GAAMC,CAAAA,iBAAiB,CAAGT,OAAH,SAAGA,OAAH,mCAAGA,OAAO,CAAEQ,OAAZ,2CAAG,iBAAkBE,QAAlB,EAA1B,CACA,GAAMC,CAAAA,2BAA2B,CAAGX,OAAH,SAAGA,OAAH,iBAAGA,OAAO,CAAEY,iBAA7C,CAEA,GAAMC,CAAAA,+BAA+B,CAAGrB,OAAO,CAAC,UAAM,CACpD,GAAIe,aAAJ,CAAmB,CACjB,MAAO,CACLC,OAAO,CAAEC,iBADJ,CAELG,iBAAiB,CAAED,2BAFd,CAGLG,WAAW,CAAElB,WAAW,CAACmB,OAHpB,CAAP,CAKD,CACD,MAAO,KAAP,CACD,CAT8C,CAS5C,CAACN,iBAAD,CAAoBE,2BAApB,CAAiDJ,aAAjD,CAT4C,CAA/C,CAWAhB,SAAS,CAAC,UAAM,CACd,GAAMyB,CAAAA,OAAO,0FAAG,6KACgBnB,CAAAA,yBAAyB,CAACE,OAAD,CAAUO,WAAV,CAAuBO,+BAAvB,CADzC,QACRI,eADQ,eAEdd,eAAe,CAACc,eAAD,CAAf,CACAZ,YAAY,CAAC,KAAD,CAAZ,CAHc,sDAAH,kBAAPW,CAAAA,OAAO,0CAAb,CAMA,GAAI,CAACf,iBAAD,EAAsB,CAACP,OAAO,CAACY,WAAD,CAAlC,CAAiD,CAC/CD,YAAY,CAAC,IAAD,CAAZ,CACAW,OAAO,GACR,CACF,CAXQ,CAWN,CAACjB,OAAD,CAAUO,WAAV,CAAuBL,iBAAvB,CAA0CY,+BAA1C,CAXM,CAAT,CAaA,MAAO,CAAEK,IAAI,CAAEhB,YAAR,CAAsBE,SAAS,CAATA,SAAtB,CAAP,CACD,CAlCD,CAoCA,cAAeN,CAAAA,gBAAf","sourcesContent":["import { useEffect, useMemo, useState } from 'react'\nimport isEmpty from 'lodash/isEmpty'\nimport { useGetCollections } from 'state/nftMarket/hooks'\nimport { NftLocation, NftToken } from 'state/nftMarket/types'\nimport { Profile } from 'state/types'\nimport { getCompleteAccountNftData } from 'state/nftMarket/helpers'\n\nconst useFetchUserNfts = (account: string, profile: Profile, isProfileFetching: boolean) => {\n  const [combinedNfts, setCombinedNfts] = useState<NftToken[]>([])\n  const [isLoading, setIsLoading] = useState(true)\n  const collections = useGetCollections()\n\n  const hasProfileNft = profile?.tokenId\n  const profileNftTokenId = profile?.tokenId?.toString()\n  const profileNftCollectionAddress = profile?.collectionAddress\n\n  const profileNftWithCollectionAddress = useMemo(() => {\n    if (hasProfileNft) {\n      return {\n        tokenId: profileNftTokenId,\n        collectionAddress: profileNftCollectionAddress,\n        nftLocation: NftLocation.PROFILE,\n      }\n    }\n    return null\n  }, [profileNftTokenId, profileNftCollectionAddress, hasProfileNft])\n\n  useEffect(() => {\n    const getNfts = async () => {\n      const completeNftData = await getCompleteAccountNftData(account, collections, profileNftWithCollectionAddress)\n      setCombinedNfts(completeNftData)\n      setIsLoading(false)\n    }\n\n    if (!isProfileFetching && !isEmpty(collections)) {\n      setIsLoading(true)\n      getNfts()\n    }\n  }, [account, collections, isProfileFetching, profileNftWithCollectionAddress])\n\n  return { nfts: combinedNfts, isLoading }\n}\n\nexport default useFetchUserNfts\n"]},"metadata":{},"sourceType":"module"}