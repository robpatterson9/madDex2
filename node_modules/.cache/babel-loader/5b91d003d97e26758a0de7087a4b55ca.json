{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport { getActivePools } from 'utils/calls';\nimport { getAddress } from 'utils/addressHelpers';\nimport { simpleRpcProvider } from 'utils/providers';\nimport { getVotingPower } from '../helpers';\nconst initialState = {\n  verificationHash: null,\n  cakeBalance: 0,\n  cakeVaultBalance: 0,\n  cakePoolBalance: 0,\n  poolsBalance: 0,\n  cakeBnbLpBalance: 0,\n  total: 0\n};\n\nconst useGetVotingPower = (block, isActive = true) => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const [votingPower, setVotingPower] = useState(initialState);\n  const [isLoading, setIsLoading] = useState(!!account);\n  useEffect(() => {\n    const fetchVotingPower = async () => {\n      setIsLoading(true);\n\n      try {\n        const blockNumber = block || (await simpleRpcProvider.getBlockNumber());\n        const eligiblePools = await getActivePools(blockNumber);\n        const poolAddresses = eligiblePools.map(({\n          contractAddress\n        }) => getAddress(contractAddress));\n        const {\n          cakeBalance,\n          cakeBnbLpBalance,\n          cakePoolBalance,\n          total,\n          poolsBalance,\n          cakeVaultBalance,\n          verificationHash\n        } = await getVotingPower(account, poolAddresses, blockNumber);\n\n        if (isActive) {\n          setVotingPower(prevVotingPower => ({ ...prevVotingPower,\n            verificationHash,\n            cakeBalance: parseFloat(cakeBalance),\n            cakeBnbLpBalance: parseFloat(cakeBnbLpBalance),\n            cakePoolBalance: parseFloat(cakePoolBalance),\n            poolsBalance: parseFloat(poolsBalance),\n            cakeVaultBalance: parseFloat(cakeVaultBalance),\n            total: parseFloat(total)\n          }));\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    if (account && isActive) {\n      fetchVotingPower();\n    }\n  }, [account, block, setVotingPower, isActive, setIsLoading]);\n  return { ...votingPower,\n    isLoading\n  };\n};\n\n_s(useGetVotingPower, \"XT26o7mNPWR21ECToQ3wCkK+Z1E=\", false, function () {\n  return [useWeb3React];\n});\n\nexport default useGetVotingPower;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Voting/hooks/useGetVotingPower.tsx"],"names":["useState","useEffect","useWeb3React","getActivePools","getAddress","simpleRpcProvider","getVotingPower","initialState","verificationHash","cakeBalance","cakeVaultBalance","cakePoolBalance","poolsBalance","cakeBnbLpBalance","total","useGetVotingPower","block","isActive","account","votingPower","setVotingPower","isLoading","setIsLoading","fetchVotingPower","blockNumber","getBlockNumber","eligiblePools","poolAddresses","map","contractAddress","prevVotingPower","parseFloat"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,iBAAT,QAAkC,iBAAlC;AACA,SAASC,cAAT,QAA+B,YAA/B;AAYA,MAAMC,YAAmB,GAAG;AAC1BC,EAAAA,gBAAgB,EAAE,IADQ;AAE1BC,EAAAA,WAAW,EAAE,CAFa;AAG1BC,EAAAA,gBAAgB,EAAE,CAHQ;AAI1BC,EAAAA,eAAe,EAAE,CAJS;AAK1BC,EAAAA,YAAY,EAAE,CALY;AAM1BC,EAAAA,gBAAgB,EAAE,CANQ;AAO1BC,EAAAA,KAAK,EAAE;AAPmB,CAA5B;;AAUA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAiBC,QAAQ,GAAG,IAA5B,KAAqE;AAAA;;AAC7F,QAAM;AAAEC,IAAAA;AAAF,MAAchB,YAAY,EAAhC;AACA,QAAM,CAACiB,WAAD,EAAcC,cAAd,IAAgCpB,QAAQ,CAACO,YAAD,CAA9C;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4BtB,QAAQ,CAAC,CAAC,CAACkB,OAAH,CAA1C;AAEAjB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMsB,gBAAgB,GAAG,YAAY;AACnCD,MAAAA,YAAY,CAAC,IAAD,CAAZ;;AAEA,UAAI;AACF,cAAME,WAAW,GAAGR,KAAK,KAAK,MAAMX,iBAAiB,CAACoB,cAAlB,EAAX,CAAzB;AACA,cAAMC,aAAa,GAAG,MAAMvB,cAAc,CAACqB,WAAD,CAA1C;AACA,cAAMG,aAAa,GAAGD,aAAa,CAACE,GAAd,CAAkB,CAAC;AAAEC,UAAAA;AAAF,SAAD,KAAyBzB,UAAU,CAACyB,eAAD,CAArD,CAAtB;AACA,cAAM;AACJpB,UAAAA,WADI;AAEJI,UAAAA,gBAFI;AAGJF,UAAAA,eAHI;AAIJG,UAAAA,KAJI;AAKJF,UAAAA,YALI;AAMJF,UAAAA,gBANI;AAOJF,UAAAA;AAPI,YAQF,MAAMF,cAAc,CAACY,OAAD,EAAUS,aAAV,EAAyBH,WAAzB,CARxB;;AAUA,YAAIP,QAAJ,EAAc;AACZG,UAAAA,cAAc,CAAEU,eAAD,KAAsB,EACnC,GAAGA,eADgC;AAEnCtB,YAAAA,gBAFmC;AAGnCC,YAAAA,WAAW,EAAEsB,UAAU,CAACtB,WAAD,CAHY;AAInCI,YAAAA,gBAAgB,EAAEkB,UAAU,CAAClB,gBAAD,CAJO;AAKnCF,YAAAA,eAAe,EAAEoB,UAAU,CAACpB,eAAD,CALQ;AAMnCC,YAAAA,YAAY,EAAEmB,UAAU,CAACnB,YAAD,CANW;AAOnCF,YAAAA,gBAAgB,EAAEqB,UAAU,CAACrB,gBAAD,CAPO;AAQnCI,YAAAA,KAAK,EAAEiB,UAAU,CAACjB,KAAD;AARkB,WAAtB,CAAD,CAAd;AAUD;AACF,OA1BD,SA0BU;AACRQ,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,KAhCD;;AAkCA,QAAIJ,OAAO,IAAID,QAAf,EAAyB;AACvBM,MAAAA,gBAAgB;AACjB;AACF,GAtCQ,EAsCN,CAACL,OAAD,EAAUF,KAAV,EAAiBI,cAAjB,EAAiCH,QAAjC,EAA2CK,YAA3C,CAtCM,CAAT;AAwCA,SAAO,EAAE,GAAGH,WAAL;AAAkBE,IAAAA;AAAlB,GAAP;AACD,CA9CD;;GAAMN,iB;UACgBb,Y;;;AA+CtB,eAAea,iBAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { getActivePools } from 'utils/calls'\nimport { getAddress } from 'utils/addressHelpers'\nimport { simpleRpcProvider } from 'utils/providers'\nimport { getVotingPower } from '../helpers'\n\ninterface State {\n  verificationHash: string\n  cakeBalance: number\n  cakeVaultBalance: number\n  cakePoolBalance: number\n  poolsBalance: number\n  cakeBnbLpBalance: number\n  total: number\n}\n\nconst initialState: State = {\n  verificationHash: null,\n  cakeBalance: 0,\n  cakeVaultBalance: 0,\n  cakePoolBalance: 0,\n  poolsBalance: 0,\n  cakeBnbLpBalance: 0,\n  total: 0,\n}\n\nconst useGetVotingPower = (block?: number, isActive = true): State & { isLoading: boolean } => {\n  const { account } = useWeb3React()\n  const [votingPower, setVotingPower] = useState(initialState)\n  const [isLoading, setIsLoading] = useState(!!account)\n\n  useEffect(() => {\n    const fetchVotingPower = async () => {\n      setIsLoading(true)\n\n      try {\n        const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\n        const eligiblePools = await getActivePools(blockNumber)\n        const poolAddresses = eligiblePools.map(({ contractAddress }) => getAddress(contractAddress))\n        const {\n          cakeBalance,\n          cakeBnbLpBalance,\n          cakePoolBalance,\n          total,\n          poolsBalance,\n          cakeVaultBalance,\n          verificationHash,\n        } = await getVotingPower(account, poolAddresses, blockNumber)\n\n        if (isActive) {\n          setVotingPower((prevVotingPower) => ({\n            ...prevVotingPower,\n            verificationHash,\n            cakeBalance: parseFloat(cakeBalance),\n            cakeBnbLpBalance: parseFloat(cakeBnbLpBalance),\n            cakePoolBalance: parseFloat(cakePoolBalance),\n            poolsBalance: parseFloat(poolsBalance),\n            cakeVaultBalance: parseFloat(cakeVaultBalance),\n            total: parseFloat(total),\n          }))\n        }\n      } finally {\n        setIsLoading(false)\n      }\n    }\n\n    if (account && isActive) {\n      fetchVotingPower()\n    }\n  }, [account, block, setVotingPower, isActive, setIsLoading])\n\n  return { ...votingPower, isLoading }\n}\n\nexport default useGetVotingPower\n"]},"metadata":{},"sourceType":"module"}