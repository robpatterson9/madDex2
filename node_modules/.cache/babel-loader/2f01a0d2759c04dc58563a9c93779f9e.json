{"ast":null,"code":"import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import{gql}from'graphql-request';import{useState,useEffect}from'react';import{multiQuery}from'views/Info/utils/infoQueryHelpers';import{BLOCKS_CLIENT}from'config/constants/endpoints';var getBlockSubqueries=function getBlockSubqueries(timestamps){return timestamps.map(function(timestamp){return\"t\".concat(timestamp,\":blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: \").concat(timestamp,\", timestamp_lt: \").concat(timestamp+600,\" }) {\\n      number\\n    }\");});};var blocksQueryConstructor=function blocksQueryConstructor(subqueries){return gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"query blocks {\\n    \",\"\\n  }\"])),subqueries);};/**\n * @notice Fetches block objects for an array of timestamps.\n * @param {Array} timestamps\n */export var getBlocksFromTimestamps=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(timestamps){var sortDirection,skipCount,fetchedData,sortingFunction,blocks,_i,_Object$keys,key,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:sortDirection=_args.length>1&&_args[1]!==undefined?_args[1]:'desc';skipCount=_args.length>2&&_args[2]!==undefined?_args[2]:500;if(!((timestamps===null||timestamps===void 0?void 0:timestamps.length)===0)){_context.next=4;break;}return _context.abrupt(\"return\",[]);case 4:_context.next=6;return multiQuery(blocksQueryConstructor,getBlockSubqueries(timestamps),BLOCKS_CLIENT,skipCount);case 6:fetchedData=_context.sent;sortingFunction=sortDirection==='desc'?function(a,b){return b.number-a.number;}:function(a,b){return a.number-b.number;};blocks=[];if(fetchedData){// eslint-disable-next-line no-restricted-syntax\nfor(_i=0,_Object$keys=Object.keys(fetchedData);_i<_Object$keys.length;_i++){key=_Object$keys[_i];if(fetchedData[key].length>0){blocks.push({timestamp:key.split('t')[1],number:parseInt(fetchedData[key][0].number,10)});}}// graphql-request does not guarantee same ordering of batched requests subqueries, hence manual sorting\nblocks.sort(sortingFunction);}return _context.abrupt(\"return\",blocks);case 11:case\"end\":return _context.stop();}}},_callee);}));return function getBlocksFromTimestamps(_x){return _ref.apply(this,arguments);};}();/**\n * for a given array of timestamps, returns block entities\n * @param timestamps\n * @param sortDirection\n * @param skipCount\n */export var useBlocksFromTimestamps=function useBlocksFromTimestamps(timestamps){var sortDirection=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'desc';var skipCount=arguments.length>2&&arguments[2]!==undefined?arguments[2]:1000;var _useState=useState(),_useState2=_slicedToArray(_useState,2),blocks=_useState2[0],setBlocks=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];var timestampsString=JSON.stringify(timestamps);var blocksString=blocks?JSON.stringify(blocks):undefined;useEffect(function(){var fetchData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var timestampsArray,result;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:timestampsArray=JSON.parse(timestampsString);_context2.next=3;return getBlocksFromTimestamps(timestampsArray,sortDirection,skipCount);case 3:result=_context2.sent;if(result.length===0){setError(true);}else{setBlocks(result);}case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchData(){return _ref2.apply(this,arguments);};}();var blocksArray=blocksString?JSON.parse(blocksString):undefined;if(!blocksArray&&!error){fetchData();}},[blocksString,error,skipCount,sortDirection,timestampsString]);return{blocks:blocks,error:error};};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Info/hooks/useBlocksFromTimestamps.ts"],"names":["gql","useState","useEffect","multiQuery","BLOCKS_CLIENT","getBlockSubqueries","timestamps","map","timestamp","blocksQueryConstructor","subqueries","getBlocksFromTimestamps","sortDirection","skipCount","length","fetchedData","sortingFunction","a","b","number","blocks","Object","keys","key","push","split","parseInt","sort","useBlocksFromTimestamps","setBlocks","error","setError","timestampsString","JSON","stringify","blocksString","undefined","fetchData","timestampsArray","parse","result","blocksArray"],"mappings":"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","sourcesContent":["import { gql } from 'graphql-request'\nimport { useState, useEffect } from 'react'\nimport { multiQuery } from 'views/Info/utils/infoQueryHelpers'\nimport { BLOCKS_CLIENT } from 'config/constants/endpoints'\nimport { Block } from 'state/info/types'\n\nconst getBlockSubqueries = (timestamps: number[]) =>\n  timestamps.map((timestamp) => {\n    return `t${timestamp}:blocks(first: 1, orderBy: timestamp, orderDirection: desc, where: { timestamp_gt: ${timestamp}, timestamp_lt: ${\n      timestamp + 600\n    } }) {\n      number\n    }`\n  })\n\nconst blocksQueryConstructor = (subqueries: string[]) => {\n  return gql`query blocks {\n    ${subqueries}\n  }`\n}\n\n/**\n * @notice Fetches block objects for an array of timestamps.\n * @param {Array} timestamps\n */\nexport const getBlocksFromTimestamps = async (\n  timestamps: number[],\n  sortDirection: 'asc' | 'desc' = 'desc',\n  skipCount = 500,\n): Promise<Block[]> => {\n  if (timestamps?.length === 0) {\n    return []\n  }\n\n  const fetchedData: any = await multiQuery(\n    blocksQueryConstructor,\n    getBlockSubqueries(timestamps),\n    BLOCKS_CLIENT,\n    skipCount,\n  )\n\n  const sortingFunction =\n    sortDirection === 'desc' ? (a: Block, b: Block) => b.number - a.number : (a: Block, b: Block) => a.number - b.number\n\n  const blocks: Block[] = []\n  if (fetchedData) {\n    // eslint-disable-next-line no-restricted-syntax\n    for (const key of Object.keys(fetchedData)) {\n      if (fetchedData[key].length > 0) {\n        blocks.push({\n          timestamp: key.split('t')[1],\n          number: parseInt(fetchedData[key][0].number, 10),\n        })\n      }\n    }\n    // graphql-request does not guarantee same ordering of batched requests subqueries, hence manual sorting\n    blocks.sort(sortingFunction)\n  }\n  return blocks\n}\n\n/**\n * for a given array of timestamps, returns block entities\n * @param timestamps\n * @param sortDirection\n * @param skipCount\n */\nexport const useBlocksFromTimestamps = (\n  timestamps: number[],\n  sortDirection: 'asc' | 'desc' = 'desc',\n  skipCount = 1000,\n): {\n  blocks?: Block[]\n  error: boolean\n} => {\n  const [blocks, setBlocks] = useState<Block[]>()\n  const [error, setError] = useState(false)\n\n  const timestampsString = JSON.stringify(timestamps)\n  const blocksString = blocks ? JSON.stringify(blocks) : undefined\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const timestampsArray = JSON.parse(timestampsString)\n      const result = await getBlocksFromTimestamps(timestampsArray, sortDirection, skipCount)\n      if (result.length === 0) {\n        setError(true)\n      } else {\n        setBlocks(result)\n      }\n    }\n    const blocksArray = blocksString ? JSON.parse(blocksString) : undefined\n    if (!blocksArray && !error) {\n      fetchData()\n    }\n  }, [blocksString, error, skipCount, sortDirection, timestampsString])\n\n  return {\n    blocks,\n    error,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}