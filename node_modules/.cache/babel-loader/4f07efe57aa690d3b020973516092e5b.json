{"ast":null,"code":"import poolsConfig from 'config/constants/pools';\nimport sousChefABI from 'config/abi/sousChef.json';\nimport erc20ABI from 'config/abi/erc20.json';\nimport multicall from 'utils/multicall';\nimport { getMasterchefContract } from 'utils/contractHelpers';\nimport { getAddress } from 'utils/addressHelpers';\nimport { simpleRpcProvider } from 'utils/providers';\nimport BigNumber from 'bignumber.js'; // Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\n\nconst nonBnbPools = poolsConfig.filter(pool => pool.stakingToken.symbol !== 'BNB');\nconst bnbPools = poolsConfig.filter(pool => pool.stakingToken.symbol === 'BNB');\nconst nonMasterPools = poolsConfig.filter(pool => pool.sousId !== 0);\nconst masterChefContract = getMasterchefContract();\nexport const fetchPoolsAllowance = async account => {\n  const calls = nonBnbPools.map(pool => ({\n    address: pool.stakingToken.address,\n    name: 'allowance',\n    params: [account, getAddress(pool.contractAddress)]\n  }));\n  const allowances = await multicall(erc20ABI, calls);\n  return nonBnbPools.reduce((acc, pool, index) => ({ ...acc,\n    [pool.sousId]: new BigNumber(allowances[index]).toJSON()\n  }), {});\n};\nexport const fetchUserBalances = async account => {\n  // Non BNB pools\n  const calls = nonBnbPools.map(pool => ({\n    address: pool.stakingToken.address,\n    name: 'balanceOf',\n    params: [account]\n  }));\n  const tokenBalancesRaw = await multicall(erc20ABI, calls);\n  const tokenBalances = nonBnbPools.reduce((acc, pool, index) => ({ ...acc,\n    [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON()\n  }), {}); // BNB pools\n\n  const bnbBalance = await simpleRpcProvider.getBalance(account);\n  const bnbBalances = bnbPools.reduce((acc, pool) => ({ ...acc,\n    [pool.sousId]: new BigNumber(bnbBalance.toString()).toJSON()\n  }), {});\n  return { ...tokenBalances,\n    ...bnbBalances\n  };\n};\nexport const fetchUserStakeBalances = async account => {\n  const calls = nonMasterPools.map(p => ({\n    address: getAddress(p.contractAddress),\n    name: 'userInfo',\n    params: [account]\n  }));\n  const userInfo = await multicall(sousChefABI, calls);\n  const stakedBalances = nonMasterPools.reduce((acc, pool, index) => ({ ...acc,\n    [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON()\n  }), {}); // Cake / Cake pool\n\n  const {\n    amount: masterPoolAmount\n  } = await masterChefContract.userInfo('0', account);\n  return { ...stakedBalances,\n    0: new BigNumber(masterPoolAmount.toString()).toJSON()\n  };\n};\nexport const fetchUserPendingRewards = async account => {\n  const calls = nonMasterPools.map(p => ({\n    address: getAddress(p.contractAddress),\n    name: 'pendingReward',\n    params: [account]\n  }));\n  const res = await multicall(sousChefABI, calls);\n  const pendingRewards = nonMasterPools.reduce((acc, pool, index) => ({ ...acc,\n    [pool.sousId]: new BigNumber(res[index]).toJSON()\n  }), {}); // Cake / Cake pool\n\n  const pendingReward = await masterChefContract.pendingCake('0', account);\n  return { ...pendingRewards,\n    0: new BigNumber(pendingReward.toString()).toJSON()\n  };\n};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/pools/fetchPoolsUser.ts"],"names":["poolsConfig","sousChefABI","erc20ABI","multicall","getMasterchefContract","getAddress","simpleRpcProvider","BigNumber","nonBnbPools","filter","pool","stakingToken","symbol","bnbPools","nonMasterPools","sousId","masterChefContract","fetchPoolsAllowance","account","calls","map","address","name","params","contractAddress","allowances","reduce","acc","index","toJSON","fetchUserBalances","tokenBalancesRaw","tokenBalances","bnbBalance","getBalance","bnbBalances","toString","fetchUserStakeBalances","p","userInfo","stakedBalances","amount","_hex","masterPoolAmount","fetchUserPendingRewards","res","pendingRewards","pendingReward","pendingCake"],"mappings":"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","sourcesContent":["import poolsConfig from 'config/constants/pools'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport multicall from 'utils/multicall'\nimport { getMasterchefContract } from 'utils/contractHelpers'\nimport { getAddress } from 'utils/addressHelpers'\nimport { simpleRpcProvider } from 'utils/providers'\nimport BigNumber from 'bignumber.js'\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((pool) => pool.stakingToken.symbol !== 'BNB')\nconst bnbPools = poolsConfig.filter((pool) => pool.stakingToken.symbol === 'BNB')\nconst nonMasterPools = poolsConfig.filter((pool) => pool.sousId !== 0)\nconst masterChefContract = getMasterchefContract()\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((pool) => ({\n    address: pool.stakingToken.address,\n    name: 'allowance',\n    params: [account, getAddress(pool.contractAddress)],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((pool) => ({\n    address: pool.stakingToken.address,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await simpleRpcProvider.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance.toString()).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: getAddress(p.contractAddress),\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.userInfo('0', account)\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount.toString()).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: getAddress(p.contractAddress),\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.pendingCake('0', account)\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward.toString()).toJSON() }\n}\n"]},"metadata":{},"sourceType":"module"}