{"ast":null,"code":"import _toConsumableArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{TICKET_LIMIT_PER_REQUEST}from'config/constants/lottery';import{getLotteryV2Contract}from'utils/contractHelpers';var lotteryContract=getLotteryV2Contract();export var processRawTicketsResponse=function processRawTicketsResponse(ticketsResponse){var _ticketsResponse=_slicedToArray(ticketsResponse,3),ticketIds=_ticketsResponse[0],ticketNumbers=_ticketsResponse[1],ticketStatuses=_ticketsResponse[2];if((ticketIds===null||ticketIds===void 0?void 0:ticketIds.length)>0){return ticketIds.map(function(ticketId,index){return{id:ticketId.toString(),number:ticketNumbers[index].toString(),status:ticketStatuses[index]};});}return[];};export var viewUserInfoForLotteryId=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(account,lotteryId,cursor,perRequestLimit){var data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return lotteryContract.viewUserInfoForLotteryId(account,lotteryId,cursor,perRequestLimit);case 3:data=_context.sent;return _context.abrupt(\"return\",processRawTicketsResponse(data));case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);console.error('viewUserInfoForLotteryId',_context.t0);return _context.abrupt(\"return\",null);case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}));return function viewUserInfoForLotteryId(_x,_x2,_x3,_x4){return _ref.apply(this,arguments);};}();export var fetchUserTicketsForOneRound=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(account,lotteryId){var cursor,numReturned,ticketData,response;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:cursor=0;numReturned=TICKET_LIMIT_PER_REQUEST;ticketData=[];case 3:if(!(numReturned===TICKET_LIMIT_PER_REQUEST)){_context2.next=12;break;}_context2.next=6;return viewUserInfoForLotteryId(account,lotteryId,cursor,TICKET_LIMIT_PER_REQUEST);case 6:response=_context2.sent;cursor+=TICKET_LIMIT_PER_REQUEST;numReturned=response.length;ticketData.push.apply(ticketData,_toConsumableArray(response));_context2.next=3;break;case 12:return _context2.abrupt(\"return\",ticketData);case 13:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchUserTicketsForOneRound(_x5,_x6){return _ref2.apply(this,arguments);};}();export var fetchUserTicketsForMultipleRounds=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(idsToCheck,account){var ticketsForMultipleRounds,i,roundId,ticketsForRound;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:ticketsForMultipleRounds=[];i=0;case 2:if(!(i<idsToCheck.length)){_context3.next=11;break;}roundId=idsToCheck[i];// eslint-disable-next-line no-await-in-loop\n_context3.next=6;return fetchUserTicketsForOneRound(account,roundId);case 6:ticketsForRound=_context3.sent;ticketsForMultipleRounds.push({roundId:roundId,userTickets:ticketsForRound});case 8:i+=1;_context3.next=2;break;case 11:return _context3.abrupt(\"return\",ticketsForMultipleRounds);case 12:case\"end\":return _context3.stop();}}},_callee3);}));return function fetchUserTicketsForMultipleRounds(_x7,_x8){return _ref3.apply(this,arguments);};}();","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/lottery/getUserTicketsData.ts"],"names":["TICKET_LIMIT_PER_REQUEST","getLotteryV2Contract","lotteryContract","processRawTicketsResponse","ticketsResponse","ticketIds","ticketNumbers","ticketStatuses","length","map","ticketId","index","id","toString","number","status","viewUserInfoForLotteryId","account","lotteryId","cursor","perRequestLimit","data","console","error","fetchUserTicketsForOneRound","numReturned","ticketData","response","push","fetchUserTicketsForMultipleRounds","idsToCheck","ticketsForMultipleRounds","i","roundId","ticketsForRound","userTickets"],"mappings":"qmBAAA,OAASA,wBAAT,KAAyC,0BAAzC,CAGA,OAASC,oBAAT,KAAqC,uBAArC,CAEA,GAAMC,CAAAA,eAAe,CAAGD,oBAAoB,EAA5C,CAEA,MAAO,IAAME,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,CAACC,eAAD,CAA2D,CAClG,oCAAmDA,eAAnD,IAAOC,SAAP,qBAAkBC,aAAlB,qBAAiCC,cAAjC,qBAEA,GAAI,CAAAF,SAAS,OAAT,EAAAA,SAAS,SAAT,QAAAA,SAAS,CAAEG,MAAX,EAAoB,CAAxB,CAA2B,CACzB,MAAOH,CAAAA,SAAS,CAACI,GAAV,CAAc,SAACC,QAAD,CAAWC,KAAX,CAAqB,CACxC,MAAO,CACLC,EAAE,CAAEF,QAAQ,CAACG,QAAT,EADC,CAELC,MAAM,CAAER,aAAa,CAACK,KAAD,CAAb,CAAqBE,QAArB,EAFH,CAGLE,MAAM,CAAER,cAAc,CAACI,KAAD,CAHjB,CAAP,CAKD,CANM,CAAP,CAOD,CACD,MAAO,EAAP,CACD,CAbM,CAeP,MAAO,IAAMK,CAAAA,wBAAwB,0FAAG,iBACtCC,OADsC,CAEtCC,SAFsC,CAGtCC,MAHsC,CAItCC,eAJsC,iKAOjBlB,CAAAA,eAAe,CAACc,wBAAhB,CAAyCC,OAAzC,CAAkDC,SAAlD,CAA6DC,MAA7D,CAAqEC,eAArE,CAPiB,QAO9BC,IAP8B,+CAQ7BlB,yBAAyB,CAACkB,IAAD,CARI,0DAUpCC,OAAO,CAACC,KAAR,CAAc,0BAAd,cAVoC,gCAW7B,IAX6B,sEAAH,kBAAxBP,CAAAA,wBAAwB,wDAA9B,CAeP,MAAO,IAAMQ,CAAAA,2BAA2B,2FAAG,kBAAOP,OAAP,CAAwBC,SAAxB,iKACrCC,MADqC,CAC5B,CAD4B,CAErCM,WAFqC,CAEvBzB,wBAFuB,CAGnC0B,UAHmC,CAGtB,EAHsB,aAKlCD,WAAW,GAAKzB,wBALkB,mDAOhBgB,CAAAA,wBAAwB,CAACC,OAAD,CAAUC,SAAV,CAAqBC,MAArB,CAA6BnB,wBAA7B,CAPR,QAOjC2B,QAPiC,gBAQvCR,MAAM,EAAInB,wBAAV,CACAyB,WAAW,CAAGE,QAAQ,CAACnB,MAAvB,CACAkB,UAAU,CAACE,IAAX,OAAAF,UAAU,oBAASC,QAAT,EAAV,CAVuC,gEAalCD,UAbkC,2DAAH,kBAA3BF,CAAAA,2BAA2B,kDAAjC,CAgBP,MAAO,IAAMK,CAAAA,iCAAiC,2FAAG,kBAC/CC,UAD+C,CAE/Cb,OAF+C,6KAIzCc,wBAJyC,CAId,EAJc,CAKtCC,CALsC,CAKlC,CALkC,aAK/BA,CAAC,CAAGF,UAAU,CAACtB,MALgB,4BAMvCyB,OANuC,CAM7BH,UAAU,CAACE,CAAD,CANmB,CAO7C;AAP6C,uBAQfR,CAAAA,2BAA2B,CAACP,OAAD,CAAUgB,OAAV,CARZ,QAQvCC,eARuC,gBAS7CH,wBAAwB,CAACH,IAAzB,CAA8B,CAC5BK,OAAO,CAAPA,OAD4B,CAE5BE,WAAW,CAAED,eAFe,CAA9B,EAT6C,OAKRF,CAAC,EAAI,CALG,iEAcxCD,wBAdwC,2DAAH,kBAAjCF,CAAAA,iCAAiC,kDAAvC","sourcesContent":["import { TICKET_LIMIT_PER_REQUEST } from 'config/constants/lottery'\nimport { LotteryTicket } from 'config/constants/types'\nimport { UserTicketsResponse } from 'state/types'\nimport { getLotteryV2Contract } from 'utils/contractHelpers'\n\nconst lotteryContract = getLotteryV2Contract()\n\nexport const processRawTicketsResponse = (ticketsResponse: UserTicketsResponse): LotteryTicket[] => {\n  const [ticketIds, ticketNumbers, ticketStatuses] = ticketsResponse\n\n  if (ticketIds?.length > 0) {\n    return ticketIds.map((ticketId, index) => {\n      return {\n        id: ticketId.toString(),\n        number: ticketNumbers[index].toString(),\n        status: ticketStatuses[index],\n      }\n    })\n  }\n  return []\n}\n\nexport const viewUserInfoForLotteryId = async (\n  account: string,\n  lotteryId: string,\n  cursor: number,\n  perRequestLimit: number,\n): Promise<LotteryTicket[]> => {\n  try {\n    const data = await lotteryContract.viewUserInfoForLotteryId(account, lotteryId, cursor, perRequestLimit)\n    return processRawTicketsResponse(data)\n  } catch (error) {\n    console.error('viewUserInfoForLotteryId', error)\n    return null\n  }\n}\n\nexport const fetchUserTicketsForOneRound = async (account: string, lotteryId: string): Promise<LotteryTicket[]> => {\n  let cursor = 0\n  let numReturned = TICKET_LIMIT_PER_REQUEST\n  const ticketData = []\n\n  while (numReturned === TICKET_LIMIT_PER_REQUEST) {\n    // eslint-disable-next-line no-await-in-loop\n    const response = await viewUserInfoForLotteryId(account, lotteryId, cursor, TICKET_LIMIT_PER_REQUEST)\n    cursor += TICKET_LIMIT_PER_REQUEST\n    numReturned = response.length\n    ticketData.push(...response)\n  }\n\n  return ticketData\n}\n\nexport const fetchUserTicketsForMultipleRounds = async (\n  idsToCheck: string[],\n  account: string,\n): Promise<{ roundId: string; userTickets: LotteryTicket[] }[]> => {\n  const ticketsForMultipleRounds = []\n  for (let i = 0; i < idsToCheck.length; i += 1) {\n    const roundId = idsToCheck[i]\n    // eslint-disable-next-line no-await-in-loop\n    const ticketsForRound = await fetchUserTicketsForOneRound(account, roundId)\n    ticketsForMultipleRounds.push({\n      roundId,\n      userTickets: ticketsForRound,\n    })\n  }\n  return ticketsForMultipleRounds\n}\n"]},"metadata":{},"sourceType":"module"}