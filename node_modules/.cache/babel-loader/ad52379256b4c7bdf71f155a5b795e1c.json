{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { currencyEquals, ETHER, WETH } from '@pancakeswap/sdk';\nimport { useMemo } from 'react';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport { tryParseAmount } from '../state/swap/hooks';\nimport { useTransactionAdder } from '../state/transactions/hooks';\nimport { useCurrencyBalance } from '../state/wallet/hooks';\nimport { useWETHContract } from './useContract';\nimport { useCallWithGasPrice } from './useCallWithGasPrice';\nexport let WrapType;\n\n(function (WrapType) {\n  WrapType[WrapType[\"NOT_APPLICABLE\"] = 0] = \"NOT_APPLICABLE\";\n  WrapType[WrapType[\"WRAP\"] = 1] = \"WRAP\";\n  WrapType[WrapType[\"UNWRAP\"] = 2] = \"UNWRAP\";\n})(WrapType || (WrapType = {}));\n\nconst NOT_APPLICABLE = {\n  wrapType: WrapType.NOT_APPLICABLE\n};\n/**\n * Given the selected input and output currency, return a wrap callback\n * @param inputCurrency the selected input currency\n * @param outputCurrency the selected output currency\n * @param typedValue the user input value\n */\n\nexport default function useWrapCallback(inputCurrency, outputCurrency, typedValue) {\n  _s();\n\n  const {\n    chainId,\n    account\n  } = useActiveWeb3React();\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n  const wethContract = useWETHContract();\n  const balance = useCurrencyBalance(account !== null && account !== void 0 ? account : undefined, inputCurrency); // we can always parse the amount typed as the input currency, since wrapping is 1:1\n\n  const inputAmount = useMemo(() => tryParseAmount(typedValue, inputCurrency), [inputCurrency, typedValue]);\n  const addTransaction = useTransactionAdder();\n  return useMemo(() => {\n    if (!wethContract || !chainId || !inputCurrency || !outputCurrency) return NOT_APPLICABLE;\n    const sufficientBalance = inputAmount && balance && !balance.lessThan(inputAmount);\n\n    if (inputCurrency === ETHER && currencyEquals(WETH[chainId], outputCurrency)) {\n      return {\n        wrapType: WrapType.WRAP,\n        execute: sufficientBalance && inputAmount ? async () => {\n          try {\n            const txReceipt = await callWithGasPrice(wethContract, 'deposit', undefined, {\n              value: `0x${inputAmount.raw.toString(16)}`\n            });\n            addTransaction(txReceipt, {\n              summary: `Wrap ${inputAmount.toSignificant(6)} BNB to WBNB`\n            });\n          } catch (error) {\n            console.error('Could not deposit', error);\n          }\n        } : undefined,\n        inputError: sufficientBalance ? undefined : 'Insufficient BNB balance'\n      };\n    }\n\n    if (currencyEquals(WETH[chainId], inputCurrency) && outputCurrency === ETHER) {\n      return {\n        wrapType: WrapType.UNWRAP,\n        execute: sufficientBalance && inputAmount ? async () => {\n          try {\n            const txReceipt = await callWithGasPrice(wethContract, 'withdraw', [`0x${inputAmount.raw.toString(16)}`]);\n            addTransaction(txReceipt, {\n              summary: `Unwrap ${inputAmount.toSignificant(6)} WBNB to BNB`\n            });\n          } catch (error) {\n            console.error('Could not withdraw', error);\n          }\n        } : undefined,\n        inputError: sufficientBalance ? undefined : 'Insufficient WBNB balance'\n      };\n    }\n\n    return NOT_APPLICABLE;\n  }, [wethContract, chainId, inputCurrency, outputCurrency, inputAmount, balance, addTransaction, callWithGasPrice]);\n}\n\n_s(useWrapCallback, \"9Y8uLnw/NBS9AFtZoHMTweoTcAk=\", false, function () {\n  return [useActiveWeb3React, useCallWithGasPrice, useWETHContract, useCurrencyBalance, useTransactionAdder];\n});","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/hooks/useWrapCallback.ts"],"names":["currencyEquals","ETHER","WETH","useMemo","useActiveWeb3React","tryParseAmount","useTransactionAdder","useCurrencyBalance","useWETHContract","useCallWithGasPrice","WrapType","NOT_APPLICABLE","wrapType","useWrapCallback","inputCurrency","outputCurrency","typedValue","chainId","account","callWithGasPrice","wethContract","balance","undefined","inputAmount","addTransaction","sufficientBalance","lessThan","WRAP","execute","txReceipt","value","raw","toString","summary","toSignificant","error","console","inputError","UNWRAP"],"mappings":"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","sourcesContent":["import { Currency, currencyEquals, ETHER, WETH } from '@pancakeswap/sdk'\nimport { useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { tryParseAmount } from '../state/swap/hooks'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { useCurrencyBalance } from '../state/wallet/hooks'\nimport { useWETHContract } from './useContract'\nimport { useCallWithGasPrice } from './useCallWithGasPrice'\n\nexport enum WrapType {\n  NOT_APPLICABLE,\n  WRAP,\n  UNWRAP,\n}\n\nconst NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE }\n/**\n * Given the selected input and output currency, return a wrap callback\n * @param inputCurrency the selected input currency\n * @param outputCurrency the selected output currency\n * @param typedValue the user input value\n */\nexport default function useWrapCallback(\n  inputCurrency: Currency | undefined,\n  outputCurrency: Currency | undefined,\n  typedValue: string | undefined,\n): { wrapType: WrapType; execute?: undefined | (() => Promise<void>); inputError?: string } {\n  const { chainId, account } = useActiveWeb3React()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const wethContract = useWETHContract()\n  const balance = useCurrencyBalance(account ?? undefined, inputCurrency)\n  // we can always parse the amount typed as the input currency, since wrapping is 1:1\n  const inputAmount = useMemo(() => tryParseAmount(typedValue, inputCurrency), [inputCurrency, typedValue])\n  const addTransaction = useTransactionAdder()\n\n  return useMemo(() => {\n    if (!wethContract || !chainId || !inputCurrency || !outputCurrency) return NOT_APPLICABLE\n\n    const sufficientBalance = inputAmount && balance && !balance.lessThan(inputAmount)\n\n    if (inputCurrency === ETHER && currencyEquals(WETH[chainId], outputCurrency)) {\n      return {\n        wrapType: WrapType.WRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await callWithGasPrice(wethContract, 'deposit', undefined, {\n                    value: `0x${inputAmount.raw.toString(16)}`,\n                  })\n                  addTransaction(txReceipt, { summary: `Wrap ${inputAmount.toSignificant(6)} BNB to WBNB` })\n                } catch (error) {\n                  console.error('Could not deposit', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance ? undefined : 'Insufficient BNB balance',\n      }\n    }\n    if (currencyEquals(WETH[chainId], inputCurrency) && outputCurrency === ETHER) {\n      return {\n        wrapType: WrapType.UNWRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await callWithGasPrice(wethContract, 'withdraw', [\n                    `0x${inputAmount.raw.toString(16)}`,\n                  ])\n                  addTransaction(txReceipt, { summary: `Unwrap ${inputAmount.toSignificant(6)} WBNB to BNB` })\n                } catch (error) {\n                  console.error('Could not withdraw', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance ? undefined : 'Insufficient WBNB balance',\n      }\n    }\n    return NOT_APPLICABLE\n  }, [wethContract, chainId, inputCurrency, outputCurrency, inputAmount, balance, addTransaction, callWithGasPrice])\n}\n"]},"metadata":{},"sourceType":"module"}