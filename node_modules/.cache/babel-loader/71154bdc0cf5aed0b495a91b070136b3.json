{"ast":null,"code":"import { request, gql } from 'graphql-request';\nimport { INFO_CLIENT } from 'config/constants/endpoints';\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers';\n/**\n * Data to display transaction table on Token page\n */\n\nconst TOKEN_TRANSACTIONS = gql`\n  query tokenTransactions($address: Bytes!) {\n    mintsAs0: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    mintsAs1: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swapsAs0: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    swapsAs1: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { token1: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burnsAs0: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n    burnsAs1: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { token1: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`;\n\nconst fetchTokenTransactions = async address => {\n  try {\n    const data = await request(INFO_CLIENT, TOKEN_TRANSACTIONS, {\n      address\n    });\n    const mints0 = data.mintsAs0.map(mapMints);\n    const mints1 = data.mintsAs1.map(mapMints);\n    const burns0 = data.burnsAs0.map(mapBurns);\n    const burns1 = data.burnsAs1.map(mapBurns);\n    const swaps0 = data.swapsAs0.map(mapSwaps);\n    const swaps1 = data.swapsAs1.map(mapSwaps);\n    return {\n      data: [...mints0, ...mints1, ...burns0, ...burns1, ...swaps0, ...swaps1],\n      error: false\n    };\n  } catch (error) {\n    console.error(`Failed to fetch transactions for token ${address}`, error);\n    return {\n      error: true\n    };\n  }\n};\n\nexport default fetchTokenTransactions;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/queries/tokens/transactions.ts"],"names":["request","gql","INFO_CLIENT","mapMints","mapBurns","mapSwaps","TOKEN_TRANSACTIONS","fetchTokenTransactions","address","data","mints0","mintsAs0","map","mints1","mintsAs1","burns0","burnsAs0","burns1","burnsAs1","swaps0","swapsAs0","swaps1","swapsAs1","error","console"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AAGA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,QAA7B,QAA6C,4BAA7C;AAEA;AACA;AACA;;AACA,MAAMC,kBAAknHA;;AA8HA,MAAMM,sBAAsB,GAAG,MAAOC,OAAP,IAA8E;AAC3G,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMT,OAAO,CAAqBE,WAArB,EAAkCI,kBAAlC,EAAsD;AAC9EE,MAAAA;AAD8E,KAAtD,CAA1B;AAGA,UAAME,MAAM,GAAGD,IAAI,CAACE,QAAL,CAAcC,GAAd,CAAkBT,QAAlB,CAAf;AACA,UAAMU,MAAM,GAAGJ,IAAI,CAACK,QAAL,CAAcF,GAAd,CAAkBT,QAAlB,CAAf;AAEA,UAAMY,MAAM,GAAGN,IAAI,CAACO,QAAL,CAAcJ,GAAd,CAAkBR,QAAlB,CAAf;AACA,UAAMa,MAAM,GAAGR,IAAI,CAACS,QAAL,CAAcN,GAAd,CAAkBR,QAAlB,CAAf;AAEA,UAAMe,MAAM,GAAGV,IAAI,CAACW,QAAL,CAAcR,GAAd,CAAkBP,QAAlB,CAAf;AACA,UAAMgB,MAAM,GAAGZ,IAAI,CAACa,QAAL,CAAcV,GAAd,CAAkBP,QAAlB,CAAf;AAEA,WAAO;AAAEI,MAAAA,IAAI,EAAE,CAAC,GAAGC,MAAJ,EAAY,GAAGG,MAAf,EAAuB,GAAGE,MAA1B,EAAkC,GAAGE,MAArC,EAA6C,GAAGE,MAAhD,EAAwD,GAAGE,MAA3D,CAAR;AAA4EE,MAAAA,KAAK,EAAE;AAAnF,KAAP;AACD,GAdD,CAcE,OAAOA,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAe,0CAAyCf,OAAQ,EAAhE,EAAmEe,KAAnE;AACA,WAAO;AACLA,MAAAA,KAAK,EAAE;AADF,KAAP;AAGD;AACF,CArBD;;AAuBA,eAAehB,sBAAf","sourcesContent":["import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { Transaction } from 'state/info/types'\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\n\n/**\n * Data to display transaction table on Token page\n */\nconst TOKEN_TRANSACTIONS = gql`\n  query tokenTransactions($address: Bytes!) {\n    mintsAs0: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    mintsAs1: mints(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swapsAs0: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    swapsAs1: swaps(first: 10, orderBy: timestamp, orderDirection: desc, where: { token1: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burnsAs0: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { token0: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n    burnsAs1: burns(first: 10, orderBy: timestamp, orderDirection: desc, where: { token1: $address }) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\n\ninterface TransactionResults {\n  mintsAs0: MintResponse[]\n  mintsAs1: MintResponse[]\n  swapsAs0: SwapResponse[]\n  swapsAs1: SwapResponse[]\n  burnsAs0: BurnResponse[]\n  burnsAs1: BurnResponse[]\n}\n\nconst fetchTokenTransactions = async (address: string): Promise<{ data?: Transaction[]; error: boolean }> => {\n  try {\n    const data = await request<TransactionResults>(INFO_CLIENT, TOKEN_TRANSACTIONS, {\n      address,\n    })\n    const mints0 = data.mintsAs0.map(mapMints)\n    const mints1 = data.mintsAs1.map(mapMints)\n\n    const burns0 = data.burnsAs0.map(mapBurns)\n    const burns1 = data.burnsAs1.map(mapBurns)\n\n    const swaps0 = data.swapsAs0.map(mapSwaps)\n    const swaps1 = data.swapsAs1.map(mapSwaps)\n\n    return { data: [...mints0, ...mints1, ...burns0, ...burns1, ...swaps0, ...swaps1], error: false }\n  } catch (error) {\n    console.error(`Failed to fetch transactions for token ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchTokenTransactions\n"]},"metadata":{},"sourceType":"module"}