{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Info/components/Percent/index.tsx\";\nimport React from 'react';\nimport { Text } from '@pancakeswap/uikit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Percent = ({\n  value,\n  ...rest\n}) => {\n  if (!value || Number.isNaN(value)) {\n    return /*#__PURE__*/_jsxDEV(Text, { ...rest,\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 12\n    }, this);\n  }\n\n  const isNegative = value < 0;\n  return /*#__PURE__*/_jsxDEV(Text, { ...rest,\n    color: isNegative ? 'failure' : 'success',\n    children: [isNegative ? '↓' : '↑', Math.abs(value).toFixed(2), \"%\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Percent;\nexport default Percent;\n\nvar _c;\n\n$RefreshReg$(_c, \"Percent\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Info/components/Percent/index.tsx"],"names":["React","Text","Percent","value","rest","Number","isNaN","isNegative","Math","abs","toFixed"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,QAAgC,oBAAhC;;;AAMA,MAAMC,OAA+B,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAAS,KAAGC;AAAZ,CAAD,KAAwB;AAC9D,MAAI,CAACD,KAAD,IAAUE,MAAM,CAACC,KAAP,CAAaH,KAAb,CAAd,EAAmC;AACjC,wBAAO,QAAC,IAAD,OAAUC,IAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAED,QAAMG,UAAU,GAAGJ,KAAK,GAAG,CAA3B;AAEA,sBACE,QAAC,IAAD,OAAUC,IAAV;AAAgB,IAAA,KAAK,EAAEG,UAAU,GAAG,SAAH,GAAe,SAAhD;AAAA,eACGA,UAAU,GAAG,GAAH,GAAS,GADtB,EAEGC,IAAI,CAACC,GAAL,CAASN,KAAT,EAAgBO,OAAhB,CAAwB,CAAxB,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAbD;;KAAMR,O;AAeN,eAAeA,OAAf","sourcesContent":["import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\n\nexport interface PercentProps extends TextProps {\n  value: number | undefined\n}\n\nconst Percent: React.FC<PercentProps> = ({ value, ...rest }) => {\n  if (!value || Number.isNaN(value)) {\n    return <Text {...rest}>-</Text>\n  }\n\n  const isNegative = value < 0\n\n  return (\n    <Text {...rest} color={isNegative ? 'failure' : 'success'}>\n      {isNegative ? '↓' : '↑'}\n      {Math.abs(value).toFixed(2)}%\n    </Text>\n  )\n}\n\nexport default Percent\n"]},"metadata":{},"sourceType":"module"}