{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useWeb3React } from '@web3-react/core';\nimport BigNumber from 'bignumber.js';\nimport { ethers } from 'ethers';\nimport { parseUnits } from 'ethers/lib/utils';\nimport { Modal, ModalBody, Text, Image, Button, BalanceInput, Flex } from '@pancakeswap/uikit';\nimport { PoolIds } from 'config/constants/types';\nimport { useTranslation } from 'contexts/Localization';\nimport { getBalanceAmount } from 'utils/formatBalance';\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons';\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction';\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice';\nimport { DEFAULT_TOKEN_DECIMAL } from 'config';\nimport { useERC20 } from 'hooks/useContract';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst multiplierValues = [0.1, 0.25, 0.5, 0.75, 1]; // Default value for transaction setting, tweak based on BSC network congestion.\n\nconst gasPrice = parseUnits('10', 'gwei').toString();\n\nconst ContributeModal = ({\n  poolId,\n  ifo,\n  publicIfoData,\n  walletIfoData,\n  userCurrencyBalance,\n  onDismiss,\n  onSuccess\n}) => {\n  _s();\n\n  const publicPoolCharacteristics = publicIfoData[poolId];\n  const userPoolCharacteristics = walletIfoData[poolId];\n  const {\n    currency\n  } = ifo;\n  const {\n    limitPerUserInLP\n  } = publicPoolCharacteristics;\n  const {\n    amountTokenCommittedInLP\n  } = userPoolCharacteristics;\n  const {\n    contract\n  } = walletIfoData;\n  const [value, setValue] = useState('');\n  const {\n    account\n  } = useWeb3React();\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n  const raisingTokenContract = useERC20(currency.address);\n  const {\n    t\n  } = useTranslation();\n  const valueWithTokenDecimals = new BigNumber(value).times(DEFAULT_TOKEN_DECIMAL);\n  const {\n    isApproving,\n    isApproved,\n    isConfirmed,\n    isConfirming,\n    handleApprove,\n    handleConfirm\n  } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      try {\n        const response = await raisingTokenContract.allowance(account, contract.address);\n        const currentAllowance = new BigNumber(response.toString());\n        return currentAllowance.gt(0);\n      } catch (error) {\n        return false;\n      }\n    },\n    onApprove: () => {\n      return callWithGasPrice(raisingTokenContract, 'approve', [contract.address, ethers.constants.MaxUint256], {\n        gasPrice\n      });\n    },\n    onConfirm: () => {\n      return callWithGasPrice(contract, 'depositPool', [valueWithTokenDecimals.toString(), poolId === PoolIds.poolBasic ? 0 : 1], {\n        gasPrice\n      });\n    },\n    onSuccess: async ({\n      receipt\n    }) => {\n      await onSuccess(valueWithTokenDecimals, receipt.transactionHash);\n      onDismiss();\n    }\n  });\n\n  const maximumLpCommitable = (() => {\n    if (limitPerUserInLP.isGreaterThan(0)) {\n      return limitPerUserInLP.minus(amountTokenCommittedInLP).isLessThanOrEqualTo(userCurrencyBalance) ? limitPerUserInLP : userCurrencyBalance;\n    }\n\n    return userCurrencyBalance;\n  })();\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: t('Contribute %symbol%', {\n      symbol: currency.symbol\n    }),\n    onDismiss: onDismiss,\n    children: /*#__PURE__*/_jsxDEV(ModalBody, {\n      maxWidth: \"320px\",\n      children: [limitPerUserInLP.isGreaterThan(0) && /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        mb: \"16px\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: t('Max. LP token entry')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          children: getBalanceAmount(limitPerUserInLP, currency.decimals).toString()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        mb: \"8px\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: [t('Commit'), \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          flexGrow: 1,\n          justifyContent: \"flex-end\",\n          children: [/*#__PURE__*/_jsxDEV(Image, {\n            src: `/images/farms/${currency.symbol.split(' ')[0].toLocaleLowerCase()}.svg`,\n            width: 24,\n            height: 24\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            children: currency.symbol\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BalanceInput, {\n        value: value,\n        currencyValue: publicIfoData.currencyPriceInUSD.times(value || 0).toFixed(2),\n        onUserInput: setValue,\n        isWarning: valueWithTokenDecimals.isGreaterThan(maximumLpCommitable),\n        decimals: currency.decimals,\n        mb: \"8px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        color: \"textSubtle\",\n        textAlign: \"right\",\n        fontSize: \"12px\",\n        mb: \"16px\",\n        children: t('Balance: %balance%', {\n          balance: getBalanceAmount(userCurrencyBalance, currency.decimals).toString()\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"space-between\",\n        mb: \"16px\",\n        children: multiplierValues.map((multiplierValue, index) => /*#__PURE__*/_jsxDEV(Button, {\n          scale: \"xs\",\n          variant: \"tertiary\",\n          onClick: () => setValue(getBalanceAmount(maximumLpCommitable.times(multiplierValue)).toString()),\n          mr: index < multiplierValues.length - 1 ? '8px' : 0,\n          children: [multiplierValue * 100, \"%\"]\n        }, multiplierValue, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        color: \"textSubtle\",\n        fontSize: \"12px\",\n        mb: \"24px\",\n        children: t('If you donâ€™t commit enough LP tokens, you may not receive any IFO tokens at all and will only receive a full refund of your LP tokens.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ApproveConfirmButtons, {\n        isApproveDisabled: isConfirmed || isConfirming || isApproved,\n        isApproving: isApproving,\n        isConfirmDisabled: !isApproved || isConfirmed || valueWithTokenDecimals.isNaN() || valueWithTokenDecimals.eq(0),\n        isConfirming: isConfirming,\n        onApprove: handleApprove,\n        onConfirm: handleConfirm\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContributeModal, \"GyTCprJl/A7PYoObrfhvKDd5tB0=\", false, function () {\n  return [useWeb3React, useCallWithGasPrice, useERC20, useTranslation, useApproveConfirmTransaction];\n});\n\n_c = ContributeModal;\nexport default ContributeModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContributeModal\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Ifos/components/IfoFoldableCard/IfoPoolCard/ContributeModal.tsx"],"names":["React","useState","useWeb3React","BigNumber","ethers","parseUnits","Modal","ModalBody","Text","Image","Button","BalanceInput","Flex","PoolIds","useTranslation","getBalanceAmount","ApproveConfirmButtons","useApproveConfirmTransaction","useCallWithGasPrice","DEFAULT_TOKEN_DECIMAL","useERC20","multiplierValues","gasPrice","toString","ContributeModal","poolId","ifo","publicIfoData","walletIfoData","userCurrencyBalance","onDismiss","onSuccess","publicPoolCharacteristics","userPoolCharacteristics","currency","limitPerUserInLP","amountTokenCommittedInLP","contract","value","setValue","account","callWithGasPrice","raisingTokenContract","address","t","valueWithTokenDecimals","times","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","onRequiresApproval","response","allowance","currentAllowance","gt","error","onApprove","constants","MaxUint256","onConfirm","poolBasic","receipt","transactionHash","maximumLpCommitable","isGreaterThan","minus","isLessThanOrEqualTo","symbol","decimals","split","toLocaleLowerCase","currencyPriceInUSD","toFixed","balance","map","multiplierValue","index","length","isNaN","eq"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,IAA3B,EAAiCC,KAAjC,EAAwCC,MAAxC,EAAgDC,YAAhD,EAA8DC,IAA9D,QAA0E,oBAA1E;AACA,SAASC,OAAT,QAA6B,wBAA7B;AAEA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,OAAOC,qBAAP,MAAkC,kCAAlC;AACA,OAAOC,4BAAP,MAAyC,oCAAzC;AACA,SAASC,mBAAT,QAAoC,2BAApC;AACA,SAASC,qBAAT,QAAsC,QAAtC;AACA,SAASC,QAAT,QAAyB,mBAAzB;;AAYA,MAAMC,gBAAgB,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,EAAiB,IAAjB,EAAuB,CAAvB,CAAzB,C,CAEA;;AACA,MAAMC,QAAQ,GAAGjB,UAAU,CAAC,IAAD,EAAO,MAAP,CAAV,CAAyBkB,QAAzB,EAAjB;;AAEA,MAAMC,eAAgC,GAAG,CAAC;AACxCC,EAAAA,MADwC;AAExCC,EAAAA,GAFwC;AAGxCC,EAAAA,aAHwC;AAIxCC,EAAAA,aAJwC;AAKxCC,EAAAA,mBALwC;AAMxCC,EAAAA,SANwC;AAOxCC,EAAAA;AAPwC,CAAD,KAQnC;AAAA;;AACJ,QAAMC,yBAAyB,GAAGL,aAAa,CAACF,MAAD,CAA/C;AACA,QAAMQ,uBAAuB,GAAGL,aAAa,CAACH,MAAD,CAA7C;AAEA,QAAM;AAAES,IAAAA;AAAF,MAAeR,GAArB;AACA,QAAM;AAAES,IAAAA;AAAF,MAAuBH,yBAA7B;AACA,QAAM;AAAEI,IAAAA;AAAF,MAA+BH,uBAArC;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAeT,aAArB;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBtC,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAEuC,IAAAA;AAAF,MAActC,YAAY,EAAhC;AACA,QAAM;AAAEuC,IAAAA;AAAF,MAAuBvB,mBAAmB,EAAhD;AACA,QAAMwB,oBAAoB,GAAGtB,QAAQ,CAACc,QAAQ,CAACS,OAAV,CAArC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAQ9B,cAAc,EAA5B;AACA,QAAM+B,sBAAsB,GAAG,IAAI1C,SAAJ,CAAcmC,KAAd,EAAqBQ,KAArB,CAA2B3B,qBAA3B,CAA/B;AAEA,QAAM;AAAE4B,IAAAA,WAAF;AAAeC,IAAAA,UAAf;AAA2BC,IAAAA,WAA3B;AAAwCC,IAAAA,YAAxC;AAAsDC,IAAAA,aAAtD;AAAqEC,IAAAA;AAArE,MACJnC,4BAA4B,CAAC;AAC3BoC,IAAAA,kBAAkB,EAAE,YAAY;AAC9B,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMZ,oBAAoB,CAACa,SAArB,CAA+Bf,OAA/B,EAAwCH,QAAQ,CAACM,OAAjD,CAAvB;AACA,cAAMa,gBAAgB,GAAG,IAAIrD,SAAJ,CAAcmD,QAAQ,CAAC/B,QAAT,EAAd,CAAzB;AACA,eAAOiC,gBAAgB,CAACC,EAAjB,CAAoB,CAApB,CAAP;AACD,OAJD,CAIE,OAAOC,KAAP,EAAc;AACd,eAAO,KAAP;AACD;AACF,KAT0B;AAU3BC,IAAAA,SAAS,EAAE,MAAM;AACf,aAAOlB,gBAAgB,CAACC,oBAAD,EAAuB,SAAvB,EAAkC,CAACL,QAAQ,CAACM,OAAV,EAAmBvC,MAAM,CAACwD,SAAP,CAAiBC,UAApC,CAAlC,EAAmF;AACxGvC,QAAAA;AADwG,OAAnF,CAAvB;AAGD,KAd0B;AAe3BwC,IAAAA,SAAS,EAAE,MAAM;AACf,aAAOrB,gBAAgB,CACrBJ,QADqB,EAErB,aAFqB,EAGrB,CAACQ,sBAAsB,CAACtB,QAAvB,EAAD,EAAoCE,MAAM,KAAKZ,OAAO,CAACkD,SAAnB,GAA+B,CAA/B,GAAmC,CAAvE,CAHqB,EAIrB;AACEzC,QAAAA;AADF,OAJqB,CAAvB;AAQD,KAxB0B;AAyB3BS,IAAAA,SAAS,EAAE,OAAO;AAAEiC,MAAAA;AAAF,KAAP,KAAuB;AAChC,YAAMjC,SAAS,CAACc,sBAAD,EAAyBmB,OAAO,CAACC,eAAjC,CAAf;AACAnC,MAAAA,SAAS;AACV;AA5B0B,GAAD,CAD9B;;AAgCA,QAAMoC,mBAAmB,GAAG,CAAC,MAAM;AACjC,QAAI/B,gBAAgB,CAACgC,aAAjB,CAA+B,CAA/B,CAAJ,EAAuC;AACrC,aAAOhC,gBAAgB,CAACiC,KAAjB,CAAuBhC,wBAAvB,EAAiDiC,mBAAjD,CAAqExC,mBAArE,IACHM,gBADG,GAEHN,mBAFJ;AAGD;;AACD,WAAOA,mBAAP;AACD,GAP2B,GAA5B;;AASA,sBACE,QAAC,KAAD;AAAO,IAAA,KAAK,EAAEe,CAAC,CAAC,qBAAD,EAAwB;AAAE0B,MAAAA,MAAM,EAAEpC,QAAQ,CAACoC;AAAnB,KAAxB,CAAf;AAAqE,IAAA,SAAS,EAAExC,SAAhF;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAC,OAApB;AAAA,iBACGK,gBAAgB,CAACgC,aAAjB,CAA+B,CAA/B,kBACC,QAAC,IAAD;AAAM,QAAA,cAAc,EAAC,eAArB;AAAqC,QAAA,EAAE,EAAC,MAAxC;AAAA,gCACE,QAAC,IAAD;AAAA,oBAAOvB,CAAC,CAAC,qBAAD;AAAR;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD;AAAA,oBAAO7B,gBAAgB,CAACoB,gBAAD,EAAmBD,QAAQ,CAACqC,QAA5B,CAAhB,CAAsDhD,QAAtD;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAOE,QAAC,IAAD;AAAM,QAAA,cAAc,EAAC,eAArB;AAAqC,QAAA,EAAE,EAAC,KAAxC;AAAA,gCACE,QAAC,IAAD;AAAA,qBAAOqB,CAAC,CAAC,QAAD,CAAR;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD;AAAM,UAAA,QAAQ,EAAE,CAAhB;AAAmB,UAAA,cAAc,EAAC,UAAlC;AAAA,kCACE,QAAC,KAAD;AACE,YAAA,GAAG,EAAG,iBAAgBV,QAAQ,CAACoC,MAAT,CAAgBE,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,EAA8BC,iBAA9B,EAAkD,MAD1E;AAEE,YAAA,KAAK,EAAE,EAFT;AAGE,YAAA,MAAM,EAAE;AAHV;AAAA;AAAA;AAAA;AAAA,kBADF,eAME,QAAC,IAAD;AAAA,sBAAOvC,QAAQ,CAACoC;AAAhB;AAAA;AAAA;AAAA;AAAA,kBANF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,eAkBE,QAAC,YAAD;AACE,QAAA,KAAK,EAAEhC,KADT;AAEE,QAAA,aAAa,EAAEX,aAAa,CAAC+C,kBAAd,CAAiC5B,KAAjC,CAAuCR,KAAK,IAAI,CAAhD,EAAmDqC,OAAnD,CAA2D,CAA3D,CAFjB;AAGE,QAAA,WAAW,EAAEpC,QAHf;AAIE,QAAA,SAAS,EAAEM,sBAAsB,CAACsB,aAAvB,CAAqCD,mBAArC,CAJb;AAKE,QAAA,QAAQ,EAAEhC,QAAQ,CAACqC,QALrB;AAME,QAAA,EAAE,EAAC;AANL;AAAA;AAAA;AAAA;AAAA,cAlBF,eA0BE,QAAC,IAAD;AAAM,QAAA,KAAK,EAAC,YAAZ;AAAyB,QAAA,SAAS,EAAC,OAAnC;AAA2C,QAAA,QAAQ,EAAC,MAApD;AAA2D,QAAA,EAAE,EAAC,MAA9D;AAAA,kBACG3B,CAAC,CAAC,oBAAD,EAAuB;AACvBgC,UAAAA,OAAO,EAAE7D,gBAAgB,CAACc,mBAAD,EAAsBK,QAAQ,CAACqC,QAA/B,CAAhB,CAAyDhD,QAAzD;AADc,SAAvB;AADJ;AAAA;AAAA;AAAA;AAAA,cA1BF,eA+BE,QAAC,IAAD;AAAM,QAAA,cAAc,EAAC,eAArB;AAAqC,QAAA,EAAE,EAAC,MAAxC;AAAA,kBACGF,gBAAgB,CAACwD,GAAjB,CAAqB,CAACC,eAAD,EAAkBC,KAAlB,kBACpB,QAAC,MAAD;AAEE,UAAA,KAAK,EAAC,IAFR;AAGE,UAAA,OAAO,EAAC,UAHV;AAIE,UAAA,OAAO,EAAE,MAAMxC,QAAQ,CAACxB,gBAAgB,CAACmD,mBAAmB,CAACpB,KAApB,CAA0BgC,eAA1B,CAAD,CAAhB,CAA6DvD,QAA7D,EAAD,CAJzB;AAKE,UAAA,EAAE,EAAEwD,KAAK,GAAG1D,gBAAgB,CAAC2D,MAAjB,GAA0B,CAAlC,GAAsC,KAAtC,GAA8C,CALpD;AAAA,qBAOGF,eAAe,GAAG,GAPrB;AAAA,WACOA,eADP;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cA/BF,eA4CE,QAAC,IAAD;AAAM,QAAA,KAAK,EAAC,YAAZ;AAAyB,QAAA,QAAQ,EAAC,MAAlC;AAAyC,QAAA,EAAE,EAAC,MAA5C;AAAA,kBACGlC,CAAC,CACA,wIADA;AADJ;AAAA;AAAA;AAAA;AAAA,cA5CF,eAiDE,QAAC,qBAAD;AACE,QAAA,iBAAiB,EAAEK,WAAW,IAAIC,YAAf,IAA+BF,UADpD;AAEE,QAAA,WAAW,EAAED,WAFf;AAGE,QAAA,iBAAiB,EACf,CAACC,UAAD,IAAeC,WAAf,IAA8BJ,sBAAsB,CAACoC,KAAvB,EAA9B,IAAgEpC,sBAAsB,CAACqC,EAAvB,CAA0B,CAA1B,CAJpE;AAME,QAAA,YAAY,EAAEhC,YANhB;AAOE,QAAA,SAAS,EAAEC,aAPb;AAQE,QAAA,SAAS,EAAEC;AARb;AAAA;AAAA;AAAA;AAAA,cAjDF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAgED,CAhID;;GAAM5B,e;UAiBgBtB,Y,EACSgB,mB,EACAE,Q,EACfN,c,EAIZG,4B;;;KAxBEO,e;AAkIN,eAAeA,eAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\nimport { parseUnits } from 'ethers/lib/utils'\nimport { Modal, ModalBody, Text, Image, Button, BalanceInput, Flex } from '@pancakeswap/uikit'\nimport { PoolIds, Ifo } from 'config/constants/types'\nimport { WalletIfoData, PublicIfoData } from 'views/Ifos/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { useERC20 } from 'hooks/useContract'\n\ninterface Props {\n  poolId: PoolIds\n  ifo: Ifo\n  publicIfoData: PublicIfoData\n  walletIfoData: WalletIfoData\n  userCurrencyBalance: BigNumber\n  onSuccess: (amount: BigNumber, txHash: string) => void\n  onDismiss?: () => void\n}\n\nconst multiplierValues = [0.1, 0.25, 0.5, 0.75, 1]\n\n// Default value for transaction setting, tweak based on BSC network congestion.\nconst gasPrice = parseUnits('10', 'gwei').toString()\n\nconst ContributeModal: React.FC<Props> = ({\n  poolId,\n  ifo,\n  publicIfoData,\n  walletIfoData,\n  userCurrencyBalance,\n  onDismiss,\n  onSuccess,\n}) => {\n  const publicPoolCharacteristics = publicIfoData[poolId]\n  const userPoolCharacteristics = walletIfoData[poolId]\n\n  const { currency } = ifo\n  const { limitPerUserInLP } = publicPoolCharacteristics\n  const { amountTokenCommittedInLP } = userPoolCharacteristics\n  const { contract } = walletIfoData\n  const [value, setValue] = useState('')\n  const { account } = useWeb3React()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const raisingTokenContract = useERC20(currency.address)\n  const { t } = useTranslation()\n  const valueWithTokenDecimals = new BigNumber(value).times(DEFAULT_TOKEN_DECIMAL)\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        try {\n          const response = await raisingTokenContract.allowance(account, contract.address)\n          const currentAllowance = new BigNumber(response.toString())\n          return currentAllowance.gt(0)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return callWithGasPrice(raisingTokenContract, 'approve', [contract.address, ethers.constants.MaxUint256], {\n          gasPrice,\n        })\n      },\n      onConfirm: () => {\n        return callWithGasPrice(\n          contract,\n          'depositPool',\n          [valueWithTokenDecimals.toString(), poolId === PoolIds.poolBasic ? 0 : 1],\n          {\n            gasPrice,\n          },\n        )\n      },\n      onSuccess: async ({ receipt }) => {\n        await onSuccess(valueWithTokenDecimals, receipt.transactionHash)\n        onDismiss()\n      },\n    })\n\n  const maximumLpCommitable = (() => {\n    if (limitPerUserInLP.isGreaterThan(0)) {\n      return limitPerUserInLP.minus(amountTokenCommittedInLP).isLessThanOrEqualTo(userCurrencyBalance)\n        ? limitPerUserInLP\n        : userCurrencyBalance\n    }\n    return userCurrencyBalance\n  })()\n\n  return (\n    <Modal title={t('Contribute %symbol%', { symbol: currency.symbol })} onDismiss={onDismiss}>\n      <ModalBody maxWidth=\"320px\">\n        {limitPerUserInLP.isGreaterThan(0) && (\n          <Flex justifyContent=\"space-between\" mb=\"16px\">\n            <Text>{t('Max. LP token entry')}</Text>\n            <Text>{getBalanceAmount(limitPerUserInLP, currency.decimals).toString()}</Text>\n          </Flex>\n        )}\n        <Flex justifyContent=\"space-between\" mb=\"8px\">\n          <Text>{t('Commit')}:</Text>\n          <Flex flexGrow={1} justifyContent=\"flex-end\">\n            <Image\n              src={`/images/farms/${currency.symbol.split(' ')[0].toLocaleLowerCase()}.svg`}\n              width={24}\n              height={24}\n            />\n            <Text>{currency.symbol}</Text>\n          </Flex>\n        </Flex>\n        <BalanceInput\n          value={value}\n          currencyValue={publicIfoData.currencyPriceInUSD.times(value || 0).toFixed(2)}\n          onUserInput={setValue}\n          isWarning={valueWithTokenDecimals.isGreaterThan(maximumLpCommitable)}\n          decimals={currency.decimals}\n          mb=\"8px\"\n        />\n        <Text color=\"textSubtle\" textAlign=\"right\" fontSize=\"12px\" mb=\"16px\">\n          {t('Balance: %balance%', {\n            balance: getBalanceAmount(userCurrencyBalance, currency.decimals).toString(),\n          })}\n        </Text>\n        <Flex justifyContent=\"space-between\" mb=\"16px\">\n          {multiplierValues.map((multiplierValue, index) => (\n            <Button\n              key={multiplierValue}\n              scale=\"xs\"\n              variant=\"tertiary\"\n              onClick={() => setValue(getBalanceAmount(maximumLpCommitable.times(multiplierValue)).toString())}\n              mr={index < multiplierValues.length - 1 ? '8px' : 0}\n            >\n              {multiplierValue * 100}%\n            </Button>\n          ))}\n        </Flex>\n        <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"24px\">\n          {t(\n            'If you donâ€™t commit enough LP tokens, you may not receive any IFO tokens at all and will only receive a full refund of your LP tokens.',\n          )}\n        </Text>\n        <ApproveConfirmButtons\n          isApproveDisabled={isConfirmed || isConfirming || isApproved}\n          isApproving={isApproving}\n          isConfirmDisabled={\n            !isApproved || isConfirmed || valueWithTokenDecimals.isNaN() || valueWithTokenDecimals.eq(0)\n          }\n          isConfirming={isConfirming}\n          onApprove={handleApprove}\n          onConfirm={handleConfirm}\n        />\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default ContributeModal\n"]},"metadata":{},"sourceType":"module"}