{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { UnsupportedChainIdError, useWeb3React } from '@web3-react/core';\nimport { NoBscProviderError } from '@binance-chain/bsc-connector';\nimport { NoEthereumProviderError, UserRejectedRequestError as UserRejectedRequestErrorInjected } from '@web3-react/injected-connector';\nimport { UserRejectedRequestError as UserRejectedRequestErrorWalletConnect, WalletConnectConnector } from '@web3-react/walletconnect-connector';\nimport { connectorLocalStorageKey } from '@pancakeswap/uikit';\nimport { connectorsByName } from 'utils/web3React';\nimport { setupNetwork } from 'utils/wallet';\nimport useToast from 'hooks/useToast';\nimport { profileClear } from 'state/profile';\nimport { useAppDispatch } from 'state';\nimport { useTranslation } from 'contexts/Localization';\nimport { clearAllTransactions } from 'state/transactions/actions';\n\nconst useAuth = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const dispatch = useAppDispatch();\n  const {\n    chainId,\n    activate,\n    deactivate\n  } = useWeb3React();\n  const {\n    toastError\n  } = useToast();\n  const login = useCallback(connectorID => {\n    const connector = connectorsByName[connectorID];\n\n    if (connector) {\n      activate(connector, async error => {\n        if (error instanceof UnsupportedChainIdError) {\n          const hasSetup = await setupNetwork();\n\n          if (hasSetup) {\n            activate(connector);\n          }\n        } else {\n          window.localStorage.removeItem(connectorLocalStorageKey);\n\n          if (error instanceof NoEthereumProviderError || error instanceof NoBscProviderError) {\n            toastError(t('Provider Error'), t('No provider was found'));\n          } else if (error instanceof UserRejectedRequestErrorInjected || error instanceof UserRejectedRequestErrorWalletConnect) {\n            if (connector instanceof WalletConnectConnector) {\n              const walletConnector = connector;\n              walletConnector.walletConnectProvider = null;\n            }\n\n            toastError(t('Authorization Error'), t('Please authorize to access your account'));\n          } else {\n            toastError(error.name, error.message);\n          }\n        }\n      });\n    } else {\n      toastError(t('Unable to find connector'), t('The connector config is wrong'));\n    }\n  }, [t, activate, toastError]);\n  const logout = useCallback(() => {\n    dispatch(profileClear());\n    deactivate(); // This localStorage key is set by @web3-react/walletconnect-connector\n\n    if (window.localStorage.getItem('walletconnect')) {\n      connectorsByName.walletconnect.close();\n      connectorsByName.walletconnect.walletConnectProvider = null;\n    }\n\n    window.localStorage.removeItem(connectorLocalStorageKey);\n\n    if (chainId) {\n      dispatch(clearAllTransactions({\n        chainId\n      }));\n    }\n  }, [deactivate, dispatch, chainId]);\n  return {\n    login,\n    logout\n  };\n};\n\n_s(useAuth, \"biPodZYR89JpfSRWf1JQ2WWlRP8=\", false, function () {\n  return [useTranslation, useAppDispatch, useWeb3React, useToast];\n});\n\nexport default useAuth;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/hooks/useAuth.ts"],"names":["useCallback","UnsupportedChainIdError","useWeb3React","NoBscProviderError","NoEthereumProviderError","UserRejectedRequestError","UserRejectedRequestErrorInjected","UserRejectedRequestErrorWalletConnect","WalletConnectConnector","connectorLocalStorageKey","connectorsByName","setupNetwork","useToast","profileClear","useAppDispatch","useTranslation","clearAllTransactions","useAuth","t","dispatch","chainId","activate","deactivate","toastError","login","connectorID","connector","error","hasSetup","window","localStorage","removeItem","walletConnector","walletConnectProvider","name","message","logout","getItem","walletconnect","close"],"mappings":"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","sourcesContent":["import { useCallback } from 'react'\nimport { UnsupportedChainIdError, useWeb3React } from '@web3-react/core'\nimport { NoBscProviderError } from '@binance-chain/bsc-connector'\nimport {\n  NoEthereumProviderError,\n  UserRejectedRequestError as UserRejectedRequestErrorInjected,\n} from '@web3-react/injected-connector'\nimport {\n  UserRejectedRequestError as UserRejectedRequestErrorWalletConnect,\n  WalletConnectConnector,\n} from '@web3-react/walletconnect-connector'\nimport { ConnectorNames, connectorLocalStorageKey } from '@pancakeswap/uikit'\nimport { connectorsByName } from 'utils/web3React'\nimport { setupNetwork } from 'utils/wallet'\nimport useToast from 'hooks/useToast'\nimport { profileClear } from 'state/profile'\nimport { useAppDispatch } from 'state'\nimport { useTranslation } from 'contexts/Localization'\nimport { clearAllTransactions } from 'state/transactions/actions'\n\nconst useAuth = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { chainId, activate, deactivate } = useWeb3React()\n  const { toastError } = useToast()\n\n  const login = useCallback(\n    (connectorID: ConnectorNames) => {\n      const connector = connectorsByName[connectorID]\n      if (connector) {\n        activate(connector, async (error: Error) => {\n          if (error instanceof UnsupportedChainIdError) {\n            const hasSetup = await setupNetwork()\n            if (hasSetup) {\n              activate(connector)\n            }\n          } else {\n            window.localStorage.removeItem(connectorLocalStorageKey)\n            if (error instanceof NoEthereumProviderError || error instanceof NoBscProviderError) {\n              toastError(t('Provider Error'), t('No provider was found'))\n            } else if (\n              error instanceof UserRejectedRequestErrorInjected ||\n              error instanceof UserRejectedRequestErrorWalletConnect\n            ) {\n              if (connector instanceof WalletConnectConnector) {\n                const walletConnector = connector as WalletConnectConnector\n                walletConnector.walletConnectProvider = null\n              }\n              toastError(t('Authorization Error'), t('Please authorize to access your account'))\n            } else {\n              toastError(error.name, error.message)\n            }\n          }\n        })\n      } else {\n        toastError(t('Unable to find connector'), t('The connector config is wrong'))\n      }\n    },\n    [t, activate, toastError],\n  )\n\n  const logout = useCallback(() => {\n    dispatch(profileClear())\n    deactivate()\n    // This localStorage key is set by @web3-react/walletconnect-connector\n    if (window.localStorage.getItem('walletconnect')) {\n      connectorsByName.walletconnect.close()\n      connectorsByName.walletconnect.walletConnectProvider = null\n    }\n    window.localStorage.removeItem(connectorLocalStorageKey)\n    if (chainId) {\n      dispatch(clearAllTransactions({ chainId }))\n    }\n  }, [deactivate, dispatch, chainId])\n\n  return { login, logout }\n}\n\nexport default useAuth\n"]},"metadata":{},"sourceType":"module"}