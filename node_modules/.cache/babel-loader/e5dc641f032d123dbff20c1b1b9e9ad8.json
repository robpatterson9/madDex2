{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Pools/components/CakeVaultCard/VaultStakeModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Modal, Text, Flex, Image, Button, Slider, BalanceInput, AutoRenewIcon, CalculateIcon, IconButton } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useWeb3React } from '@web3-react/core';\nimport { useAppDispatch } from 'state';\nimport { BIG_TEN } from 'utils/bigNumber';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport { useCakeVault } from 'state/pools/hooks';\nimport { useCakeVaultContract } from 'hooks/useContract';\nimport useTheme from 'hooks/useTheme';\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer';\nimport BigNumber from 'bignumber.js';\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance';\nimport useToast from 'hooks/useToast';\nimport { fetchCakeVaultUserData } from 'state/pools';\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers';\nimport RoiCalculatorModal from 'components/RoiCalculatorModal';\nimport { ToastDescriptionWithTx } from 'components/Toast';\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice';\nimport { convertCakeToShares, convertSharesToCake } from '../../helpers';\nimport FeeSummary from './FeeSummary';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`;\n_c = StyledButton;\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`;\n_c2 = AnnualRoiContainer;\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`;\n_c3 = AnnualRoiDisplay;\nconst callOptions = {\n  gasLimit: 380000\n};\n\nconst VaultStakeModal = ({\n  pool,\n  stakingMax,\n  performanceFee,\n  isRemovingStake = false,\n  onDismiss\n}) => {\n  _s();\n\n  const dispatch = useAppDispatch();\n  const {\n    stakingToken,\n    earningToken,\n    apr,\n    stakingTokenPrice,\n    earningTokenPrice\n  } = pool;\n  const {\n    account\n  } = useWeb3React();\n  const cakeVaultContract = useCakeVaultContract();\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n  const {\n    userData: {\n      lastDepositedTime,\n      userShares\n    },\n    pricePerFullShare\n  } = useCakeVault();\n  const {\n    t\n  } = useTranslation();\n  const {\n    theme\n  } = useTheme();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const [pendingTx, setPendingTx] = useState(false);\n  const [stakeAmount, setStakeAmount] = useState('');\n  const [percent, setPercent] = useState(0);\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false);\n  const {\n    hasUnstakingFee\n  } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares);\n  const cakePriceBusd = usePriceCakeBusd();\n  const usdValueStaked = new BigNumber(stakeAmount).times(cakePriceBusd);\n  const formattedUsdValueStaked = cakePriceBusd.gt(0) && stakeAmount ? formatNumber(usdValueStaked.toNumber()) : '';\n  const {\n    cakeAsBigNumber\n  } = convertSharesToCake(userShares, pricePerFullShare);\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !usdValueStaked.isNaN() ? usdValueStaked.toNumber() : 0,\n    apr,\n    earningTokenPrice,\n    performanceFee\n  });\n  const annualRoi = interestBreakdown[3] * pool.earningTokenPrice;\n  const formattedAnnualRoi = formatNumber(annualRoi, annualRoi > 10000 ? 0 : 2, annualRoi > 10000 ? 0 : 2);\n  const getTokenLink = stakingToken.address ? `/swap?outputCurrency=${stakingToken.address}` : '/swap';\n\n  const handleStakeInputChange = input => {\n    if (input) {\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals));\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber());\n      setPercent(percentage > 100 ? 100 : percentage);\n    } else {\n      setPercent(0);\n    }\n\n    setStakeAmount(input);\n  };\n\n  const handleChangePercent = sliderPercent => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent);\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals);\n      setStakeAmount(amountToStake);\n    } else {\n      setStakeAmount('');\n    }\n\n    setPercent(sliderPercent);\n  };\n\n  const handleWithdrawal = async convertedStakeAmount => {\n    setPendingTx(true);\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare); // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\n\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000);\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber);\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold);\n\n    if (isWithdrawingAll) {\n      try {\n        const tx = await callWithGasPrice(cakeVaultContract, 'withdrawAll', undefined, callOptions);\n        const receipt = await tx.wait();\n\n        if (receipt.status) {\n          toastSuccess(t('Unstaked!'), /*#__PURE__*/_jsxDEV(ToastDescriptionWithTx, {\n            txHash: receipt.transactionHash,\n            children: t('Your earnings have also been harvested to your wallet')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this));\n          setPendingTx(false);\n          onDismiss();\n          dispatch(fetchCakeVaultUserData({\n            account\n          }));\n        }\n      } catch (error) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n        setPendingTx(false);\n      }\n    } else {\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      try {\n        const tx = await callWithGasPrice(cakeVaultContract, 'withdraw', [shareStakeToWithdraw.sharesAsBigNumber.toString()], callOptions);\n        const receipt = await tx.wait();\n\n        if (receipt.status) {\n          toastSuccess(t('Unstaked!'), /*#__PURE__*/_jsxDEV(ToastDescriptionWithTx, {\n            txHash: receipt.transactionHash,\n            children: t('Your earnings have also been harvested to your wallet')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this));\n          setPendingTx(false);\n          onDismiss();\n          dispatch(fetchCakeVaultUserData({\n            account\n          }));\n        }\n      } catch (error) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n        setPendingTx(false);\n      }\n    }\n  };\n\n  const handleDeposit = async convertedStakeAmount => {\n    setPendingTx(true);\n\n    try {\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      const tx = await callWithGasPrice(cakeVaultContract, 'deposit', [convertedStakeAmount.toString()], callOptions);\n      const receipt = await tx.wait();\n\n      if (receipt.status) {\n        toastSuccess(t('Staked!'), /*#__PURE__*/_jsxDEV(ToastDescriptionWithTx, {\n          txHash: receipt.transactionHash,\n          children: t('Your funds have been staked in the pool')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this));\n        setPendingTx(false);\n        onDismiss();\n        dispatch(fetchCakeVaultUserData({\n          account\n        }));\n      }\n    } catch (error) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n      setPendingTx(false);\n    }\n  };\n\n  const handleConfirmClick = async () => {\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals);\n\n    if (isRemovingStake) {\n      // unstaking\n      handleWithdrawal(convertedStakeAmount);\n    } else {\n      // staking\n      handleDeposit(convertedStakeAmount);\n    }\n  };\n\n  if (showRoiCalculator) {\n    return /*#__PURE__*/_jsxDEV(RoiCalculatorModal, {\n      earningTokenPrice: earningTokenPrice,\n      stakingTokenPrice: stakingTokenPrice,\n      apr: apr,\n      linkLabel: t('Get %symbol%', {\n        symbol: stakingToken.symbol\n      }),\n      linkHref: getTokenLink,\n      stakingTokenBalance: cakeAsBigNumber.plus(stakingMax),\n      stakingTokenSymbol: stakingToken.symbol,\n      earningTokenSymbol: earningToken.symbol,\n      onBack: () => setShowRoiCalculator(false),\n      initialValue: stakeAmount,\n      performanceFee: performanceFee\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: isRemovingStake ? t('Unstake') : t('Stake in Pool'),\n    onDismiss: onDismiss,\n    headerBackground: theme.colors.gradients.cardHeader,\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      mb: \"8px\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        children: [isRemovingStake ? t('Unstake') : t('Stake'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        minWidth: \"70px\",\n        children: [/*#__PURE__*/_jsxDEV(Image, {\n          src: `/images/tokens/${stakingToken.address}.png`,\n          width: 24,\n          height: 24,\n          alt: stakingToken.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          ml: \"4px\",\n          bold: true,\n          children: stakingToken.symbol\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BalanceInput, {\n      value: stakeAmount,\n      onUserInput: handleStakeInputChange,\n      currencyValue: cakePriceBusd.gt(0) && `~${formattedUsdValueStaked || 0} USD`,\n      decimals: stakingToken.decimals\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      mt: \"8px\",\n      ml: \"auto\",\n      color: \"textSubtle\",\n      fontSize: \"12px\",\n      mb: \"8px\",\n      children: t('Balance: %balance%', {\n        balance: getFullDisplayBalance(stakingMax, stakingToken.decimals)\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Slider, {\n      min: 0,\n      max: 100,\n      value: percent,\n      onValueChanged: handleChangePercent,\n      name: \"stake\",\n      valueLabel: `${percent}%`,\n      step: 1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      mt: \"8px\",\n      children: [/*#__PURE__*/_jsxDEV(StyledButton, {\n        scale: \"xs\",\n        mx: \"2px\",\n        p: \"4px 16px\",\n        variant: \"tertiary\",\n        onClick: () => handleChangePercent(25),\n        children: \"25%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n        scale: \"xs\",\n        mx: \"2px\",\n        p: \"4px 16px\",\n        variant: \"tertiary\",\n        onClick: () => handleChangePercent(50),\n        children: \"50%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n        scale: \"xs\",\n        mx: \"2px\",\n        p: \"4px 16px\",\n        variant: \"tertiary\",\n        onClick: () => handleChangePercent(75),\n        children: \"75%\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StyledButton, {\n        scale: \"xs\",\n        mx: \"2px\",\n        p: \"4px 16px\",\n        variant: \"tertiary\",\n        onClick: () => handleChangePercent(100),\n        children: t('Max')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), isRemovingStake && hasUnstakingFee && /*#__PURE__*/_jsxDEV(FeeSummary, {\n      stakingTokenSymbol: stakingToken.symbol,\n      stakeAmount: stakeAmount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }, this), !isRemovingStake && /*#__PURE__*/_jsxDEV(Flex, {\n      mt: \"24px\",\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        mr: \"8px\",\n        color: \"textSubtle\",\n        children: [t('Annual ROI at current rates'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(AnnualRoiContainer, {\n        alignItems: \"center\",\n        onClick: () => setShowRoiCalculator(true),\n        children: [/*#__PURE__*/_jsxDEV(AnnualRoiDisplay, {\n          children: [\"$\", formattedAnnualRoi]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          variant: \"text\",\n          scale: \"sm\",\n          children: /*#__PURE__*/_jsxDEV(CalculateIcon, {\n            color: \"textSubtle\",\n            width: \"18px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      isLoading: pendingTx,\n      endIcon: pendingTx ? /*#__PURE__*/_jsxDEV(AutoRenewIcon, {\n        spin: true,\n        color: \"currentColor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 30\n      }, this) : null,\n      onClick: handleConfirmClick,\n      disabled: !stakeAmount || parseFloat(stakeAmount) === 0,\n      mt: \"24px\",\n      children: pendingTx ? t('Confirming') : t('Confirm')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), !isRemovingStake && /*#__PURE__*/_jsxDEV(Button, {\n      mt: \"8px\",\n      as: \"a\",\n      external: true,\n      href: getTokenLink,\n      variant: \"secondary\",\n      children: t('Get %symbol%', {\n        symbol: stakingToken.symbol\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n\n_s(VaultStakeModal, \"CJVWCFNauD7Er0sKYBehDAh0mc4=\", false, function () {\n  return [useAppDispatch, useWeb3React, useCakeVaultContract, useCallWithGasPrice, useCakeVault, useTranslation, useTheme, useToast, useWithdrawalFeeTimer, usePriceCakeBusd];\n});\n\n_c4 = VaultStakeModal;\nexport default VaultStakeModal;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"StyledButton\");\n$RefreshReg$(_c2, \"AnnualRoiContainer\");\n$RefreshReg$(_c3, \"AnnualRoiDisplay\");\n$RefreshReg$(_c4, \"VaultStakeModal\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/components/CakeVaultCard/VaultStakeModal.tsx"],"names":["React","useState","styled","Modal","Text","Flex","Image","Button","Slider","BalanceInput","AutoRenewIcon","CalculateIcon","IconButton","useTranslation","useWeb3React","useAppDispatch","BIG_TEN","usePriceCakeBusd","useCakeVault","useCakeVaultContract","useTheme","useWithdrawalFeeTimer","BigNumber","getFullDisplayBalance","formatNumber","getDecimalAmount","useToast","fetchCakeVaultUserData","getInterestBreakdown","RoiCalculatorModal","ToastDescriptionWithTx","useCallWithGasPrice","convertCakeToShares","convertSharesToCake","FeeSummary","StyledButton","AnnualRoiContainer","AnnualRoiDisplay","callOptions","gasLimit","VaultStakeModal","pool","stakingMax","performanceFee","isRemovingStake","onDismiss","dispatch","stakingToken","earningToken","apr","stakingTokenPrice","earningTokenPrice","account","cakeVaultContract","callWithGasPrice","userData","lastDepositedTime","userShares","pricePerFullShare","t","theme","toastSuccess","toastError","pendingTx","setPendingTx","stakeAmount","setStakeAmount","percent","setPercent","showRoiCalculator","setShowRoiCalculator","hasUnstakingFee","parseInt","cakePriceBusd","usdValueStaked","times","formattedUsdValueStaked","gt","toNumber","cakeAsBigNumber","interestBreakdown","principalInUSD","isNaN","annualRoi","formattedAnnualRoi","getTokenLink","address","handleStakeInputChange","input","convertedInput","multipliedBy","pow","decimals","percentage","Math","floor","dividedBy","handleChangePercent","sliderPercent","percentageOfStakingMax","amountToStake","handleWithdrawal","convertedStakeAmount","shareStakeToWithdraw","triggerWithdrawAllThreshold","sharesRemaining","minus","sharesAsBigNumber","isWithdrawingAll","lte","tx","undefined","receipt","wait","status","transactionHash","error","toString","handleDeposit","handleConfirmClick","symbol","plus","colors","gradients","cardHeader","balance","parseFloat"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport {\n  Modal,\n  Text,\n  Flex,\n  Image,\n  Button,\n  Slider,\n  BalanceInput,\n  AutoRenewIcon,\n  CalculateIcon,\n  IconButton,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { BIG_TEN } from 'utils/bigNumber'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { useCakeVaultContract } from 'hooks/useContract'\nimport useTheme from 'hooks/useTheme'\nimport useWithdrawalFeeTimer from 'views/Pools/hooks/useWithdrawalFeeTimer'\nimport BigNumber from 'bignumber.js'\nimport { getFullDisplayBalance, formatNumber, getDecimalAmount } from 'utils/formatBalance'\nimport useToast from 'hooks/useToast'\nimport { fetchCakeVaultUserData } from 'state/pools'\nimport { DeserializedPool } from 'state/types'\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport { convertCakeToShares, convertSharesToCake } from '../../helpers'\nimport FeeSummary from './FeeSummary'\n\ninterface VaultStakeModalProps {\n  pool: DeserializedPool\n  stakingMax: BigNumber\n  performanceFee?: number\n  isRemovingStake?: boolean\n  onDismiss?: () => void\n}\n\nconst StyledButton = styled(Button)`\n  flex-grow: 1;\n`\n\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`\n\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`\n\nconst callOptions = {\n  gasLimit: 380000,\n}\n\nconst VaultStakeModal: React.FC<VaultStakeModalProps> = ({\n  pool,\n  stakingMax,\n  performanceFee,\n  isRemovingStake = false,\n  onDismiss,\n}) => {\n  const dispatch = useAppDispatch()\n  const { stakingToken, earningToken, apr, stakingTokenPrice, earningTokenPrice } = pool\n  const { account } = useWeb3React()\n  const cakeVaultContract = useCakeVaultContract()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const {\n    userData: { lastDepositedTime, userShares },\n    pricePerFullShare,\n  } = useCakeVault()\n  const { t } = useTranslation()\n  const { theme } = useTheme()\n  const { toastSuccess, toastError } = useToast()\n  const [pendingTx, setPendingTx] = useState(false)\n  const [stakeAmount, setStakeAmount] = useState('')\n  const [percent, setPercent] = useState(0)\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\n  const { hasUnstakingFee } = useWithdrawalFeeTimer(parseInt(lastDepositedTime, 10), userShares)\n  const cakePriceBusd = usePriceCakeBusd()\n  const usdValueStaked = new BigNumber(stakeAmount).times(cakePriceBusd)\n  const formattedUsdValueStaked = cakePriceBusd.gt(0) && stakeAmount ? formatNumber(usdValueStaked.toNumber()) : ''\n\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\n\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !usdValueStaked.isNaN() ? usdValueStaked.toNumber() : 0,\n    apr,\n    earningTokenPrice,\n    performanceFee,\n  })\n  const annualRoi = interestBreakdown[3] * pool.earningTokenPrice\n  const formattedAnnualRoi = formatNumber(annualRoi, annualRoi > 10000 ? 0 : 2, annualRoi > 10000 ? 0 : 2)\n\n  const getTokenLink = stakingToken.address ? `/swap?outputCurrency=${stakingToken.address}` : '/swap'\n\n  const handleStakeInputChange = (input: string) => {\n    if (input) {\n      const convertedInput = new BigNumber(input).multipliedBy(BIG_TEN.pow(stakingToken.decimals))\n      const percentage = Math.floor(convertedInput.dividedBy(stakingMax).multipliedBy(100).toNumber())\n      setPercent(percentage > 100 ? 100 : percentage)\n    } else {\n      setPercent(0)\n    }\n    setStakeAmount(input)\n  }\n\n  const handleChangePercent = (sliderPercent: number) => {\n    if (sliderPercent > 0) {\n      const percentageOfStakingMax = stakingMax.dividedBy(100).multipliedBy(sliderPercent)\n      const amountToStake = getFullDisplayBalance(percentageOfStakingMax, stakingToken.decimals, stakingToken.decimals)\n      setStakeAmount(amountToStake)\n    } else {\n      setStakeAmount('')\n    }\n    setPercent(sliderPercent)\n  }\n\n  const handleWithdrawal = async (convertedStakeAmount: BigNumber) => {\n    setPendingTx(true)\n    const shareStakeToWithdraw = convertCakeToShares(convertedStakeAmount, pricePerFullShare)\n    // trigger withdrawAll function if the withdrawal will leave 0.000001 CAKE or less\n    const triggerWithdrawAllThreshold = new BigNumber(1000000000000)\n    const sharesRemaining = userShares.minus(shareStakeToWithdraw.sharesAsBigNumber)\n    const isWithdrawingAll = sharesRemaining.lte(triggerWithdrawAllThreshold)\n\n    if (isWithdrawingAll) {\n      try {\n        const tx = await callWithGasPrice(cakeVaultContract, 'withdrawAll', undefined, callOptions)\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          toastSuccess(\n            t('Unstaked!'),\n            <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n              {t('Your earnings have also been harvested to your wallet')}\n            </ToastDescriptionWithTx>,\n          )\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        }\n      } catch (error) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setPendingTx(false)\n      }\n    } else {\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      try {\n        const tx = await callWithGasPrice(\n          cakeVaultContract,\n          'withdraw',\n          [shareStakeToWithdraw.sharesAsBigNumber.toString()],\n          callOptions,\n        )\n        const receipt = await tx.wait()\n        if (receipt.status) {\n          toastSuccess(\n            t('Unstaked!'),\n            <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n              {t('Your earnings have also been harvested to your wallet')}\n            </ToastDescriptionWithTx>,\n          )\n          setPendingTx(false)\n          onDismiss()\n          dispatch(fetchCakeVaultUserData({ account }))\n        }\n      } catch (error) {\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n        setPendingTx(false)\n      }\n    }\n  }\n\n  const handleDeposit = async (convertedStakeAmount: BigNumber) => {\n    setPendingTx(true)\n    try {\n      // .toString() being called to fix a BigNumber error in prod\n      // as suggested here https://github.com/ChainSafe/web3.js/issues/2077\n      const tx = await callWithGasPrice(cakeVaultContract, 'deposit', [convertedStakeAmount.toString()], callOptions)\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        toastSuccess(\n          t('Staked!'),\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n            {t('Your funds have been staked in the pool')}\n          </ToastDescriptionWithTx>,\n        )\n        setPendingTx(false)\n        onDismiss()\n        dispatch(fetchCakeVaultUserData({ account }))\n      }\n    } catch (error) {\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\n      setPendingTx(false)\n    }\n  }\n\n  const handleConfirmClick = async () => {\n    const convertedStakeAmount = getDecimalAmount(new BigNumber(stakeAmount), stakingToken.decimals)\n    if (isRemovingStake) {\n      // unstaking\n      handleWithdrawal(convertedStakeAmount)\n    } else {\n      // staking\n      handleDeposit(convertedStakeAmount)\n    }\n  }\n\n  if (showRoiCalculator) {\n    return (\n      <RoiCalculatorModal\n        earningTokenPrice={earningTokenPrice}\n        stakingTokenPrice={stakingTokenPrice}\n        apr={apr}\n        linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n        linkHref={getTokenLink}\n        stakingTokenBalance={cakeAsBigNumber.plus(stakingMax)}\n        stakingTokenSymbol={stakingToken.symbol}\n        earningTokenSymbol={earningToken.symbol}\n        onBack={() => setShowRoiCalculator(false)}\n        initialValue={stakeAmount}\n        performanceFee={performanceFee}\n      />\n    )\n  }\n\n  return (\n    <Modal\n      title={isRemovingStake ? t('Unstake') : t('Stake in Pool')}\n      onDismiss={onDismiss}\n      headerBackground={theme.colors.gradients.cardHeader}\n    >\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n        <Text bold>{isRemovingStake ? t('Unstake') : t('Stake')}:</Text>\n        <Flex alignItems=\"center\" minWidth=\"70px\">\n          <Image src={`/images/tokens/${stakingToken.address}.png`} width={24} height={24} alt={stakingToken.symbol} />\n          <Text ml=\"4px\" bold>\n            {stakingToken.symbol}\n          </Text>\n        </Flex>\n      </Flex>\n      <BalanceInput\n        value={stakeAmount}\n        onUserInput={handleStakeInputChange}\n        currencyValue={cakePriceBusd.gt(0) && `~${formattedUsdValueStaked || 0} USD`}\n        decimals={stakingToken.decimals}\n      />\n      <Text mt=\"8px\" ml=\"auto\" color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\n        {t('Balance: %balance%', { balance: getFullDisplayBalance(stakingMax, stakingToken.decimals) })}\n      </Text>\n      <Slider\n        min={0}\n        max={100}\n        value={percent}\n        onValueChanged={handleChangePercent}\n        name=\"stake\"\n        valueLabel={`${percent}%`}\n        step={1}\n      />\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mt=\"8px\">\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(25)}>\n          25%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(50)}>\n          50%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(75)}>\n          75%\n        </StyledButton>\n        <StyledButton scale=\"xs\" mx=\"2px\" p=\"4px 16px\" variant=\"tertiary\" onClick={() => handleChangePercent(100)}>\n          {t('Max')}\n        </StyledButton>\n      </Flex>\n      {isRemovingStake && hasUnstakingFee && (\n        <FeeSummary stakingTokenSymbol={stakingToken.symbol} stakeAmount={stakeAmount} />\n      )}\n      {!isRemovingStake && (\n        <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n          <Text mr=\"8px\" color=\"textSubtle\">\n            {t('Annual ROI at current rates')}:\n          </Text>\n          <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\n            <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\n            <IconButton variant=\"text\" scale=\"sm\">\n              <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n            </IconButton>\n          </AnnualRoiContainer>\n        </Flex>\n      )}\n      <Button\n        isLoading={pendingTx}\n        endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n        onClick={handleConfirmClick}\n        disabled={!stakeAmount || parseFloat(stakeAmount) === 0}\n        mt=\"24px\"\n      >\n        {pendingTx ? t('Confirming') : t('Confirm')}\n      </Button>\n      {!isRemovingStake && (\n        <Button mt=\"8px\" as=\"a\" external href={getTokenLink} variant=\"secondary\">\n          {t('Get %symbol%', { symbol: stakingToken.symbol })}\n        </Button>\n      )}\n    </Modal>\n  )\n}\n\nexport default VaultStakeModal\n"]},"metadata":{},"sourceType":"module"}