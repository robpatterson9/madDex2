{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { MaxUint256 } from '@ethersproject/constants';\nimport { TokenAmount, ETHER } from '@pancakeswap/sdk';\nimport { useCallback, useMemo } from 'react';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport { ROUTER_ADDRESS } from '../config/constants';\nimport useTokenAllowance from './useTokenAllowance';\nimport { Field } from '../state/swap/actions';\nimport { useTransactionAdder, useHasPendingApproval } from '../state/transactions/hooks';\nimport { computeSlippageAdjustedAmounts } from '../utils/prices';\nimport { calculateGasMargin } from '../utils';\nimport { useTokenContract } from './useContract';\nimport { useCallWithGasPrice } from './useCallWithGasPrice';\nexport let ApprovalState; // returns a variable indicating the state of the approval and a function which approves if necessary or early returns\n\n(function (ApprovalState) {\n  ApprovalState[ApprovalState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  ApprovalState[ApprovalState[\"NOT_APPROVED\"] = 1] = \"NOT_APPROVED\";\n  ApprovalState[ApprovalState[\"PENDING\"] = 2] = \"PENDING\";\n  ApprovalState[ApprovalState[\"APPROVED\"] = 3] = \"APPROVED\";\n})(ApprovalState || (ApprovalState = {}));\n\nexport function useApproveCallback(amountToApprove, spender) {\n  _s();\n\n  const {\n    account\n  } = useActiveWeb3React();\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n  const token = amountToApprove instanceof TokenAmount ? amountToApprove.token : undefined;\n  const currentAllowance = useTokenAllowance(token, account !== null && account !== void 0 ? account : undefined, spender);\n  const pendingApproval = useHasPendingApproval(token === null || token === void 0 ? void 0 : token.address, spender); // check the current approval status\n\n  const approvalState = useMemo(() => {\n    if (!amountToApprove || !spender) return ApprovalState.UNKNOWN;\n    if (amountToApprove.currency === ETHER) return ApprovalState.APPROVED; // we might not have enough data to know whether or not we need to approve\n\n    if (!currentAllowance) return ApprovalState.UNKNOWN; // amountToApprove will be defined if currentAllowance is\n\n    return currentAllowance.lessThan(amountToApprove) ? pendingApproval ? ApprovalState.PENDING : ApprovalState.NOT_APPROVED : ApprovalState.APPROVED;\n  }, [amountToApprove, currentAllowance, pendingApproval, spender]);\n  const tokenContract = useTokenContract(token === null || token === void 0 ? void 0 : token.address);\n  const addTransaction = useTransactionAdder();\n  const approve = useCallback(async () => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily');\n      return;\n    }\n\n    if (!token) {\n      console.error('no token');\n      return;\n    }\n\n    if (!tokenContract) {\n      console.error('tokenContract is null');\n      return;\n    }\n\n    if (!amountToApprove) {\n      console.error('missing amount to approve');\n      return;\n    }\n\n    if (!spender) {\n      console.error('no spender');\n      return;\n    }\n\n    let useExact = false;\n    const estimatedGas = await tokenContract.estimateGas.approve(spender, MaxUint256).catch(() => {\n      // general fallback for tokens who restrict approval amounts\n      useExact = true;\n      return tokenContract.estimateGas.approve(spender, amountToApprove.raw.toString());\n    }); // eslint-disable-next-line consistent-return\n\n    return callWithGasPrice(tokenContract, 'approve', [spender, useExact ? amountToApprove.raw.toString() : MaxUint256], {\n      gasLimit: calculateGasMargin(estimatedGas)\n    }).then(response => {\n      addTransaction(response, {\n        summary: `Approve ${amountToApprove.currency.symbol}`,\n        approval: {\n          tokenAddress: token.address,\n          spender\n        }\n      });\n    }).catch(error => {\n      console.error('Failed to approve token', error);\n      throw error;\n    });\n  }, [approvalState, token, tokenContract, amountToApprove, spender, addTransaction, callWithGasPrice]);\n  return [approvalState, approve];\n} // wraps useApproveCallback in the context of a swap\n\n_s(useApproveCallback, \"BN21SD/eKYVPzvMt98kAj1rRBtA=\", false, function () {\n  return [useActiveWeb3React, useCallWithGasPrice, useTokenAllowance, useHasPendingApproval, useTokenContract, useTransactionAdder];\n});\n\nexport function useApproveCallbackFromTrade(trade, allowedSlippage = 0) {\n  _s2();\n\n  const amountToApprove = useMemo(() => trade ? computeSlippageAdjustedAmounts(trade, allowedSlippage)[Field.INPUT] : undefined, [trade, allowedSlippage]);\n  return useApproveCallback(amountToApprove, ROUTER_ADDRESS);\n}\n\n_s2(useApproveCallbackFromTrade, \"GmUgVOF70hjek2iOjUgFAqTvTUk=\", false, function () {\n  return [useApproveCallback];\n});","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/hooks/useApproveCallback.ts"],"names":["MaxUint256","TokenAmount","ETHER","useCallback","useMemo","useActiveWeb3React","ROUTER_ADDRESS","useTokenAllowance","Field","useTransactionAdder","useHasPendingApproval","computeSlippageAdjustedAmounts","calculateGasMargin","useTokenContract","useCallWithGasPrice","ApprovalState","useApproveCallback","amountToApprove","spender","account","callWithGasPrice","token","undefined","currentAllowance","pendingApproval","address","approvalState","UNKNOWN","currency","APPROVED","lessThan","PENDING","NOT_APPROVED","tokenContract","addTransaction","approve","console","error","useExact","estimatedGas","estimateGas","catch","raw","toString","gasLimit","then","response","summary","symbol","approval","tokenAddress","useApproveCallbackFromTrade","trade","allowedSlippage","INPUT"],"mappings":"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","sourcesContent":["import { MaxUint256 } from '@ethersproject/constants'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { Trade, TokenAmount, CurrencyAmount, ETHER } from '@pancakeswap/sdk'\nimport { useCallback, useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { ROUTER_ADDRESS } from '../config/constants'\nimport useTokenAllowance from './useTokenAllowance'\nimport { Field } from '../state/swap/actions'\nimport { useTransactionAdder, useHasPendingApproval } from '../state/transactions/hooks'\nimport { computeSlippageAdjustedAmounts } from '../utils/prices'\nimport { calculateGasMargin } from '../utils'\nimport { useTokenContract } from './useContract'\nimport { useCallWithGasPrice } from './useCallWithGasPrice'\n\nexport enum ApprovalState {\n  UNKNOWN,\n  NOT_APPROVED,\n  PENDING,\n  APPROVED,\n}\n\n// returns a variable indicating the state of the approval and a function which approves if necessary or early returns\nexport function useApproveCallback(\n  amountToApprove?: CurrencyAmount,\n  spender?: string,\n): [ApprovalState, () => Promise<void>] {\n  const { account } = useActiveWeb3React()\n  const { callWithGasPrice } = useCallWithGasPrice()\n  const token = amountToApprove instanceof TokenAmount ? amountToApprove.token : undefined\n  const currentAllowance = useTokenAllowance(token, account ?? undefined, spender)\n  const pendingApproval = useHasPendingApproval(token?.address, spender)\n\n  // check the current approval status\n  const approvalState: ApprovalState = useMemo(() => {\n    if (!amountToApprove || !spender) return ApprovalState.UNKNOWN\n    if (amountToApprove.currency === ETHER) return ApprovalState.APPROVED\n    // we might not have enough data to know whether or not we need to approve\n    if (!currentAllowance) return ApprovalState.UNKNOWN\n\n    // amountToApprove will be defined if currentAllowance is\n    return currentAllowance.lessThan(amountToApprove)\n      ? pendingApproval\n        ? ApprovalState.PENDING\n        : ApprovalState.NOT_APPROVED\n      : ApprovalState.APPROVED\n  }, [amountToApprove, currentAllowance, pendingApproval, spender])\n\n  const tokenContract = useTokenContract(token?.address)\n  const addTransaction = useTransactionAdder()\n\n  const approve = useCallback(async (): Promise<void> => {\n    if (approvalState !== ApprovalState.NOT_APPROVED) {\n      console.error('approve was called unnecessarily')\n      return\n    }\n    if (!token) {\n      console.error('no token')\n      return\n    }\n\n    if (!tokenContract) {\n      console.error('tokenContract is null')\n      return\n    }\n\n    if (!amountToApprove) {\n      console.error('missing amount to approve')\n      return\n    }\n\n    if (!spender) {\n      console.error('no spender')\n      return\n    }\n\n    let useExact = false\n\n    const estimatedGas = await tokenContract.estimateGas.approve(spender, MaxUint256).catch(() => {\n      // general fallback for tokens who restrict approval amounts\n      useExact = true\n      return tokenContract.estimateGas.approve(spender, amountToApprove.raw.toString())\n    })\n\n    // eslint-disable-next-line consistent-return\n    return callWithGasPrice(\n      tokenContract,\n      'approve',\n      [spender, useExact ? amountToApprove.raw.toString() : MaxUint256],\n      {\n        gasLimit: calculateGasMargin(estimatedGas),\n      },\n    )\n      .then((response: TransactionResponse) => {\n        addTransaction(response, {\n          summary: `Approve ${amountToApprove.currency.symbol}`,\n          approval: { tokenAddress: token.address, spender },\n        })\n      })\n      .catch((error: Error) => {\n        console.error('Failed to approve token', error)\n        throw error\n      })\n  }, [approvalState, token, tokenContract, amountToApprove, spender, addTransaction, callWithGasPrice])\n\n  return [approvalState, approve]\n}\n\n// wraps useApproveCallback in the context of a swap\nexport function useApproveCallbackFromTrade(trade?: Trade, allowedSlippage = 0) {\n  const amountToApprove = useMemo(\n    () => (trade ? computeSlippageAdjustedAmounts(trade, allowedSlippage)[Field.INPUT] : undefined),\n    [trade, allowedSlippage],\n  )\n\n  return useApproveCallback(amountToApprove, ROUTER_ADDRESS)\n}\n"]},"metadata":{},"sourceType":"module"}