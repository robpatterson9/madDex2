{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import{request,gql}from'graphql-request';import{INFO_CLIENT}from'config/constants/endpoints';import{TOKEN_BLACKLIST}from'config/constants/info';/**\n * Data for showing Pools table on the Token page\n */var POOLS_FOR_TOKEN=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  query poolsForToken($address: Bytes!, $blacklist: [String!]) {\\n    asToken0: pairs(\\n      first: 15\\n      orderBy: trackedReserveBNB\\n      orderDirection: desc\\n      where: { totalTransactions_gt: 100, token0: $address, token1_not_in: $blacklist }\\n    ) {\\n      id\\n    }\\n    asToken1: pairs(\\n      first: 15\\n      orderBy: trackedReserveBNB\\n      orderDirection: desc\\n      where: { totalTransactions_gt: 100, token1: $address, token0_not_in: $blacklist }\\n    ) {\\n      id\\n    }\\n  }\\n\"])));var fetchPoolsForToken=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(address){var data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return request(INFO_CLIENT,POOLS_FOR_TOKEN,{address:address,blacklist:TOKEN_BLACKLIST});case 3:data=_context.sent;return _context.abrupt(\"return\",{error:false,addresses:data.asToken0.concat(data.asToken1).map(function(p){return p.id;})});case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);console.error(\"Failed to fetch pools for token \".concat(address),_context.t0);return _context.abrupt(\"return\",{error:true});case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}));return function fetchPoolsForToken(_x){return _ref.apply(this,arguments);};}();export default fetchPoolsForToken;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/queries/tokens/poolsForToken.ts"],"names":["request","gql","INFO_CLIENT","TOKEN_BLACKLIST","POOLS_FOR_TOKEN","fetchPoolsForToken","address","blacklist","data","error","addresses","asToken0","concat","asToken1","map","p","id","console"],"mappings":"yeAAA,OAASA,OAAT,CAAkBC,GAAlB,KAA6B,iBAA7B,CACA,OAASC,WAAT,KAA4B,4BAA5B,CACA,OAASC,eAAT,KAAgC,uBAAhC,CAEA;AACA;AACA,GACA,GAAMC,CAAAA,eAAe,CAAGH,GAAH,0jBAArB,CA8BA,GAAMI,CAAAA,kBAAkB,0FAAG,iBACzBC,OADyB,iKAOJN,CAAAA,OAAO,CAAwBE,WAAxB,CAAqCE,eAArC,CAAsD,CAC9EE,OAAO,CAAPA,OAD8E,CAE9EC,SAAS,CAAEJ,eAFmE,CAAtD,CAPH,QAOjBK,IAPiB,+CAWhB,CACLC,KAAK,CAAE,KADF,CAELC,SAAS,CAAEF,IAAI,CAACG,QAAL,CAAcC,MAAd,CAAqBJ,IAAI,CAACK,QAA1B,EAAoCC,GAApC,CAAwC,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACC,EAAT,EAAxC,CAFN,CAXgB,0DAgBvBC,OAAO,CAACR,KAAR,2CAAiDH,OAAjD,eAhBuB,gCAiBhB,CACLG,KAAK,CAAE,IADF,CAjBgB,sEAAH,kBAAlBJ,CAAAA,kBAAkB,4CAAxB,CAuBA,cAAeA,CAAAA,kBAAf","sourcesContent":["import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\n\n/**\n * Data for showing Pools table on the Token page\n */\nconst POOLS_FOR_TOKEN = gql`\n  query poolsForToken($address: Bytes!, $blacklist: [String!]) {\n    asToken0: pairs(\n      first: 15\n      orderBy: trackedReserveBNB\n      orderDirection: desc\n      where: { totalTransactions_gt: 100, token0: $address, token1_not_in: $blacklist }\n    ) {\n      id\n    }\n    asToken1: pairs(\n      first: 15\n      orderBy: trackedReserveBNB\n      orderDirection: desc\n      where: { totalTransactions_gt: 100, token1: $address, token0_not_in: $blacklist }\n    ) {\n      id\n    }\n  }\n`\n\ninterface PoolsForTokenResponse {\n  asToken0: {\n    id: string\n  }[]\n  asToken1: {\n    id: string\n  }[]\n}\n\nconst fetchPoolsForToken = async (\n  address: string,\n): Promise<{\n  error: boolean\n  addresses?: string[]\n}> => {\n  try {\n    const data = await request<PoolsForTokenResponse>(INFO_CLIENT, POOLS_FOR_TOKEN, {\n      address,\n      blacklist: TOKEN_BLACKLIST,\n    })\n    return {\n      error: false,\n      addresses: data.asToken0.concat(data.asToken1).map((p) => p.id),\n    }\n  } catch (error) {\n    console.error(`Failed to fetch pools for token ${address}`, error)\n    return {\n      error: true,\n    }\n  }\n}\n\nexport default fetchPoolsForToken\n"]},"metadata":{},"sourceType":"module"}