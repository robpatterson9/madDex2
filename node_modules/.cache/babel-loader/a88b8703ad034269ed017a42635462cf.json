{"ast":null,"code":"import React from'react';import{Flex,Grid,Text,Button,Input,BinanceIcon,ErrorIcon}from'@pancakeswap/uikit';import{useWeb3React}from'@web3-react/core';import{useTranslation}from'contexts/Localization';import{Divider,RoundedImage}from'../shared/styles';import{GreyedOutContainer}from'./styles';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var TransferStage=function TransferStage(_ref){var nftToSell=_ref.nftToSell,lowestPrice=_ref.lowestPrice,transferAddress=_ref.transferAddress,setTransferAddress=_ref.setTransferAddress,isInvalidTransferAddress=_ref.isInvalidTransferAddress,continueToNextStage=_ref.continueToNextStage;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var transferAddressEqualsConnectedAddress=transferAddress.toLowerCase()===account.toLowerCase();var getErrorText=function getErrorText(){if(isInvalidTransferAddress){return t('That’s not a Binance Smart Chain wallet address.');}if(transferAddressEqualsConnectedAddress){return t('This address is the one that is currently connected');}return null;};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"24px\",bold:true,px:\"16px\",pt:\"16px\",children:t('Transfer to New Wallet')}),/*#__PURE__*/_jsxs(Flex,{p:\"16px\",children:[/*#__PURE__*/_jsx(RoundedImage,{src:nftToSell.image.thumbnail,height:68,width:68,mr:\"8px\"}),/*#__PURE__*/_jsxs(Grid,{flex:\"1\",gridTemplateColumns:\"1fr 1fr\",alignItems:\"center\",children:[/*#__PURE__*/_jsx(Text,{bold:true,children:nftToSell.name}),/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",color:\"textSubtle\",textAlign:\"right\",children:nftToSell.collectionName}),/*#__PURE__*/_jsx(Text,{small:true,color:\"textSubtle\",children:t('Lowest price')}),/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",justifyContent:\"flex-end\",children:[/*#__PURE__*/_jsx(BinanceIcon,{width:16,height:16,mr:\"4px\"}),/*#__PURE__*/_jsx(Text,{small:true,children:lowestPrice})]})]})]}),/*#__PURE__*/_jsxs(GreyedOutContainer,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",color:\"secondary\",textTransform:\"uppercase\",bold:true,children:t('Receiving address')}),/*#__PURE__*/_jsx(Input,{scale:\"sm\",isWarning:isInvalidTransferAddress||transferAddressEqualsConnectedAddress,placeholder:t('Paste BSC address'),value:transferAddress,onChange:function onChange(e){return setTransferAddress(e.target.value);}}),isInvalidTransferAddress||transferAddressEqualsConnectedAddress&&/*#__PURE__*/_jsx(Text,{fontSize:\"12px\",color:\"failure\",mt:\"4px\",children:getErrorText()})]}),/*#__PURE__*/_jsxs(Grid,{gridTemplateColumns:\"32px 1fr\",p:\"16px\",maxWidth:\"360px\",children:[/*#__PURE__*/_jsx(Flex,{alignSelf:\"flex-start\",children:/*#__PURE__*/_jsx(ErrorIcon,{width:24,height:24,color:\"textSubtle\"})}),/*#__PURE__*/_jsx(Text,{small:true,color:\"textSubtle\",children:t('This action will send your wallet to the address you have indicated above. Make sure it’s the correct')})]}),/*#__PURE__*/_jsx(Divider,{}),/*#__PURE__*/_jsx(Flex,{flexDirection:\"column\",px:\"16px\",pb:\"16px\",children:/*#__PURE__*/_jsx(Button,{mb:\"8px\",onClick:continueToNextStage,disabled:isInvalidTransferAddress||transferAddress.length===0||transferAddressEqualsConnectedAddress,children:\"Confirm\"})})]});};export default TransferStage;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/components/BuySellModals/SellModal/TransferStage.tsx"],"names":["React","Flex","Grid","Text","Button","Input","BinanceIcon","ErrorIcon","useWeb3React","useTranslation","Divider","RoundedImage","GreyedOutContainer","TransferStage","nftToSell","lowestPrice","transferAddress","setTransferAddress","isInvalidTransferAddress","continueToNextStage","t","account","transferAddressEqualsConnectedAddress","toLowerCase","getErrorText","image","thumbnail","name","collectionName","e","target","value","length"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Flex, Grid, Text, Button, Input, BinanceIcon, ErrorIcon } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { NftToken } from 'state/nftMarket/types'\nimport { Divider, RoundedImage } from '../shared/styles'\nimport { GreyedOutContainer } from './styles'\n\ninterface TransferStageProps {\n  nftToSell: NftToken\n  lowestPrice: number\n  transferAddress: string\n  setTransferAddress: React.Dispatch<React.SetStateAction<string>>\n  isInvalidTransferAddress: boolean\n  continueToNextStage: () => void\n}\n\nconst TransferStage: React.FC<TransferStageProps> = ({\n  nftToSell,\n  lowestPrice,\n  transferAddress,\n  setTransferAddress,\n  isInvalidTransferAddress,\n  continueToNextStage,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const transferAddressEqualsConnectedAddress = transferAddress.toLowerCase() === account.toLowerCase()\n  const getErrorText = () => {\n    if (isInvalidTransferAddress) {\n      return t('That’s not a Binance Smart Chain wallet address.')\n    }\n    if (transferAddressEqualsConnectedAddress) {\n      return t('This address is the one that is currently connected')\n    }\n    return null\n  }\n  return (\n    <>\n      <Text fontSize=\"24px\" bold px=\"16px\" pt=\"16px\">\n        {t('Transfer to New Wallet')}\n      </Text>\n      <Flex p=\"16px\">\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\n          <Text bold>{nftToSell.name}</Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n            {nftToSell.collectionName}\n          </Text>\n          <Text small color=\"textSubtle\">\n            {t('Lowest price')}\n          </Text>\n          <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n            <BinanceIcon width={16} height={16} mr=\"4px\" />\n            <Text small>{lowestPrice}</Text>\n          </Flex>\n        </Grid>\n      </Flex>\n      <GreyedOutContainer>\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\n          {t('Receiving address')}\n        </Text>\n        <Input\n          scale=\"sm\"\n          isWarning={isInvalidTransferAddress || transferAddressEqualsConnectedAddress}\n          placeholder={t('Paste BSC address')}\n          value={transferAddress}\n          onChange={(e) => setTransferAddress(e.target.value)}\n        />\n        {isInvalidTransferAddress ||\n          (transferAddressEqualsConnectedAddress && (\n            <Text fontSize=\"12px\" color=\"failure\" mt=\"4px\">\n              {getErrorText()}\n            </Text>\n          ))}\n      </GreyedOutContainer>\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\n        <Flex alignSelf=\"flex-start\">\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\n        </Flex>\n        <Text small color=\"textSubtle\">\n          {t('This action will send your wallet to the address you have indicated above. Make sure it’s the correct')}\n        </Text>\n      </Grid>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button\n          mb=\"8px\"\n          onClick={continueToNextStage}\n          disabled={isInvalidTransferAddress || transferAddress.length === 0 || transferAddressEqualsConnectedAddress}\n        >\n          Confirm\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default TransferStage\n"]},"metadata":{},"sourceType":"module"}