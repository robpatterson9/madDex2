{"ast":null,"code":"import{useEffect,useMemo}from'react';import{useSelector}from'react-redux';import{useAppDispatch}from'state';import{useWeb3React}from'@web3-react/core';import BigNumber from'bignumber.js';import{BIG_ZERO}from'utils/bigNumber';import{getBalanceAmount}from'utils/formatBalance';import{farmsConfig}from'config/constants';import useRefresh from'hooks/useRefresh';import{deserializeToken}from'state/user/hooks/helpers';import{fetchFarmsPublicDataAsync,fetchFarmUserDataAsync,nonArchivedFarms}from'.';var deserializeFarmUserData=function deserializeFarmUserData(farm){return{allowance:farm.userData?new BigNumber(farm.userData.allowance):BIG_ZERO,tokenBalance:farm.userData?new BigNumber(farm.userData.tokenBalance):BIG_ZERO,stakedBalance:farm.userData?new BigNumber(farm.userData.stakedBalance):BIG_ZERO,earnings:farm.userData?new BigNumber(farm.userData.earnings):BIG_ZERO};};var deserializeFarm=function deserializeFarm(farm){var lpAddresses=farm.lpAddresses,lpSymbol=farm.lpSymbol,pid=farm.pid,dual=farm.dual,multiplier=farm.multiplier,isCommunity=farm.isCommunity,quoteTokenPriceBusd=farm.quoteTokenPriceBusd,tokenPriceBusd=farm.tokenPriceBusd;return{lpAddresses:lpAddresses,lpSymbol:lpSymbol,pid:pid,dual:dual,multiplier:multiplier,isCommunity:isCommunity,quoteTokenPriceBusd:quoteTokenPriceBusd,tokenPriceBusd:tokenPriceBusd,token:deserializeToken(farm.token),quoteToken:deserializeToken(farm.quoteToken),userData:deserializeFarmUserData(farm),tokenAmountTotal:farm.tokenAmountTotal?new BigNumber(farm.tokenAmountTotal):BIG_ZERO,lpTotalInQuoteToken:farm.lpTotalInQuoteToken?new BigNumber(farm.lpTotalInQuoteToken):BIG_ZERO,lpTotalSupply:farm.lpTotalSupply?new BigNumber(farm.lpTotalSupply):BIG_ZERO,tokenPriceVsQuote:farm.tokenPriceVsQuote?new BigNumber(farm.tokenPriceVsQuote):BIG_ZERO,poolWeight:farm.poolWeight?new BigNumber(farm.poolWeight):BIG_ZERO};};export var usePollFarmsPublicData=function usePollFarmsPublicData(){var includeArchive=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var dispatch=useAppDispatch();var _useRefresh=useRefresh(),slowRefresh=_useRefresh.slowRefresh;useEffect(function(){var farmsToFetch=includeArchive?farmsConfig:nonArchivedFarms;var pids=farmsToFetch.map(function(farmToFetch){return farmToFetch.pid;});dispatch(fetchFarmsPublicDataAsync(pids));},[includeArchive,dispatch,slowRefresh]);};export var usePollFarmsWithUserData=function usePollFarmsWithUserData(){var includeArchive=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var dispatch=useAppDispatch();var _useRefresh2=useRefresh(),slowRefresh=_useRefresh2.slowRefresh;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;useEffect(function(){var farmsToFetch=includeArchive?farmsConfig:nonArchivedFarms;var pids=farmsToFetch.map(function(farmToFetch){return farmToFetch.pid;});dispatch(fetchFarmsPublicDataAsync(pids));if(account){dispatch(fetchFarmUserDataAsync({account:account,pids:pids}));}},[includeArchive,dispatch,slowRefresh,account]);};/**\n * Fetches the \"core\" farm data used globally\n * 251 = CAKE-BNB LP\n * 252 = BUSD-BNB LP\n */export var usePollCoreFarmData=function usePollCoreFarmData(){var dispatch=useAppDispatch();var _useRefresh3=useRefresh(),fastRefresh=_useRefresh3.fastRefresh;useEffect(function(){dispatch(fetchFarmsPublicDataAsync([251,252]));},[dispatch,fastRefresh]);};export var useFarms=function useFarms(){var farms=useSelector(function(state){return state.farms;});var deserializedFarmsData=farms.data.map(deserializeFarm);var loadArchivedFarmsData=farms.loadArchivedFarmsData,userDataLoaded=farms.userDataLoaded;return{loadArchivedFarmsData:loadArchivedFarmsData,userDataLoaded:userDataLoaded,data:deserializedFarmsData};};export var useFarmFromPid=function useFarmFromPid(pid){var farm=useSelector(function(state){return state.farms.data.find(function(f){return f.pid===pid;});});return deserializeFarm(farm);};export var useFarmFromLpSymbol=function useFarmFromLpSymbol(lpSymbol){var farm=useSelector(function(state){return state.farms.data.find(function(f){return f.lpSymbol===lpSymbol;});});return deserializeFarm(farm);};export var useFarmUser=function useFarmUser(pid){var _useFarmFromPid=useFarmFromPid(pid),userData=_useFarmFromPid.userData;var allowance=userData.allowance,tokenBalance=userData.tokenBalance,stakedBalance=userData.stakedBalance,earnings=userData.earnings;return{allowance:allowance,tokenBalance:tokenBalance,stakedBalance:stakedBalance,earnings:earnings};};// Return the base token price for a farm, from a given pid\nexport var useBusdPriceFromPid=function useBusdPriceFromPid(pid){var farm=useFarmFromPid(pid);return farm&&new BigNumber(farm.tokenPriceBusd);};export var useLpTokenPrice=function useLpTokenPrice(symbol){var farm=useFarmFromLpSymbol(symbol);var farmTokenPriceInUsd=useBusdPriceFromPid(farm.pid);var lpTokenPrice=BIG_ZERO;if(farm.lpTotalSupply.gt(0)&&farm.lpTotalInQuoteToken.gt(0)){// Total value of base token in LP\nvar valueOfBaseTokenInFarm=farmTokenPriceInUsd.times(farm.tokenAmountTotal);// Double it to get overall value in LP\nvar overallValueOfAllTokensInFarm=valueOfBaseTokenInFarm.times(2);// Divide total value of all tokens, by the number of LP tokens\nvar totalLpTokens=getBalanceAmount(farm.lpTotalSupply);lpTokenPrice=overallValueOfAllTokensInFarm.div(totalLpTokens);}return lpTokenPrice;};// /!\\ Deprecated , use the BUSD hook in /hooks\nexport var usePriceCakeBusd=function usePriceCakeBusd(){var cakeBnbFarm=useFarmFromPid(251);var cakePriceBusdAsString=cakeBnbFarm.tokenPriceBusd;var cakePriceBusd=useMemo(function(){return new BigNumber(cakePriceBusdAsString);},[cakePriceBusdAsString]);return cakePriceBusd;};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/farms/hooks.ts"],"names":["useEffect","useMemo","useSelector","useAppDispatch","useWeb3React","BigNumber","BIG_ZERO","getBalanceAmount","farmsConfig","useRefresh","deserializeToken","fetchFarmsPublicDataAsync","fetchFarmUserDataAsync","nonArchivedFarms","deserializeFarmUserData","farm","allowance","userData","tokenBalance","stakedBalance","earnings","deserializeFarm","lpAddresses","lpSymbol","pid","dual","multiplier","isCommunity","quoteTokenPriceBusd","tokenPriceBusd","token","quoteToken","tokenAmountTotal","lpTotalInQuoteToken","lpTotalSupply","tokenPriceVsQuote","poolWeight","usePollFarmsPublicData","includeArchive","dispatch","slowRefresh","farmsToFetch","pids","map","farmToFetch","usePollFarmsWithUserData","account","usePollCoreFarmData","fastRefresh","useFarms","farms","state","deserializedFarmsData","data","loadArchivedFarmsData","userDataLoaded","useFarmFromPid","find","f","useFarmFromLpSymbol","useFarmUser","useBusdPriceFromPid","useLpTokenPrice","symbol","farmTokenPriceInUsd","lpTokenPrice","gt","valueOfBaseTokenInFarm","times","overallValueOfAllTokensInFarm","totalLpTokens","div","usePriceCakeBusd","cakeBnbFarm","cakePriceBusdAsString","cakePriceBusd"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react'\nimport { useSelector } from 'react-redux'\nimport { useAppDispatch } from 'state'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from 'hooks/useRefresh'\nimport { deserializeToken } from 'state/user/hooks/helpers'\nimport { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync, nonArchivedFarms } from '.'\nimport { State, SerializedFarm, DeserializedFarmUserData, DeserializedFarm, DeserializedFarmsState } from '../types'\n\nconst deserializeFarmUserData = (farm: SerializedFarm): DeserializedFarmUserData => {\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO,\n  }\n}\n\nconst deserializeFarm = (farm: SerializedFarm): DeserializedFarm => {\n  const { lpAddresses, lpSymbol, pid, dual, multiplier, isCommunity, quoteTokenPriceBusd, tokenPriceBusd } = farm\n\n  return {\n    lpAddresses,\n    lpSymbol,\n    pid,\n    dual,\n    multiplier,\n    isCommunity,\n    quoteTokenPriceBusd,\n    tokenPriceBusd,\n    token: deserializeToken(farm.token),\n    quoteToken: deserializeToken(farm.quoteToken),\n    userData: deserializeFarmUserData(farm),\n    tokenAmountTotal: farm.tokenAmountTotal ? new BigNumber(farm.tokenAmountTotal) : BIG_ZERO,\n    lpTotalInQuoteToken: farm.lpTotalInQuoteToken ? new BigNumber(farm.lpTotalInQuoteToken) : BIG_ZERO,\n    lpTotalSupply: farm.lpTotalSupply ? new BigNumber(farm.lpTotalSupply) : BIG_ZERO,\n    tokenPriceVsQuote: farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : BIG_ZERO,\n    poolWeight: farm.poolWeight ? new BigNumber(farm.poolWeight) : BIG_ZERO,\n  }\n}\n\nexport const usePollFarmsPublicData = (includeArchive = false) => {\n  const dispatch = useAppDispatch()\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\n    const pids = farmsToFetch.map((farmToFetch) => farmToFetch.pid)\n\n    dispatch(fetchFarmsPublicDataAsync(pids))\n  }, [includeArchive, dispatch, slowRefresh])\n}\n\nexport const usePollFarmsWithUserData = (includeArchive = false) => {\n  const dispatch = useAppDispatch()\n  const { slowRefresh } = useRefresh()\n  const { account } = useWeb3React()\n\n  useEffect(() => {\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\n    const pids = farmsToFetch.map((farmToFetch) => farmToFetch.pid)\n\n    dispatch(fetchFarmsPublicDataAsync(pids))\n\n    if (account) {\n      dispatch(fetchFarmUserDataAsync({ account, pids }))\n    }\n  }, [includeArchive, dispatch, slowRefresh, account])\n}\n\n/**\n * Fetches the \"core\" farm data used globally\n * 251 = CAKE-BNB LP\n * 252 = BUSD-BNB LP\n */\nexport const usePollCoreFarmData = () => {\n  const dispatch = useAppDispatch()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync([251, 252]))\n  }, [dispatch, fastRefresh])\n}\n\nexport const useFarms = (): DeserializedFarmsState => {\n  const farms = useSelector((state: State) => state.farms)\n  const deserializedFarmsData = farms.data.map(deserializeFarm)\n  const { loadArchivedFarmsData, userDataLoaded } = farms\n  return {\n    loadArchivedFarmsData,\n    userDataLoaded,\n    data: deserializedFarmsData,\n  }\n}\n\nexport const useFarmFromPid = (pid: number): DeserializedFarm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return deserializeFarm(farm)\n}\n\nexport const useFarmFromLpSymbol = (lpSymbol: string): DeserializedFarm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return deserializeFarm(farm)\n}\n\nexport const useFarmUser = (pid): DeserializedFarmUserData => {\n  const { userData } = useFarmFromPid(pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = userData\n  return {\n    allowance,\n    tokenBalance,\n    stakedBalance,\n    earnings,\n  }\n}\n\n// Return the base token price for a farm, from a given pid\nexport const useBusdPriceFromPid = (pid: number): BigNumber => {\n  const farm = useFarmFromPid(pid)\n  return farm && new BigNumber(farm.tokenPriceBusd)\n}\n\nexport const useLpTokenPrice = (symbol: string) => {\n  const farm = useFarmFromLpSymbol(symbol)\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid)\n  let lpTokenPrice = BIG_ZERO\n\n  if (farm.lpTotalSupply.gt(0) && farm.lpTotalInQuoteToken.gt(0)) {\n    // Total value of base token in LP\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal)\n    // Double it to get overall value in LP\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2)\n    // Divide total value of all tokens, by the number of LP tokens\n    const totalLpTokens = getBalanceAmount(farm.lpTotalSupply)\n    lpTokenPrice = overallValueOfAllTokensInFarm.div(totalLpTokens)\n  }\n\n  return lpTokenPrice\n}\n\n// /!\\ Deprecated , use the BUSD hook in /hooks\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  const cakeBnbFarm = useFarmFromPid(251)\n\n  const cakePriceBusdAsString = cakeBnbFarm.tokenPriceBusd\n\n  const cakePriceBusd = useMemo(() => {\n    return new BigNumber(cakePriceBusdAsString)\n  }, [cakePriceBusdAsString])\n\n  return cakePriceBusd\n}\n"]},"metadata":{},"sourceType":"module"}