{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useRef,useState}from'react';import{useLocation}from'react-router-dom';import{useModal}from'@pancakeswap/uikit';import{useWeb3React}from'@web3-react/core';import{getAnniversaryAchievementContract}from'utils/contractHelpers';import AnniversaryAchievementModal from'./AnniversaryAchievementModal';import{jsx as _jsx}from\"react/jsx-runtime\";/**\n * This is represented as a component rather than a hook because we need to keep it\n * inside the Router.\n *\n * TODO: Put global checks in redux or make a generic area to house global checks\n */var GlobalCheckClaimStatus=function GlobalCheckClaimStatus(_ref){var excludeLocations=_ref.excludeLocations;var hasDisplayedModal=useRef(false);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),canClaimAnniversaryPoints=_useState2[0],setCanClaimAnniversaryPoints=_useState2[1];var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var _useLocation=useLocation(),pathname=_useLocation.pathname;var _useModal=useModal(/*#__PURE__*/_jsx(AnniversaryAchievementModal,{})),_useModal2=_slicedToArray(_useModal,1),onPresentAnniversaryModal=_useModal2[0];// Check claim status\nuseEffect(function(){var fetchClaimAnniversaryStatus=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _getAnniversaryAchiev,canClaim,canClaimAnniversary;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_getAnniversaryAchiev=getAnniversaryAchievementContract(),canClaim=_getAnniversaryAchiev.canClaim;_context.next=3;return canClaim(account);case 3:canClaimAnniversary=_context.sent;setCanClaimAnniversaryPoints(canClaimAnniversary);case 5:case\"end\":return _context.stop();}}},_callee);}));return function fetchClaimAnniversaryStatus(){return _ref2.apply(this,arguments);};}();if(account){fetchClaimAnniversaryStatus();}},[account]);// Check if we need to display the modal\nuseEffect(function(){var matchesSomeLocations=excludeLocations.some(function(location){return pathname.includes(location);});if(canClaimAnniversaryPoints&&!matchesSomeLocations&&!hasDisplayedModal.current){onPresentAnniversaryModal();hasDisplayedModal.current=true;}},[pathname,excludeLocations,hasDisplayedModal,onPresentAnniversaryModal,canClaimAnniversaryPoints]);// Reset the check flag when account changes\nuseEffect(function(){hasDisplayedModal.current=false;},[account,hasDisplayedModal]);return null;};export default GlobalCheckClaimStatus;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/components/GlobalCheckClaimStatus/index.tsx"],"names":["React","useEffect","useRef","useState","useLocation","useModal","useWeb3React","getAnniversaryAchievementContract","AnniversaryAchievementModal","GlobalCheckClaimStatus","excludeLocations","hasDisplayedModal","canClaimAnniversaryPoints","setCanClaimAnniversaryPoints","account","pathname","onPresentAnniversaryModal","fetchClaimAnniversaryStatus","canClaim","canClaimAnniversary","matchesSomeLocations","some","location","includes","current"],"mappings":"qcAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,MAA3B,CAAmCC,QAAnC,KAAmD,OAAnD,CACA,OAASC,WAAT,KAA4B,kBAA5B,CACA,OAASC,QAAT,KAAyB,oBAAzB,CACA,OAASC,YAAT,KAA6B,kBAA7B,CACA,OAASC,iCAAT,KAAkD,uBAAlD,CACA,MAAOC,CAAAA,2BAAP,KAAwC,+BAAxC,C,2CAMA;AACA;AACA;AACA;AACA;AACA,GACA,GAAMC,CAAAA,sBAA6D,CAAG,QAAhEA,CAAAA,sBAAgE,MAA0B,IAAvBC,CAAAA,gBAAuB,MAAvBA,gBAAuB,CAC9F,GAAMC,CAAAA,iBAAiB,CAAGT,MAAM,CAAC,KAAD,CAAhC,CACA,cAAkEC,QAAQ,CAAC,KAAD,CAA1E,wCAAOS,yBAAP,eAAkCC,4BAAlC,eACA,kBAAoBP,YAAY,EAAhC,CAAQQ,OAAR,eAAQA,OAAR,CACA,iBAAqBV,WAAW,EAAhC,CAAQW,QAAR,cAAQA,QAAR,CACA,cAAoCV,QAAQ,cAAC,KAAC,2BAAD,IAAD,CAA5C,wCAAOW,yBAAP,eAEA;AACAf,SAAS,CAAC,UAAM,CACd,GAAMgB,CAAAA,2BAA2B,2FAAG,gNACbV,iCAAiC,EADpB,CAC1BW,QAD0B,uBAC1BA,QAD0B,uBAEAA,CAAAA,QAAQ,CAACJ,OAAD,CAFR,QAE5BK,mBAF4B,eAGlCN,4BAA4B,CAACM,mBAAD,CAA5B,CAHkC,sDAAH,kBAA3BF,CAAAA,2BAA2B,2CAAjC,CAMA,GAAIH,OAAJ,CAAa,CACXG,2BAA2B,GAC5B,CACF,CAVQ,CAUN,CAACH,OAAD,CAVM,CAAT,CAYA;AACAb,SAAS,CAAC,UAAM,CACd,GAAMmB,CAAAA,oBAAoB,CAAGV,gBAAgB,CAACW,IAAjB,CAAsB,SAACC,QAAD,QAAcP,CAAAA,QAAQ,CAACQ,QAAT,CAAkBD,QAAlB,CAAd,EAAtB,CAA7B,CAEA,GAAIV,yBAAyB,EAAI,CAACQ,oBAA9B,EAAsD,CAACT,iBAAiB,CAACa,OAA7E,CAAsF,CACpFR,yBAAyB,GACzBL,iBAAiB,CAACa,OAAlB,CAA4B,IAA5B,CACD,CACF,CAPQ,CAON,CAACT,QAAD,CAAWL,gBAAX,CAA6BC,iBAA7B,CAAgDK,yBAAhD,CAA2EJ,yBAA3E,CAPM,CAAT,CASA;AACAX,SAAS,CAAC,UAAM,CACdU,iBAAiB,CAACa,OAAlB,CAA4B,KAA5B,CACD,CAFQ,CAEN,CAACV,OAAD,CAAUH,iBAAV,CAFM,CAAT,CAIA,MAAO,KAAP,CACD,CApCD,CAsCA,cAAeF,CAAAA,sBAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { useModal } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { getAnniversaryAchievementContract } from 'utils/contractHelpers'\nimport AnniversaryAchievementModal from './AnniversaryAchievementModal'\n\ninterface GlobalCheckClaimStatusProps {\n  excludeLocations: string[]\n}\n\n/**\n * This is represented as a component rather than a hook because we need to keep it\n * inside the Router.\n *\n * TODO: Put global checks in redux or make a generic area to house global checks\n */\nconst GlobalCheckClaimStatus: React.FC<GlobalCheckClaimStatusProps> = ({ excludeLocations }) => {\n  const hasDisplayedModal = useRef(false)\n  const [canClaimAnniversaryPoints, setCanClaimAnniversaryPoints] = useState(false)\n  const { account } = useWeb3React()\n  const { pathname } = useLocation()\n  const [onPresentAnniversaryModal] = useModal(<AnniversaryAchievementModal />)\n\n  // Check claim status\n  useEffect(() => {\n    const fetchClaimAnniversaryStatus = async () => {\n      const { canClaim } = getAnniversaryAchievementContract()\n      const canClaimAnniversary = await canClaim(account)\n      setCanClaimAnniversaryPoints(canClaimAnniversary)\n    }\n\n    if (account) {\n      fetchClaimAnniversaryStatus()\n    }\n  }, [account])\n\n  // Check if we need to display the modal\n  useEffect(() => {\n    const matchesSomeLocations = excludeLocations.some((location) => pathname.includes(location))\n\n    if (canClaimAnniversaryPoints && !matchesSomeLocations && !hasDisplayedModal.current) {\n      onPresentAnniversaryModal()\n      hasDisplayedModal.current = true\n    }\n  }, [pathname, excludeLocations, hasDisplayedModal, onPresentAnniversaryModal, canClaimAnniversaryPoints])\n\n  // Reset the check flag when account changes\n  useEffect(() => {\n    hasDisplayedModal.current = false\n  }, [account, hasDisplayedModal])\n\n  return null\n}\n\nexport default GlobalCheckClaimStatus\n"]},"metadata":{},"sourceType":"module"}