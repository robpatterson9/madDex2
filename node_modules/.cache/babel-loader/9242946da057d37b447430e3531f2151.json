{"ast":null,"code":"import React from'react';import{useDispatch}from'react-redux';import{Box,Button,Flex,Text}from'@pancakeswap/uikit';import{isTransactionRecent,useAllTransactions}from'state/transactions/hooks';import{useTranslation}from'contexts/Localization';import useActiveWeb3React from'hooks/useActiveWeb3React';import{clearAllTransactions}from'state/transactions/actions';import{orderBy}from'lodash';import TransactionRow from'./TransactionRow';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var WalletTransactions=function WalletTransactions(){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var dispatch=useDispatch();var _useTranslation=useTranslation(),t=_useTranslation.t;var allTransactions=useAllTransactions();var sortedTransactions=orderBy(Object.values(allTransactions).filter(isTransactionRecent),'addedTime','desc');var handleClearAll=function handleClearAll(){if(chainId){dispatch(clearAllTransactions({chainId:chainId}));}};return/*#__PURE__*/_jsxs(Box,{minHeight:\"120px\",children:[/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",justifyContent:\"space-between\",mb:\"24px\",children:[/*#__PURE__*/_jsx(Text,{color:\"secondary\",fontSize:\"12px\",textTransform:\"uppercase\",fontWeight:\"bold\",children:t('Recent Transactions')}),sortedTransactions.length>0&&/*#__PURE__*/_jsx(Button,{scale:\"sm\",onClick:handleClearAll,variant:\"text\",px:\"0\",children:t('Clear all')})]}),sortedTransactions.length>0?sortedTransactions.map(function(txn){return/*#__PURE__*/_jsx(TransactionRow,{txn:txn},txn.hash);}):/*#__PURE__*/_jsx(Text,{textAlign:\"center\",children:t('No recent transactions')})]});};export default WalletTransactions;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/components/Menu/UserMenu/WalletTransactions.tsx"],"names":["React","useDispatch","Box","Button","Flex","Text","isTransactionRecent","useAllTransactions","useTranslation","useActiveWeb3React","clearAllTransactions","orderBy","TransactionRow","WalletTransactions","chainId","dispatch","t","allTransactions","sortedTransactions","Object","values","filter","handleClearAll","length","map","txn","hash"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,GAAT,CAAcC,MAAd,CAAsBC,IAAtB,CAA4BC,IAA5B,KAAwC,oBAAxC,CAEA,OAASC,mBAAT,CAA8BC,kBAA9B,KAAwD,0BAAxD,CACA,OAASC,cAAT,KAA+B,uBAA/B,CACA,MAAOC,CAAAA,kBAAP,KAA+B,0BAA/B,CACA,OAASC,oBAAT,KAAqC,4BAArC,CACA,OAASC,OAAT,KAAwB,QAAxB,CACA,MAAOC,CAAAA,cAAP,KAA2B,kBAA3B,C,wFAEA,GAAMC,CAAAA,kBAA4B,CAAG,QAA/BA,CAAAA,kBAA+B,EAAM,CACzC,wBAAoBJ,kBAAkB,EAAtC,CAAQK,OAAR,qBAAQA,OAAR,CACA,GAAMC,CAAAA,QAAQ,CAAGd,WAAW,EAA5B,CACA,oBAAcO,cAAc,EAA5B,CAAQQ,CAAR,iBAAQA,CAAR,CACA,GAAMC,CAAAA,eAAe,CAAGV,kBAAkB,EAA1C,CACA,GAAMW,CAAAA,kBAAkB,CAAGP,OAAO,CAACQ,MAAM,CAACC,MAAP,CAAcH,eAAd,EAA+BI,MAA/B,CAAsCf,mBAAtC,CAAD,CAA6D,WAA7D,CAA0E,MAA1E,CAAlC,CAEA,GAAMgB,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3B,GAAIR,OAAJ,CAAa,CACXC,QAAQ,CAACL,oBAAoB,CAAC,CAAEI,OAAO,CAAPA,OAAF,CAAD,CAArB,CAAR,CACD,CACF,CAJD,CAMA,mBACE,MAAC,GAAD,EAAK,SAAS,CAAC,OAAf,wBACE,MAAC,IAAD,EAAM,UAAU,CAAC,QAAjB,CAA0B,cAAc,CAAC,eAAzC,CAAyD,EAAE,CAAC,MAA5D,wBACE,KAAC,IAAD,EAAM,KAAK,CAAC,WAAZ,CAAwB,QAAQ,CAAC,MAAjC,CAAwC,aAAa,CAAC,WAAtD,CAAkE,UAAU,CAAC,MAA7E,UACGE,CAAC,CAAC,qBAAD,CADJ,EADF,CAIGE,kBAAkB,CAACK,MAAnB,CAA4B,CAA5B,eACC,KAAC,MAAD,EAAQ,KAAK,CAAC,IAAd,CAAmB,OAAO,CAAED,cAA5B,CAA4C,OAAO,CAAC,MAApD,CAA2D,EAAE,CAAC,GAA9D,UACGN,CAAC,CAAC,WAAD,CADJ,EALJ,GADF,CAWGE,kBAAkB,CAACK,MAAnB,CAA4B,CAA5B,CACCL,kBAAkB,CAACM,GAAnB,CAAuB,SAACC,GAAD,qBAAS,KAAC,cAAD,EAA+B,GAAG,CAAEA,GAApC,EAAqBA,GAAG,CAACC,IAAzB,CAAT,EAAvB,CADD,cAGC,KAAC,IAAD,EAAM,SAAS,CAAC,QAAhB,UAA0BV,CAAC,CAAC,wBAAD,CAA3B,EAdJ,GADF,CAmBD,CAhCD,CAkCA,cAAeH,CAAAA,kBAAf","sourcesContent":["import React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { Box, Button, Flex, Text } from '@pancakeswap/uikit'\nimport { AppDispatch } from 'state'\nimport { isTransactionRecent, useAllTransactions } from 'state/transactions/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { clearAllTransactions } from 'state/transactions/actions'\nimport { orderBy } from 'lodash'\nimport TransactionRow from './TransactionRow'\n\nconst WalletTransactions: React.FC = () => {\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useDispatch<AppDispatch>()\n  const { t } = useTranslation()\n  const allTransactions = useAllTransactions()\n  const sortedTransactions = orderBy(Object.values(allTransactions).filter(isTransactionRecent), 'addedTime', 'desc')\n\n  const handleClearAll = () => {\n    if (chainId) {\n      dispatch(clearAllTransactions({ chainId }))\n    }\n  }\n\n  return (\n    <Box minHeight=\"120px\">\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"24px\">\n        <Text color=\"secondary\" fontSize=\"12px\" textTransform=\"uppercase\" fontWeight=\"bold\">\n          {t('Recent Transactions')}\n        </Text>\n        {sortedTransactions.length > 0 && (\n          <Button scale=\"sm\" onClick={handleClearAll} variant=\"text\" px=\"0\">\n            {t('Clear all')}\n          </Button>\n        )}\n      </Flex>\n      {sortedTransactions.length > 0 ? (\n        sortedTransactions.map((txn) => <TransactionRow key={txn.hash} txn={txn} />)\n      ) : (\n        <Text textAlign=\"center\">{t('No recent transactions')}</Text>\n      )}\n    </Box>\n  )\n}\n\nexport default WalletTransactions\n"]},"metadata":{},"sourceType":"module"}