{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Pools/components/CakeVaultCard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Box, CardBody, Flex, Text } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useWeb3React } from '@web3-react/core';\nimport ConnectWalletButton from 'components/ConnectWalletButton';\nimport tokens from 'config/constants/tokens';\nimport { useCakeVault } from 'state/pools/hooks';\nimport { convertSharesToCake } from 'views/Pools/helpers';\nimport AprRow from '../PoolCard/AprRow';\nimport { StyledCard } from '../PoolCard/StyledCard';\nimport CardFooter from '../PoolCard/CardFooter';\nimport StyledCardHeader from '../PoolCard/StyledCardHeader';\nimport VaultCardActions from './VaultCardActions';\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow';\nimport RecentCakeProfitRow from './RecentCakeProfitRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StyledCardBody = styled(CardBody)`\n  min-height: ${({\n  isLoading\n}) => isLoading ? '0' : '254px'};\n`;\n_c = StyledCardBody;\n\nconst CakeVaultCard = ({\n  pool,\n  showStakedOnly\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const {\n    userData: {\n      userShares,\n      isLoading: isVaultUserDataLoading\n    },\n    fees: {\n      performanceFee\n    },\n    pricePerFullShare\n  } = useCakeVault();\n  const {\n    cakeAsBigNumber\n  } = convertSharesToCake(userShares, pricePerFullShare);\n  const accountHasSharesStaked = userShares && userShares.gt(0);\n  const isLoading = !pool.userData || isVaultUserDataLoading;\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100;\n\n  if (showStakedOnly && !accountHasSharesStaked) {\n    return null;\n  }\n\n  return /*#__PURE__*/_jsxDEV(StyledCard, {\n    isActive: true,\n    children: [/*#__PURE__*/_jsxDEV(StyledCardHeader, {\n      isStaking: accountHasSharesStaked,\n      isAutoVault: true,\n      earningToken: tokens.cake,\n      stakingToken: tokens.cake\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(StyledCardBody, {\n      isLoading: isLoading,\n      children: [/*#__PURE__*/_jsxDEV(AprRow, {\n        pool: pool,\n        stakedBalance: cakeAsBigNumber,\n        performanceFee: performanceFeeAsDecimal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: \"24px\",\n        children: /*#__PURE__*/_jsxDEV(RecentCakeProfitRow, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: \"8px\",\n        children: /*#__PURE__*/_jsxDEV(UnstakingFeeCountdownRow, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        mt: \"32px\",\n        flexDirection: \"column\",\n        children: account ? /*#__PURE__*/_jsxDEV(VaultCardActions, {\n          pool: pool,\n          accountHasSharesStaked: accountHasSharesStaked,\n          isLoading: isLoading,\n          performanceFee: performanceFeeAsDecimal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            mb: \"10px\",\n            textTransform: \"uppercase\",\n            fontSize: \"12px\",\n            color: \"textSubtle\",\n            bold: true,\n            children: t('Start earning')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ConnectWalletButton, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardFooter, {\n      pool: pool,\n      account: account\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CakeVaultCard, \"2P2Q9tclo66ZnKgRYXd6lY6ldhI=\", false, function () {\n  return [useTranslation, useWeb3React, useCakeVault];\n});\n\n_c2 = CakeVaultCard;\nexport default CakeVaultCard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledCardBody\");\n$RefreshReg$(_c2, \"CakeVaultCard\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/components/CakeVaultCard/index.tsx"],"names":["React","styled","Box","CardBody","Flex","Text","useTranslation","useWeb3React","ConnectWalletButton","tokens","useCakeVault","convertSharesToCake","AprRow","StyledCard","CardFooter","StyledCardHeader","VaultCardActions","UnstakingFeeCountdownRow","RecentCakeProfitRow","StyledCardBody","isLoading","CakeVaultCard","pool","showStakedOnly","t","account","userData","userShares","isVaultUserDataLoading","fees","performanceFee","pricePerFullShare","cakeAsBigNumber","accountHasSharesStaked","gt","performanceFeeAsDecimal","cake"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Box, CardBody, Flex, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useWeb3React } from '@web3-react/core'\nimport ConnectWalletButton from 'components/ConnectWalletButton'\nimport tokens from 'config/constants/tokens'\nimport { useCakeVault } from 'state/pools/hooks'\nimport { DeserializedPool } from 'state/types'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport AprRow from '../PoolCard/AprRow'\nimport { StyledCard } from '../PoolCard/StyledCard'\nimport CardFooter from '../PoolCard/CardFooter'\nimport StyledCardHeader from '../PoolCard/StyledCardHeader'\nimport VaultCardActions from './VaultCardActions'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\nimport RecentCakeProfitRow from './RecentCakeProfitRow'\n\nconst StyledCardBody = styled(CardBody)<{ isLoading: boolean }>`\n  min-height: ${({ isLoading }) => (isLoading ? '0' : '254px')};\n`\n\ninterface CakeVaultProps {\n  pool: DeserializedPool\n  showStakedOnly: boolean\n}\n\nconst CakeVaultCard: React.FC<CakeVaultProps> = ({ pool, showStakedOnly }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const {\n    userData: { userShares, isLoading: isVaultUserDataLoading },\n    fees: { performanceFee },\n    pricePerFullShare,\n  } = useCakeVault()\n\n  const { cakeAsBigNumber } = convertSharesToCake(userShares, pricePerFullShare)\n\n  const accountHasSharesStaked = userShares && userShares.gt(0)\n  const isLoading = !pool.userData || isVaultUserDataLoading\n  const performanceFeeAsDecimal = performanceFee && performanceFee / 100\n\n  if (showStakedOnly && !accountHasSharesStaked) {\n    return null\n  }\n\n  return (\n    <StyledCard isActive>\n      <StyledCardHeader\n        isStaking={accountHasSharesStaked}\n        isAutoVault\n        earningToken={tokens.cake}\n        stakingToken={tokens.cake}\n      />\n      <StyledCardBody isLoading={isLoading}>\n        <AprRow pool={pool} stakedBalance={cakeAsBigNumber} performanceFee={performanceFeeAsDecimal} />\n        <Box mt=\"24px\">\n          <RecentCakeProfitRow />\n        </Box>\n        <Box mt=\"8px\">\n          <UnstakingFeeCountdownRow />\n        </Box>\n        <Flex mt=\"32px\" flexDirection=\"column\">\n          {account ? (\n            <VaultCardActions\n              pool={pool}\n              accountHasSharesStaked={accountHasSharesStaked}\n              isLoading={isLoading}\n              performanceFee={performanceFeeAsDecimal}\n            />\n          ) : (\n            <>\n              <Text mb=\"10px\" textTransform=\"uppercase\" fontSize=\"12px\" color=\"textSubtle\" bold>\n                {t('Start earning')}\n              </Text>\n              <ConnectWalletButton />\n            </>\n          )}\n        </Flex>\n      </StyledCardBody>\n      <CardFooter pool={pool} account={account} />\n    </StyledCard>\n  )\n}\n\nexport default CakeVaultCard\n"]},"metadata":{},"sourceType":"module"}