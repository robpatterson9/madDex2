{"ast":null,"code":"// 1 day, 7 days, 30 days, 1 year, 5 years\nconst DAYS_TO_CALCULATE_AGAINST = [1, 7, 30, 365, 1825];\n/**\n *\n * @param principalInUSD - amount user wants to invest in USD\n * @param apr - farm or pool apr as percentage. If its farm APR its only cake rewards APR without LP rewards APR\n * @param earningTokenPrice - price of reward token\n * @param compoundFrequency - how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\n * @param performanceFee - performance fee as percentage\n * @returns an array of token values earned as interest, with each element representing interest earned over a different period of time (DAYS_TO_CALCULATE_AGAINST)\n */\n\nexport const getInterestBreakdown = ({\n  principalInUSD,\n  apr,\n  earningTokenPrice,\n  compoundFrequency = 1,\n  performanceFee = 0\n}) => {\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\n  const timesCompounded = 365 * compoundFrequency; // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n\n  const aprAsDecimal = apr / 100; // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\n  // and also cause rounding errors\n\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0;\n  const roundingDecimalsNew = isHighValueToken ? 5 : 3;\n  return DAYS_TO_CALCULATE_AGAINST.map(days => {\n    const daysAsDecimalOfYear = days / 365; // Calculate the starting TOKEN balance with a dollar balance of principalInUSD.\n\n    const principal = principalInUSD / earningTokenPrice;\n    let interestEarned = principal * aprAsDecimal * (days / 365);\n\n    if (timesCompounded !== 0) {\n      // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n      const accruedAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear); // To get the TOKEN amount earned, deduct the amount after compounding (accruedAmount) from the starting TOKEN balance (principal)\n\n      interestEarned = accruedAmount - principal;\n\n      if (performanceFee) {\n        const performanceFeeAsDecimal = performanceFee / 100;\n        const performanceFeeAsAmount = interestEarned * performanceFeeAsDecimal;\n        interestEarned -= performanceFeeAsAmount;\n      }\n    }\n\n    return parseFloat(interestEarned.toFixed(roundingDecimalsNew));\n  });\n};\n/**\n * @param interest how much USD amount you aim to make\n * @param apr APR of farm/pool\n * @param compoundingFrequency how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\n * @returns an array of principal values needed to reach target interest, with each element representing principal needed for a different period of time (DAYS_TO_CALCULATE_AGAINST)\n */\n\nexport const getPrincipalForInterest = (interest, apr, compoundingFrequency, performanceFee = 0) => {\n  return DAYS_TO_CALCULATE_AGAINST.map(days => {\n    const apyAsDecimal = getApy(apr, compoundingFrequency, days, performanceFee); // console.log('inside', interest, apyAsDecimal)\n    // const apyAsBN = new BigNumber(apyAsDecimal).decimalPlaces(6, BigNumber.ROUND_DOWN).toNumber()\n\n    return parseFloat((interest / apyAsDecimal).toFixed(2));\n  });\n};\n/**\n * Given APR returns APY\n * @param apr APR as percentage\n * @param compoundFrequency how many compounds per day\n * @param days if other than 365 adjusts (A)PY for period less than a year\n * @param performanceFee performance fee as percentage\n * @returns APY as decimal\n */\n\nexport const getApy = (apr, compoundFrequency = 1, days = 365, performanceFee = 0) => {\n  const daysAsDecimalOfYear = days / 365;\n  const aprAsDecimal = apr / 100;\n  const timesCompounded = 365 * compoundFrequency;\n  let apyAsDecimal = apr / 100 * daysAsDecimalOfYear;\n\n  if (timesCompounded > 0) {\n    apyAsDecimal = (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear) - 1;\n  }\n\n  if (performanceFee) {\n    const performanceFeeAsDecimal = performanceFee / 100;\n    const takenAsPerformanceFee = apyAsDecimal * performanceFeeAsDecimal;\n    apyAsDecimal -= takenAsPerformanceFee;\n  }\n\n  return apyAsDecimal;\n};\nexport const getRoi = ({\n  amountEarned,\n  amountInvested\n}) => {\n  if (amountInvested === 0) {\n    return 0;\n  }\n\n  const percentage = amountEarned / amountInvested * 100;\n  return percentage;\n};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/utils/compoundApyHelpers.ts"],"names":["DAYS_TO_CALCULATE_AGAINST","getInterestBreakdown","principalInUSD","apr","earningTokenPrice","compoundFrequency","performanceFee","timesCompounded","aprAsDecimal","isHighValueToken","Math","round","roundingDecimalsNew","map","days","daysAsDecimalOfYear","principal","interestEarned","accruedAmount","performanceFeeAsDecimal","performanceFeeAsAmount","parseFloat","toFixed","getPrincipalForInterest","interest","compoundingFrequency","apyAsDecimal","getApy","takenAsPerformanceFee","getRoi","amountEarned","amountInvested","percentage"],"mappings":"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","sourcesContent":["// 1 day, 7 days, 30 days, 1 year, 5 years\nconst DAYS_TO_CALCULATE_AGAINST = [1, 7, 30, 365, 1825]\n\n/**\n *\n * @param principalInUSD - amount user wants to invest in USD\n * @param apr - farm or pool apr as percentage. If its farm APR its only cake rewards APR without LP rewards APR\n * @param earningTokenPrice - price of reward token\n * @param compoundFrequency - how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\n * @param performanceFee - performance fee as percentage\n * @returns an array of token values earned as interest, with each element representing interest earned over a different period of time (DAYS_TO_CALCULATE_AGAINST)\n */\nexport const getInterestBreakdown = ({\n  principalInUSD,\n  apr,\n  earningTokenPrice,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}: {\n  principalInUSD: number\n  apr: number\n  earningTokenPrice: number\n  compoundFrequency?: number\n  performanceFee?: number\n}) => {\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\n  const timesCompounded = 365 * compoundFrequency\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const aprAsDecimal = apr / 100\n\n  // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\n  // and also cause rounding errors\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0\n  const roundingDecimalsNew = isHighValueToken ? 5 : 3\n\n  return DAYS_TO_CALCULATE_AGAINST.map((days) => {\n    const daysAsDecimalOfYear = days / 365\n    // Calculate the starting TOKEN balance with a dollar balance of principalInUSD.\n    const principal = principalInUSD / earningTokenPrice\n    let interestEarned = principal * aprAsDecimal * (days / 365)\n    if (timesCompounded !== 0) {\n      // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n      const accruedAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n      // To get the TOKEN amount earned, deduct the amount after compounding (accruedAmount) from the starting TOKEN balance (principal)\n      interestEarned = accruedAmount - principal\n      if (performanceFee) {\n        const performanceFeeAsDecimal = performanceFee / 100\n        const performanceFeeAsAmount = interestEarned * performanceFeeAsDecimal\n        interestEarned -= performanceFeeAsAmount\n      }\n    }\n    return parseFloat(interestEarned.toFixed(roundingDecimalsNew))\n  })\n}\n\n/**\n * @param interest how much USD amount you aim to make\n * @param apr APR of farm/pool\n * @param compoundingFrequency how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\n * @returns an array of principal values needed to reach target interest, with each element representing principal needed for a different period of time (DAYS_TO_CALCULATE_AGAINST)\n */\nexport const getPrincipalForInterest = (\n  interest: number,\n  apr: number,\n  compoundingFrequency: number,\n  performanceFee = 0,\n) => {\n  return DAYS_TO_CALCULATE_AGAINST.map((days) => {\n    const apyAsDecimal = getApy(apr, compoundingFrequency, days, performanceFee)\n    // console.log('inside', interest, apyAsDecimal)\n    // const apyAsBN = new BigNumber(apyAsDecimal).decimalPlaces(6, BigNumber.ROUND_DOWN).toNumber()\n    return parseFloat((interest / apyAsDecimal).toFixed(2))\n  })\n}\n\n/**\n * Given APR returns APY\n * @param apr APR as percentage\n * @param compoundFrequency how many compounds per day\n * @param days if other than 365 adjusts (A)PY for period less than a year\n * @param performanceFee performance fee as percentage\n * @returns APY as decimal\n */\nexport const getApy = (apr: number, compoundFrequency = 1, days = 365, performanceFee = 0) => {\n  const daysAsDecimalOfYear = days / 365\n  const aprAsDecimal = apr / 100\n  const timesCompounded = 365 * compoundFrequency\n  let apyAsDecimal = (apr / 100) * daysAsDecimalOfYear\n  if (timesCompounded > 0) {\n    apyAsDecimal = (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear) - 1\n  }\n  if (performanceFee) {\n    const performanceFeeAsDecimal = performanceFee / 100\n    const takenAsPerformanceFee = apyAsDecimal * performanceFeeAsDecimal\n    apyAsDecimal -= takenAsPerformanceFee\n  }\n  return apyAsDecimal\n}\n\nexport const getRoi = ({ amountEarned, amountInvested }: { amountEarned: number; amountInvested: number }) => {\n  if (amountInvested === 0) {\n    return 0\n  }\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage\n}\n"]},"metadata":{},"sourceType":"module"}