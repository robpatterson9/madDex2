{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React,{useState}from'react';import{useWeb3React}from'@web3-react/core';import styled from'styled-components';import{useTranslation}from'contexts/Localization';import{Box,Flex,Text,ChevronRightIcon,useModal}from'@pancakeswap/uikit';import Loading from'components/Loading';import CollectRoundWinningsModal from'../CollectRoundWinningsModal';import{getAllV1History}from'./helpers';import NothingToClaimModal from'./NothingToClaimModal';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var StyledClaimCheck=styled(Flex)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  align-items: center;\\n  background-color: \",\";\\n  border-bottom: 1px solid \",\";\\n  cursor: pointer;\\n  justify-content: space-between;\\n  padding: 16px;\\n\"])),function(_ref){var theme=_ref.theme;return theme.card.background;},function(_ref2){var theme=_ref2.theme;return theme.colors.cardBorder;});var ClaimCheck=function ClaimCheck(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isFetching=_useState2[0],setIsFetching=_useState2[1];var _useTranslation=useTranslation(),t=_useTranslation.t;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var _useModal=useModal(/*#__PURE__*/_jsx(CollectRoundWinningsModal,{}),false),_useModal2=_slicedToArray(_useModal,1),onPresentCollectWinningsModal=_useModal2[0];var _useModal3=useModal(/*#__PURE__*/_jsx(NothingToClaimModal,{})),_useModal4=_slicedToArray(_useModal3,1),onPresentNothingToClaimModal=_useModal4[0];var handleClick=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var betHistory,unclaimedBets;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;setIsFetching(true);_context.next=4;return getAllV1History({user:account.toLowerCase(),claimed:false});case 4:betHistory=_context.sent;// Filter out bets that can be claimed\nunclaimedBets=betHistory.filter(function(bet){return bet.round.position===bet.position||bet.round.failed===true;});if(unclaimedBets.length>0){onPresentCollectWinningsModal();}else{onPresentNothingToClaimModal();}_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);console.error('Unable to check v1 history',_context.t0);case 12:_context.prev=12;setIsFetching(false);return _context.finish(12);case 15:case\"end\":return _context.stop();}}},_callee,null,[[0,9,12,15]]);}));return function handleClick(){return _ref3.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(StyledClaimCheck,{onClick:account?handleClick:undefined,children:[/*#__PURE__*/_jsxs(Box,{style:{flex:1},children:[/*#__PURE__*/_jsx(Text,{children:t('Showing history for Prediction v0.2')}),/*#__PURE__*/_jsxs(Flex,{alignItems:\"center\",children:[/*#__PURE__*/_jsx(Text,{color:\"primary\",children:t('Check for unclaimed v0.1 winnings')}),/*#__PURE__*/_jsx(ChevronRightIcon,{color:\"primary\",width:\"24px\"})]})]}),isFetching&&/*#__PURE__*/_jsx(Box,{px:\"16px\",children:/*#__PURE__*/_jsx(Loading,{})})]});};export default ClaimCheck;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Predictions/components/v1/V1ClaimCheck.tsx"],"names":["React","useState","useWeb3React","styled","useTranslation","Box","Flex","Text","ChevronRightIcon","useModal","Loading","CollectRoundWinningsModal","getAllV1History","NothingToClaimModal","StyledClaimCheck","theme","card","background","colors","cardBorder","ClaimCheck","isFetching","setIsFetching","t","account","onPresentCollectWinningsModal","onPresentNothingToClaimModal","handleClick","user","toLowerCase","claimed","betHistory","unclaimedBets","filter","bet","round","position","failed","length","console","error","undefined","flex"],"mappings":"ioBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,YAAT,KAA6B,kBAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,cAAT,KAA+B,uBAA/B,CACA,OAASC,GAAT,CAAcC,IAAd,CAAoBC,IAApB,CAA0BC,gBAA1B,CAA4CC,QAA5C,KAA4D,oBAA5D,CACA,MAAOC,CAAAA,OAAP,KAAoB,oBAApB,CACA,MAAOC,CAAAA,yBAAP,KAAsC,8BAAtC,CACA,OAASC,eAAT,KAAgC,WAAhC,CACA,MAAOC,CAAAA,mBAAP,KAAgC,uBAAhC,C,wFAEA,GAAMC,CAAAA,gBAAgB,CAAGX,MAAM,CAACG,IAAD,CAAT,+NAEA,kBAAGS,CAAAA,KAAH,MAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACC,IAAN,CAAWC,UAA1B,EAFA,CAGO,mBAAGF,CAAAA,KAAH,OAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACG,MAAN,CAAaC,UAA5B,EAHP,CAAtB,CASA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvB,cAAoCnB,QAAQ,CAAC,KAAD,CAA5C,wCAAOoB,UAAP,eAAmBC,aAAnB,eACA,oBAAclB,cAAc,EAA5B,CAAQmB,CAAR,iBAAQA,CAAR,CACA,kBAAoBrB,YAAY,EAAhC,CAAQsB,OAAR,eAAQA,OAAR,CAEA,cAAwCf,QAAQ,cAAC,KAAC,yBAAD,IAAD,CAAgC,KAAhC,CAAhD,wCAAOgB,6BAAP,eAEA,eAAuChB,QAAQ,cAAC,KAAC,mBAAD,IAAD,CAA/C,yCAAOiB,4BAAP,eAEA,GAAMC,CAAAA,WAAW,2FAAG,gLAEhBL,aAAa,CAAC,IAAD,CAAb,CAFgB,sBAGSV,CAAAA,eAAe,CAAC,CAAEgB,IAAI,CAAEJ,OAAO,CAACK,WAAR,EAAR,CAA+BC,OAAO,CAAE,KAAxC,CAAD,CAHxB,QAGVC,UAHU,eAKhB;AACMC,aANU,CAMMD,UAAU,CAACE,MAAX,CAAkB,SAACC,GAAD,CAAS,CAC/C,MAAOA,CAAAA,GAAG,CAACC,KAAJ,CAAUC,QAAV,GAAuBF,GAAG,CAACE,QAA3B,EAAuCF,GAAG,CAACC,KAAJ,CAAUE,MAAV,GAAqB,IAAnE,CACD,CAFqB,CANN,CAUhB,GAAIL,aAAa,CAACM,MAAd,CAAuB,CAA3B,CAA8B,CAC5Bb,6BAA6B,GAC9B,CAFD,IAEO,CACLC,4BAA4B,GAC7B,CAde,+EAgBhBa,OAAO,CAACC,KAAR,CAAc,4BAAd,cAhBgB,yBAkBhBlB,aAAa,CAAC,KAAD,CAAb,CAlBgB,qGAAH,kBAAXK,CAAAA,WAAW,2CAAjB,CAsBA,mBACE,MAAC,gBAAD,EAAkB,OAAO,CAAEH,OAAO,CAAGG,WAAH,CAAiBc,SAAnD,wBACE,MAAC,GAAD,EAAK,KAAK,CAAE,CAAEC,IAAI,CAAE,CAAR,CAAZ,wBACE,KAAC,IAAD,WAAOnB,CAAC,CAAC,qCAAD,CAAR,EADF,cAEE,MAAC,IAAD,EAAM,UAAU,CAAC,QAAjB,wBACE,KAAC,IAAD,EAAM,KAAK,CAAC,SAAZ,UAAuBA,CAAC,CAAC,mCAAD,CAAxB,EADF,cAEE,KAAC,gBAAD,EAAkB,KAAK,CAAC,SAAxB,CAAkC,KAAK,CAAC,MAAxC,EAFF,GAFF,GADF,CAQGF,UAAU,eACT,KAAC,GAAD,EAAK,EAAE,CAAC,MAAR,uBACE,KAAC,OAAD,IADF,EATJ,GADF,CAgBD,CA/CD,CAiDA,cAAeD,CAAAA,UAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { Box, Flex, Text, ChevronRightIcon, useModal } from '@pancakeswap/uikit'\nimport Loading from 'components/Loading'\nimport CollectRoundWinningsModal from '../CollectRoundWinningsModal'\nimport { getAllV1History } from './helpers'\nimport NothingToClaimModal from './NothingToClaimModal'\n\nconst StyledClaimCheck = styled(Flex)`\n  align-items: center;\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom: 1px solid ${({ theme }) => theme.colors.cardBorder};\n  cursor: pointer;\n  justify-content: space-between;\n  padding: 16px;\n`\n\nconst ClaimCheck = () => {\n  const [isFetching, setIsFetching] = useState(false)\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n\n  const [onPresentCollectWinningsModal] = useModal(<CollectRoundWinningsModal />, false)\n\n  const [onPresentNothingToClaimModal] = useModal(<NothingToClaimModal />)\n\n  const handleClick = async () => {\n    try {\n      setIsFetching(true)\n      const betHistory = await getAllV1History({ user: account.toLowerCase(), claimed: false })\n\n      // Filter out bets that can be claimed\n      const unclaimedBets = betHistory.filter((bet) => {\n        return bet.round.position === bet.position || bet.round.failed === true\n      })\n\n      if (unclaimedBets.length > 0) {\n        onPresentCollectWinningsModal()\n      } else {\n        onPresentNothingToClaimModal()\n      }\n    } catch (error) {\n      console.error('Unable to check v1 history', error)\n    } finally {\n      setIsFetching(false)\n    }\n  }\n\n  return (\n    <StyledClaimCheck onClick={account ? handleClick : undefined}>\n      <Box style={{ flex: 1 }}>\n        <Text>{t('Showing history for Prediction v0.2')}</Text>\n        <Flex alignItems=\"center\">\n          <Text color=\"primary\">{t('Check for unclaimed v0.1 winnings')}</Text>\n          <ChevronRightIcon color=\"primary\" width=\"24px\" />\n        </Flex>\n      </Box>\n      {isFetching && (\n        <Box px=\"16px\">\n          <Loading />\n        </Box>\n      )}\n    </StyledClaimCheck>\n  )\n}\n\nexport default ClaimCheck\n"]},"metadata":{},"sourceType":"module"}