{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Predictions/components/RoundCard/LiveRoundCard.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef } from 'react';\nimport { useCountUp } from 'react-countup';\nimport { Card, CardBody, Flex, PlayCircleOutlineIcon, Skeleton, Text, TooltipText, useTooltip } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { BetPosition } from 'state/types';\nimport { formatBigNumberToFixed } from 'utils/formatBalance';\nimport { useGetLastOraclePrice, useGetBufferSeconds } from 'state/predictions/hooks';\nimport RoundProgress from 'components/RoundProgress';\nimport { formatUsdv2, getHasRoundFailed, getPriceDifference } from '../../helpers';\nimport PositionTag from '../PositionTag';\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult';\nimport MultiplierArrow from './MultiplierArrow';\nimport CardHeader from './CardHeader';\nimport CanceledRoundCard from './CanceledRoundCard';\nimport CalculatingCard from './CalculatingCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LiveRoundCard = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    lockPrice,\n    totalAmount,\n    lockTimestamp,\n    closeTimestamp\n  } = round;\n  const price = useGetLastOraclePrice();\n  const bufferSeconds = useGetBufferSeconds();\n  const isBull = lockPrice && price.gt(lockPrice);\n  const priceColor = isBull ? 'success' : 'failure';\n  const priceDifference = getPriceDifference(price, lockPrice);\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8));\n  const hasRoundFailed = getHasRoundFailed(round, bufferSeconds);\n  const now = Date.now();\n  const {\n    countUp,\n    update\n  } = useCountUp({\n    start: 0,\n    end: priceAsNumber,\n    duration: 1,\n    decimals: 3\n  });\n  const {\n    targetRef,\n    tooltip,\n    tooltipVisible\n  } = useTooltip(t('Last price from Chainlink Oracle'), {\n    placement: 'bottom'\n  });\n  const updateRef = useRef(update);\n  useEffect(() => {\n    updateRef.current(priceAsNumber);\n  }, [priceAsNumber, updateRef]);\n\n  if (hasRoundFailed) {\n    return /*#__PURE__*/_jsxDEV(CanceledRoundCard, {\n      round: round\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (now > closeTimestamp * 1000) {\n    return /*#__PURE__*/_jsxDEV(CalculatingCard, {\n      round: round,\n      hasEnteredDown: hasEnteredDown,\n      hasEnteredUp: hasEnteredUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    isActive: true,\n    children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n      status: \"live\",\n      icon: /*#__PURE__*/_jsxDEV(PlayCircleOutlineIcon, {\n        mr: \"4px\",\n        width: \"24px\",\n        color: \"secondary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 15\n      }, this),\n      title: t('Live'),\n      epoch: round.epoch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RoundProgress, {\n      variant: \"flat\",\n      scale: \"sm\",\n      lockTimestamp: lockTimestamp,\n      closeTimestamp: closeTimestamp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n      p: \"16px\",\n      children: [/*#__PURE__*/_jsxDEV(MultiplierArrow, {\n        betAmount: betAmount,\n        multiplier: bullMultiplier,\n        hasEntered: hasEnteredUp,\n        isActive: isBull\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RoundResultBox, {\n        betPosition: isBull ? BetPosition.BULL : BetPosition.BEAR,\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          color: \"textSubtle\",\n          fontSize: \"12px\",\n          bold: true,\n          textTransform: \"uppercase\",\n          mb: \"8px\",\n          children: t('Last Price')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          justifyContent: \"space-between\",\n          mb: \"16px\",\n          height: \"36px\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            ref: targetRef,\n            children: /*#__PURE__*/_jsxDEV(TooltipText, {\n              bold: true,\n              color: priceColor,\n              fontSize: \"24px\",\n              style: {\n                minHeight: '36px'\n              },\n              children: price.gt(0) ? `$${countUp}` : /*#__PURE__*/_jsxDEV(Skeleton, {\n                height: \"36px\",\n                width: \"94px\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 48\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(PositionTag, {\n            betPosition: isBull ? BetPosition.BULL : BetPosition.BEAR,\n            children: formatUsdv2(priceDifference)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), lockPrice && /*#__PURE__*/_jsxDEV(LockPriceRow, {\n          lockPrice: lockPrice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(PrizePoolRow, {\n          totalAmount: totalAmount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MultiplierArrow, {\n        betAmount: betAmount,\n        multiplier: bearMultiplier,\n        betPosition: BetPosition.BEAR,\n        hasEntered: hasEnteredDown,\n        isActive: !isBull\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), tooltipVisible && tooltip]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n\n_s(LiveRoundCard, \"0ShyH+eNwbdiEqdllNaEg3QO9jM=\", false, function () {\n  return [useTranslation, useGetLastOraclePrice, useGetBufferSeconds, useCountUp, useTooltip];\n});\n\n_c = LiveRoundCard;\nexport default LiveRoundCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"LiveRoundCard\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Predictions/components/RoundCard/LiveRoundCard.tsx"],"names":["React","useEffect","useRef","useCountUp","Card","CardBody","Flex","PlayCircleOutlineIcon","Skeleton","Text","TooltipText","useTooltip","useTranslation","BetPosition","formatBigNumberToFixed","useGetLastOraclePrice","useGetBufferSeconds","RoundProgress","formatUsdv2","getHasRoundFailed","getPriceDifference","PositionTag","RoundResultBox","LockPriceRow","PrizePoolRow","MultiplierArrow","CardHeader","CanceledRoundCard","CalculatingCard","LiveRoundCard","round","betAmount","hasEnteredUp","hasEnteredDown","bullMultiplier","bearMultiplier","t","lockPrice","totalAmount","lockTimestamp","closeTimestamp","price","bufferSeconds","isBull","gt","priceColor","priceDifference","priceAsNumber","parseFloat","hasRoundFailed","now","Date","countUp","update","start","end","duration","decimals","targetRef","tooltip","tooltipVisible","placement","updateRef","current","epoch","BULL","BEAR","minHeight"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport {\n  Card,\n  CardBody,\n  Flex,\n  PlayCircleOutlineIcon,\n  Skeleton,\n  Text,\n  TooltipText,\n  useTooltip,\n} from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { NodeRound, NodeLedger, BetPosition } from 'state/types'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport { useGetLastOraclePrice, useGetBufferSeconds } from 'state/predictions/hooks'\nimport RoundProgress from 'components/RoundProgress'\nimport { formatUsdv2, getHasRoundFailed, getPriceDifference } from '../../helpers'\nimport PositionTag from '../PositionTag'\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\nimport MultiplierArrow from './MultiplierArrow'\nimport CardHeader from './CardHeader'\nimport CanceledRoundCard from './CanceledRoundCard'\nimport CalculatingCard from './CalculatingCard'\n\ninterface LiveRoundCardProps {\n  round: NodeRound\n  betAmount?: NodeLedger['amount']\n  hasEnteredUp: boolean\n  hasEnteredDown: boolean\n  bullMultiplier: string\n  bearMultiplier: string\n}\n\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\n  round,\n  betAmount,\n  hasEnteredUp,\n  hasEnteredDown,\n  bullMultiplier,\n  bearMultiplier,\n}) => {\n  const { t } = useTranslation()\n  const { lockPrice, totalAmount, lockTimestamp, closeTimestamp } = round\n  const price = useGetLastOraclePrice()\n  const bufferSeconds = useGetBufferSeconds()\n\n  const isBull = lockPrice && price.gt(lockPrice)\n  const priceColor = isBull ? 'success' : 'failure'\n\n  const priceDifference = getPriceDifference(price, lockPrice)\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\n  const hasRoundFailed = getHasRoundFailed(round, bufferSeconds)\n\n  const now = Date.now()\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: priceAsNumber,\n    duration: 1,\n    decimals: 3,\n  })\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\n    placement: 'bottom',\n  })\n\n  const updateRef = useRef(update)\n\n  useEffect(() => {\n    updateRef.current(priceAsNumber)\n  }, [priceAsNumber, updateRef])\n\n  if (hasRoundFailed) {\n    return <CanceledRoundCard round={round} />\n  }\n\n  if (now > closeTimestamp * 1000) {\n    return <CalculatingCard round={round} hasEnteredDown={hasEnteredDown} hasEnteredUp={hasEnteredUp} />\n  }\n\n  return (\n    <Card isActive>\n      <CardHeader\n        status=\"live\"\n        icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\n        title={t('Live')}\n        epoch={round.epoch}\n      />\n      <RoundProgress variant=\"flat\" scale=\"sm\" lockTimestamp={lockTimestamp} closeTimestamp={closeTimestamp} />\n      <CardBody p=\"16px\">\n        <MultiplierArrow\n          betAmount={betAmount}\n          multiplier={bullMultiplier}\n          hasEntered={hasEnteredUp}\n          isActive={isBull}\n        />\n        <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n          <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\n            {t('Last Price')}\n          </Text>\n          <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\n            <div ref={targetRef}>\n              <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\n                {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\n              </TooltipText>\n            </div>\n            <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\n              {formatUsdv2(priceDifference)}\n            </PositionTag>\n          </Flex>\n          {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\n          <PrizePoolRow totalAmount={totalAmount} />\n        </RoundResultBox>\n        <MultiplierArrow\n          betAmount={betAmount}\n          multiplier={bearMultiplier}\n          betPosition={BetPosition.BEAR}\n          hasEntered={hasEnteredDown}\n          isActive={!isBull}\n        />\n      </CardBody>\n      {tooltipVisible && tooltip}\n    </Card>\n  )\n}\n\nexport default LiveRoundCard\n"]},"metadata":{},"sourceType":"module"}