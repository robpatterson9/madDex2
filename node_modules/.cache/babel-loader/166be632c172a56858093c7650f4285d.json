{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _templateObject;import{request,gql}from'graphql-request';import{INFO_CLIENT}from'config/constants/endpoints';import{PCS_V2_START}from'config/constants/info';import{mapPairDayData,fetchChartData}from'../helpers';var getPoolChartData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(skip,address){var query,_yield$request,pairDayDatas,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;query=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n      query pairDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\\n        pairDayDatas(\\n          first: 1000\\n          skip: $skip\\n          where: { pairAddress: $address, date_gt: $startTime }\\n          orderBy: date\\n          orderDirection: asc\\n        ) {\\n          date\\n          dailyVolumeUSD\\n          reserveUSD\\n        }\\n      }\\n    \"])));_context.next=4;return request(INFO_CLIENT,query,{startTime:PCS_V2_START,skip:skip,address:address});case 4:_yield$request=_context.sent;pairDayDatas=_yield$request.pairDayDatas;data=pairDayDatas.map(mapPairDayData);return _context.abrupt(\"return\",{data:data,error:false});case 10:_context.prev=10;_context.t0=_context[\"catch\"](0);console.error('Failed to fetch pool chart data',_context.t0);return _context.abrupt(\"return\",{error:true});case 14:case\"end\":return _context.stop();}}},_callee,null,[[0,10]]);}));return function getPoolChartData(_x,_x2){return _ref.apply(this,arguments);};}();var fetchPoolChartData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:return _context2.abrupt(\"return\",fetchChartData(getPoolChartData,address));case 1:case\"end\":return _context2.stop();}}},_callee2);}));return function fetchPoolChartData(_x3){return _ref2.apply(this,arguments);};}();export default fetchPoolChartData;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/queries/pools/chartData.ts"],"names":["request","gql","INFO_CLIENT","PCS_V2_START","mapPairDayData","fetchChartData","getPoolChartData","skip","address","query","startTime","pairDayDatas","data","map","error","console","fetchPoolChartData"],"mappings":"yeAAA,OAASA,OAAT,CAAkBC,GAAlB,KAA6B,iBAA7B,CACA,OAASC,WAAT,KAA4B,4BAA5B,CAEA,OAASC,YAAT,KAA6B,uBAA7B,CAEA,OAASC,cAAT,CAAyBC,cAAzB,KAA+C,YAA/C,CAEA,GAAMC,CAAAA,gBAAgB,0FAAG,iBAAOC,IAAP,CAAqBC,OAArB,6KAEfC,KAFe,CAEPR,GAFO,0cAiBUD,CAAAA,OAAO,CAAuBE,WAAvB,CAAoCO,KAApC,CAA2C,CAC/EC,SAAS,CAAEP,YADoE,CAE/EI,IAAI,CAAJA,IAF+E,CAG/EC,OAAO,CAAPA,OAH+E,CAA3C,CAjBjB,qCAiBbG,YAjBa,gBAiBbA,YAjBa,CAsBfC,IAtBe,CAsBRD,YAAY,CAACE,GAAb,CAAiBT,cAAjB,CAtBQ,iCAuBd,CAAEQ,IAAI,CAAJA,IAAF,CAAQE,KAAK,CAAE,KAAf,CAvBc,4DAyBrBC,OAAO,CAACD,KAAR,CAAc,iCAAd,cAzBqB,gCA0Bd,CAAEA,KAAK,CAAE,IAAT,CA1Bc,uEAAH,kBAAhBR,CAAAA,gBAAgB,gDAAtB,CA8BA,GAAMU,CAAAA,kBAAkB,2FAAG,kBAAOR,OAAP,uJAClBH,cAAc,CAACC,gBAAD,CAAmBE,OAAnB,CADI,0DAAH,kBAAlBQ,CAAAA,kBAAkB,8CAAxB,CAIA,cAAeA,CAAAA,kBAAf","sourcesContent":["import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { ChartEntry } from 'state/info/types'\nimport { PCS_V2_START } from 'config/constants/info'\nimport { PairDayDatasResponse } from '../types'\nimport { mapPairDayData, fetchChartData } from '../helpers'\n\nconst getPoolChartData = async (skip: number, address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const query = gql`\n      query pairDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\n        pairDayDatas(\n          first: 1000\n          skip: $skip\n          where: { pairAddress: $address, date_gt: $startTime }\n          orderBy: date\n          orderDirection: asc\n        ) {\n          date\n          dailyVolumeUSD\n          reserveUSD\n        }\n      }\n    `\n    const { pairDayDatas } = await request<PairDayDatasResponse>(INFO_CLIENT, query, {\n      startTime: PCS_V2_START,\n      skip,\n      address,\n    })\n    const data = pairDayDatas.map(mapPairDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch pool chart data', error)\n    return { error: true }\n  }\n}\n\nconst fetchPoolChartData = async (address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  return fetchChartData(getPoolChartData, address)\n}\n\nexport default fetchPoolChartData\n"]},"metadata":{},"sourceType":"module"}