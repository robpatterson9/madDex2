{"ast":null,"code":"import { BigNumber, ethers } from 'ethers';\nimport { BetPosition } from 'state/types';\nimport { formatBigNumberToFixed } from 'utils/formatBalance';\nimport getTimePeriods from 'utils/getTimePeriods';\nconst MIN_PRICE_USD_DISPLAYED = BigNumber.from(100000);\nconst MIN_PRICE_BNB_DISPLAYED = BigNumber.from('1000000000000000');\nconst DISPLAYED_DECIMALS = 3;\n\nconst formatPriceDifference = ({\n  price = BigNumber.from(0),\n  minPriceDisplayed,\n  unitPrefix,\n  decimals\n}) => {\n  const sign = price.isNegative() ? BigNumber.from(-1) : BigNumber.from(1);\n\n  if (price.abs().lt(minPriceDisplayed)) {\n    const signedPriceToFormat = minPriceDisplayed.mul(sign);\n    return `<${unitPrefix}${formatBigNumberToFixed(signedPriceToFormat, DISPLAYED_DECIMALS, decimals)}`;\n  }\n\n  return `${unitPrefix}${formatBigNumberToFixed(price, DISPLAYED_DECIMALS, decimals)}`;\n};\n\nexport const formatUsdv2 = usd => {\n  return formatPriceDifference({\n    price: usd,\n    minPriceDisplayed: MIN_PRICE_USD_DISPLAYED,\n    unitPrefix: '$',\n    decimals: 8\n  });\n};\nexport const formatBnbv2 = bnb => {\n  return formatPriceDifference({\n    price: bnb,\n    minPriceDisplayed: MIN_PRICE_BNB_DISPLAYED,\n    unitPrefix: '',\n    decimals: 18\n  });\n};\nexport const padTime = num => num.toString().padStart(2, '0');\nexport const formatRoundTime = secondsBetweenBlocks => {\n  const {\n    hours,\n    minutes,\n    seconds\n  } = getTimePeriods(secondsBetweenBlocks);\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`;\n\n  if (hours > 0) {\n    return `${padTime(hours)}:${minutesSeconds}`;\n  }\n\n  return minutesSeconds;\n};\nexport const getHasRoundFailed = (round, buffer) => {\n  const closeTimestampMs = (round.closeTimestamp + buffer) * 1000;\n  const now = Date.now();\n\n  if (closeTimestampMs !== null && now > closeTimestampMs && !round.oracleCalled) {\n    return true;\n  }\n\n  return false;\n};\nexport const getMultiplierV2 = (total, amount) => {\n  if (!total) {\n    return ethers.FixedNumber.from(0);\n  }\n\n  if (total.eq(0) || amount.eq(0)) {\n    return ethers.FixedNumber.from(0);\n  }\n\n  const rewardAmountFixed = ethers.FixedNumber.from(total);\n  const multiplierAmountFixed = ethers.FixedNumber.from(amount);\n  return rewardAmountFixed.divUnsafe(multiplierAmountFixed);\n};\nexport const getPriceDifference = (price, lockPrice) => {\n  if (!price || !lockPrice) {\n    return ethers.BigNumber.from(0);\n  }\n\n  return price.sub(lockPrice);\n};\nexport const getRoundPosition = (lockPrice, closePrice) => {\n  if (!closePrice) {\n    return null;\n  }\n\n  if (closePrice.eq(lockPrice)) {\n    return BetPosition.HOUSE;\n  }\n\n  return closePrice.gt(lockPrice) ? BetPosition.BULL : BetPosition.BEAR;\n};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Predictions/helpers.ts"],"names":["BigNumber","ethers","BetPosition","formatBigNumberToFixed","getTimePeriods","MIN_PRICE_USD_DISPLAYED","from","MIN_PRICE_BNB_DISPLAYED","DISPLAYED_DECIMALS","formatPriceDifference","price","minPriceDisplayed","unitPrefix","decimals","sign","isNegative","abs","lt","signedPriceToFormat","mul","formatUsdv2","usd","formatBnbv2","bnb","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","hours","minutes","seconds","minutesSeconds","getHasRoundFailed","round","buffer","closeTimestampMs","closeTimestamp","now","Date","oracleCalled","getMultiplierV2","total","amount","FixedNumber","eq","rewardAmountFixed","multiplierAmountFixed","divUnsafe","getPriceDifference","lockPrice","sub","getRoundPosition","closePrice","HOUSE","gt","BULL","BEAR"],"mappings":"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","sourcesContent":["import { BigNumber, ethers } from 'ethers'\nimport { BetPosition, NodeRound } from 'state/types'\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\nimport getTimePeriods from 'utils/getTimePeriods'\n\nconst MIN_PRICE_USD_DISPLAYED = BigNumber.from(100000)\nconst MIN_PRICE_BNB_DISPLAYED = BigNumber.from('1000000000000000')\nconst DISPLAYED_DECIMALS = 3\n\ntype formatPriceDifferenceProps = {\n  price?: BigNumber\n  minPriceDisplayed: BigNumber\n  unitPrefix: string\n  decimals: number\n}\n\nconst formatPriceDifference = ({\n  price = BigNumber.from(0),\n  minPriceDisplayed,\n  unitPrefix,\n  decimals,\n}: formatPriceDifferenceProps) => {\n  const sign = price.isNegative() ? BigNumber.from(-1) : BigNumber.from(1)\n\n  if (price.abs().lt(minPriceDisplayed)) {\n    const signedPriceToFormat = minPriceDisplayed.mul(sign)\n    return `<${unitPrefix}${formatBigNumberToFixed(signedPriceToFormat, DISPLAYED_DECIMALS, decimals)}`\n  }\n\n  return `${unitPrefix}${formatBigNumberToFixed(price, DISPLAYED_DECIMALS, decimals)}`\n}\n\nexport const formatUsdv2 = (usd: BigNumber) => {\n  return formatPriceDifference({ price: usd, minPriceDisplayed: MIN_PRICE_USD_DISPLAYED, unitPrefix: '$', decimals: 8 })\n}\n\nexport const formatBnbv2 = (bnb: BigNumber) => {\n  return formatPriceDifference({ price: bnb, minPriceDisplayed: MIN_PRICE_BNB_DISPLAYED, unitPrefix: '', decimals: 18 })\n}\n\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\n\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\n\n  if (hours > 0) {\n    return `${padTime(hours)}:${minutesSeconds}`\n  }\n\n  return minutesSeconds\n}\n\nexport const getHasRoundFailed = (round: NodeRound, buffer: number) => {\n  const closeTimestampMs = (round.closeTimestamp + buffer) * 1000\n  const now = Date.now()\n\n  if (closeTimestampMs !== null && now > closeTimestampMs && !round.oracleCalled) {\n    return true\n  }\n\n  return false\n}\n\nexport const getMultiplierV2 = (total: ethers.BigNumber, amount: ethers.BigNumber) => {\n  if (!total) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  if (total.eq(0) || amount.eq(0)) {\n    return ethers.FixedNumber.from(0)\n  }\n\n  const rewardAmountFixed = ethers.FixedNumber.from(total)\n  const multiplierAmountFixed = ethers.FixedNumber.from(amount)\n\n  return rewardAmountFixed.divUnsafe(multiplierAmountFixed)\n}\n\nexport const getPriceDifference = (price: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\n  if (!price || !lockPrice) {\n    return ethers.BigNumber.from(0)\n  }\n\n  return price.sub(lockPrice)\n}\n\nexport const getRoundPosition = (lockPrice: ethers.BigNumber, closePrice: ethers.BigNumber) => {\n  if (!closePrice) {\n    return null\n  }\n\n  if (closePrice.eq(lockPrice)) {\n    return BetPosition.HOUSE\n  }\n\n  return closePrice.gt(lockPrice) ? BetPosition.BULL : BetPosition.BEAR\n}\n"]},"metadata":{},"sourceType":"module"}