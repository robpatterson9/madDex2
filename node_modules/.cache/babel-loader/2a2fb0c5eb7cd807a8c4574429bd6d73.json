{"ast":null,"code":"import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;/* eslint-disable no-await-in-loop */import{useState,useEffect}from'react';import{request,gql}from'graphql-request';import{INFO_CLIENT}from'config/constants/endpoints';import{PCS_V2_START}from'config/constants/info';import{fetchChartData,mapDayData}from'../helpers';/**\n * Data for displaying Liquidity and Volume charts on Overview page\n */var PANCAKE_DAY_DATAS=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  query overviewCharts($startTime: Int!, $skip: Int!) {\\n    pancakeDayDatas(first: 1000, skip: $skip, where: { date_gt: $startTime }, orderBy: date, orderDirection: asc) {\\n      date\\n      dailyVolumeUSD\\n      totalLiquidityUSD\\n    }\\n  }\\n\"])));var getOverviewChartData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(skip){var _yield$request,pancakeDayDatas,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return request(INFO_CLIENT,PANCAKE_DAY_DATAS,{startTime:PCS_V2_START,skip:skip});case 3:_yield$request=_context.sent;pancakeDayDatas=_yield$request.pancakeDayDatas;data=pancakeDayDatas.map(mapDayData);return _context.abrupt(\"return\",{data:data,error:false});case 9:_context.prev=9;_context.t0=_context[\"catch\"](0);console.error('Failed to fetch overview chart data',_context.t0);return _context.abrupt(\"return\",{error:true});case 13:case\"end\":return _context.stop();}}},_callee,null,[[0,9]]);}));return function getOverviewChartData(_x){return _ref.apply(this,arguments);};}();/**\n * Fetch historic chart data\n */var useFetchGlobalChartData=function useFetchGlobalChartData(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),overviewChartData=_useState2[0],setOverviewChartData=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];useEffect(function(){var fetch=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _yield$fetchChartData,data;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetchChartData(getOverviewChartData);case 2:_yield$fetchChartData=_context2.sent;data=_yield$fetchChartData.data;if(data){setOverviewChartData(data);}else{setError(true);}case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function fetch(){return _ref2.apply(this,arguments);};}();if(!overviewChartData&&!error){fetch();}},[overviewChartData,error]);return{error:error,data:overviewChartData};};export default useFetchGlobalChartData;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/queries/protocol/chart.ts"],"names":["useState","useEffect","request","gql","INFO_CLIENT","PCS_V2_START","fetchChartData","mapDayData","PANCAKE_DAY_DATAS","getOverviewChartData","skip","startTime","pancakeDayDatas","data","map","error","console","useFetchGlobalChartData","overviewChartData","setOverviewChartData","setError","fetch"],"mappings":"ioBAAA,qCACA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,OAASC,OAAT,CAAkBC,GAAlB,KAA6B,iBAA7B,CACA,OAASC,WAAT,KAA4B,4BAA5B,CACA,OAASC,YAAT,KAA6B,uBAA7B,CAGA,OAASC,cAAT,CAAyBC,UAAzB,KAA2C,YAA3C,CAEA;AACA;AACA,GACA,GAAMC,CAAAA,iBAAiB,CAAGL,GAAH,wTAAvB,CAUA,GAAMM,CAAAA,oBAAoB,0FAAG,iBAAOC,IAAP,gMAESR,CAAAA,OAAO,CAA0BE,WAA1B,CAAuCI,iBAAvC,CAA0D,CACjGG,SAAS,CAAEN,YADsF,CAEjGK,IAAI,CAAJA,IAFiG,CAA1D,CAFhB,qCAEjBE,eAFiB,gBAEjBA,eAFiB,CAMnBC,IANmB,CAMZD,eAAe,CAACE,GAAhB,CAAoBP,UAApB,CANY,iCAOlB,CAAEM,IAAI,CAAJA,IAAF,CAAQE,KAAK,CAAE,KAAf,CAPkB,0DASzBC,OAAO,CAACD,KAAR,CAAc,qCAAd,cATyB,gCAUlB,CAAEA,KAAK,CAAE,IAAT,CAVkB,sEAAH,kBAApBN,CAAAA,oBAAoB,4CAA1B,CAcA;AACA;AACA,GACA,GAAMQ,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,EAG3B,CACH,cAAkDjB,QAAQ,EAA1D,wCAAOkB,iBAAP,eAA0BC,oBAA1B,eACA,eAA0BnB,QAAQ,CAAC,KAAD,CAAlC,yCAAOe,KAAP,eAAcK,QAAd,eAEAnB,SAAS,CAAC,UAAM,CACd,GAAMoB,CAAAA,KAAK,2FAAG,8LACWf,CAAAA,cAAc,CAACG,oBAAD,CADzB,6CACJI,IADI,uBACJA,IADI,CAEZ,GAAIA,IAAJ,CAAU,CACRM,oBAAoB,CAACN,IAAD,CAApB,CACD,CAFD,IAEO,CACLO,QAAQ,CAAC,IAAD,CAAR,CACD,CANW,wDAAH,kBAALC,CAAAA,KAAK,2CAAX,CAQA,GAAI,CAACH,iBAAD,EAAsB,CAACH,KAA3B,CAAkC,CAChCM,KAAK,GACN,CACF,CAZQ,CAYN,CAACH,iBAAD,CAAoBH,KAApB,CAZM,CAAT,CAcA,MAAO,CACLA,KAAK,CAALA,KADK,CAELF,IAAI,CAAEK,iBAFD,CAAP,CAID,CAzBD,CA2BA,cAAeD,CAAAA,uBAAf","sourcesContent":["/* eslint-disable no-await-in-loop */\nimport { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { PCS_V2_START } from 'config/constants/info'\nimport { ChartEntry } from 'state/info/types'\nimport { PancakeDayDatasResponse } from '../types'\nimport { fetchChartData, mapDayData } from '../helpers'\n\n/**\n * Data for displaying Liquidity and Volume charts on Overview page\n */\nconst PANCAKE_DAY_DATAS = gql`\n  query overviewCharts($startTime: Int!, $skip: Int!) {\n    pancakeDayDatas(first: 1000, skip: $skip, where: { date_gt: $startTime }, orderBy: date, orderDirection: asc) {\n      date\n      dailyVolumeUSD\n      totalLiquidityUSD\n    }\n  }\n`\n\nconst getOverviewChartData = async (skip: number): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const { pancakeDayDatas } = await request<PancakeDayDatasResponse>(INFO_CLIENT, PANCAKE_DAY_DATAS, {\n      startTime: PCS_V2_START,\n      skip,\n    })\n    const data = pancakeDayDatas.map(mapDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch overview chart data', error)\n    return { error: true }\n  }\n}\n\n/**\n * Fetch historic chart data\n */\nconst useFetchGlobalChartData = (): {\n  error: boolean\n  data: ChartEntry[] | undefined\n} => {\n  const [overviewChartData, setOverviewChartData] = useState<ChartEntry[] | undefined>()\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { data } = await fetchChartData(getOverviewChartData)\n      if (data) {\n        setOverviewChartData(data)\n      } else {\n        setError(true)\n      }\n    }\n    if (!overviewChartData && !error) {\n      fetch()\n    }\n  }, [overviewChartData, error])\n\n  return {\n    error,\n    data: overviewChartData,\n  }\n}\n\nexport default useFetchGlobalChartData\n"]},"metadata":{},"sourceType":"module"}