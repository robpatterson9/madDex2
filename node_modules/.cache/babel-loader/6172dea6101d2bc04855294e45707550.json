{"ast":null,"code":"import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _toConsumableArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var _templateObject;import{request,gql}from'graphql-request';import{GRAPH_API_LOTTERY}from'config/constants/endpoints';import{getRoundIdsArray,fetchMultipleLotteries,hasRoundBeenClaimed}from'./helpers';import{fetchUserTicketsForMultipleRounds}from'./getUserTicketsData';export var MAX_USER_LOTTERIES_REQUEST_SIZE=100;/* eslint-disable camelcase */var applyNodeDataToUserGraphResponse=function applyNodeDataToUserGraphResponse(userNodeData,userGraphData,lotteryNodeData){//   If no graph rounds response - return node data\nif(userGraphData.length===0){return lotteryNodeData.map(function(nodeRound){var ticketDataForRound=userNodeData.find(function(roundTickets){return roundTickets.roundId===nodeRound.lotteryId;});return{endTime:nodeRound.endTime,status:nodeRound.status,lotteryId:nodeRound.lotteryId.toString(),claimed:hasRoundBeenClaimed(ticketDataForRound.userTickets),totalTickets:\"\".concat(ticketDataForRound.userTickets.length.toString()),tickets:ticketDataForRound.userTickets};});}// Return the rounds with combined node + subgraph data, plus all remaining subgraph rounds.\nvar nodeRoundsWithGraphData=userNodeData.map(function(userNodeRound){var userGraphRound=userGraphData.find(function(graphResponseRound){return graphResponseRound.lotteryId===userNodeRound.roundId;});var nodeRoundData=lotteryNodeData.find(function(nodeRound){return nodeRound.lotteryId===userNodeRound.roundId;});return{endTime:nodeRoundData.endTime,status:nodeRoundData.status,lotteryId:nodeRoundData.lotteryId.toString(),claimed:hasRoundBeenClaimed(userNodeRound.userTickets),totalTickets:(userGraphRound===null||userGraphRound===void 0?void 0:userGraphRound.totalTickets)||userNodeRound.userTickets.length.toString(),tickets:userNodeRound.userTickets};});// Return the rounds with combined data, plus all remaining subgraph rounds.\nvar _nodeRoundsWithGraphD=nodeRoundsWithGraphData.slice(-1),_nodeRoundsWithGraphD2=_slicedToArray(_nodeRoundsWithGraphD,1),lastCombinedDataRound=_nodeRoundsWithGraphD2[0];var lastCombinedDataRoundIndex=userGraphData.map(function(graphRound){return graphRound===null||graphRound===void 0?void 0:graphRound.lotteryId;}).indexOf(lastCombinedDataRound===null||lastCombinedDataRound===void 0?void 0:lastCombinedDataRound.lotteryId);var remainingSubgraphRounds=userGraphData?userGraphData.splice(lastCombinedDataRoundIndex+1):[];var mergedResponse=[].concat(_toConsumableArray(nodeRoundsWithGraphData),_toConsumableArray(remainingSubgraphRounds));return mergedResponse;};export var getGraphLotteryUser=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(account){var first,skip,where,user,blankUser,response,userRes,_args=arguments;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:first=_args.length>1&&_args[1]!==undefined?_args[1]:MAX_USER_LOTTERIES_REQUEST_SIZE;skip=_args.length>2&&_args[2]!==undefined?_args[2]:0;where=_args.length>3&&_args[3]!==undefined?_args[3]:{};blankUser={account:account,totalCake:'',totalTickets:'',rounds:[]};_context.prev=4;_context.next=7;return request(GRAPH_API_LOTTERY,gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n        query getUserLotteries($account: ID!, $first: Int!, $skip: Int!, $where: Round_filter) {\\n          user(id: $account) {\\n            id\\n            totalTickets\\n            totalCake\\n            rounds(first: $first, skip: $skip, where: $where, orderDirection: desc, orderBy: block) {\\n              id\\n              lottery {\\n                id\\n                endTime\\n                status\\n              }\\n              claimed\\n              totalTickets\\n            }\\n          }\\n        }\\n      \"]))),{account:account.toLowerCase(),first:first,skip:skip,where:where});case 7:response=_context.sent;userRes=response.user;// If no user returned - return blank user\nif(!userRes){user=blankUser;}else{user={account:userRes.id,totalCake:userRes.totalCake,totalTickets:userRes.totalTickets,rounds:userRes.rounds.map(function(round){var _round$lottery,_round$lottery2,_round$lottery3;return{lotteryId:round===null||round===void 0?void 0:(_round$lottery=round.lottery)===null||_round$lottery===void 0?void 0:_round$lottery.id,endTime:round===null||round===void 0?void 0:(_round$lottery2=round.lottery)===null||_round$lottery2===void 0?void 0:_round$lottery2.endTime,claimed:round===null||round===void 0?void 0:round.claimed,totalTickets:round===null||round===void 0?void 0:round.totalTickets,status:round===null||round===void 0?void 0:(_round$lottery3=round.lottery)===null||_round$lottery3===void 0?void 0:_round$lottery3.status.toLowerCase()};})};}_context.next=16;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](4);console.error(_context.t0);user=blankUser;case 16:return _context.abrupt(\"return\",user);case 17:case\"end\":return _context.stop();}}},_callee,null,[[4,12]]);}));return function getGraphLotteryUser(_x){return _ref.apply(this,arguments);};}();var getUserLotteryData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(account,currentLotteryId){var idsForTicketsNodeCall,roundDataAndUserTickets,userRoundsNodeData,idsForLotteriesNodeCall,lotteriesNodeData,graphResponse,mergedRoundData,graphResponseWithNodeRounds;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:idsForTicketsNodeCall=getRoundIdsArray(currentLotteryId);_context2.next=3;return fetchUserTicketsForMultipleRounds(idsForTicketsNodeCall,account);case 3:roundDataAndUserTickets=_context2.sent;userRoundsNodeData=roundDataAndUserTickets.filter(function(round){return round.userTickets.length>0;});idsForLotteriesNodeCall=userRoundsNodeData.map(function(round){return round.roundId;});_context2.next=8;return fetchMultipleLotteries(idsForLotteriesNodeCall);case 8:lotteriesNodeData=_context2.sent;_context2.next=11;return getGraphLotteryUser(account);case 11:graphResponse=_context2.sent;mergedRoundData=applyNodeDataToUserGraphResponse(userRoundsNodeData,graphResponse.rounds,lotteriesNodeData);graphResponseWithNodeRounds=_objectSpread(_objectSpread({},graphResponse),{},{rounds:mergedRoundData});return _context2.abrupt(\"return\",graphResponseWithNodeRounds);case 15:case\"end\":return _context2.stop();}}},_callee2);}));return function getUserLotteryData(_x2,_x3){return _ref2.apply(this,arguments);};}();export default getUserLotteryData;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/lottery/getUserLotteryData.ts"],"names":["request","gql","GRAPH_API_LOTTERY","getRoundIdsArray","fetchMultipleLotteries","hasRoundBeenClaimed","fetchUserTicketsForMultipleRounds","MAX_USER_LOTTERIES_REQUEST_SIZE","applyNodeDataToUserGraphResponse","userNodeData","userGraphData","lotteryNodeData","length","map","nodeRound","ticketDataForRound","find","roundTickets","roundId","lotteryId","endTime","status","toString","claimed","userTickets","totalTickets","tickets","nodeRoundsWithGraphData","userNodeRound","userGraphRound","graphResponseRound","nodeRoundData","slice","lastCombinedDataRound","lastCombinedDataRoundIndex","graphRound","indexOf","remainingSubgraphRounds","splice","mergedResponse","getGraphLotteryUser","account","first","skip","where","blankUser","totalCake","rounds","toLowerCase","response","userRes","user","id","round","lottery","console","error","getUserLotteryData","currentLotteryId","idsForTicketsNodeCall","roundDataAndUserTickets","userRoundsNodeData","filter","idsForLotteriesNodeCall","lotteriesNodeData","graphResponse","mergedRoundData","graphResponseWithNodeRounds"],"mappings":"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","sourcesContent":["import { request, gql } from 'graphql-request'\nimport { GRAPH_API_LOTTERY } from 'config/constants/endpoints'\nimport { LotteryTicket } from 'config/constants/types'\nimport { LotteryUserGraphEntity, LotteryResponse, UserRound } from 'state/types'\nimport { getRoundIdsArray, fetchMultipleLotteries, hasRoundBeenClaimed } from './helpers'\nimport { fetchUserTicketsForMultipleRounds } from './getUserTicketsData'\n\nexport const MAX_USER_LOTTERIES_REQUEST_SIZE = 100\n\n/* eslint-disable camelcase */\ntype UserLotteriesWhere = { lottery_in?: string[] }\n\nconst applyNodeDataToUserGraphResponse = (\n  userNodeData: { roundId: string; userTickets: LotteryTicket[] }[],\n  userGraphData: UserRound[],\n  lotteryNodeData: LotteryResponse[],\n): UserRound[] => {\n  //   If no graph rounds response - return node data\n  if (userGraphData.length === 0) {\n    return lotteryNodeData.map((nodeRound) => {\n      const ticketDataForRound = userNodeData.find((roundTickets) => roundTickets.roundId === nodeRound.lotteryId)\n      return {\n        endTime: nodeRound.endTime,\n        status: nodeRound.status,\n        lotteryId: nodeRound.lotteryId.toString(),\n        claimed: hasRoundBeenClaimed(ticketDataForRound.userTickets),\n        totalTickets: `${ticketDataForRound.userTickets.length.toString()}`,\n        tickets: ticketDataForRound.userTickets,\n      }\n    })\n  }\n\n  // Return the rounds with combined node + subgraph data, plus all remaining subgraph rounds.\n  const nodeRoundsWithGraphData = userNodeData.map((userNodeRound) => {\n    const userGraphRound = userGraphData.find(\n      (graphResponseRound) => graphResponseRound.lotteryId === userNodeRound.roundId,\n    )\n    const nodeRoundData = lotteryNodeData.find((nodeRound) => nodeRound.lotteryId === userNodeRound.roundId)\n    return {\n      endTime: nodeRoundData.endTime,\n      status: nodeRoundData.status,\n      lotteryId: nodeRoundData.lotteryId.toString(),\n      claimed: hasRoundBeenClaimed(userNodeRound.userTickets),\n      totalTickets: userGraphRound?.totalTickets || userNodeRound.userTickets.length.toString(),\n      tickets: userNodeRound.userTickets,\n    }\n  })\n\n  // Return the rounds with combined data, plus all remaining subgraph rounds.\n  const [lastCombinedDataRound] = nodeRoundsWithGraphData.slice(-1)\n  const lastCombinedDataRoundIndex = userGraphData\n    .map((graphRound) => graphRound?.lotteryId)\n    .indexOf(lastCombinedDataRound?.lotteryId)\n  const remainingSubgraphRounds = userGraphData ? userGraphData.splice(lastCombinedDataRoundIndex + 1) : []\n  const mergedResponse = [...nodeRoundsWithGraphData, ...remainingSubgraphRounds]\n  return mergedResponse\n}\n\nexport const getGraphLotteryUser = async (\n  account: string,\n  first = MAX_USER_LOTTERIES_REQUEST_SIZE,\n  skip = 0,\n  where: UserLotteriesWhere = {},\n): Promise<LotteryUserGraphEntity> => {\n  let user\n  const blankUser = {\n    account,\n    totalCake: '',\n    totalTickets: '',\n    rounds: [],\n  }\n\n  try {\n    const response = await request(\n      GRAPH_API_LOTTERY,\n      gql`\n        query getUserLotteries($account: ID!, $first: Int!, $skip: Int!, $where: Round_filter) {\n          user(id: $account) {\n            id\n            totalTickets\n            totalCake\n            rounds(first: $first, skip: $skip, where: $where, orderDirection: desc, orderBy: block) {\n              id\n              lottery {\n                id\n                endTime\n                status\n              }\n              claimed\n              totalTickets\n            }\n          }\n        }\n      `,\n      { account: account.toLowerCase(), first, skip, where },\n    )\n    const userRes = response.user\n\n    // If no user returned - return blank user\n    if (!userRes) {\n      user = blankUser\n    } else {\n      user = {\n        account: userRes.id,\n        totalCake: userRes.totalCake,\n        totalTickets: userRes.totalTickets,\n        rounds: userRes.rounds.map((round) => {\n          return {\n            lotteryId: round?.lottery?.id,\n            endTime: round?.lottery?.endTime,\n            claimed: round?.claimed,\n            totalTickets: round?.totalTickets,\n            status: round?.lottery?.status.toLowerCase(),\n          }\n        }),\n      }\n    }\n  } catch (error) {\n    console.error(error)\n    user = blankUser\n  }\n\n  return user\n}\n\nconst getUserLotteryData = async (account: string, currentLotteryId: string): Promise<LotteryUserGraphEntity> => {\n  const idsForTicketsNodeCall = getRoundIdsArray(currentLotteryId)\n  const roundDataAndUserTickets = await fetchUserTicketsForMultipleRounds(idsForTicketsNodeCall, account)\n  const userRoundsNodeData = roundDataAndUserTickets.filter((round) => round.userTickets.length > 0)\n  const idsForLotteriesNodeCall = userRoundsNodeData.map((round) => round.roundId)\n  const lotteriesNodeData = await fetchMultipleLotteries(idsForLotteriesNodeCall)\n  const graphResponse = await getGraphLotteryUser(account)\n  const mergedRoundData = applyNodeDataToUserGraphResponse(userRoundsNodeData, graphResponse.rounds, lotteriesNodeData)\n  const graphResponseWithNodeRounds = { ...graphResponse, rounds: mergedRoundData }\n  return graphResponseWithNodeRounds\n}\n\nexport default getUserLotteryData\n"]},"metadata":{},"sourceType":"module"}