{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Lottery/components/AllHistoryCard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { Card, Text, Skeleton, CardHeader, Box } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useAppDispatch } from 'state';\nimport { useLottery } from 'state/lottery/hooks';\nimport { fetchLottery } from 'state/lottery/helpers';\nimport { LotteryStatus } from 'config/constants/types';\nimport RoundSwitcher from './RoundSwitcher';\nimport { getDrawnDate, processLotteryResponse } from '../../helpers';\nimport PreviousRoundCardBody from '../PreviousRoundCard/Body';\nimport PreviousRoundCardFooter from '../PreviousRoundCard/Footer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCard = styled(Card)`\n  width: 100%;\n\n  ${({\n  theme\n}) => theme.mediaQueries.md} {\n    width: 756px;\n  }\n`;\n_c = StyledCard;\nconst StyledCardHeader = styled(CardHeader)`\n  z-index: 2;\n  background: none;\n  border-bottom: 1px ${({\n  theme\n}) => theme.colors.cardBorder} solid;\n`;\n_c2 = StyledCardHeader;\n\nconst AllHistoryCard = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const dispatch = useAppDispatch();\n  const {\n    currentLotteryId,\n    lotteriesData,\n    currentRound: {\n      status,\n      isLoading\n    }\n  } = useLottery();\n  const [latestRoundId, setLatestRoundId] = useState(null);\n  const [selectedRoundId, setSelectedRoundId] = useState('');\n  const [selectedLotteryNodeData, setSelectedLotteryNodeData] = useState(null);\n  const timer = useRef(null);\n  const numRoundsFetched = lotteriesData === null || lotteriesData === void 0 ? void 0 : lotteriesData.length;\n  useEffect(() => {\n    if (currentLotteryId) {\n      const currentLotteryIdAsInt = currentLotteryId ? parseInt(currentLotteryId) : null;\n      const mostRecentFinishedRoundId = status === LotteryStatus.CLAIMABLE ? currentLotteryIdAsInt : currentLotteryIdAsInt - 1;\n      setLatestRoundId(mostRecentFinishedRoundId);\n      setSelectedRoundId(mostRecentFinishedRoundId.toString());\n    }\n  }, [currentLotteryId, status]);\n  useEffect(() => {\n    setSelectedLotteryNodeData(null);\n\n    const fetchLotteryData = async () => {\n      const lotteryData = await fetchLottery(selectedRoundId);\n      const processedLotteryData = processLotteryResponse(lotteryData);\n      setSelectedLotteryNodeData(processedLotteryData);\n    };\n\n    timer.current = setInterval(() => {\n      if (selectedRoundId) {\n        fetchLotteryData();\n      }\n\n      clearInterval(timer.current);\n    }, 1000);\n    return () => clearInterval(timer.current);\n  }, [selectedRoundId, currentLotteryId, numRoundsFetched, dispatch]);\n\n  const handleInputChange = event => {\n    const {\n      target: {\n        value\n      }\n    } = event;\n\n    if (value) {\n      setSelectedRoundId(value);\n\n      if (parseInt(value, 10) <= 0) {\n        setSelectedRoundId('');\n      }\n\n      if (parseInt(value, 10) >= latestRoundId) {\n        setSelectedRoundId(latestRoundId.toString());\n      }\n    } else {\n      setSelectedRoundId('');\n    }\n  };\n\n  const handleArrowButtonPress = targetRound => {\n    if (targetRound) {\n      setSelectedRoundId(targetRound.toString());\n    } else {\n      // targetRound is NaN when the input is empty, the only button press that will trigger this func is 'forward one'\n      setSelectedRoundId('1');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledCard, {\n    children: [/*#__PURE__*/_jsxDEV(StyledCardHeader, {\n      children: [/*#__PURE__*/_jsxDEV(RoundSwitcher, {\n        isLoading: isLoading,\n        selectedRoundId: selectedRoundId,\n        mostRecentRound: latestRoundId,\n        handleInputChange: handleInputChange,\n        handleArrowButtonPress: handleArrowButtonPress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        mt: \"8px\",\n        children: (selectedLotteryNodeData === null || selectedLotteryNodeData === void 0 ? void 0 : selectedLotteryNodeData.endTime) ? /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          children: [t('Drawn'), \" \", getDrawnDate(selectedLotteryNodeData.endTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n          width: \"185px\",\n          height: \"21px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PreviousRoundCardBody, {\n      lotteryNodeData: selectedLotteryNodeData,\n      lotteryId: selectedRoundId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PreviousRoundCardFooter, {\n      lotteryNodeData: selectedLotteryNodeData,\n      lotteryId: selectedRoundId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AllHistoryCard, \"igADzL8gIIh8XRpawMVkSXVxiFE=\", false, function () {\n  return [useTranslation, useAppDispatch, useLottery];\n});\n\n_c3 = AllHistoryCard;\nexport default AllHistoryCard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledCard\");\n$RefreshReg$(_c2, \"StyledCardHeader\");\n$RefreshReg$(_c3, \"AllHistoryCard\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Lottery/components/AllHistoryCard/index.tsx"],"names":["React","useState","useRef","useEffect","styled","Card","Text","Skeleton","CardHeader","Box","useTranslation","useAppDispatch","useLottery","fetchLottery","LotteryStatus","RoundSwitcher","getDrawnDate","processLotteryResponse","PreviousRoundCardBody","PreviousRoundCardFooter","StyledCard","theme","mediaQueries","md","StyledCardHeader","colors","cardBorder","AllHistoryCard","t","dispatch","currentLotteryId","lotteriesData","currentRound","status","isLoading","latestRoundId","setLatestRoundId","selectedRoundId","setSelectedRoundId","selectedLotteryNodeData","setSelectedLotteryNodeData","timer","numRoundsFetched","length","currentLotteryIdAsInt","parseInt","mostRecentFinishedRoundId","CLAIMABLE","toString","fetchLotteryData","lotteryData","processedLotteryData","current","setInterval","clearInterval","handleInputChange","event","target","value","handleArrowButtonPress","targetRound","endTime"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Card, Text, Skeleton, CardHeader, Box } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAppDispatch } from 'state'\nimport { useLottery } from 'state/lottery/hooks'\nimport { fetchLottery } from 'state/lottery/helpers'\nimport { LotteryStatus } from 'config/constants/types'\nimport RoundSwitcher from './RoundSwitcher'\nimport { getDrawnDate, processLotteryResponse } from '../../helpers'\nimport PreviousRoundCardBody from '../PreviousRoundCard/Body'\nimport PreviousRoundCardFooter from '../PreviousRoundCard/Footer'\n\nconst StyledCard = styled(Card)`\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    width: 756px;\n  }\n`\n\nconst StyledCardHeader = styled(CardHeader)`\n  z-index: 2;\n  background: none;\n  border-bottom: 1px ${({ theme }) => theme.colors.cardBorder} solid;\n`\n\nconst AllHistoryCard = () => {\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const {\n    currentLotteryId,\n    lotteriesData,\n    currentRound: { status, isLoading },\n  } = useLottery()\n  const [latestRoundId, setLatestRoundId] = useState(null)\n  const [selectedRoundId, setSelectedRoundId] = useState('')\n  const [selectedLotteryNodeData, setSelectedLotteryNodeData] = useState(null)\n  const timer = useRef(null)\n\n  const numRoundsFetched = lotteriesData?.length\n\n  useEffect(() => {\n    if (currentLotteryId) {\n      const currentLotteryIdAsInt = currentLotteryId ? parseInt(currentLotteryId) : null\n      const mostRecentFinishedRoundId =\n        status === LotteryStatus.CLAIMABLE ? currentLotteryIdAsInt : currentLotteryIdAsInt - 1\n      setLatestRoundId(mostRecentFinishedRoundId)\n      setSelectedRoundId(mostRecentFinishedRoundId.toString())\n    }\n  }, [currentLotteryId, status])\n\n  useEffect(() => {\n    setSelectedLotteryNodeData(null)\n\n    const fetchLotteryData = async () => {\n      const lotteryData = await fetchLottery(selectedRoundId)\n      const processedLotteryData = processLotteryResponse(lotteryData)\n      setSelectedLotteryNodeData(processedLotteryData)\n    }\n\n    timer.current = setInterval(() => {\n      if (selectedRoundId) {\n        fetchLotteryData()\n      }\n      clearInterval(timer.current)\n    }, 1000)\n\n    return () => clearInterval(timer.current)\n  }, [selectedRoundId, currentLotteryId, numRoundsFetched, dispatch])\n\n  const handleInputChange = (event) => {\n    const {\n      target: { value },\n    } = event\n    if (value) {\n      setSelectedRoundId(value)\n      if (parseInt(value, 10) <= 0) {\n        setSelectedRoundId('')\n      }\n      if (parseInt(value, 10) >= latestRoundId) {\n        setSelectedRoundId(latestRoundId.toString())\n      }\n    } else {\n      setSelectedRoundId('')\n    }\n  }\n\n  const handleArrowButtonPress = (targetRound) => {\n    if (targetRound) {\n      setSelectedRoundId(targetRound.toString())\n    } else {\n      // targetRound is NaN when the input is empty, the only button press that will trigger this func is 'forward one'\n      setSelectedRoundId('1')\n    }\n  }\n\n  return (\n    <StyledCard>\n      <StyledCardHeader>\n        <RoundSwitcher\n          isLoading={isLoading}\n          selectedRoundId={selectedRoundId}\n          mostRecentRound={latestRoundId}\n          handleInputChange={handleInputChange}\n          handleArrowButtonPress={handleArrowButtonPress}\n        />\n        <Box mt=\"8px\">\n          {selectedLotteryNodeData?.endTime ? (\n            <Text fontSize=\"14px\">\n              {t('Drawn')} {getDrawnDate(selectedLotteryNodeData.endTime)}\n            </Text>\n          ) : (\n            <Skeleton width=\"185px\" height=\"21px\" />\n          )}\n        </Box>\n      </StyledCardHeader>\n      <PreviousRoundCardBody lotteryNodeData={selectedLotteryNodeData} lotteryId={selectedRoundId} />\n      <PreviousRoundCardFooter lotteryNodeData={selectedLotteryNodeData} lotteryId={selectedRoundId} />\n    </StyledCard>\n  )\n}\n\nexport default AllHistoryCard\n"]},"metadata":{},"sourceType":"module"}