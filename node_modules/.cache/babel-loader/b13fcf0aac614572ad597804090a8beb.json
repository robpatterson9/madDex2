{"ast":null,"code":"import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from'react';var useWithdrawalFeeTimer=function useWithdrawalFeeTimer(lastDepositedTime,userShares){var withdrawalFeePeriod=arguments.length>2&&arguments[2]!==undefined?arguments[2]:259200;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),secondsRemaining=_useState2[0],setSecondsRemaining=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),hasUnstakingFee=_useState4[0],setHasUnstakingFee=_useState4[1];var _useState5=useState(Math.floor(Date.now()/1000)),_useState6=_slicedToArray(_useState5,2),currentSeconds=_useState6[0],setCurrentSeconds=_useState6[1];useEffect(function(){var feeEndTime=lastDepositedTime+withdrawalFeePeriod;var secondsRemainingCalc=feeEndTime-currentSeconds;var doesUnstakingFeeApply=userShares.gt(0)&&secondsRemainingCalc>0;var tick=function tick(){setCurrentSeconds(function(prevSeconds){return prevSeconds+1;});};var timerInterval=setInterval(function(){return tick();},1000);if(doesUnstakingFeeApply){setSecondsRemaining(secondsRemainingCalc);setHasUnstakingFee(true);}else{setHasUnstakingFee(false);clearInterval(timerInterval);}return function(){return clearInterval(timerInterval);};},[lastDepositedTime,withdrawalFeePeriod,setSecondsRemaining,currentSeconds,userShares]);return{hasUnstakingFee:hasUnstakingFee,secondsRemaining:secondsRemaining};};export default useWithdrawalFeeTimer;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/hooks/useWithdrawalFeeTimer.ts"],"names":["useEffect","useState","useWithdrawalFeeTimer","lastDepositedTime","userShares","withdrawalFeePeriod","secondsRemaining","setSecondsRemaining","hasUnstakingFee","setHasUnstakingFee","Math","floor","Date","now","currentSeconds","setCurrentSeconds","feeEndTime","secondsRemainingCalc","doesUnstakingFeeApply","gt","tick","prevSeconds","timerInterval","setInterval","clearInterval"],"mappings":"wJACA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAEA,GAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACC,iBAAD,CAA4BC,UAA5B,CAAoF,IAAjCC,CAAAA,mBAAiC,2DAAX,MAAW,CAChH,cAAgDJ,QAAQ,CAAC,IAAD,CAAxD,wCAAOK,gBAAP,eAAyBC,mBAAzB,eACA,eAA8CN,QAAQ,CAAC,KAAD,CAAtD,yCAAOO,eAAP,eAAwBC,kBAAxB,eACA,eAA4CR,QAAQ,CAACS,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,GAAa,IAAxB,CAAD,CAApD,yCAAOC,cAAP,eAAuBC,iBAAvB,eAEAf,SAAS,CAAC,UAAM,CACd,GAAMgB,CAAAA,UAAU,CAAGb,iBAAiB,CAAGE,mBAAvC,CACA,GAAMY,CAAAA,oBAAoB,CAAGD,UAAU,CAAGF,cAA1C,CACA,GAAMI,CAAAA,qBAAqB,CAAGd,UAAU,CAACe,EAAX,CAAc,CAAd,GAAoBF,oBAAoB,CAAG,CAAzE,CAEA,GAAMG,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAM,CACjBL,iBAAiB,CAAC,SAACM,WAAD,QAAiBA,CAAAA,WAAW,CAAG,CAA/B,EAAD,CAAjB,CACD,CAFD,CAGA,GAAMC,CAAAA,aAAa,CAAGC,WAAW,CAAC,iBAAMH,CAAAA,IAAI,EAAV,EAAD,CAAe,IAAf,CAAjC,CACA,GAAIF,qBAAJ,CAA2B,CACzBX,mBAAmB,CAACU,oBAAD,CAAnB,CACAR,kBAAkB,CAAC,IAAD,CAAlB,CACD,CAHD,IAGO,CACLA,kBAAkB,CAAC,KAAD,CAAlB,CACAe,aAAa,CAACF,aAAD,CAAb,CACD,CAED,MAAO,kBAAME,CAAAA,aAAa,CAACF,aAAD,CAAnB,EAAP,CACD,CAlBQ,CAkBN,CAACnB,iBAAD,CAAoBE,mBAApB,CAAyCE,mBAAzC,CAA8DO,cAA9D,CAA8EV,UAA9E,CAlBM,CAAT,CAoBA,MAAO,CAAEI,eAAe,CAAfA,eAAF,CAAmBF,gBAAgB,CAAhBA,gBAAnB,CAAP,CACD,CA1BD,CA4BA,cAAeJ,CAAAA,qBAAf","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { useEffect, useState } from 'react'\n\nconst useWithdrawalFeeTimer = (lastDepositedTime: number, userShares: BigNumber, withdrawalFeePeriod = 259200) => {\n  const [secondsRemaining, setSecondsRemaining] = useState(null)\n  const [hasUnstakingFee, setHasUnstakingFee] = useState(false)\n  const [currentSeconds, setCurrentSeconds] = useState(Math.floor(Date.now() / 1000))\n\n  useEffect(() => {\n    const feeEndTime = lastDepositedTime + withdrawalFeePeriod\n    const secondsRemainingCalc = feeEndTime - currentSeconds\n    const doesUnstakingFeeApply = userShares.gt(0) && secondsRemainingCalc > 0\n\n    const tick = () => {\n      setCurrentSeconds((prevSeconds) => prevSeconds + 1)\n    }\n    const timerInterval = setInterval(() => tick(), 1000)\n    if (doesUnstakingFeeApply) {\n      setSecondsRemaining(secondsRemainingCalc)\n      setHasUnstakingFee(true)\n    } else {\n      setHasUnstakingFee(false)\n      clearInterval(timerInterval)\n    }\n\n    return () => clearInterval(timerInterval)\n  }, [lastDepositedTime, withdrawalFeePeriod, setSecondsRemaining, currentSeconds, userShares])\n\n  return { hasUnstakingFee, secondsRemaining }\n}\n\nexport default useWithdrawalFeeTimer\n"]},"metadata":{},"sourceType":"module"}