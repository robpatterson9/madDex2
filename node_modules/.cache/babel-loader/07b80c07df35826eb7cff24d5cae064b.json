{"ast":null,"code":"import React,{useEffect}from'react';import{format}from'date-fns';import{BarChart,ResponsiveContainer,XAxis,YAxis,Tooltip,Bar}from'recharts';import useTheme from'hooks/useTheme';import{formatAmount}from'views/Info/utils/formatInfoNumbers';import{BarChartLoader}from'views/Info/components/ChartLoaders';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CustomBar=function CustomBar(_ref){var x=_ref.x,y=_ref.y,width=_ref.width,height=_ref.height,fill=_ref.fill;return/*#__PURE__*/_jsx(\"g\",{children:/*#__PURE__*/_jsx(\"rect\",{x:x,y:y,fill:fill,width:width,height:height,rx:\"2\"})});};// Calls setHoverValue and setHoverDate when part of chart is hovered\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\nvar HoverUpdater=function HoverUpdater(_ref2){var payload=_ref2.payload,setHoverValue=_ref2.setHoverValue,setHoverDate=_ref2.setHoverDate;useEffect(function(){setHoverValue(payload.value);setHoverDate(format(payload.time,'MMM d, yyyy'));},[payload.value,payload.time,setHoverValue,setHoverDate]);return null;};var Chart=function Chart(_ref3){var data=_ref3.data,setHoverValue=_ref3.setHoverValue,setHoverDate=_ref3.setHoverDate;var _useTheme=useTheme(),theme=_useTheme.theme;if(!data||data.length===0){return/*#__PURE__*/_jsx(BarChartLoader,{});}return/*#__PURE__*/_jsx(ResponsiveContainer,{width:\"100%\",height:\"100%\",children:/*#__PURE__*/_jsxs(BarChart,{data:data,margin:{top:5,right:15,left:0,bottom:5},onMouseLeave:function onMouseLeave(){setHoverDate(undefined);setHoverValue(undefined);},children:[/*#__PURE__*/_jsx(XAxis,{dataKey:\"time\",axisLine:false,tickLine:false,tickFormatter:function tickFormatter(time){return format(time,'dd');},minTickGap:10}),/*#__PURE__*/_jsx(YAxis,{dataKey:\"value\",tickCount:6,scale:\"linear\",axisLine:false,tickLine:false,color:theme.colors.textSubtle,fontSize:\"12px\",tickFormatter:function tickFormatter(val){return\"$\".concat(formatAmount(val));},orientation:\"right\",tick:{dx:10,fill:theme.colors.textSubtle}}),/*#__PURE__*/_jsx(Tooltip,{cursor:{fill:theme.colors.backgroundDisabled},contentStyle:{display:'none'},formatter:function formatter(tooltipValue,name,props){return/*#__PURE__*/_jsx(HoverUpdater,{payload:props.payload,setHoverValue:setHoverValue,setHoverDate:setHoverDate});}}),/*#__PURE__*/_jsx(Bar,{dataKey:\"value\",fill:theme.colors.primary,shape:function shape(props){return/*#__PURE__*/_jsx(CustomBar,{height:props.height,width:props.width,x:props.x,y:props.y,fill:theme.colors.primary});}})]})});};export default Chart;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Info/components/InfoCharts/BarChart/index.tsx"],"names":["React","useEffect","format","BarChart","ResponsiveContainer","XAxis","YAxis","Tooltip","Bar","useTheme","formatAmount","BarChartLoader","CustomBar","x","y","width","height","fill","HoverUpdater","payload","setHoverValue","setHoverDate","value","time","Chart","data","theme","length","top","right","left","bottom","undefined","colors","textSubtle","val","dx","backgroundDisabled","display","tooltipValue","name","props","primary"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAA2D,OAA3D,CACA,OAASC,MAAT,KAAuB,UAAvB,CACA,OAASC,QAAT,CAAmBC,mBAAnB,CAAwCC,KAAxC,CAA+CC,KAA/C,CAAsDC,OAAtD,CAA+DC,GAA/D,KAA0E,UAA1E,CACA,MAAOC,CAAAA,QAAP,KAAqB,gBAArB,CACA,OAASC,YAAT,KAA6B,oCAA7B,CACA,OAASC,cAAT,KAA+B,oCAA/B,C,wFAUA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAYZ,IAXJC,CAAAA,CAWI,MAXJA,CAWI,CAVJC,CAUI,MAVJA,CAUI,CATJC,KASI,MATJA,KASI,CARJC,MAQI,MARJA,MAQI,CAPJC,IAOI,MAPJA,IAOI,CACJ,mBACE,gCACE,aAAM,CAAC,CAAEJ,CAAT,CAAY,CAAC,CAAEC,CAAf,CAAkB,IAAI,CAAEG,IAAxB,CAA8B,KAAK,CAAEF,KAArC,CAA4C,MAAM,CAAEC,MAApD,CAA4D,EAAE,CAAC,GAA/D,EADF,EADF,CAKD,CAlBD,CAoBA;AACA;AACA,GAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,OAA8C,IAA3CC,CAAAA,OAA2C,OAA3CA,OAA2C,CAAlCC,aAAkC,OAAlCA,aAAkC,CAAnBC,YAAmB,OAAnBA,YAAmB,CACjEpB,SAAS,CAAC,UAAM,CACdmB,aAAa,CAACD,OAAO,CAACG,KAAT,CAAb,CACAD,YAAY,CAACnB,MAAM,CAACiB,OAAO,CAACI,IAAT,CAAe,aAAf,CAAP,CAAZ,CACD,CAHQ,CAGN,CAACJ,OAAO,CAACG,KAAT,CAAgBH,OAAO,CAACI,IAAxB,CAA8BH,aAA9B,CAA6CC,YAA7C,CAHM,CAAT,CAKA,MAAO,KAAP,CACD,CAPD,CASA,GAAMG,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,OAA2D,IAAxDC,CAAAA,IAAwD,OAAxDA,IAAwD,CAAlDL,aAAkD,OAAlDA,aAAkD,CAAnCC,YAAmC,OAAnCA,YAAmC,CACvE,cAAkBZ,QAAQ,EAA1B,CAAQiB,KAAR,WAAQA,KAAR,CACA,GAAI,CAACD,IAAD,EAASA,IAAI,CAACE,MAAL,GAAgB,CAA7B,CAAgC,CAC9B,mBAAO,KAAC,cAAD,IAAP,CACD,CACD,mBACE,KAAC,mBAAD,EAAqB,KAAK,CAAC,MAA3B,CAAkC,MAAM,CAAC,MAAzC,uBACE,MAAC,QAAD,EACE,IAAI,CAAEF,IADR,CAEE,MAAM,CAAE,CACNG,GAAG,CAAE,CADC,CAENC,KAAK,CAAE,EAFD,CAGNC,IAAI,CAAE,CAHA,CAINC,MAAM,CAAE,CAJF,CAFV,CAQE,YAAY,CAAE,uBAAM,CAClBV,YAAY,CAACW,SAAD,CAAZ,CACAZ,aAAa,CAACY,SAAD,CAAb,CACD,CAXH,wBAaE,KAAC,KAAD,EACE,OAAO,CAAC,MADV,CAEE,QAAQ,CAAE,KAFZ,CAGE,QAAQ,CAAE,KAHZ,CAIE,aAAa,CAAE,uBAACT,IAAD,QAAUrB,CAAAA,MAAM,CAACqB,IAAD,CAAO,IAAP,CAAhB,EAJjB,CAKE,UAAU,CAAE,EALd,EAbF,cAoBE,KAAC,KAAD,EACE,OAAO,CAAC,OADV,CAEE,SAAS,CAAE,CAFb,CAGE,KAAK,CAAC,QAHR,CAIE,QAAQ,CAAE,KAJZ,CAKE,QAAQ,CAAE,KALZ,CAME,KAAK,CAAEG,KAAK,CAACO,MAAN,CAAaC,UANtB,CAOE,QAAQ,CAAC,MAPX,CAQE,aAAa,CAAE,uBAACC,GAAD,mBAAazB,YAAY,CAACyB,GAAD,CAAzB,GARjB,CASE,WAAW,CAAC,OATd,CAUE,IAAI,CAAE,CAAEC,EAAE,CAAE,EAAN,CAAUnB,IAAI,CAAES,KAAK,CAACO,MAAN,CAAaC,UAA7B,CAVR,EApBF,cAgCE,KAAC,OAAD,EACE,MAAM,CAAE,CAAEjB,IAAI,CAAES,KAAK,CAACO,MAAN,CAAaI,kBAArB,CADV,CAEE,YAAY,CAAE,CAAEC,OAAO,CAAE,MAAX,CAFhB,CAGE,SAAS,CAAE,mBAACC,YAAD,CAAeC,IAAf,CAAqBC,KAArB,qBACT,KAAC,YAAD,EAAc,OAAO,CAAEA,KAAK,CAACtB,OAA7B,CAAsC,aAAa,CAAEC,aAArD,CAAoE,YAAY,CAAEC,YAAlF,EADS,EAHb,EAhCF,cAuCE,KAAC,GAAD,EACE,OAAO,CAAC,OADV,CAEE,IAAI,CAAEK,KAAK,CAACO,MAAN,CAAaS,OAFrB,CAGE,KAAK,CAAE,eAACD,KAAD,qBACL,KAAC,SAAD,EAAW,MAAM,CAAEA,KAAK,CAACzB,MAAzB,CAAiC,KAAK,CAAEyB,KAAK,CAAC1B,KAA9C,CAAqD,CAAC,CAAE0B,KAAK,CAAC5B,CAA9D,CAAiE,CAAC,CAAE4B,KAAK,CAAC3B,CAA1E,CAA6E,IAAI,CAAEY,KAAK,CAACO,MAAN,CAAaS,OAAhG,EADK,EAHT,EAvCF,GADF,EADF,CAmDD,CAxDD,CA0DA,cAAelB,CAAAA,KAAf","sourcesContent":["import React, { useEffect, Dispatch, SetStateAction } from 'react'\nimport { format } from 'date-fns'\nimport { BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Bar } from 'recharts'\nimport useTheme from 'hooks/useTheme'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { BarChartLoader } from 'views/Info/components/ChartLoaders'\n\nexport type LineChartProps = {\n  data: any[]\n  height?: string\n  chartHeight?: string\n  setHoverValue: Dispatch<SetStateAction<number | undefined>> // used for value on hover\n  setHoverDate: Dispatch<SetStateAction<string | undefined>> // used for label of valye\n} & React.HTMLAttributes<HTMLDivElement>\n\nconst CustomBar = ({\n  x,\n  y,\n  width,\n  height,\n  fill,\n}: {\n  x: number\n  y: number\n  width: number\n  height: number\n  fill: string\n}) => {\n  return (\n    <g>\n      <rect x={x} y={y} fill={fill} width={width} height={height} rx=\"2\" />\n    </g>\n  )\n}\n\n// Calls setHoverValue and setHoverDate when part of chart is hovered\n// Note: this NEEDs to be wrapped inside component and useEffect, if you plug it as is it will create big render problems (try and see console)\nconst HoverUpdater = ({ payload, setHoverValue, setHoverDate }) => {\n  useEffect(() => {\n    setHoverValue(payload.value)\n    setHoverDate(format(payload.time, 'MMM d, yyyy'))\n  }, [payload.value, payload.time, setHoverValue, setHoverDate])\n\n  return null\n}\n\nconst Chart = ({ data, setHoverValue, setHoverDate }: LineChartProps) => {\n  const { theme } = useTheme()\n  if (!data || data.length === 0) {\n    return <BarChartLoader />\n  }\n  return (\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\n      <BarChart\n        data={data}\n        margin={{\n          top: 5,\n          right: 15,\n          left: 0,\n          bottom: 5,\n        }}\n        onMouseLeave={() => {\n          setHoverDate(undefined)\n          setHoverValue(undefined)\n        }}\n      >\n        <XAxis\n          dataKey=\"time\"\n          axisLine={false}\n          tickLine={false}\n          tickFormatter={(time) => format(time, 'dd')}\n          minTickGap={10}\n        />\n        <YAxis\n          dataKey=\"value\"\n          tickCount={6}\n          scale=\"linear\"\n          axisLine={false}\n          tickLine={false}\n          color={theme.colors.textSubtle}\n          fontSize=\"12px\"\n          tickFormatter={(val) => `$${formatAmount(val)}`}\n          orientation=\"right\"\n          tick={{ dx: 10, fill: theme.colors.textSubtle }}\n        />\n        <Tooltip\n          cursor={{ fill: theme.colors.backgroundDisabled }}\n          contentStyle={{ display: 'none' }}\n          formatter={(tooltipValue, name, props) => (\n            <HoverUpdater payload={props.payload} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\n          )}\n        />\n        <Bar\n          dataKey=\"value\"\n          fill={theme.colors.primary}\n          shape={(props) => (\n            <CustomBar height={props.height} width={props.width} x={props.x} y={props.y} fill={theme.colors.primary} />\n          )}\n        />\n      </BarChart>\n    </ResponsiveContainer>\n  )\n}\n\nexport default Chart\n"]},"metadata":{},"sourceType":"module"}