{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{useWeb3React}from'@web3-react/core';import{LotteryStatus}from'config/constants/types';import usePreviousValue from'hooks/usePreviousValue';import{useEffect}from'react';import{useAppDispatch}from'state';import{useLottery}from'state/lottery/hooks';import{fetchPublicLotteries,fetchCurrentLotteryId,fetchUserLotteries}from'state/lottery';var useStatusTransitions=function useStatusTransitions(){var _useLottery=useLottery(),currentLotteryId=_useLottery.currentLotteryId,isTransitioning=_useLottery.isTransitioning,status=_useLottery.currentRound.status;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var dispatch=useAppDispatch();var previousStatus=usePreviousValue(status);useEffect(function(){// Only run if there is a status state change\nif(previousStatus!==status&&currentLotteryId){// Current lottery transitions from CLOSE > CLAIMABLE\nif(previousStatus===LotteryStatus.CLOSE&&status===LotteryStatus.CLAIMABLE){dispatch(fetchPublicLotteries({currentLotteryId:currentLotteryId}));if(account){dispatch(fetchUserLotteries({account:account,currentLotteryId:currentLotteryId}));}}// Previous lottery to new lottery. From CLAIMABLE (previous round) > OPEN (new round)\nif(previousStatus===LotteryStatus.CLAIMABLE&&status===LotteryStatus.OPEN){dispatch(fetchPublicLotteries({currentLotteryId:currentLotteryId}));if(account){dispatch(fetchUserLotteries({account:account,currentLotteryId:currentLotteryId}));}}}},[currentLotteryId,status,previousStatus,account,dispatch]);useEffect(function(){// Current lottery is CLAIMABLE and the lottery is transitioning to a NEW round - fetch current lottery ID every 10s.\n// The isTransitioning condition will no longer be true when fetchCurrentLotteryId returns the next lottery ID\nif(previousStatus===LotteryStatus.CLAIMABLE&&status===LotteryStatus.CLAIMABLE&&isTransitioning){dispatch(fetchCurrentLotteryId());dispatch(fetchPublicLotteries({currentLotteryId:currentLotteryId}));var interval=setInterval(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(fetchCurrentLotteryId());dispatch(fetchPublicLotteries({currentLotteryId:currentLotteryId}));case 2:case\"end\":return _context.stop();}}},_callee);})),10000);return function(){return clearInterval(interval);};}return function(){return null;};},[status,previousStatus,isTransitioning,currentLotteryId,dispatch]);};export default useStatusTransitions;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Lottery/hooks/useStatusTransitions.tsx"],"names":["useWeb3React","LotteryStatus","usePreviousValue","useEffect","useAppDispatch","useLottery","fetchPublicLotteries","fetchCurrentLotteryId","fetchUserLotteries","useStatusTransitions","currentLotteryId","isTransitioning","status","currentRound","account","dispatch","previousStatus","CLOSE","CLAIMABLE","OPEN","interval","setInterval","clearInterval"],"mappings":"6SAAA,OAASA,YAAT,KAA6B,kBAA7B,CACA,OAASC,aAAT,KAA8B,wBAA9B,CACA,MAAOC,CAAAA,gBAAP,KAA6B,wBAA7B,CACA,OAASC,SAAT,KAA0B,OAA1B,CACA,OAASC,cAAT,KAA+B,OAA/B,CACA,OAASC,UAAT,KAA2B,qBAA3B,CACA,OAASC,oBAAT,CAA+BC,qBAA/B,CAAsDC,kBAAtD,KAAgF,eAAhF,CAEA,GAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,EAAM,CACjC,gBAIIJ,UAAU,EAJd,CACEK,gBADF,aACEA,gBADF,CAEEC,eAFF,aAEEA,eAFF,CAGkBC,MAHlB,aAGEC,YAHF,CAGkBD,MAHlB,CAMA,kBAAoBZ,YAAY,EAAhC,CAAQc,OAAR,eAAQA,OAAR,CACA,GAAMC,CAAAA,QAAQ,CAAGX,cAAc,EAA/B,CACA,GAAMY,CAAAA,cAAc,CAAGd,gBAAgB,CAACU,MAAD,CAAvC,CAEAT,SAAS,CAAC,UAAM,CACd;AACA,GAAIa,cAAc,GAAKJ,MAAnB,EAA6BF,gBAAjC,CAAmD,CACjD;AACA,GAAIM,cAAc,GAAKf,aAAa,CAACgB,KAAjC,EAA0CL,MAAM,GAAKX,aAAa,CAACiB,SAAvE,CAAkF,CAChFH,QAAQ,CAACT,oBAAoB,CAAC,CAAEI,gBAAgB,CAAhBA,gBAAF,CAAD,CAArB,CAAR,CACA,GAAII,OAAJ,CAAa,CACXC,QAAQ,CAACP,kBAAkB,CAAC,CAAEM,OAAO,CAAPA,OAAF,CAAWJ,gBAAgB,CAAhBA,gBAAX,CAAD,CAAnB,CAAR,CACD,CACF,CACD;AACA,GAAIM,cAAc,GAAKf,aAAa,CAACiB,SAAjC,EAA8CN,MAAM,GAAKX,aAAa,CAACkB,IAA3E,CAAiF,CAC/EJ,QAAQ,CAACT,oBAAoB,CAAC,CAAEI,gBAAgB,CAAhBA,gBAAF,CAAD,CAArB,CAAR,CACA,GAAII,OAAJ,CAAa,CACXC,QAAQ,CAACP,kBAAkB,CAAC,CAAEM,OAAO,CAAPA,OAAF,CAAWJ,gBAAgB,CAAhBA,gBAAX,CAAD,CAAnB,CAAR,CACD,CACF,CACF,CACF,CAlBQ,CAkBN,CAACA,gBAAD,CAAmBE,MAAnB,CAA2BI,cAA3B,CAA2CF,OAA3C,CAAoDC,QAApD,CAlBM,CAAT,CAoBAZ,SAAS,CAAC,UAAM,CACd;AACA;AACA,GAAIa,cAAc,GAAKf,aAAa,CAACiB,SAAjC,EAA8CN,MAAM,GAAKX,aAAa,CAACiB,SAAvE,EAAoFP,eAAxF,CAAyG,CACvGI,QAAQ,CAACR,qBAAqB,EAAtB,CAAR,CACAQ,QAAQ,CAACT,oBAAoB,CAAC,CAAEI,gBAAgB,CAAhBA,gBAAF,CAAD,CAArB,CAAR,CACA,GAAMU,CAAAA,QAAQ,CAAGC,WAAW,sEAAC,mIAC3BN,QAAQ,CAACR,qBAAqB,EAAtB,CAAR,CACAQ,QAAQ,CAACT,oBAAoB,CAAC,CAAEI,gBAAgB,CAAhBA,gBAAF,CAAD,CAArB,CAAR,CAF2B,sDAAD,GAGzB,KAHyB,CAA5B,CAIA,MAAO,kBAAMY,CAAAA,aAAa,CAACF,QAAD,CAAnB,EAAP,CACD,CACD,MAAO,kBAAM,KAAN,EAAP,CACD,CAbQ,CAaN,CAACR,MAAD,CAASI,cAAT,CAAyBL,eAAzB,CAA0CD,gBAA1C,CAA4DK,QAA5D,CAbM,CAAT,CAcD,CA7CD,CA+CA,cAAeN,CAAAA,oBAAf","sourcesContent":["import { useWeb3React } from '@web3-react/core'\nimport { LotteryStatus } from 'config/constants/types'\nimport usePreviousValue from 'hooks/usePreviousValue'\nimport { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { useLottery } from 'state/lottery/hooks'\nimport { fetchPublicLotteries, fetchCurrentLotteryId, fetchUserLotteries } from 'state/lottery'\n\nconst useStatusTransitions = () => {\n  const {\n    currentLotteryId,\n    isTransitioning,\n    currentRound: { status },\n  } = useLottery()\n\n  const { account } = useWeb3React()\n  const dispatch = useAppDispatch()\n  const previousStatus = usePreviousValue(status)\n\n  useEffect(() => {\n    // Only run if there is a status state change\n    if (previousStatus !== status && currentLotteryId) {\n      // Current lottery transitions from CLOSE > CLAIMABLE\n      if (previousStatus === LotteryStatus.CLOSE && status === LotteryStatus.CLAIMABLE) {\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\n        if (account) {\n          dispatch(fetchUserLotteries({ account, currentLotteryId }))\n        }\n      }\n      // Previous lottery to new lottery. From CLAIMABLE (previous round) > OPEN (new round)\n      if (previousStatus === LotteryStatus.CLAIMABLE && status === LotteryStatus.OPEN) {\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\n        if (account) {\n          dispatch(fetchUserLotteries({ account, currentLotteryId }))\n        }\n      }\n    }\n  }, [currentLotteryId, status, previousStatus, account, dispatch])\n\n  useEffect(() => {\n    // Current lottery is CLAIMABLE and the lottery is transitioning to a NEW round - fetch current lottery ID every 10s.\n    // The isTransitioning condition will no longer be true when fetchCurrentLotteryId returns the next lottery ID\n    if (previousStatus === LotteryStatus.CLAIMABLE && status === LotteryStatus.CLAIMABLE && isTransitioning) {\n      dispatch(fetchCurrentLotteryId())\n      dispatch(fetchPublicLotteries({ currentLotteryId }))\n      const interval = setInterval(async () => {\n        dispatch(fetchCurrentLotteryId())\n        dispatch(fetchPublicLotteries({ currentLotteryId }))\n      }, 10000)\n      return () => clearInterval(interval)\n    }\n    return () => null\n  }, [status, previousStatus, isTransitioning, currentLotteryId, dispatch])\n}\n\nexport default useStatusTransitions\n"]},"metadata":{},"sourceType":"module"}