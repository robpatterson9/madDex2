{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Info/components/InfoCharts/ChartCard/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useMemo, useState } from 'react';\nimport { Text, Box, Card, Flex, Skeleton } from '@pancakeswap/uikit';\nimport LineChart from 'views/Info/components/InfoCharts/LineChart';\nimport BarChart from 'views/Info/components/InfoCharts/BarChart';\nimport CandleChart from 'views/Info/components/InfoCharts/CandleChart';\nimport { TabToggleGroup, TabToggle } from 'components/TabToggle';\nimport { useTranslation } from 'contexts/Localization';\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers';\nimport { format, fromUnixTime } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ChartView;\n\n(function (ChartView) {\n  ChartView[ChartView[\"LIQUIDITY\"] = 0] = \"LIQUIDITY\";\n  ChartView[ChartView[\"VOLUME\"] = 1] = \"VOLUME\";\n  ChartView[ChartView[\"PRICE\"] = 2] = \"PRICE\";\n})(ChartView || (ChartView = {}));\n\nconst ChartCard = ({\n  variant,\n  chartData,\n  tokenData,\n  tokenPriceData\n}) => {\n  _s();\n\n  const [view, setView] = useState(ChartView.VOLUME);\n  const [hoverValue, setHoverValue] = useState();\n  const [hoverDate, setHoverDate] = useState();\n  const {\n    t\n  } = useTranslation();\n  const currentDate = format(new Date(), 'MMM d, yyyy');\n  const formattedTvlData = useMemo(() => {\n    if (chartData) {\n      return chartData.map(day => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.liquidityUSD\n        };\n      });\n    }\n\n    return [];\n  }, [chartData]);\n  const formattedVolumeData = useMemo(() => {\n    if (chartData) {\n      return chartData.map(day => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.volumeUSD\n        };\n      });\n    }\n\n    return [];\n  }, [chartData]);\n\n  const getLatestValueDisplay = () => {\n    let valueToDisplay = null;\n\n    if (hoverValue) {\n      valueToDisplay = formatAmount(hoverValue);\n    } else if (view === ChartView.VOLUME && formattedVolumeData.length > 0) {\n      var _formattedVolumeData;\n\n      valueToDisplay = formatAmount((_formattedVolumeData = formattedVolumeData[formattedVolumeData.length - 1]) === null || _formattedVolumeData === void 0 ? void 0 : _formattedVolumeData.value);\n    } else if (view === ChartView.LIQUIDITY && formattedTvlData.length > 0) {\n      var _formattedTvlData;\n\n      valueToDisplay = formatAmount((_formattedTvlData = formattedTvlData[formattedTvlData.length - 1]) === null || _formattedTvlData === void 0 ? void 0 : _formattedTvlData.value);\n    } else if (view === ChartView.PRICE && (tokenData === null || tokenData === void 0 ? void 0 : tokenData.priceUSD)) {\n      valueToDisplay = formatAmount(tokenData.priceUSD);\n    }\n\n    return valueToDisplay ? /*#__PURE__*/_jsxDEV(Text, {\n      fontSize: \"24px\",\n      bold: true,\n      children: [\"$\", valueToDisplay]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Skeleton, {\n      height: \"36px\",\n      width: \"128px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    children: [/*#__PURE__*/_jsxDEV(TabToggleGroup, {\n      children: [/*#__PURE__*/_jsxDEV(TabToggle, {\n        isActive: view === ChartView.VOLUME,\n        onClick: () => setView(ChartView.VOLUME),\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          children: t('Volume')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TabToggle, {\n        isActive: view === ChartView.LIQUIDITY,\n        onClick: () => setView(ChartView.LIQUIDITY),\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          children: t('Liquidity')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), variant === 'token' && /*#__PURE__*/_jsxDEV(TabToggle, {\n        isActive: view === ChartView.PRICE,\n        onClick: () => setView(ChartView.PRICE),\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          children: t('Price')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      px: \"24px\",\n      pt: \"24px\",\n      children: [getLatestValueDisplay(), /*#__PURE__*/_jsxDEV(Text, {\n        small: true,\n        color: \"secondary\",\n        children: hoverDate || currentDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      px: \"24px\",\n      height: variant === 'token' ? '250px' : '335px',\n      children: view === ChartView.LIQUIDITY ? /*#__PURE__*/_jsxDEV(LineChart, {\n        data: formattedTvlData,\n        setHoverValue: setHoverValue,\n        setHoverDate: setHoverDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this) : view === ChartView.VOLUME ? /*#__PURE__*/_jsxDEV(BarChart, {\n        data: formattedVolumeData,\n        setHoverValue: setHoverValue,\n        setHoverDate: setHoverDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this) : view === ChartView.PRICE ? /*#__PURE__*/_jsxDEV(CandleChart, {\n        data: tokenPriceData,\n        setValue: setHoverValue,\n        setLabel: setHoverDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChartCard, \"Lr1CwZ7vvHxp6iKB9l8S1y5+PnU=\", false, function () {\n  return [useTranslation];\n});\n\n_c = ChartCard;\nexport default ChartCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartCard\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Info/components/InfoCharts/ChartCard/index.tsx"],"names":["React","useMemo","useState","Text","Box","Card","Flex","Skeleton","LineChart","BarChart","CandleChart","TabToggleGroup","TabToggle","useTranslation","formatAmount","format","fromUnixTime","ChartView","ChartCard","variant","chartData","tokenData","tokenPriceData","view","setView","VOLUME","hoverValue","setHoverValue","hoverDate","setHoverDate","t","currentDate","Date","formattedTvlData","map","day","time","date","value","liquidityUSD","formattedVolumeData","volumeUSD","getLatestValueDisplay","valueToDisplay","length","LIQUIDITY","PRICE","priceUSD"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from 'react'\nimport { Text, Box, Card, Flex, Skeleton } from '@pancakeswap/uikit'\nimport LineChart from 'views/Info/components/InfoCharts/LineChart'\nimport BarChart from 'views/Info/components/InfoCharts/BarChart'\nimport CandleChart from 'views/Info/components/InfoCharts/CandleChart'\nimport { TabToggleGroup, TabToggle } from 'components/TabToggle'\nimport { useTranslation } from 'contexts/Localization'\nimport { formatAmount } from 'views/Info/utils/formatInfoNumbers'\nimport { ChartEntry, TokenData, PriceChartEntry } from 'state/info/types'\nimport { format, fromUnixTime } from 'date-fns'\n\nenum ChartView {\n  LIQUIDITY,\n  VOLUME,\n  PRICE,\n}\n\ninterface ChartCardProps {\n  variant: 'pool' | 'token'\n  chartData: ChartEntry[]\n  tokenData?: TokenData\n  tokenPriceData?: PriceChartEntry[]\n}\n\nconst ChartCard: React.FC<ChartCardProps> = ({ variant, chartData, tokenData, tokenPriceData }) => {\n  const [view, setView] = useState(ChartView.VOLUME)\n  const [hoverValue, setHoverValue] = useState<number | undefined>()\n  const [hoverDate, setHoverDate] = useState<string | undefined>()\n  const { t } = useTranslation()\n\n  const currentDate = format(new Date(), 'MMM d, yyyy')\n\n  const formattedTvlData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.liquidityUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n  const formattedVolumeData = useMemo(() => {\n    if (chartData) {\n      return chartData.map((day) => {\n        return {\n          time: fromUnixTime(day.date),\n          value: day.volumeUSD,\n        }\n      })\n    }\n    return []\n  }, [chartData])\n\n  const getLatestValueDisplay = () => {\n    let valueToDisplay = null\n    if (hoverValue) {\n      valueToDisplay = formatAmount(hoverValue)\n    } else if (view === ChartView.VOLUME && formattedVolumeData.length > 0) {\n      valueToDisplay = formatAmount(formattedVolumeData[formattedVolumeData.length - 1]?.value)\n    } else if (view === ChartView.LIQUIDITY && formattedTvlData.length > 0) {\n      valueToDisplay = formatAmount(formattedTvlData[formattedTvlData.length - 1]?.value)\n    } else if (view === ChartView.PRICE && tokenData?.priceUSD) {\n      valueToDisplay = formatAmount(tokenData.priceUSD)\n    }\n\n    return valueToDisplay ? (\n      <Text fontSize=\"24px\" bold>\n        ${valueToDisplay}\n      </Text>\n    ) : (\n      <Skeleton height=\"36px\" width=\"128px\" />\n    )\n  }\n\n  return (\n    <Card>\n      <TabToggleGroup>\n        <TabToggle isActive={view === ChartView.VOLUME} onClick={() => setView(ChartView.VOLUME)}>\n          <Text>{t('Volume')}</Text>\n        </TabToggle>\n        <TabToggle isActive={view === ChartView.LIQUIDITY} onClick={() => setView(ChartView.LIQUIDITY)}>\n          <Text>{t('Liquidity')}</Text>\n        </TabToggle>\n        {variant === 'token' && (\n          <TabToggle isActive={view === ChartView.PRICE} onClick={() => setView(ChartView.PRICE)}>\n            <Text>{t('Price')}</Text>\n          </TabToggle>\n        )}\n      </TabToggleGroup>\n\n      <Flex flexDirection=\"column\" px=\"24px\" pt=\"24px\">\n        {getLatestValueDisplay()}\n        <Text small color=\"secondary\">\n          {hoverDate || currentDate}\n        </Text>\n      </Flex>\n\n      <Box px=\"24px\" height={variant === 'token' ? '250px' : '335px'}>\n        {view === ChartView.LIQUIDITY ? (\n          <LineChart data={formattedTvlData} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\n        ) : view === ChartView.VOLUME ? (\n          <BarChart data={formattedVolumeData} setHoverValue={setHoverValue} setHoverDate={setHoverDate} />\n        ) : view === ChartView.PRICE ? (\n          <CandleChart data={tokenPriceData} setValue={setHoverValue} setLabel={setHoverDate} />\n        ) : null}\n      </Box>\n    </Card>\n  )\n}\n\nexport default ChartCard\n"]},"metadata":{},"sourceType":"module"}