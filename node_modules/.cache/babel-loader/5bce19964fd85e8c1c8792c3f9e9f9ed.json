{"ast":null,"code":"import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import BigNumber from'bignumber.js';import{LotteryStatus}from'config/constants/types';import lotteryV2Abi from'config/abi/lotteryV2.json';import{getLotteryV2Address}from'utils/addressHelpers';import{multicallv2}from'utils/multicall';import{getLotteryV2Contract}from'utils/contractHelpers';import{useMemo}from'react';import{ethersToSerializedBigNumber}from'utils/bigNumber';import{NUM_ROUNDS_TO_FETCH_FROM_NODES}from'config/constants/lottery';var lotteryContract=getLotteryV2Contract();var processViewLotterySuccessResponse=function processViewLotterySuccessResponse(response,lotteryId){var status=response.status,startTime=response.startTime,endTime=response.endTime,priceTicketInCake=response.priceTicketInCake,discountDivisor=response.discountDivisor,treasuryFee=response.treasuryFee,firstTicketId=response.firstTicketId,lastTicketId=response.lastTicketId,amountCollectedInCake=response.amountCollectedInCake,finalNumber=response.finalNumber,cakePerBracket=response.cakePerBracket,countWinnersPerBracket=response.countWinnersPerBracket,rewardsBreakdown=response.rewardsBreakdown;var statusKey=Object.keys(LotteryStatus)[status];var serializedCakePerBracket=cakePerBracket.map(function(cakeInBracket){return ethersToSerializedBigNumber(cakeInBracket);});var serializedCountWinnersPerBracket=countWinnersPerBracket.map(function(winnersInBracket){return ethersToSerializedBigNumber(winnersInBracket);});var serializedRewardsBreakdown=rewardsBreakdown.map(function(reward){return ethersToSerializedBigNumber(reward);});return{isLoading:false,lotteryId:lotteryId,status:LotteryStatus[statusKey],startTime:startTime===null||startTime===void 0?void 0:startTime.toString(),endTime:endTime===null||endTime===void 0?void 0:endTime.toString(),priceTicketInCake:ethersToSerializedBigNumber(priceTicketInCake),discountDivisor:discountDivisor===null||discountDivisor===void 0?void 0:discountDivisor.toString(),treasuryFee:treasuryFee===null||treasuryFee===void 0?void 0:treasuryFee.toString(),firstTicketId:firstTicketId===null||firstTicketId===void 0?void 0:firstTicketId.toString(),lastTicketId:lastTicketId===null||lastTicketId===void 0?void 0:lastTicketId.toString(),amountCollectedInCake:ethersToSerializedBigNumber(amountCollectedInCake),finalNumber:finalNumber,cakePerBracket:serializedCakePerBracket,countWinnersPerBracket:serializedCountWinnersPerBracket,rewardsBreakdown:serializedRewardsBreakdown};};var processViewLotteryErrorResponse=function processViewLotteryErrorResponse(lotteryId){return{isLoading:true,lotteryId:lotteryId,status:LotteryStatus.PENDING,startTime:'',endTime:'',priceTicketInCake:'',discountDivisor:'',treasuryFee:'',firstTicketId:'',lastTicketId:'',amountCollectedInCake:'',finalNumber:null,cakePerBracket:[],countWinnersPerBracket:[],rewardsBreakdown:[]};};export var fetchLottery=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(lotteryId){var lotteryData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return lotteryContract.viewLottery(lotteryId);case 3:lotteryData=_context.sent;return _context.abrupt(\"return\",processViewLotterySuccessResponse(lotteryData,lotteryId));case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",processViewLotteryErrorResponse(lotteryId));case 10:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);}));return function fetchLottery(_x){return _ref.apply(this,arguments);};}();export var fetchMultipleLotteries=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(lotteryIds){var calls,multicallRes,processedResponses;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:calls=lotteryIds.map(function(id){return{name:'viewLottery',address:getLotteryV2Address(),params:[id]};});_context2.prev=1;_context2.next=4;return multicallv2(lotteryV2Abi,calls,{requireSuccess:false});case 4:multicallRes=_context2.sent;processedResponses=multicallRes.map(function(res,index){return processViewLotterySuccessResponse(res[0],lotteryIds[index]);});return _context2.abrupt(\"return\",processedResponses);case 9:_context2.prev=9;_context2.t0=_context2[\"catch\"](1);console.error(_context2.t0);return _context2.abrupt(\"return\",calls.map(function(call,index){return processViewLotteryErrorResponse(lotteryIds[index]);}));case 13:case\"end\":return _context2.stop();}}},_callee2,null,[[1,9]]);}));return function fetchMultipleLotteries(_x2){return _ref2.apply(this,arguments);};}();export var fetchCurrentLotteryIdAndMaxBuy=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var calls,_ref4,_ref5,_ref5$,currentLotteryId,_ref5$2,maxNumberTicketsPerBuyOrClaim;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;calls=['currentLotteryId','maxNumberTicketsPerBuyOrClaim'].map(function(method){return{address:getLotteryV2Address(),name:method};});_context3.next=4;return multicallv2(lotteryV2Abi,calls);case 4:_ref4=_context3.sent;_ref5=_slicedToArray(_ref4,2);_ref5$=_slicedToArray(_ref5[0],1);currentLotteryId=_ref5$[0];_ref5$2=_slicedToArray(_ref5[1],1);maxNumberTicketsPerBuyOrClaim=_ref5$2[0];return _context3.abrupt(\"return\",{currentLotteryId:currentLotteryId?currentLotteryId.toString():null,maxNumberTicketsPerBuyOrClaim:maxNumberTicketsPerBuyOrClaim?maxNumberTicketsPerBuyOrClaim.toString():null});case 13:_context3.prev=13;_context3.t0=_context3[\"catch\"](0);return _context3.abrupt(\"return\",{currentLotteryId:null,maxNumberTicketsPerBuyOrClaim:null});case 16:case\"end\":return _context3.stop();}}},_callee3,null,[[0,13]]);}));return function fetchCurrentLotteryIdAndMaxBuy(){return _ref3.apply(this,arguments);};}();export var getRoundIdsArray=function getRoundIdsArray(currentLotteryId){var currentIdAsInt=parseInt(currentLotteryId,10);var roundIds=[];for(var i=0;i<NUM_ROUNDS_TO_FETCH_FROM_NODES;i++){roundIds.push(currentIdAsInt-i);}return roundIds.map(function(roundId){return roundId.toString();});};export var useProcessLotteryResponse=function useProcessLotteryResponse(lotteryData){var priceTicketInCakeAsString=lotteryData.priceTicketInCake,discountDivisorAsString=lotteryData.discountDivisor,amountCollectedInCakeAsString=lotteryData.amountCollectedInCake;var discountDivisor=useMemo(function(){return new BigNumber(discountDivisorAsString);},[discountDivisorAsString]);var priceTicketInCake=useMemo(function(){return new BigNumber(priceTicketInCakeAsString);},[priceTicketInCakeAsString]);var amountCollectedInCake=useMemo(function(){return new BigNumber(amountCollectedInCakeAsString);},[amountCollectedInCakeAsString]);return{isLoading:lotteryData.isLoading,lotteryId:lotteryData.lotteryId,userTickets:lotteryData.userTickets,status:lotteryData.status,startTime:lotteryData.startTime,endTime:lotteryData.endTime,priceTicketInCake:priceTicketInCake,discountDivisor:discountDivisor,treasuryFee:lotteryData.treasuryFee,firstTicketId:lotteryData.firstTicketId,lastTicketId:lotteryData.lastTicketId,amountCollectedInCake:amountCollectedInCake,finalNumber:lotteryData.finalNumber,cakePerBracket:lotteryData.cakePerBracket,countWinnersPerBracket:lotteryData.countWinnersPerBracket,rewardsBreakdown:lotteryData.rewardsBreakdown};};export var hasRoundBeenClaimed=function hasRoundBeenClaimed(tickets){var claimedTickets=tickets.filter(function(ticket){return ticket.status;});return claimedTickets.length>0;};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/lottery/helpers.ts"],"names":["BigNumber","LotteryStatus","lotteryV2Abi","getLotteryV2Address","multicallv2","getLotteryV2Contract","useMemo","ethersToSerializedBigNumber","NUM_ROUNDS_TO_FETCH_FROM_NODES","lotteryContract","processViewLotterySuccessResponse","response","lotteryId","status","startTime","endTime","priceTicketInCake","discountDivisor","treasuryFee","firstTicketId","lastTicketId","amountCollectedInCake","finalNumber","cakePerBracket","countWinnersPerBracket","rewardsBreakdown","statusKey","Object","keys","serializedCakePerBracket","map","cakeInBracket","serializedCountWinnersPerBracket","winnersInBracket","serializedRewardsBreakdown","reward","isLoading","toString","processViewLotteryErrorResponse","PENDING","fetchLottery","viewLottery","lotteryData","fetchMultipleLotteries","lotteryIds","calls","id","name","address","params","requireSuccess","multicallRes","processedResponses","res","index","console","error","call","fetchCurrentLotteryIdAndMaxBuy","method","currentLotteryId","maxNumberTicketsPerBuyOrClaim","getRoundIdsArray","currentIdAsInt","parseInt","roundIds","i","push","roundId","useProcessLotteryResponse","priceTicketInCakeAsString","discountDivisorAsString","amountCollectedInCakeAsString","userTickets","hasRoundBeenClaimed","tickets","claimedTickets","filter","ticket","length"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { ethers } from 'ethers'\nimport { LotteryStatus, LotteryTicket } from 'config/constants/types'\nimport lotteryV2Abi from 'config/abi/lotteryV2.json'\nimport { getLotteryV2Address } from 'utils/addressHelpers'\nimport { multicallv2 } from 'utils/multicall'\nimport { LotteryRound, LotteryRoundUserTickets, LotteryResponse } from 'state/types'\nimport { getLotteryV2Contract } from 'utils/contractHelpers'\nimport { useMemo } from 'react'\nimport { ethersToSerializedBigNumber } from 'utils/bigNumber'\nimport { NUM_ROUNDS_TO_FETCH_FROM_NODES } from 'config/constants/lottery'\n\nconst lotteryContract = getLotteryV2Contract()\n\nconst processViewLotterySuccessResponse = (response, lotteryId: string): LotteryResponse => {\n  const {\n    status,\n    startTime,\n    endTime,\n    priceTicketInCake,\n    discountDivisor,\n    treasuryFee,\n    firstTicketId,\n    lastTicketId,\n    amountCollectedInCake,\n    finalNumber,\n    cakePerBracket,\n    countWinnersPerBracket,\n    rewardsBreakdown,\n  } = response\n\n  const statusKey = Object.keys(LotteryStatus)[status]\n  const serializedCakePerBracket = cakePerBracket.map((cakeInBracket) => ethersToSerializedBigNumber(cakeInBracket))\n  const serializedCountWinnersPerBracket = countWinnersPerBracket.map((winnersInBracket) =>\n    ethersToSerializedBigNumber(winnersInBracket),\n  )\n  const serializedRewardsBreakdown = rewardsBreakdown.map((reward) => ethersToSerializedBigNumber(reward))\n\n  return {\n    isLoading: false,\n    lotteryId,\n    status: LotteryStatus[statusKey],\n    startTime: startTime?.toString(),\n    endTime: endTime?.toString(),\n    priceTicketInCake: ethersToSerializedBigNumber(priceTicketInCake),\n    discountDivisor: discountDivisor?.toString(),\n    treasuryFee: treasuryFee?.toString(),\n    firstTicketId: firstTicketId?.toString(),\n    lastTicketId: lastTicketId?.toString(),\n    amountCollectedInCake: ethersToSerializedBigNumber(amountCollectedInCake),\n    finalNumber,\n    cakePerBracket: serializedCakePerBracket,\n    countWinnersPerBracket: serializedCountWinnersPerBracket,\n    rewardsBreakdown: serializedRewardsBreakdown,\n  }\n}\n\nconst processViewLotteryErrorResponse = (lotteryId: string): LotteryResponse => {\n  return {\n    isLoading: true,\n    lotteryId,\n    status: LotteryStatus.PENDING,\n    startTime: '',\n    endTime: '',\n    priceTicketInCake: '',\n    discountDivisor: '',\n    treasuryFee: '',\n    firstTicketId: '',\n    lastTicketId: '',\n    amountCollectedInCake: '',\n    finalNumber: null,\n    cakePerBracket: [],\n    countWinnersPerBracket: [],\n    rewardsBreakdown: [],\n  }\n}\n\nexport const fetchLottery = async (lotteryId: string): Promise<LotteryResponse> => {\n  try {\n    const lotteryData = await lotteryContract.viewLottery(lotteryId)\n    return processViewLotterySuccessResponse(lotteryData, lotteryId)\n  } catch (error) {\n    return processViewLotteryErrorResponse(lotteryId)\n  }\n}\n\nexport const fetchMultipleLotteries = async (lotteryIds: string[]): Promise<LotteryResponse[]> => {\n  const calls = lotteryIds.map((id) => ({\n    name: 'viewLottery',\n    address: getLotteryV2Address(),\n    params: [id],\n  }))\n  try {\n    const multicallRes = await multicallv2(lotteryV2Abi, calls, { requireSuccess: false })\n    const processedResponses = multicallRes.map((res, index) =>\n      processViewLotterySuccessResponse(res[0], lotteryIds[index]),\n    )\n    return processedResponses\n  } catch (error) {\n    console.error(error)\n    return calls.map((call, index) => processViewLotteryErrorResponse(lotteryIds[index]))\n  }\n}\n\nexport const fetchCurrentLotteryIdAndMaxBuy = async () => {\n  try {\n    const calls = ['currentLotteryId', 'maxNumberTicketsPerBuyOrClaim'].map((method) => ({\n      address: getLotteryV2Address(),\n      name: method,\n    }))\n    const [[currentLotteryId], [maxNumberTicketsPerBuyOrClaim]] = (await multicallv2(\n      lotteryV2Abi,\n      calls,\n    )) as ethers.BigNumber[][]\n\n    return {\n      currentLotteryId: currentLotteryId ? currentLotteryId.toString() : null,\n      maxNumberTicketsPerBuyOrClaim: maxNumberTicketsPerBuyOrClaim ? maxNumberTicketsPerBuyOrClaim.toString() : null,\n    }\n  } catch (error) {\n    return {\n      currentLotteryId: null,\n      maxNumberTicketsPerBuyOrClaim: null,\n    }\n  }\n}\n\nexport const getRoundIdsArray = (currentLotteryId: string): string[] => {\n  const currentIdAsInt = parseInt(currentLotteryId, 10)\n  const roundIds = []\n  for (let i = 0; i < NUM_ROUNDS_TO_FETCH_FROM_NODES; i++) {\n    roundIds.push(currentIdAsInt - i)\n  }\n  return roundIds.map((roundId) => roundId.toString())\n}\n\nexport const useProcessLotteryResponse = (\n  lotteryData: LotteryResponse & { userTickets?: LotteryRoundUserTickets },\n): LotteryRound => {\n  const {\n    priceTicketInCake: priceTicketInCakeAsString,\n    discountDivisor: discountDivisorAsString,\n    amountCollectedInCake: amountCollectedInCakeAsString,\n  } = lotteryData\n\n  const discountDivisor = useMemo(() => {\n    return new BigNumber(discountDivisorAsString)\n  }, [discountDivisorAsString])\n\n  const priceTicketInCake = useMemo(() => {\n    return new BigNumber(priceTicketInCakeAsString)\n  }, [priceTicketInCakeAsString])\n\n  const amountCollectedInCake = useMemo(() => {\n    return new BigNumber(amountCollectedInCakeAsString)\n  }, [amountCollectedInCakeAsString])\n\n  return {\n    isLoading: lotteryData.isLoading,\n    lotteryId: lotteryData.lotteryId,\n    userTickets: lotteryData.userTickets,\n    status: lotteryData.status,\n    startTime: lotteryData.startTime,\n    endTime: lotteryData.endTime,\n    priceTicketInCake,\n    discountDivisor,\n    treasuryFee: lotteryData.treasuryFee,\n    firstTicketId: lotteryData.firstTicketId,\n    lastTicketId: lotteryData.lastTicketId,\n    amountCollectedInCake,\n    finalNumber: lotteryData.finalNumber,\n    cakePerBracket: lotteryData.cakePerBracket,\n    countWinnersPerBracket: lotteryData.countWinnersPerBracket,\n    rewardsBreakdown: lotteryData.rewardsBreakdown,\n  }\n}\n\nexport const hasRoundBeenClaimed = (tickets: LotteryTicket[]): boolean => {\n  const claimedTickets = tickets.filter((ticket) => ticket.status)\n  return claimedTickets.length > 0\n}\n"]},"metadata":{},"sourceType":"module"}