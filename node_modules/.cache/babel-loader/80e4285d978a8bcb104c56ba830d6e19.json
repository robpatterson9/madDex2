{"ast":null,"code":"import{useEffect}from'react';import{useAppDispatch}from'state';import{setLastOraclePrice}from'state/predictions';import useGetLatestOraclePrice from'./useGetLatestOraclePrice';var usePollOraclePrice=function usePollOraclePrice(){var seconds=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;var _useGetLatestOraclePr=useGetLatestOraclePrice(),price=_useGetLatestOraclePr.price,refresh=_useGetLatestOraclePr.refresh;var dispatch=useAppDispatch();// Poll for the oracle price\nuseEffect(function(){refresh();var timer=setInterval(function(){refresh();},seconds*1000);return function(){clearInterval(timer);};},[seconds,refresh]);// If the price changed update global state\nuseEffect(function(){dispatch(setLastOraclePrice(price.toJSON()));},[price,dispatch]);};export default usePollOraclePrice;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Predictions/hooks/usePollOraclePrice.ts"],"names":["useEffect","useAppDispatch","setLastOraclePrice","useGetLatestOraclePrice","usePollOraclePrice","seconds","price","refresh","dispatch","timer","setInterval","clearInterval","toJSON"],"mappings":"AAAA,OAASA,SAAT,KAA0B,OAA1B,CACA,OAASC,cAAT,KAA+B,OAA/B,CACA,OAASC,kBAAT,KAAmC,mBAAnC,CACA,MAAOC,CAAAA,uBAAP,KAAoC,2BAApC,CAEA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAkB,IAAjBC,CAAAA,OAAiB,2DAAP,EAAO,CAC3C,0BAA2BF,uBAAuB,EAAlD,CAAQG,KAAR,uBAAQA,KAAR,CAAeC,OAAf,uBAAeA,OAAf,CACA,GAAMC,CAAAA,QAAQ,CAAGP,cAAc,EAA/B,CAEA;AACAD,SAAS,CAAC,UAAM,CACdO,OAAO,GACP,GAAME,CAAAA,KAAK,CAAGC,WAAW,CAAC,UAAM,CAC9BH,OAAO,GACR,CAFwB,CAEtBF,OAAO,CAAG,IAFY,CAAzB,CAIA,MAAO,WAAM,CACXM,aAAa,CAACF,KAAD,CAAb,CACD,CAFD,CAGD,CATQ,CASN,CAACJ,OAAD,CAAUE,OAAV,CATM,CAAT,CAWA;AACAP,SAAS,CAAC,UAAM,CACdQ,QAAQ,CAACN,kBAAkB,CAACI,KAAK,CAACM,MAAN,EAAD,CAAnB,CAAR,CACD,CAFQ,CAEN,CAACN,KAAD,CAAQE,QAAR,CAFM,CAAT,CAGD,CApBD,CAsBA,cAAeJ,CAAAA,kBAAf","sourcesContent":["import { useEffect } from 'react'\nimport { useAppDispatch } from 'state'\nimport { setLastOraclePrice } from 'state/predictions'\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\n\nconst usePollOraclePrice = (seconds = 10) => {\n  const { price, refresh } = useGetLatestOraclePrice()\n  const dispatch = useAppDispatch()\n\n  // Poll for the oracle price\n  useEffect(() => {\n    refresh()\n    const timer = setInterval(() => {\n      refresh()\n    }, seconds * 1000)\n\n    return () => {\n      clearInterval(timer)\n    }\n  }, [seconds, refresh])\n\n  // If the price changed update global state\n  useEffect(() => {\n    dispatch(setLastOraclePrice(price.toJSON()))\n  }, [price, dispatch])\n}\n\nexport default usePollOraclePrice\n"]},"metadata":{},"sourceType":"module"}