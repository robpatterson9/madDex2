{"ast":null,"code":"import { request, gql } from 'graphql-request';\nimport { INFO_CLIENT } from 'config/constants/endpoints';\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers';\n/**\n * Transactions for Transaction table on the Home page\n */\n\nconst GLOBAL_TRANSACTIONS = gql`\n  query overviewTransactions {\n    mints: mints(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps: swaps(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burns: burns(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`;\n\nconst fetchTopTransactions = async () => {\n  try {\n    const data = await request(INFO_CLIENT, GLOBAL_TRANSACTIONS);\n\n    if (!data) {\n      return undefined;\n    }\n\n    const mints = data.mints.map(mapMints);\n    const burns = data.burns.map(mapBurns);\n    const swaps = data.swaps.map(mapSwaps);\n    return [...mints, ...burns, ...swaps].sort((a, b) => {\n      return parseInt(b.timestamp, 10) - parseInt(a.timestamp, 10);\n    });\n  } catch {\n    return undefined;\n  }\n};\n\nexport default fetchTopTransactions;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/queries/protocol/transactions.ts"],"names":["request","gql","INFO_CLIENT","mapMints","mapBurns","mapSwaps","GLOBAL_TRANSACTIONS","fetchTopTransactions","data","undefined","mints","map","burns","swaps","sort","a","b","parseInt","timestamp"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AAGA,SAASC,QAAT,EAAmBC,QAAnB,EAA6BC,QAA7B,QAA6C,4BAA7C;AAEA;AACA;AACA;;AACA,MAAMC,mBAAmB,GAAGL,GAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA3DA;;AAkEA,MAAMM,oBAAoB,GAAG,YAAgD;AAC3E,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMR,OAAO,CAAqBE,WAArB,EAAkCI,mBAAlC,CAA1B;;AAEA,QAAI,CAACE,IAAL,EAAW;AACT,aAAOC,SAAP;AACD;;AAED,UAAMC,KAAK,GAAGF,IAAI,CAACE,KAAL,CAAWC,GAAX,CAAeR,QAAf,CAAd;AACA,UAAMS,KAAK,GAAGJ,IAAI,CAACI,KAAL,CAAWD,GAAX,CAAeP,QAAf,CAAd;AACA,UAAMS,KAAK,GAAGL,IAAI,CAACK,KAAL,CAAWF,GAAX,CAAeN,QAAf,CAAd;AAEA,WAAO,CAAC,GAAGK,KAAJ,EAAW,GAAGE,KAAd,EAAqB,GAAGC,KAAxB,EAA+BC,IAA/B,CAAoC,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACnD,aAAOC,QAAQ,CAACD,CAAC,CAACE,SAAH,EAAc,EAAd,CAAR,GAA4BD,QAAQ,CAACF,CAAC,CAACG,SAAH,EAAc,EAAd,CAA3C;AACD,KAFM,CAAP;AAGD,GAdD,CAcE,MAAM;AACN,WAAOT,SAAP;AACD;AACF,CAlBD;;AAoBA,eAAeF,oBAAf","sourcesContent":["import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { Transaction } from 'state/info/types'\nimport { MintResponse, SwapResponse, BurnResponse } from 'state/info/queries/types'\nimport { mapMints, mapBurns, mapSwaps } from 'state/info/queries/helpers'\n\n/**\n * Transactions for Transaction table on the Home page\n */\nconst GLOBAL_TRANSACTIONS = gql`\n  query overviewTransactions {\n    mints: mints(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      to\n      amount0\n      amount1\n      amountUSD\n    }\n    swaps: swaps(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      from\n      amount0In\n      amount1In\n      amount0Out\n      amount1Out\n      amountUSD\n    }\n    burns: burns(first: 33, orderBy: timestamp, orderDirection: desc) {\n      id\n      timestamp\n      pair {\n        token0 {\n          id\n          symbol\n        }\n        token1 {\n          id\n          symbol\n        }\n      }\n      sender\n      amount0\n      amount1\n      amountUSD\n    }\n  }\n`\ninterface TransactionResults {\n  mints: MintResponse[]\n  swaps: SwapResponse[]\n  burns: BurnResponse[]\n}\n\nconst fetchTopTransactions = async (): Promise<Transaction[] | undefined> => {\n  try {\n    const data = await request<TransactionResults>(INFO_CLIENT, GLOBAL_TRANSACTIONS)\n\n    if (!data) {\n      return undefined\n    }\n\n    const mints = data.mints.map(mapMints)\n    const burns = data.burns.map(mapBurns)\n    const swaps = data.swaps.map(mapSwaps)\n\n    return [...mints, ...burns, ...swaps].sort((a, b) => {\n      return parseInt(b.timestamp, 10) - parseInt(a.timestamp, 10)\n    })\n  } catch {\n    return undefined\n  }\n}\n\nexport default fetchTopTransactions\n"]},"metadata":{},"sourceType":"module"}