{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import BigNumber from'bignumber.js';import{convertSharesToCake}from'views/Pools/helpers';import{multicallv2}from'utils/multicall';import cakeVaultAbi from'config/abi/cakeVault.json';import{getCakeVaultAddress}from'utils/addressHelpers';import{BIG_ZERO}from'utils/bigNumber';export var fetchPublicVaultData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var calls,_yield$multicallv,_yield$multicallv2,_yield$multicallv2$,sharePrice,_yield$multicallv2$2,shares,_yield$multicallv2$3,estimatedCakeBountyReward,_yield$multicallv2$4,totalPendingCakeHarvest,totalSharesAsBigNumber,sharePriceAsBigNumber,totalCakeInVaultEstimate;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;calls=['getPricePerFullShare','totalShares','calculateHarvestCakeRewards','calculateTotalPendingCakeRewards'].map(function(method){return{address:getCakeVaultAddress(),name:method};});_context.next=4;return multicallv2(cakeVaultAbi,calls);case 4:_yield$multicallv=_context.sent;_yield$multicallv2=_slicedToArray(_yield$multicallv,4);_yield$multicallv2$=_slicedToArray(_yield$multicallv2[0],1);sharePrice=_yield$multicallv2$[0];_yield$multicallv2$2=_slicedToArray(_yield$multicallv2[1],1);shares=_yield$multicallv2$2[0];_yield$multicallv2$3=_slicedToArray(_yield$multicallv2[2],1);estimatedCakeBountyReward=_yield$multicallv2$3[0];_yield$multicallv2$4=_slicedToArray(_yield$multicallv2[3],1);totalPendingCakeHarvest=_yield$multicallv2$4[0];totalSharesAsBigNumber=shares?new BigNumber(shares.toString()):BIG_ZERO;sharePriceAsBigNumber=sharePrice?new BigNumber(sharePrice.toString()):BIG_ZERO;totalCakeInVaultEstimate=convertSharesToCake(totalSharesAsBigNumber,sharePriceAsBigNumber);return _context.abrupt(\"return\",{totalShares:totalSharesAsBigNumber.toJSON(),pricePerFullShare:sharePriceAsBigNumber.toJSON(),totalCakeInVault:totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),estimatedCakeBountyReward:new BigNumber(estimatedCakeBountyReward.toString()).toJSON(),totalPendingCakeHarvest:new BigNumber(totalPendingCakeHarvest.toString()).toJSON()});case 20:_context.prev=20;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",{totalShares:null,pricePerFullShare:null,totalCakeInVault:null,estimatedCakeBountyReward:null,totalPendingCakeHarvest:null});case 23:case\"end\":return _context.stop();}}},_callee,null,[[0,20]]);}));return function fetchPublicVaultData(){return _ref.apply(this,arguments);};}();export var fetchVaultFees=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var calls,_yield$multicallv3,_yield$multicallv4,_yield$multicallv4$,performanceFee,_yield$multicallv4$2,callFee,_yield$multicallv4$3,withdrawalFee,_yield$multicallv4$4,withdrawalFeePeriod;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;calls=['performanceFee','callFee','withdrawFee','withdrawFeePeriod'].map(function(method){return{address:getCakeVaultAddress(),name:method};});_context2.next=4;return multicallv2(cakeVaultAbi,calls);case 4:_yield$multicallv3=_context2.sent;_yield$multicallv4=_slicedToArray(_yield$multicallv3,4);_yield$multicallv4$=_slicedToArray(_yield$multicallv4[0],1);performanceFee=_yield$multicallv4$[0];_yield$multicallv4$2=_slicedToArray(_yield$multicallv4[1],1);callFee=_yield$multicallv4$2[0];_yield$multicallv4$3=_slicedToArray(_yield$multicallv4[2],1);withdrawalFee=_yield$multicallv4$3[0];_yield$multicallv4$4=_slicedToArray(_yield$multicallv4[3],1);withdrawalFeePeriod=_yield$multicallv4$4[0];return _context2.abrupt(\"return\",{performanceFee:performanceFee.toNumber(),callFee:callFee.toNumber(),withdrawalFee:withdrawalFee.toNumber(),withdrawalFeePeriod:withdrawalFeePeriod.toNumber()});case 17:_context2.prev=17;_context2.t0=_context2[\"catch\"](0);return _context2.abrupt(\"return\",{performanceFee:null,callFee:null,withdrawalFee:null,withdrawalFeePeriod:null});case 20:case\"end\":return _context2.stop();}}},_callee2,null,[[0,17]]);}));return function fetchVaultFees(){return _ref2.apply(this,arguments);};}();export default fetchPublicVaultData;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/pools/fetchVaultPublic.ts"],"names":["BigNumber","convertSharesToCake","multicallv2","cakeVaultAbi","getCakeVaultAddress","BIG_ZERO","fetchPublicVaultData","calls","map","method","address","name","sharePrice","shares","estimatedCakeBountyReward","totalPendingCakeHarvest","totalSharesAsBigNumber","toString","sharePriceAsBigNumber","totalCakeInVaultEstimate","totalShares","toJSON","pricePerFullShare","totalCakeInVault","cakeAsBigNumber","fetchVaultFees","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","toNumber"],"mappings":"qcAAA,MAAOA,CAAAA,SAAP,KAAsB,cAAtB,CACA,OAASC,mBAAT,KAAoC,qBAApC,CACA,OAASC,WAAT,KAA4B,iBAA5B,CACA,MAAOC,CAAAA,YAAP,KAAyB,2BAAzB,CACA,OAASC,mBAAT,KAAoC,sBAApC,CACA,OAASC,QAAT,KAAyB,iBAAzB,CAEA,MAAO,IAAMC,CAAAA,oBAAoB,0FAAG,+ZAE1BC,KAF0B,CAElB,CACZ,sBADY,CAEZ,aAFY,CAGZ,6BAHY,CAIZ,kCAJY,EAKZC,GALY,CAKR,SAACC,MAAD,QAAa,CACjBC,OAAO,CAAEN,mBAAmB,EADX,CAEjBO,IAAI,CAAEF,MAFW,CAAb,EALQ,CAFkB,uBAY+DP,CAAAA,WAAW,CACxGC,YADwG,CAExGI,KAFwG,CAZ1E,2JAYxBK,UAZwB,qFAYVC,MAZU,sFAYAC,yBAZA,sFAY6BC,uBAZ7B,yBAiB1BC,sBAjB0B,CAiBDH,MAAM,CAAG,GAAIb,CAAAA,SAAJ,CAAca,MAAM,CAACI,QAAP,EAAd,CAAH,CAAsCZ,QAjB3C,CAkB1Ba,qBAlB0B,CAkBFN,UAAU,CAAG,GAAIZ,CAAAA,SAAJ,CAAcY,UAAU,CAACK,QAAX,EAAd,CAAH,CAA0CZ,QAlBlD,CAmB1Bc,wBAnB0B,CAmBClB,mBAAmB,CAACe,sBAAD,CAAyBE,qBAAzB,CAnBpB,iCAoBzB,CACLE,WAAW,CAAEJ,sBAAsB,CAACK,MAAvB,EADR,CAELC,iBAAiB,CAAEJ,qBAAqB,CAACG,MAAtB,EAFd,CAGLE,gBAAgB,CAAEJ,wBAAwB,CAACK,eAAzB,CAAyCH,MAAzC,EAHb,CAILP,yBAAyB,CAAE,GAAId,CAAAA,SAAJ,CAAcc,yBAAyB,CAACG,QAA1B,EAAd,EAAoDI,MAApD,EAJtB,CAKLN,uBAAuB,CAAE,GAAIf,CAAAA,SAAJ,CAAce,uBAAuB,CAACE,QAAxB,EAAd,EAAkDI,MAAlD,EALpB,CApByB,4FA4BzB,CACLD,WAAW,CAAE,IADR,CAELE,iBAAiB,CAAE,IAFd,CAGLC,gBAAgB,CAAE,IAHb,CAILT,yBAAyB,CAAE,IAJtB,CAKLC,uBAAuB,CAAE,IALpB,CA5ByB,uEAAH,kBAApBT,CAAAA,oBAAoB,0CAA1B,CAsCP,MAAO,IAAMmB,CAAAA,cAAc,2FAAG,qVAEpBlB,KAFoB,CAEZ,CAAC,gBAAD,CAAmB,SAAnB,CAA8B,aAA9B,CAA6C,mBAA7C,EAAkEC,GAAlE,CAAsE,SAACC,MAAD,QAAa,CAC/FC,OAAO,CAAEN,mBAAmB,EADmE,CAE/FO,IAAI,CAAEF,MAFyF,CAAb,EAAtE,CAFY,wBAO0DP,CAAAA,WAAW,CAACC,YAAD,CAAeI,KAAf,CAPrE,8JAOlBmB,cAPkB,qFAOAC,OAPA,sFAOWC,aAPX,sFAO4BC,mBAP5B,0DASnB,CACLH,cAAc,CAAEA,cAAc,CAACI,QAAf,EADX,CAELH,OAAO,CAAEA,OAAO,CAACG,QAAR,EAFJ,CAGLF,aAAa,CAAEA,aAAa,CAACE,QAAd,EAHV,CAILD,mBAAmB,CAAEA,mBAAmB,CAACC,QAApB,EAJhB,CATmB,gGAgBnB,CACLJ,cAAc,CAAE,IADX,CAELC,OAAO,CAAE,IAFJ,CAGLC,aAAa,CAAE,IAHV,CAILC,mBAAmB,CAAE,IAJhB,CAhBmB,yEAAH,kBAAdJ,CAAAA,cAAc,2CAApB,CAyBP,cAAenB,CAAAA,oBAAf","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { convertSharesToCake } from 'views/Pools/helpers'\nimport { multicallv2 } from 'utils/multicall'\nimport cakeVaultAbi from 'config/abi/cakeVault.json'\nimport { getCakeVaultAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\nexport const fetchPublicVaultData = async () => {\n  try {\n    const calls = [\n      'getPricePerFullShare',\n      'totalShares',\n      'calculateHarvestCakeRewards',\n      'calculateTotalPendingCakeRewards',\n    ].map((method) => ({\n      address: getCakeVaultAddress(),\n      name: method,\n    }))\n\n    const [[sharePrice], [shares], [estimatedCakeBountyReward], [totalPendingCakeHarvest]] = await multicallv2(\n      cakeVaultAbi,\n      calls,\n    )\n\n    const totalSharesAsBigNumber = shares ? new BigNumber(shares.toString()) : BIG_ZERO\n    const sharePriceAsBigNumber = sharePrice ? new BigNumber(sharePrice.toString()) : BIG_ZERO\n    const totalCakeInVaultEstimate = convertSharesToCake(totalSharesAsBigNumber, sharePriceAsBigNumber)\n    return {\n      totalShares: totalSharesAsBigNumber.toJSON(),\n      pricePerFullShare: sharePriceAsBigNumber.toJSON(),\n      totalCakeInVault: totalCakeInVaultEstimate.cakeAsBigNumber.toJSON(),\n      estimatedCakeBountyReward: new BigNumber(estimatedCakeBountyReward.toString()).toJSON(),\n      totalPendingCakeHarvest: new BigNumber(totalPendingCakeHarvest.toString()).toJSON(),\n    }\n  } catch (error) {\n    return {\n      totalShares: null,\n      pricePerFullShare: null,\n      totalCakeInVault: null,\n      estimatedCakeBountyReward: null,\n      totalPendingCakeHarvest: null,\n    }\n  }\n}\n\nexport const fetchVaultFees = async () => {\n  try {\n    const calls = ['performanceFee', 'callFee', 'withdrawFee', 'withdrawFeePeriod'].map((method) => ({\n      address: getCakeVaultAddress(),\n      name: method,\n    }))\n\n    const [[performanceFee], [callFee], [withdrawalFee], [withdrawalFeePeriod]] = await multicallv2(cakeVaultAbi, calls)\n\n    return {\n      performanceFee: performanceFee.toNumber(),\n      callFee: callFee.toNumber(),\n      withdrawalFee: withdrawalFee.toNumber(),\n      withdrawalFeePeriod: withdrawalFeePeriod.toNumber(),\n    }\n  } catch (error) {\n    return {\n      performanceFee: null,\n      callFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null,\n    }\n  }\n}\n\nexport default fetchPublicVaultData\n"]},"metadata":{},"sourceType":"module"}