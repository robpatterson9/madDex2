{"ast":null,"code":"import numeral from 'numeral'; // Returns first 2 digits after first non-zero decimal\n// i.e. 0.001286 -> 0.0012, 0.9845 -> 0.98, 0.0102 -> 0.010, etc\n// Intended to be used for tokens whose value is less than $1\n// https://stackoverflow.com/a/23887837\n\nexport const getFirstThreeNonZeroDecimals = value => {\n  return value.toFixed(9).match(/^-?\\d*\\.?0*\\d{0,2}/)[0];\n};\n/**\n * This function is used to format token prices, liquidity, amount of tokens in TX, and in general any numbers on info section\n * @param amount - amount to be formatted\n * @param notation - whether to show 1M or 1,000,000\n * @param displayThreshold - threshold below which it will return simply <displayThreshold instead of actual value, e.g. if 0.001 -> returns <0.001 for 0.0005\n * @param tokenPrecision - set to true when you want precision to be 3 decimals for values < 1 and 2 decimals for values > 1\n * @param isInteger - if true the values will contain decimal part only if the amount is > 1000\n * @returns formatted string ready to be displayed\n */\n\nexport const formatAmount = (amount, options) => {\n  const {\n    notation = 'compact',\n    displayThreshold,\n    tokenPrecision,\n    isInteger\n  } = options || {\n    notation: 'compact'\n  };\n\n  if (amount === 0) {\n    if (isInteger) {\n      return '0';\n    }\n\n    return '0.00';\n  }\n\n  if (!amount) return '-';\n\n  if (displayThreshold && amount < displayThreshold) {\n    return `<${displayThreshold}`;\n  }\n\n  if (amount < 1 && !tokenPrecision) {\n    return getFirstThreeNonZeroDecimals(amount);\n  }\n\n  let precision = 2;\n\n  if (tokenPrecision) {\n    precision = amount < 1 ? 3 : 2;\n  }\n\n  let format = `0.${'0'.repeat(precision)}a`;\n\n  if (notation === 'standard') {\n    format = `0,0.${'0'.repeat(precision)}`;\n  }\n\n  if (isInteger && amount < 1000) {\n    format = '0';\n  }\n\n  const amountWithPrecision = parseFloat(amount.toFixed(precision)); // toUpperCase is needed cause numeral doesn't have support for capital K M B out of the box\n\n  return numeral(amountWithPrecision).format(format).toUpperCase();\n};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Info/utils/formatInfoNumbers.ts"],"names":["numeral","getFirstThreeNonZeroDecimals","value","toFixed","match","formatAmount","amount","options","notation","displayThreshold","tokenPrecision","isInteger","precision","format","repeat","amountWithPrecision","parseFloat","toUpperCase"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB,C,CAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,4BAA4B,GAAIC,KAAD,IAAmB;AAC7D,SAAOA,KAAK,CAACC,OAAN,CAAc,CAAd,EAAiBC,KAAjB,CAAuB,oBAAvB,EAA6C,CAA7C,CAAP;AACD,CAFM;AAIP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAC1BC,MAD0B,EAE1BC,OAF0B,KAQvB;AACH,QAAM;AAAEC,IAAAA,QAAQ,GAAG,SAAb;AAAwBC,IAAAA,gBAAxB;AAA0CC,IAAAA,cAA1C;AAA0DC,IAAAA;AAA1D,MAAwEJ,OAAO,IAAI;AAAEC,IAAAA,QAAQ,EAAE;AAAZ,GAAzF;;AACA,MAAIF,MAAM,KAAK,CAAf,EAAkB;AAChB,QAAIK,SAAJ,EAAe;AACb,aAAO,GAAP;AACD;;AACD,WAAO,MAAP;AACD;;AACD,MAAI,CAACL,MAAL,EAAa,OAAO,GAAP;;AACb,MAAIG,gBAAgB,IAAIH,MAAM,GAAGG,gBAAjC,EAAmD;AACjD,WAAQ,IAAGA,gBAAiB,EAA5B;AACD;;AACD,MAAIH,MAAM,GAAG,CAAT,IAAc,CAACI,cAAnB,EAAmC;AACjC,WAAOT,4BAA4B,CAACK,MAAD,CAAnC;AACD;;AAED,MAAIM,SAAS,GAAG,CAAhB;;AACA,MAAIF,cAAJ,EAAoB;AAClBE,IAAAA,SAAS,GAAGN,MAAM,GAAG,CAAT,GAAa,CAAb,GAAiB,CAA7B;AACD;;AAED,MAAIO,MAAM,GAAI,KAAI,IAAIC,MAAJ,CAAWF,SAAX,CAAsB,GAAxC;;AAEA,MAAIJ,QAAQ,KAAK,UAAjB,EAA6B;AAC3BK,IAAAA,MAAM,GAAI,OAAM,IAAIC,MAAJ,CAAWF,SAAX,CAAsB,EAAtC;AACD;;AAED,MAAID,SAAS,IAAIL,MAAM,GAAG,IAA1B,EAAgC;AAC9BO,IAAAA,MAAM,GAAG,GAAT;AACD;;AAED,QAAME,mBAAmB,GAAGC,UAAU,CAACV,MAAM,CAACH,OAAP,CAAeS,SAAf,CAAD,CAAtC,CA/BG,CAiCH;;AACA,SAAOZ,OAAO,CAACe,mBAAD,CAAP,CAA6BF,MAA7B,CAAoCA,MAApC,EAA4CI,WAA5C,EAAP;AACD,CA3CM","sourcesContent":["import numeral from 'numeral'\n\n// Returns first 2 digits after first non-zero decimal\n// i.e. 0.001286 -> 0.0012, 0.9845 -> 0.98, 0.0102 -> 0.010, etc\n// Intended to be used for tokens whose value is less than $1\n// https://stackoverflow.com/a/23887837\nexport const getFirstThreeNonZeroDecimals = (value: number) => {\n  return value.toFixed(9).match(/^-?\\d*\\.?0*\\d{0,2}/)[0]\n}\n\n/**\n * This function is used to format token prices, liquidity, amount of tokens in TX, and in general any numbers on info section\n * @param amount - amount to be formatted\n * @param notation - whether to show 1M or 1,000,000\n * @param displayThreshold - threshold below which it will return simply <displayThreshold instead of actual value, e.g. if 0.001 -> returns <0.001 for 0.0005\n * @param tokenPrecision - set to true when you want precision to be 3 decimals for values < 1 and 2 decimals for values > 1\n * @param isInteger - if true the values will contain decimal part only if the amount is > 1000\n * @returns formatted string ready to be displayed\n */\nexport const formatAmount = (\n  amount: number | undefined,\n  options?: {\n    notation?: 'compact' | 'standard'\n    displayThreshold?: number\n    tokenPrecision?: boolean\n    isInteger?: boolean\n  },\n) => {\n  const { notation = 'compact', displayThreshold, tokenPrecision, isInteger } = options || { notation: 'compact' }\n  if (amount === 0) {\n    if (isInteger) {\n      return '0'\n    }\n    return '0.00'\n  }\n  if (!amount) return '-'\n  if (displayThreshold && amount < displayThreshold) {\n    return `<${displayThreshold}`\n  }\n  if (amount < 1 && !tokenPrecision) {\n    return getFirstThreeNonZeroDecimals(amount)\n  }\n\n  let precision = 2\n  if (tokenPrecision) {\n    precision = amount < 1 ? 3 : 2\n  }\n\n  let format = `0.${'0'.repeat(precision)}a`\n\n  if (notation === 'standard') {\n    format = `0,0.${'0'.repeat(precision)}`\n  }\n\n  if (isInteger && amount < 1000) {\n    format = '0'\n  }\n\n  const amountWithPrecision = parseFloat(amount.toFixed(precision))\n\n  // toUpperCase is needed cause numeral doesn't have support for capital K M B out of the box\n  return numeral(amountWithPrecision).format(format).toUpperCase()\n}\n"]},"metadata":{},"sourceType":"module"}