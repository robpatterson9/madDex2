{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/ProfileCreation/Mint.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { formatUnits } from '@ethersproject/units';\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit';\nimport { useWeb3React } from '@web3-react/core';\nimport { useTranslation } from 'contexts/Localization';\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction';\nimport { useCake, useBunnyFactory } from 'hooks/useContract';\nimport { FetchStatus, useGetCakeBalance } from 'hooks/useTokenBalance';\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice';\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons';\nimport useToast from 'hooks/useToast';\nimport { useAppDispatch } from 'state';\nimport { fetchUserNfts } from 'state/nftMarket/reducer';\nimport { useGetCollections } from 'state/nftMarket/hooks';\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers';\nimport { pancakeBunniesAddress } from 'views/Nft/market/constants';\nimport SelectionCard from './SelectionCard';\nimport NextStepButton from './NextStepButton';\nimport useProfileCreation from './contexts/hook';\nimport { MINT_COST, STARTER_NFT_BUNNY_IDS } from './config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Mint = () => {\n  _s();\n\n  const [selectedBunnyId, setSelectedBunnyId] = useState('');\n  const [starterNfts, setStarterNfts] = useState([]);\n  const {\n    actions,\n    minimumCakeRequired,\n    allowance\n  } = useProfileCreation();\n  const collections = useGetCollections();\n  const {\n    toastSuccess\n  } = useToast();\n  const dispatch = useAppDispatch();\n  const {\n    account\n  } = useWeb3React();\n  const cakeContract = useCake();\n  const bunnyFactoryContract = useBunnyFactory();\n  const {\n    t\n  } = useTranslation();\n  const {\n    balance: cakeBalance,\n    fetchStatus\n  } = useGetCakeBalance();\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.SUCCESS && cakeBalance.gte(MINT_COST);\n  const {\n    callWithGasPrice\n  } = useCallWithGasPrice();\n  useEffect(() => {\n    const getStarterNfts = async () => {\n      const {\n        data: allPbTokens\n      } = await getNftsFromCollectionApi(pancakeBunniesAddress);\n      const nfts = STARTER_NFT_BUNNY_IDS.map(bunnyId => {\n        if (allPbTokens && allPbTokens[bunnyId]) {\n          return { ...allPbTokens[bunnyId],\n            bunnyId\n          };\n        }\n\n        return undefined;\n      });\n      setStarterNfts(nfts);\n    };\n\n    if (starterNfts.length === 0) {\n      getStarterNfts();\n    }\n  }, [starterNfts]);\n  const {\n    isApproving,\n    isApproved,\n    isConfirmed,\n    isConfirming,\n    handleApprove,\n    handleConfirm\n  } = useApproveConfirmTransaction({\n    onRequiresApproval: async () => {\n      // TODO: Move this to a helper, this check will be probably be used many times\n      try {\n        const response = await cakeContract.allowance(account, bunnyFactoryContract.address);\n        return response.gte(minimumCakeRequired);\n      } catch (error) {\n        return false;\n      }\n    },\n    onApprove: () => {\n      return callWithGasPrice(cakeContract, 'approve', [bunnyFactoryContract.address, allowance.toString()]);\n    },\n    onConfirm: () => {\n      return callWithGasPrice(bunnyFactoryContract, 'mintNFT', [selectedBunnyId]);\n    },\n    onApproveSuccess: () => {\n      toastSuccess('Enabled', \"Press 'confirm' to mint this NFT\");\n    },\n    onSuccess: () => {\n      toastSuccess('Success', 'You have minted your starter NFT');\n      dispatch(fetchUserNfts({\n        account,\n        collections\n      }));\n      actions.nextStep();\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      fontSize: \"20px\",\n      color: \"textSubtle\",\n      bold: true,\n      children: t('Step %num%', {\n        num: 1\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Heading, {\n      as: \"h3\",\n      scale: \"xl\",\n      mb: \"24px\",\n      children: t('Get Starter Collectible')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      as: \"p\",\n      children: t('Every profile starts by making a “starter” collectible (NFT).')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      as: \"p\",\n      children: t('This starter will also become your first profile picture.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      as: \"p\",\n      mb: \"24px\",\n      children: t('You can change your profile pic later if you get another approved Pancake Collectible.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      mb: \"24px\",\n      children: /*#__PURE__*/_jsxDEV(CardBody, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h4\",\n          scale: \"lg\",\n          mb: \"8px\",\n          children: t('Choose your Starter!')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          color: \"textSubtle\",\n          children: t('Choose wisely: you can only ever make one starter collectible!')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          as: \"p\",\n          mb: \"24px\",\n          color: \"textSubtle\",\n          children: t('Cost: %num% CAKE', {\n            num: formatUnits(MINT_COST)\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this), starterNfts.map(nft => {\n          const handleChange = value => setSelectedBunnyId(value);\n\n          return /*#__PURE__*/_jsxDEV(SelectionCard, {\n            name: \"mintStarter\",\n            value: nft === null || nft === void 0 ? void 0 : nft.bunnyId,\n            image: nft === null || nft === void 0 ? void 0 : nft.image.thumbnail,\n            isChecked: selectedBunnyId === (nft === null || nft === void 0 ? void 0 : nft.bunnyId),\n            onChange: handleChange,\n            disabled: isApproving || isConfirming || isConfirmed || !hasMinimumCakeRequired,\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              bold: true,\n              children: nft === null || nft === void 0 ? void 0 : nft.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this)\n          }, nft === null || nft === void 0 ? void 0 : nft.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this);\n        }), !hasMinimumCakeRequired && /*#__PURE__*/_jsxDEV(Text, {\n          color: \"failure\",\n          mb: \"16px\",\n          children: t('A minimum of %num% CAKE is required', {\n            num: formatUnits(MINT_COST)\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ApproveConfirmButtons, {\n          isApproveDisabled: selectedBunnyId === null || isConfirmed || isConfirming || isApproved,\n          isApproving: isApproving,\n          isConfirmDisabled: !isApproved || isConfirmed || !hasMinimumCakeRequired,\n          isConfirming: isConfirming,\n          onApprove: handleApprove,\n          onConfirm: handleConfirm\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NextStepButton, {\n      onClick: actions.nextStep,\n      disabled: !isConfirmed,\n      children: t('Next Step')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Mint, \"+SOio43xmtgdjPGaYy4eVfTWHqk=\", false, function () {\n  return [useProfileCreation, useGetCollections, useToast, useAppDispatch, useWeb3React, useCake, useBunnyFactory, useTranslation, useGetCakeBalance, useCallWithGasPrice, useApproveConfirmTransaction];\n});\n\n_c = Mint;\nexport default Mint;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mint\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/ProfileCreation/Mint.tsx"],"names":["React","useState","useEffect","formatUnits","Card","CardBody","Heading","Text","useWeb3React","useTranslation","useApproveConfirmTransaction","useCake","useBunnyFactory","FetchStatus","useGetCakeBalance","useCallWithGasPrice","ApproveConfirmButtons","useToast","useAppDispatch","fetchUserNfts","useGetCollections","getNftsFromCollectionApi","pancakeBunniesAddress","SelectionCard","NextStepButton","useProfileCreation","MINT_COST","STARTER_NFT_BUNNY_IDS","Mint","selectedBunnyId","setSelectedBunnyId","starterNfts","setStarterNfts","actions","minimumCakeRequired","allowance","collections","toastSuccess","dispatch","account","cakeContract","bunnyFactoryContract","t","balance","cakeBalance","fetchStatus","hasMinimumCakeRequired","SUCCESS","gte","callWithGasPrice","getStarterNfts","data","allPbTokens","nfts","map","bunnyId","undefined","length","isApproving","isApproved","isConfirmed","isConfirming","handleApprove","handleConfirm","onRequiresApproval","response","address","error","onApprove","toString","onConfirm","onApproveSuccess","onSuccess","nextStep","num","nft","handleChange","value","image","thumbnail","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { formatUnits } from '@ethersproject/units'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport useApproveConfirmTransaction from 'hooks/useApproveConfirmTransaction'\nimport { useCake, useBunnyFactory } from 'hooks/useContract'\nimport { FetchStatus, useGetCakeBalance } from 'hooks/useTokenBalance'\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\nimport ApproveConfirmButtons from 'components/ApproveConfirmButtons'\nimport useToast from 'hooks/useToast'\nimport { useAppDispatch } from 'state'\nimport { fetchUserNfts } from 'state/nftMarket/reducer'\nimport { useGetCollections } from 'state/nftMarket/hooks'\nimport { getNftsFromCollectionApi } from 'state/nftMarket/helpers'\nimport { ApiSingleTokenData } from 'state/nftMarket/types'\nimport { pancakeBunniesAddress } from 'views/Nft/market/constants'\nimport SelectionCard from './SelectionCard'\nimport NextStepButton from './NextStepButton'\nimport useProfileCreation from './contexts/hook'\nimport { MINT_COST, STARTER_NFT_BUNNY_IDS } from './config'\n\ninterface MintNftData extends ApiSingleTokenData {\n  bunnyId?: string\n}\n\nconst Mint: React.FC = () => {\n  const [selectedBunnyId, setSelectedBunnyId] = useState<string>('')\n  const [starterNfts, setStarterNfts] = useState<MintNftData[]>([])\n  const { actions, minimumCakeRequired, allowance } = useProfileCreation()\n  const collections = useGetCollections()\n  const { toastSuccess } = useToast()\n  const dispatch = useAppDispatch()\n\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const bunnyFactoryContract = useBunnyFactory()\n  const { t } = useTranslation()\n  const { balance: cakeBalance, fetchStatus } = useGetCakeBalance()\n  const hasMinimumCakeRequired = fetchStatus === FetchStatus.SUCCESS && cakeBalance.gte(MINT_COST)\n  const { callWithGasPrice } = useCallWithGasPrice()\n\n  useEffect(() => {\n    const getStarterNfts = async () => {\n      const { data: allPbTokens } = await getNftsFromCollectionApi(pancakeBunniesAddress)\n      const nfts = STARTER_NFT_BUNNY_IDS.map((bunnyId) => {\n        if (allPbTokens && allPbTokens[bunnyId]) {\n          return { ...allPbTokens[bunnyId], bunnyId }\n        }\n        return undefined\n      })\n      setStarterNfts(nfts)\n    }\n    if (starterNfts.length === 0) {\n      getStarterNfts()\n    }\n  }, [starterNfts])\n\n  const { isApproving, isApproved, isConfirmed, isConfirming, handleApprove, handleConfirm } =\n    useApproveConfirmTransaction({\n      onRequiresApproval: async () => {\n        // TODO: Move this to a helper, this check will be probably be used many times\n        try {\n          const response = await cakeContract.allowance(account, bunnyFactoryContract.address)\n          return response.gte(minimumCakeRequired)\n        } catch (error) {\n          return false\n        }\n      },\n      onApprove: () => {\n        return callWithGasPrice(cakeContract, 'approve', [bunnyFactoryContract.address, allowance.toString()])\n      },\n      onConfirm: () => {\n        return callWithGasPrice(bunnyFactoryContract, 'mintNFT', [selectedBunnyId])\n      },\n      onApproveSuccess: () => {\n        toastSuccess('Enabled', \"Press 'confirm' to mint this NFT\")\n      },\n      onSuccess: () => {\n        toastSuccess('Success', 'You have minted your starter NFT')\n        dispatch(fetchUserNfts({ account, collections }))\n        actions.nextStep()\n      },\n    })\n\n  return (\n    <>\n      <Text fontSize=\"20px\" color=\"textSubtle\" bold>\n        {t('Step %num%', { num: 1 })}\n      </Text>\n      <Heading as=\"h3\" scale=\"xl\" mb=\"24px\">\n        {t('Get Starter Collectible')}\n      </Heading>\n      <Text as=\"p\">{t('Every profile starts by making a “starter” collectible (NFT).')}</Text>\n      <Text as=\"p\">{t('This starter will also become your first profile picture.')}</Text>\n      <Text as=\"p\" mb=\"24px\">\n        {t('You can change your profile pic later if you get another approved Pancake Collectible.')}\n      </Text>\n      <Card mb=\"24px\">\n        <CardBody>\n          <Heading as=\"h4\" scale=\"lg\" mb=\"8px\">\n            {t('Choose your Starter!')}\n          </Heading>\n          <Text as=\"p\" color=\"textSubtle\">\n            {t('Choose wisely: you can only ever make one starter collectible!')}\n          </Text>\n          <Text as=\"p\" mb=\"24px\" color=\"textSubtle\">\n            {t('Cost: %num% CAKE', { num: formatUnits(MINT_COST) })}\n          </Text>\n          {starterNfts.map((nft) => {\n            const handleChange = (value: string) => setSelectedBunnyId(value)\n\n            return (\n              <SelectionCard\n                key={nft?.name}\n                name=\"mintStarter\"\n                value={nft?.bunnyId}\n                image={nft?.image.thumbnail}\n                isChecked={selectedBunnyId === nft?.bunnyId}\n                onChange={handleChange}\n                disabled={isApproving || isConfirming || isConfirmed || !hasMinimumCakeRequired}\n              >\n                <Text bold>{nft?.name}</Text>\n              </SelectionCard>\n            )\n          })}\n          {!hasMinimumCakeRequired && (\n            <Text color=\"failure\" mb=\"16px\">\n              {t('A minimum of %num% CAKE is required', { num: formatUnits(MINT_COST) })}\n            </Text>\n          )}\n          <ApproveConfirmButtons\n            isApproveDisabled={selectedBunnyId === null || isConfirmed || isConfirming || isApproved}\n            isApproving={isApproving}\n            isConfirmDisabled={!isApproved || isConfirmed || !hasMinimumCakeRequired}\n            isConfirming={isConfirming}\n            onApprove={handleApprove}\n            onConfirm={handleConfirm}\n          />\n        </CardBody>\n      </Card>\n      <NextStepButton onClick={actions.nextStep} disabled={!isConfirmed}>\n        {t('Next Step')}\n      </NextStepButton>\n    </>\n  )\n}\n\nexport default Mint\n"]},"metadata":{},"sourceType":"module"}