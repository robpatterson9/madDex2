{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/components/GlobalCheckClaimStatus/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport { useModal } from '@pancakeswap/uikit';\nimport { useWeb3React } from '@web3-react/core';\nimport { getAnniversaryAchievementContract } from 'utils/contractHelpers';\nimport AnniversaryAchievementModal from './AnniversaryAchievementModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * This is represented as a component rather than a hook because we need to keep it\n * inside the Router.\n *\n * TODO: Put global checks in redux or make a generic area to house global checks\n */\nconst GlobalCheckClaimStatus = ({\n  excludeLocations\n}) => {\n  _s();\n\n  const hasDisplayedModal = useRef(false);\n  const [canClaimAnniversaryPoints, setCanClaimAnniversaryPoints] = useState(false);\n  const {\n    account\n  } = useWeb3React();\n  const {\n    pathname\n  } = useLocation();\n  const [onPresentAnniversaryModal] = useModal( /*#__PURE__*/_jsxDEV(AnniversaryAchievementModal, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 48\n  }, this)); // Check claim status\n\n  useEffect(() => {\n    const fetchClaimAnniversaryStatus = async () => {\n      const {\n        canClaim\n      } = getAnniversaryAchievementContract();\n      const canClaimAnniversary = await canClaim(account);\n      setCanClaimAnniversaryPoints(canClaimAnniversary);\n    };\n\n    if (account) {\n      fetchClaimAnniversaryStatus();\n    }\n  }, [account]); // Check if we need to display the modal\n\n  useEffect(() => {\n    const matchesSomeLocations = excludeLocations.some(location => pathname.includes(location));\n\n    if (canClaimAnniversaryPoints && !matchesSomeLocations && !hasDisplayedModal.current) {\n      onPresentAnniversaryModal();\n      hasDisplayedModal.current = true;\n    }\n  }, [pathname, excludeLocations, hasDisplayedModal, onPresentAnniversaryModal, canClaimAnniversaryPoints]); // Reset the check flag when account changes\n\n  useEffect(() => {\n    hasDisplayedModal.current = false;\n  }, [account, hasDisplayedModal]);\n  return null;\n};\n\n_s(GlobalCheckClaimStatus, \"bBnQi+TBjQIycxkl7ncTkLhPzsM=\", false, function () {\n  return [useWeb3React, useLocation, useModal];\n});\n\n_c = GlobalCheckClaimStatus;\nexport default GlobalCheckClaimStatus;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalCheckClaimStatus\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/components/GlobalCheckClaimStatus/index.tsx"],"names":["React","useEffect","useRef","useState","useLocation","useModal","useWeb3React","getAnniversaryAchievementContract","AnniversaryAchievementModal","GlobalCheckClaimStatus","excludeLocations","hasDisplayedModal","canClaimAnniversaryPoints","setCanClaimAnniversaryPoints","account","pathname","onPresentAnniversaryModal","fetchClaimAnniversaryStatus","canClaim","canClaimAnniversary","matchesSomeLocations","some","location","includes","current"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,iCAAT,QAAkD,uBAAlD;AACA,OAAOC,2BAAP,MAAwC,+BAAxC;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAA6D,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAA0B;AAAA;;AAC9F,QAAMC,iBAAiB,GAAGT,MAAM,CAAC,KAAD,CAAhC;AACA,QAAM,CAACU,yBAAD,EAA4BC,4BAA5B,IAA4DV,QAAQ,CAAC,KAAD,CAA1E;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAcR,YAAY,EAAhC;AACA,QAAM;AAAES,IAAAA;AAAF,MAAeX,WAAW,EAAhC;AACA,QAAM,CAACY,yBAAD,IAA8BX,QAAQ,eAAC,QAAC,2BAAD;AAAA;AAAA;AAAA;AAAA,UAAD,CAA5C,CAL8F,CAO9F;;AACAJ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,2BAA2B,GAAG,YAAY;AAC9C,YAAM;AAAEC,QAAAA;AAAF,UAAeX,iCAAiC,EAAtD;AACA,YAAMY,mBAAmB,GAAG,MAAMD,QAAQ,CAACJ,OAAD,CAA1C;AACAD,MAAAA,4BAA4B,CAACM,mBAAD,CAA5B;AACD,KAJD;;AAMA,QAAIL,OAAJ,EAAa;AACXG,MAAAA,2BAA2B;AAC5B;AACF,GAVQ,EAUN,CAACH,OAAD,CAVM,CAAT,CAR8F,CAoB9F;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,oBAAoB,GAAGV,gBAAgB,CAACW,IAAjB,CAAuBC,QAAD,IAAcP,QAAQ,CAACQ,QAAT,CAAkBD,QAAlB,CAApC,CAA7B;;AAEA,QAAIV,yBAAyB,IAAI,CAACQ,oBAA9B,IAAsD,CAACT,iBAAiB,CAACa,OAA7E,EAAsF;AACpFR,MAAAA,yBAAyB;AACzBL,MAAAA,iBAAiB,CAACa,OAAlB,GAA4B,IAA5B;AACD;AACF,GAPQ,EAON,CAACT,QAAD,EAAWL,gBAAX,EAA6BC,iBAA7B,EAAgDK,yBAAhD,EAA2EJ,yBAA3E,CAPM,CAAT,CArB8F,CA8B9F;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,iBAAiB,CAACa,OAAlB,GAA4B,KAA5B;AACD,GAFQ,EAEN,CAACV,OAAD,EAAUH,iBAAV,CAFM,CAAT;AAIA,SAAO,IAAP;AACD,CApCD;;GAAMF,sB;UAGgBH,Y,EACCF,W,EACeC,Q;;;KALhCI,sB;AAsCN,eAAeA,sBAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { useModal } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { getAnniversaryAchievementContract } from 'utils/contractHelpers'\nimport AnniversaryAchievementModal from './AnniversaryAchievementModal'\n\ninterface GlobalCheckClaimStatusProps {\n  excludeLocations: string[]\n}\n\n/**\n * This is represented as a component rather than a hook because we need to keep it\n * inside the Router.\n *\n * TODO: Put global checks in redux or make a generic area to house global checks\n */\nconst GlobalCheckClaimStatus: React.FC<GlobalCheckClaimStatusProps> = ({ excludeLocations }) => {\n  const hasDisplayedModal = useRef(false)\n  const [canClaimAnniversaryPoints, setCanClaimAnniversaryPoints] = useState(false)\n  const { account } = useWeb3React()\n  const { pathname } = useLocation()\n  const [onPresentAnniversaryModal] = useModal(<AnniversaryAchievementModal />)\n\n  // Check claim status\n  useEffect(() => {\n    const fetchClaimAnniversaryStatus = async () => {\n      const { canClaim } = getAnniversaryAchievementContract()\n      const canClaimAnniversary = await canClaim(account)\n      setCanClaimAnniversaryPoints(canClaimAnniversary)\n    }\n\n    if (account) {\n      fetchClaimAnniversaryStatus()\n    }\n  }, [account])\n\n  // Check if we need to display the modal\n  useEffect(() => {\n    const matchesSomeLocations = excludeLocations.some((location) => pathname.includes(location))\n\n    if (canClaimAnniversaryPoints && !matchesSomeLocations && !hasDisplayedModal.current) {\n      onPresentAnniversaryModal()\n      hasDisplayedModal.current = true\n    }\n  }, [pathname, excludeLocations, hasDisplayedModal, onPresentAnniversaryModal, canClaimAnniversaryPoints])\n\n  // Reset the check flag when account changes\n  useEffect(() => {\n    hasDisplayedModal.current = false\n  }, [account, hasDisplayedModal])\n\n  return null\n}\n\nexport default GlobalCheckClaimStatus\n"]},"metadata":{},"sourceType":"module"}