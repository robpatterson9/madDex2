{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport masterchefABI from 'config/abi/masterchef.json';\nimport erc20 from 'config/abi/erc20.json';\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers';\nimport { BIG_TEN, BIG_ZERO } from 'utils/bigNumber';\nimport multicall from 'utils/multicall';\n\nconst fetchFarm = async farm => {\n  var _info$allocPoint;\n\n  const {\n    pid,\n    lpAddresses,\n    token,\n    quoteToken\n  } = farm;\n  const lpAddress = getAddress(lpAddresses);\n  const calls = [// Balance of token in the LP contract\n  {\n    address: token.address,\n    name: 'balanceOf',\n    params: [lpAddress]\n  }, // Balance of quote token on LP contract\n  {\n    address: quoteToken.address,\n    name: 'balanceOf',\n    params: [lpAddress]\n  }, // Balance of LP tokens in the master chef contract\n  {\n    address: lpAddress,\n    name: 'balanceOf',\n    params: [getMasterChefAddress()]\n  }, // Total supply of LP tokens\n  {\n    address: lpAddress,\n    name: 'totalSupply'\n  }, // Token decimals\n  {\n    address: token.address,\n    name: 'decimals'\n  }, // Quote token decimals\n  {\n    address: quoteToken.address,\n    name: 'decimals'\n  }];\n  const [tokenBalanceLP, quoteTokenBalanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] = await multicall(erc20, calls); // Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation\n\n  const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply)); // Raw amount of token in the LP, including those not staked\n\n  const tokenAmountTotal = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals));\n  const quoteTokenAmountTotal = new BigNumber(quoteTokenBalanceLP).div(BIG_TEN.pow(quoteTokenDecimals)); // Amount of quoteToken in the LP that are staked in the MC\n\n  const quoteTokenAmountMc = quoteTokenAmountTotal.times(lpTokenRatio); // Total staked in LP, in quote token value\n\n  const lpTotalInQuoteToken = quoteTokenAmountMc.times(new BigNumber(2)); // Only make masterchef calls if farm has pid\n\n  const [info, totalAllocPoint] = pid || pid === 0 ? await multicall(masterchefABI, [{\n    address: getMasterChefAddress(),\n    name: 'poolInfo',\n    params: [pid]\n  }, {\n    address: getMasterChefAddress(),\n    name: 'totalAllocPoint'\n  }]) : [null, null];\n  const allocPoint = info ? new BigNumber((_info$allocPoint = info.allocPoint) === null || _info$allocPoint === void 0 ? void 0 : _info$allocPoint._hex) : BIG_ZERO;\n  const poolWeight = totalAllocPoint ? allocPoint.div(new BigNumber(totalAllocPoint)) : BIG_ZERO;\n  return {\n    tokenAmountTotal: tokenAmountTotal.toJSON(),\n    lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\n    lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n    tokenPriceVsQuote: quoteTokenAmountTotal.div(tokenAmountTotal).toJSON(),\n    poolWeight: poolWeight.toJSON(),\n    multiplier: `${allocPoint.div(100).toString()}X`\n  };\n};\n\nexport default fetchFarm;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/farms/fetchPublicFarmData.ts"],"names":["BigNumber","masterchefABI","erc20","getAddress","getMasterChefAddress","BIG_TEN","BIG_ZERO","multicall","fetchFarm","farm","pid","lpAddresses","token","quoteToken","lpAddress","calls","address","name","params","tokenBalanceLP","quoteTokenBalanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","lpTokenRatio","div","tokenAmountTotal","pow","quoteTokenAmountTotal","quoteTokenAmountMc","times","lpTotalInQuoteToken","info","totalAllocPoint","allocPoint","_hex","poolWeight","toJSON","tokenPriceVsQuote","multiplier","toString"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport erc20 from 'config/abi/erc20.json'\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\nimport { BIG_TEN, BIG_ZERO } from 'utils/bigNumber'\nimport multicall from 'utils/multicall'\nimport { SerializedFarm, SerializedBigNumber } from '../types'\n\ntype PublicFarmData = {\n  tokenAmountTotal: SerializedBigNumber\n  lpTotalInQuoteToken: SerializedBigNumber\n  lpTotalSupply: SerializedBigNumber\n  tokenPriceVsQuote: SerializedBigNumber\n  poolWeight: SerializedBigNumber\n  multiplier: string\n}\n\nconst fetchFarm = async (farm: SerializedFarm): Promise<PublicFarmData> => {\n  const { pid, lpAddresses, token, quoteToken } = farm\n  const lpAddress = getAddress(lpAddresses)\n  const calls = [\n    // Balance of token in the LP contract\n    {\n      address: token.address,\n      name: 'balanceOf',\n      params: [lpAddress],\n    },\n    // Balance of quote token on LP contract\n    {\n      address: quoteToken.address,\n      name: 'balanceOf',\n      params: [lpAddress],\n    },\n    // Balance of LP tokens in the master chef contract\n    {\n      address: lpAddress,\n      name: 'balanceOf',\n      params: [getMasterChefAddress()],\n    },\n    // Total supply of LP tokens\n    {\n      address: lpAddress,\n      name: 'totalSupply',\n    },\n    // Token decimals\n    {\n      address: token.address,\n      name: 'decimals',\n    },\n    // Quote token decimals\n    {\n      address: quoteToken.address,\n      name: 'decimals',\n    },\n  ]\n\n  const [tokenBalanceLP, quoteTokenBalanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] =\n    await multicall(erc20, calls)\n\n  // Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation\n  const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n  // Raw amount of token in the LP, including those not staked\n  const tokenAmountTotal = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals))\n  const quoteTokenAmountTotal = new BigNumber(quoteTokenBalanceLP).div(BIG_TEN.pow(quoteTokenDecimals))\n\n  // Amount of quoteToken in the LP that are staked in the MC\n  const quoteTokenAmountMc = quoteTokenAmountTotal.times(lpTokenRatio)\n\n  // Total staked in LP, in quote token value\n  const lpTotalInQuoteToken = quoteTokenAmountMc.times(new BigNumber(2))\n\n  // Only make masterchef calls if farm has pid\n  const [info, totalAllocPoint] =\n    pid || pid === 0\n      ? await multicall(masterchefABI, [\n          {\n            address: getMasterChefAddress(),\n            name: 'poolInfo',\n            params: [pid],\n          },\n          {\n            address: getMasterChefAddress(),\n            name: 'totalAllocPoint',\n          },\n        ])\n      : [null, null]\n\n  const allocPoint = info ? new BigNumber(info.allocPoint?._hex) : BIG_ZERO\n  const poolWeight = totalAllocPoint ? allocPoint.div(new BigNumber(totalAllocPoint)) : BIG_ZERO\n\n  return {\n    tokenAmountTotal: tokenAmountTotal.toJSON(),\n    lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\n    lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n    tokenPriceVsQuote: quoteTokenAmountTotal.div(tokenAmountTotal).toJSON(),\n    poolWeight: poolWeight.toJSON(),\n    multiplier: `${allocPoint.div(100).toString()}X`,\n  }\n}\n\nexport default fetchFarm\n"]},"metadata":{},"sourceType":"module"}