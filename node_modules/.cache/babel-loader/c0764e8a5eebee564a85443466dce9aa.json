{"ast":null,"code":"// 1 day, 7 days, 30 days, 1 year, 5 years\nvar DAYS_TO_CALCULATE_AGAINST=[1,7,30,365,1825];/**\n *\n * @param principalInUSD - amount user wants to invest in USD\n * @param apr - farm or pool apr as percentage. If its farm APR its only cake rewards APR without LP rewards APR\n * @param earningTokenPrice - price of reward token\n * @param compoundFrequency - how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\n * @param performanceFee - performance fee as percentage\n * @returns an array of token values earned as interest, with each element representing interest earned over a different period of time (DAYS_TO_CALCULATE_AGAINST)\n */export var getInterestBreakdown=function getInterestBreakdown(_ref){var principalInUSD=_ref.principalInUSD,apr=_ref.apr,earningTokenPrice=_ref.earningTokenPrice,_ref$compoundFrequenc=_ref.compoundFrequency,compoundFrequency=_ref$compoundFrequenc===void 0?1:_ref$compoundFrequenc,_ref$performanceFee=_ref.performanceFee,performanceFee=_ref$performanceFee===void 0?0:_ref$performanceFee;// Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\nvar timesCompounded=365*compoundFrequency;// We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\nvar aprAsDecimal=apr/100;// special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\n// and also cause rounding errors\nvar isHighValueToken=Math.round(earningTokenPrice/1000)>0;var roundingDecimalsNew=isHighValueToken?5:3;return DAYS_TO_CALCULATE_AGAINST.map(function(days){var daysAsDecimalOfYear=days/365;// Calculate the starting TOKEN balance with a dollar balance of principalInUSD.\nvar principal=principalInUSD/earningTokenPrice;var interestEarned=principal*aprAsDecimal*(days/365);if(timesCompounded!==0){// This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\nvar accruedAmount=principal*Math.pow(1+aprAsDecimal/timesCompounded,timesCompounded*daysAsDecimalOfYear);// To get the TOKEN amount earned, deduct the amount after compounding (accruedAmount) from the starting TOKEN balance (principal)\ninterestEarned=accruedAmount-principal;if(performanceFee){var performanceFeeAsDecimal=performanceFee/100;var performanceFeeAsAmount=interestEarned*performanceFeeAsDecimal;interestEarned-=performanceFeeAsAmount;}}return parseFloat(interestEarned.toFixed(roundingDecimalsNew));});};/**\n * @param interest how much USD amount you aim to make\n * @param apr APR of farm/pool\n * @param compoundingFrequency how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\n * @returns an array of principal values needed to reach target interest, with each element representing principal needed for a different period of time (DAYS_TO_CALCULATE_AGAINST)\n */export var getPrincipalForInterest=function getPrincipalForInterest(interest,apr,compoundingFrequency){var performanceFee=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;return DAYS_TO_CALCULATE_AGAINST.map(function(days){var apyAsDecimal=getApy(apr,compoundingFrequency,days,performanceFee);// console.log('inside', interest, apyAsDecimal)\n// const apyAsBN = new BigNumber(apyAsDecimal).decimalPlaces(6, BigNumber.ROUND_DOWN).toNumber()\nreturn parseFloat((interest/apyAsDecimal).toFixed(2));});};/**\n * Given APR returns APY\n * @param apr APR as percentage\n * @param compoundFrequency how many compounds per day\n * @param days if other than 365 adjusts (A)PY for period less than a year\n * @param performanceFee performance fee as percentage\n * @returns APY as decimal\n */export var getApy=function getApy(apr){var compoundFrequency=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var days=arguments.length>2&&arguments[2]!==undefined?arguments[2]:365;var performanceFee=arguments.length>3&&arguments[3]!==undefined?arguments[3]:0;var daysAsDecimalOfYear=days/365;var aprAsDecimal=apr/100;var timesCompounded=365*compoundFrequency;var apyAsDecimal=apr/100*daysAsDecimalOfYear;if(timesCompounded>0){apyAsDecimal=Math.pow(1+aprAsDecimal/timesCompounded,timesCompounded*daysAsDecimalOfYear)-1;}if(performanceFee){var performanceFeeAsDecimal=performanceFee/100;var takenAsPerformanceFee=apyAsDecimal*performanceFeeAsDecimal;apyAsDecimal-=takenAsPerformanceFee;}return apyAsDecimal;};export var getRoi=function getRoi(_ref2){var amountEarned=_ref2.amountEarned,amountInvested=_ref2.amountInvested;if(amountInvested===0){return 0;}var percentage=amountEarned/amountInvested*100;return percentage;};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/utils/compoundApyHelpers.ts"],"names":["DAYS_TO_CALCULATE_AGAINST","getInterestBreakdown","principalInUSD","apr","earningTokenPrice","compoundFrequency","performanceFee","timesCompounded","aprAsDecimal","isHighValueToken","Math","round","roundingDecimalsNew","map","days","daysAsDecimalOfYear","principal","interestEarned","accruedAmount","performanceFeeAsDecimal","performanceFeeAsAmount","parseFloat","toFixed","getPrincipalForInterest","interest","compoundingFrequency","apyAsDecimal","getApy","takenAsPerformanceFee","getRoi","amountEarned","amountInvested","percentage"],"mappings":"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","sourcesContent":["// 1 day, 7 days, 30 days, 1 year, 5 years\nconst DAYS_TO_CALCULATE_AGAINST = [1, 7, 30, 365, 1825]\n\n/**\n *\n * @param principalInUSD - amount user wants to invest in USD\n * @param apr - farm or pool apr as percentage. If its farm APR its only cake rewards APR without LP rewards APR\n * @param earningTokenPrice - price of reward token\n * @param compoundFrequency - how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\n * @param performanceFee - performance fee as percentage\n * @returns an array of token values earned as interest, with each element representing interest earned over a different period of time (DAYS_TO_CALCULATE_AGAINST)\n */\nexport const getInterestBreakdown = ({\n  principalInUSD,\n  apr,\n  earningTokenPrice,\n  compoundFrequency = 1,\n  performanceFee = 0,\n}: {\n  principalInUSD: number\n  apr: number\n  earningTokenPrice: number\n  compoundFrequency?: number\n  performanceFee?: number\n}) => {\n  // Everything here is worked out relative to a year, with the asset compounding at the compoundFrequency rate. 1 = once per day\n  const timesCompounded = 365 * compoundFrequency\n  // We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const aprAsDecimal = apr / 100\n\n  // special handling for tokens like tBTC or BIFI where the daily token rewards for $1000 dollars will be less than 0.001 of that token\n  // and also cause rounding errors\n  const isHighValueToken = Math.round(earningTokenPrice / 1000) > 0\n  const roundingDecimalsNew = isHighValueToken ? 5 : 3\n\n  return DAYS_TO_CALCULATE_AGAINST.map((days) => {\n    const daysAsDecimalOfYear = days / 365\n    // Calculate the starting TOKEN balance with a dollar balance of principalInUSD.\n    const principal = principalInUSD / earningTokenPrice\n    let interestEarned = principal * aprAsDecimal * (days / 365)\n    if (timesCompounded !== 0) {\n      // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n      const accruedAmount = principal * (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n      // To get the TOKEN amount earned, deduct the amount after compounding (accruedAmount) from the starting TOKEN balance (principal)\n      interestEarned = accruedAmount - principal\n      if (performanceFee) {\n        const performanceFeeAsDecimal = performanceFee / 100\n        const performanceFeeAsAmount = interestEarned * performanceFeeAsDecimal\n        interestEarned -= performanceFeeAsAmount\n      }\n    }\n    return parseFloat(interestEarned.toFixed(roundingDecimalsNew))\n  })\n}\n\n/**\n * @param interest how much USD amount you aim to make\n * @param apr APR of farm/pool\n * @param compoundingFrequency how many compounds per 1 day, e.g. 1 = one per day, 0.142857142 - once per week\n * @returns an array of principal values needed to reach target interest, with each element representing principal needed for a different period of time (DAYS_TO_CALCULATE_AGAINST)\n */\nexport const getPrincipalForInterest = (\n  interest: number,\n  apr: number,\n  compoundingFrequency: number,\n  performanceFee = 0,\n) => {\n  return DAYS_TO_CALCULATE_AGAINST.map((days) => {\n    const apyAsDecimal = getApy(apr, compoundingFrequency, days, performanceFee)\n    // console.log('inside', interest, apyAsDecimal)\n    // const apyAsBN = new BigNumber(apyAsDecimal).decimalPlaces(6, BigNumber.ROUND_DOWN).toNumber()\n    return parseFloat((interest / apyAsDecimal).toFixed(2))\n  })\n}\n\n/**\n * Given APR returns APY\n * @param apr APR as percentage\n * @param compoundFrequency how many compounds per day\n * @param days if other than 365 adjusts (A)PY for period less than a year\n * @param performanceFee performance fee as percentage\n * @returns APY as decimal\n */\nexport const getApy = (apr: number, compoundFrequency = 1, days = 365, performanceFee = 0) => {\n  const daysAsDecimalOfYear = days / 365\n  const aprAsDecimal = apr / 100\n  const timesCompounded = 365 * compoundFrequency\n  let apyAsDecimal = (apr / 100) * daysAsDecimalOfYear\n  if (timesCompounded > 0) {\n    apyAsDecimal = (1 + aprAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear) - 1\n  }\n  if (performanceFee) {\n    const performanceFeeAsDecimal = performanceFee / 100\n    const takenAsPerformanceFee = apyAsDecimal * performanceFeeAsDecimal\n    apyAsDecimal -= takenAsPerformanceFee\n  }\n  return apyAsDecimal\n}\n\nexport const getRoi = ({ amountEarned, amountInvested }: { amountEarned: number; amountInvested: number }) => {\n  if (amountInvested === 0) {\n    return 0\n  }\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage\n}\n"]},"metadata":{},"sourceType":"module"}