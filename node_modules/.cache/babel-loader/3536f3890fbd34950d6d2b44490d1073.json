{"ast":null,"code":"import React from'react';import{Text,Flex,useTooltip,TooltipText}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{useCakeVault}from'state/pools/hooks';import UnstakingFeeCountdownRow from'./UnstakingFeeCountdownRow';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var FeeSummary=function FeeSummary(_ref){var stakingTokenSymbol=_ref.stakingTokenSymbol,stakeAmount=_ref.stakeAmount;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useCakeVault=useCakeVault(),withdrawalFee=_useCakeVault.fees.withdrawalFee;var feeAsDecimal=withdrawalFee/100;var feeInCake=(parseFloat(stakeAmount)*(feeAsDecimal/100)).toFixed(4);var _useTooltip=useTooltip(/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Text,{bold:true,mb:\"4px\",children:t('Unstaking fee: %fee%%',{fee:feeAsDecimal})}),/*#__PURE__*/_jsx(Text,{children:t('Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.')})]}),{placement:'top-start'}),targetRef=_useTooltip.targetRef,tooltip=_useTooltip.tooltip,tooltipVisible=_useTooltip.tooltipVisible;return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Flex,{mt:\"24px\",alignItems:\"center\",justifyContent:\"space-between\",children:[tooltipVisible&&tooltip,/*#__PURE__*/_jsx(TooltipText,{ref:targetRef,small:true,children:t('Unstaking Fee')}),/*#__PURE__*/_jsxs(Text,{fontSize:\"14px\",children:[stakeAmount?feeInCake:'-',\" \",stakingTokenSymbol]})]}),/*#__PURE__*/_jsx(UnstakingFeeCountdownRow,{})]});};export default FeeSummary;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/components/CakeVaultCard/FeeSummary.tsx"],"names":["React","Text","Flex","useTooltip","TooltipText","useTranslation","useCakeVault","UnstakingFeeCountdownRow","FeeSummary","stakingTokenSymbol","stakeAmount","t","withdrawalFee","fees","feeAsDecimal","feeInCake","parseFloat","toFixed","fee","placement","targetRef","tooltip","tooltipVisible"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,CAAeC,IAAf,CAAqBC,UAArB,CAAiCC,WAAjC,KAAoD,oBAApD,CACA,OAASC,cAAT,KAA+B,uBAA/B,CACA,OAASC,YAAT,KAA6B,mBAA7B,CACA,MAAOC,CAAAA,wBAAP,KAAqC,4BAArC,C,6IAOA,GAAMC,CAAAA,UAAqC,CAAG,QAAxCA,CAAAA,UAAwC,MAAyC,IAAtCC,CAAAA,kBAAsC,MAAtCA,kBAAsC,CAAlBC,WAAkB,MAAlBA,WAAkB,CACrF,oBAAcL,cAAc,EAA5B,CAAQM,CAAR,iBAAQA,CAAR,CACA,kBAEIL,YAAY,EAFhB,CACUM,aADV,eACEC,IADF,CACUD,aADV,CAGA,GAAME,CAAAA,YAAY,CAAGF,aAAa,CAAG,GAArC,CACA,GAAMG,CAAAA,SAAS,CAAG,CAACC,UAAU,CAACN,WAAD,CAAV,EAA2BI,YAAY,CAAG,GAA1C,CAAD,EAAiDG,OAAjD,CAAyD,CAAzD,CAAlB,CACA,gBAA+Cd,UAAU,cACvD,wCACE,KAAC,IAAD,EAAM,IAAI,KAAV,CAAW,EAAE,CAAC,KAAd,UACGQ,CAAC,CAAC,uBAAD,CAA0B,CAAEO,GAAG,CAAEJ,YAAP,CAA1B,CADJ,EADF,cAIE,KAAC,IAAD,WACGH,CAAC,CACA,+IADA,CADJ,EAJF,GADuD,CAWvD,CAAEQ,SAAS,CAAE,WAAb,CAXuD,CAAzD,CAAQC,SAAR,aAAQA,SAAR,CAAmBC,OAAnB,aAAmBA,OAAnB,CAA4BC,cAA5B,aAA4BA,cAA5B,CAcA,mBACE,wCACE,MAAC,IAAD,EAAM,EAAE,CAAC,MAAT,CAAgB,UAAU,CAAC,QAA3B,CAAoC,cAAc,CAAC,eAAnD,WACGA,cAAc,EAAID,OADrB,cAEE,KAAC,WAAD,EAAa,GAAG,CAAED,SAAlB,CAA6B,KAAK,KAAlC,UACGT,CAAC,CAAC,eAAD,CADJ,EAFF,cAKE,MAAC,IAAD,EAAM,QAAQ,CAAC,MAAf,WACGD,WAAW,CAAGK,SAAH,CAAe,GAD7B,KACmCN,kBADnC,GALF,GADF,cAUE,KAAC,wBAAD,IAVF,GADF,CAcD,CAnCD,CAqCA,cAAeD,CAAAA,UAAf","sourcesContent":["import React from 'react'\nimport { Text, Flex, useTooltip, TooltipText } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useCakeVault } from 'state/pools/hooks'\nimport UnstakingFeeCountdownRow from './UnstakingFeeCountdownRow'\n\ninterface FeeSummaryProps {\n  stakingTokenSymbol: string\n  stakeAmount: string\n}\n\nconst FeeSummary: React.FC<FeeSummaryProps> = ({ stakingTokenSymbol, stakeAmount }) => {\n  const { t } = useTranslation()\n  const {\n    fees: { withdrawalFee },\n  } = useCakeVault()\n  const feeAsDecimal = withdrawalFee / 100\n  const feeInCake = (parseFloat(stakeAmount) * (feeAsDecimal / 100)).toFixed(4)\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\n    <>\n      <Text bold mb=\"4px\">\n        {t('Unstaking fee: %fee%%', { fee: feeAsDecimal })}\n      </Text>\n      <Text>\n        {t(\n          'Only applies within 3 days of staking. Unstaking after 3 days will not include a fee. Timer resets every time you stake new CAKE in the pool.',\n        )}\n      </Text>\n    </>,\n    { placement: 'top-start' },\n  )\n\n  return (\n    <>\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\n        {tooltipVisible && tooltip}\n        <TooltipText ref={targetRef} small>\n          {t('Unstaking Fee')}\n        </TooltipText>\n        <Text fontSize=\"14px\">\n          {stakeAmount ? feeInCake : '-'} {stakingTokenSymbol}\n        </Text>\n      </Flex>\n      <UnstakingFeeCountdownRow />\n    </>\n  )\n}\n\nexport default FeeSummary\n"]},"metadata":{},"sourceType":"module"}