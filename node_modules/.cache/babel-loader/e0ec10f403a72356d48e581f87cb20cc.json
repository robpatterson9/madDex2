{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { BIG_ONE, BIG_ZERO } from 'utils/bigNumber';\nimport { filterFarmsByQuoteToken } from 'utils/farmsPriceHelpers';\nimport tokens from 'config/constants/tokens';\n\nconst getFarmFromTokenSymbol = (farms, tokenSymbol, preferredQuoteTokens) => {\n  const farmsWithTokenSymbol = farms.filter(farm => farm.token.symbol === tokenSymbol);\n  const filteredFarm = filterFarmsByQuoteToken(farmsWithTokenSymbol, preferredQuoteTokens);\n  return filteredFarm;\n};\n\nconst getFarmBaseTokenPrice = (farm, quoteTokenFarm, bnbPriceBusd) => {\n  const hasTokenPriceVsQuote = Boolean(farm.tokenPriceVsQuote);\n\n  if (farm.quoteToken.symbol === tokens.busd.symbol) {\n    return hasTokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : BIG_ZERO;\n  }\n\n  if (farm.quoteToken.symbol === tokens.wbnb.symbol) {\n    return hasTokenPriceVsQuote ? bnbPriceBusd.times(farm.tokenPriceVsQuote) : BIG_ZERO;\n  } // We can only calculate profits without a quoteTokenFarm for BUSD/BNB farms\n\n\n  if (!quoteTokenFarm) {\n    return BIG_ZERO;\n  } // Possible alternative farm quoteTokens:\n  // UST (i.e. MIR-UST), pBTC (i.e. PNT-pBTC), BTCB (i.e. bBADGER-BTCB), ETH (i.e. SUSHI-ETH)\n  // If the farm's quote token isn't BUSD or WBNB, we then use the quote token, of the original farm's quote token\n  // i.e. for farm PNT - pBTC we use the pBTC farm's quote token - BNB, (pBTC - BNB)\n  // from the BNB - pBTC price, we can calculate the PNT - BUSD price\n\n\n  if (quoteTokenFarm.quoteToken.symbol === tokens.wbnb.symbol) {\n    const quoteTokenInBusd = bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote);\n    return hasTokenPriceVsQuote && quoteTokenInBusd ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd) : BIG_ZERO;\n  }\n\n  if (quoteTokenFarm.quoteToken.symbol === tokens.busd.symbol) {\n    const quoteTokenInBusd = quoteTokenFarm.tokenPriceVsQuote;\n    return hasTokenPriceVsQuote && quoteTokenInBusd ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd) : BIG_ZERO;\n  } // Catch in case token does not have immediate or once-removed BUSD/WBNB quoteToken\n\n\n  return BIG_ZERO;\n};\n\nconst getFarmQuoteTokenPrice = (farm, quoteTokenFarm, bnbPriceBusd) => {\n  if (farm.quoteToken.symbol === 'BUSD') {\n    return BIG_ONE;\n  }\n\n  if (farm.quoteToken.symbol === 'WBNB') {\n    return bnbPriceBusd;\n  }\n\n  if (!quoteTokenFarm) {\n    return BIG_ZERO;\n  }\n\n  if (quoteTokenFarm.quoteToken.symbol === 'WBNB') {\n    return quoteTokenFarm.tokenPriceVsQuote ? bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO;\n  }\n\n  if (quoteTokenFarm.quoteToken.symbol === 'BUSD') {\n    return quoteTokenFarm.tokenPriceVsQuote ? new BigNumber(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO;\n  }\n\n  return BIG_ZERO;\n};\n\nconst fetchFarmsPrices = async farms => {\n  const bnbBusdFarm = farms.find(farm => farm.pid === 252);\n  const bnbPriceBusd = bnbBusdFarm.tokenPriceVsQuote ? BIG_ONE.div(bnbBusdFarm.tokenPriceVsQuote) : BIG_ZERO;\n  const farmsWithPrices = farms.map(farm => {\n    const quoteTokenFarm = getFarmFromTokenSymbol(farms, farm.quoteToken.symbol);\n    const tokenPriceBusd = getFarmBaseTokenPrice(farm, quoteTokenFarm, bnbPriceBusd);\n    const quoteTokenPriceBusd = getFarmQuoteTokenPrice(farm, quoteTokenFarm, bnbPriceBusd);\n    return { ...farm,\n      tokenPriceBusd: tokenPriceBusd.toJSON(),\n      quoteTokenPriceBusd: quoteTokenPriceBusd.toJSON()\n    };\n  });\n  return farmsWithPrices;\n};\n\nexport default fetchFarmsPrices;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/farms/fetchFarmsPrices.ts"],"names":["BigNumber","BIG_ONE","BIG_ZERO","filterFarmsByQuoteToken","tokens","getFarmFromTokenSymbol","farms","tokenSymbol","preferredQuoteTokens","farmsWithTokenSymbol","filter","farm","token","symbol","filteredFarm","getFarmBaseTokenPrice","quoteTokenFarm","bnbPriceBusd","hasTokenPriceVsQuote","Boolean","tokenPriceVsQuote","quoteToken","busd","wbnb","times","quoteTokenInBusd","getFarmQuoteTokenPrice","fetchFarmsPrices","bnbBusdFarm","find","pid","div","farmsWithPrices","map","tokenPriceBusd","quoteTokenPriceBusd","toJSON"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { BIG_ONE, BIG_ZERO } from 'utils/bigNumber'\nimport { filterFarmsByQuoteToken } from 'utils/farmsPriceHelpers'\nimport { SerializedFarm } from 'state/types'\nimport tokens from 'config/constants/tokens'\n\nconst getFarmFromTokenSymbol = (\n  farms: SerializedFarm[],\n  tokenSymbol: string,\n  preferredQuoteTokens?: string[],\n): SerializedFarm => {\n  const farmsWithTokenSymbol = farms.filter((farm) => farm.token.symbol === tokenSymbol)\n  const filteredFarm = filterFarmsByQuoteToken(farmsWithTokenSymbol, preferredQuoteTokens)\n  return filteredFarm\n}\n\nconst getFarmBaseTokenPrice = (\n  farm: SerializedFarm,\n  quoteTokenFarm: SerializedFarm,\n  bnbPriceBusd: BigNumber,\n): BigNumber => {\n  const hasTokenPriceVsQuote = Boolean(farm.tokenPriceVsQuote)\n\n  if (farm.quoteToken.symbol === tokens.busd.symbol) {\n    return hasTokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : BIG_ZERO\n  }\n\n  if (farm.quoteToken.symbol === tokens.wbnb.symbol) {\n    return hasTokenPriceVsQuote ? bnbPriceBusd.times(farm.tokenPriceVsQuote) : BIG_ZERO\n  }\n\n  // We can only calculate profits without a quoteTokenFarm for BUSD/BNB farms\n  if (!quoteTokenFarm) {\n    return BIG_ZERO\n  }\n\n  // Possible alternative farm quoteTokens:\n  // UST (i.e. MIR-UST), pBTC (i.e. PNT-pBTC), BTCB (i.e. bBADGER-BTCB), ETH (i.e. SUSHI-ETH)\n  // If the farm's quote token isn't BUSD or WBNB, we then use the quote token, of the original farm's quote token\n  // i.e. for farm PNT - pBTC we use the pBTC farm's quote token - BNB, (pBTC - BNB)\n  // from the BNB - pBTC price, we can calculate the PNT - BUSD price\n  if (quoteTokenFarm.quoteToken.symbol === tokens.wbnb.symbol) {\n    const quoteTokenInBusd = bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote)\n    return hasTokenPriceVsQuote && quoteTokenInBusd\n      ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\n      : BIG_ZERO\n  }\n\n  if (quoteTokenFarm.quoteToken.symbol === tokens.busd.symbol) {\n    const quoteTokenInBusd = quoteTokenFarm.tokenPriceVsQuote\n    return hasTokenPriceVsQuote && quoteTokenInBusd\n      ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\n      : BIG_ZERO\n  }\n\n  // Catch in case token does not have immediate or once-removed BUSD/WBNB quoteToken\n  return BIG_ZERO\n}\n\nconst getFarmQuoteTokenPrice = (\n  farm: SerializedFarm,\n  quoteTokenFarm: SerializedFarm,\n  bnbPriceBusd: BigNumber,\n): BigNumber => {\n  if (farm.quoteToken.symbol === 'BUSD') {\n    return BIG_ONE\n  }\n\n  if (farm.quoteToken.symbol === 'WBNB') {\n    return bnbPriceBusd\n  }\n\n  if (!quoteTokenFarm) {\n    return BIG_ZERO\n  }\n\n  if (quoteTokenFarm.quoteToken.symbol === 'WBNB') {\n    return quoteTokenFarm.tokenPriceVsQuote ? bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO\n  }\n\n  if (quoteTokenFarm.quoteToken.symbol === 'BUSD') {\n    return quoteTokenFarm.tokenPriceVsQuote ? new BigNumber(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO\n  }\n\n  return BIG_ZERO\n}\n\nconst fetchFarmsPrices = async (farms: SerializedFarm[]) => {\n  const bnbBusdFarm = farms.find((farm) => farm.pid === 252)\n  const bnbPriceBusd = bnbBusdFarm.tokenPriceVsQuote ? BIG_ONE.div(bnbBusdFarm.tokenPriceVsQuote) : BIG_ZERO\n\n  const farmsWithPrices = farms.map((farm) => {\n    const quoteTokenFarm = getFarmFromTokenSymbol(farms, farm.quoteToken.symbol)\n    const tokenPriceBusd = getFarmBaseTokenPrice(farm, quoteTokenFarm, bnbPriceBusd)\n    const quoteTokenPriceBusd = getFarmQuoteTokenPrice(farm, quoteTokenFarm, bnbPriceBusd)\n\n    return {\n      ...farm,\n      tokenPriceBusd: tokenPriceBusd.toJSON(),\n      quoteTokenPriceBusd: quoteTokenPriceBusd.toJSON(),\n    }\n  })\n\n  return farmsWithPrices\n}\n\nexport default fetchFarmsPrices\n"]},"metadata":{},"sourceType":"module"}