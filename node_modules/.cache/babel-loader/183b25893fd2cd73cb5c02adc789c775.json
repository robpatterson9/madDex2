{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolCard/AprRow.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport Balance from 'components/Balance';\nimport RoiCalculatorModal from 'components/RoiCalculatorModal';\nimport { getAprData } from 'views/Pools/helpers';\nimport BigNumber from 'bignumber.js';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ApyLabelContainer = styled(Flex)`\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`;\n_c = ApyLabelContainer;\n\nconst AprRow = ({\n  pool,\n  stakedBalance,\n  performanceFee = 0\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    stakingToken,\n    earningToken,\n    isFinished,\n    apr,\n    earningTokenPrice,\n    stakingTokenPrice,\n    userData,\n    isAutoVault\n  } = pool;\n  const stakingTokenBalance = (userData === null || userData === void 0 ? void 0 : userData.stakingTokenBalance) ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO;\n  const tooltipContent = isAutoVault ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.') : t('This pool’s rewards aren’t compounded automatically, so we show APR');\n  const {\n    targetRef,\n    tooltip,\n    tooltipVisible\n  } = useTooltip(tooltipContent, {\n    placement: 'bottom-start'\n  });\n  const {\n    apr: earningsPercentageToDisplay,\n    autoCompoundFrequency\n  } = getAprData(pool, performanceFee);\n  const apyModalLink = stakingToken.address ? `/swap?outputCurrency=${stakingToken.address}` : '/swap';\n  const [onPresentApyModal] = useModal( /*#__PURE__*/_jsxDEV(RoiCalculatorModal, {\n    earningTokenPrice: earningTokenPrice,\n    stakingTokenPrice: stakingTokenPrice,\n    apr: apr,\n    linkLabel: t('Get %symbol%', {\n      symbol: stakingToken.symbol\n    }),\n    linkHref: apyModalLink,\n    stakingTokenBalance: stakedBalance.plus(stakingTokenBalance),\n    stakingTokenSymbol: stakingToken.symbol,\n    earningTokenSymbol: earningToken.symbol,\n    autoCompoundFrequency: autoCompoundFrequency,\n    performanceFee: performanceFee\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    children: [tooltipVisible && tooltip, /*#__PURE__*/_jsxDEV(TooltipText, {\n      ref: targetRef,\n      children: isAutoVault ? `${t('APY')}:` : `${t('APR')}:`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), isFinished || !apr ? /*#__PURE__*/_jsxDEV(Skeleton, {\n      width: \"82px\",\n      height: \"32px\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(ApyLabelContainer, {\n      alignItems: \"center\",\n      onClick: onPresentApyModal,\n      children: [/*#__PURE__*/_jsxDEV(Balance, {\n        fontSize: \"16px\",\n        isDisabled: isFinished,\n        value: earningsPercentageToDisplay,\n        decimals: 2,\n        unit: \"%\",\n        onClick: onPresentApyModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        variant: \"text\",\n        scale: \"sm\",\n        children: /*#__PURE__*/_jsxDEV(CalculateIcon, {\n          color: \"textSubtle\",\n          width: \"18px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AprRow, \"2uwgmcxU2kGCfbBwkMoDWatU7Kc=\", false, function () {\n  return [useTranslation, useTooltip, useModal];\n});\n\n_c2 = AprRow;\nexport default AprRow;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ApyLabelContainer\");\n$RefreshReg$(_c2, \"AprRow\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolCard/AprRow.tsx"],"names":["React","styled","Flex","TooltipText","IconButton","useModal","CalculateIcon","Skeleton","useTooltip","useTranslation","Balance","RoiCalculatorModal","getAprData","BigNumber","BIG_ZERO","ApyLabelContainer","AprRow","pool","stakedBalance","performanceFee","t","stakingToken","earningToken","isFinished","apr","earningTokenPrice","stakingTokenPrice","userData","isAutoVault","stakingTokenBalance","tooltipContent","targetRef","tooltip","tooltipVisible","placement","earningsPercentageToDisplay","autoCompoundFrequency","apyModalLink","address","onPresentApyModal","symbol","plus"],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Flex, TooltipText, IconButton, useModal, CalculateIcon, Skeleton, useTooltip } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Balance from 'components/Balance'\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\nimport { DeserializedPool } from 'state/types'\nimport { getAprData } from 'views/Pools/helpers'\nimport BigNumber from 'bignumber.js'\nimport { BIG_ZERO } from 'utils/bigNumber'\n\nconst ApyLabelContainer = styled(Flex)`\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`\n\ninterface AprRowProps {\n  pool: DeserializedPool\n  stakedBalance: BigNumber\n  performanceFee?: number\n}\n\nconst AprRow: React.FC<AprRowProps> = ({ pool, stakedBalance, performanceFee = 0 }) => {\n  const { t } = useTranslation()\n  const { stakingToken, earningToken, isFinished, apr, earningTokenPrice, stakingTokenPrice, userData, isAutoVault } =\n    pool\n\n  const stakingTokenBalance = userData?.stakingTokenBalance ? new BigNumber(userData.stakingTokenBalance) : BIG_ZERO\n\n  const tooltipContent = isAutoVault\n    ? t('APY includes compounding, APR doesn’t. This pool’s CAKE is compounded automatically, so we show APY.')\n    : t('This pool’s rewards aren’t compounded automatically, so we show APR')\n\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(tooltipContent, { placement: 'bottom-start' })\n\n  const { apr: earningsPercentageToDisplay, autoCompoundFrequency } = getAprData(pool, performanceFee)\n\n  const apyModalLink = stakingToken.address ? `/swap?outputCurrency=${stakingToken.address}` : '/swap'\n\n  const [onPresentApyModal] = useModal(\n    <RoiCalculatorModal\n      earningTokenPrice={earningTokenPrice}\n      stakingTokenPrice={stakingTokenPrice}\n      apr={apr}\n      linkLabel={t('Get %symbol%', { symbol: stakingToken.symbol })}\n      linkHref={apyModalLink}\n      stakingTokenBalance={stakedBalance.plus(stakingTokenBalance)}\n      stakingTokenSymbol={stakingToken.symbol}\n      earningTokenSymbol={earningToken.symbol}\n      autoCompoundFrequency={autoCompoundFrequency}\n      performanceFee={performanceFee}\n    />,\n  )\n\n  return (\n    <Flex alignItems=\"center\" justifyContent=\"space-between\">\n      {tooltipVisible && tooltip}\n      <TooltipText ref={targetRef}>{isAutoVault ? `${t('APY')}:` : `${t('APR')}:`}</TooltipText>\n      {isFinished || !apr ? (\n        <Skeleton width=\"82px\" height=\"32px\" />\n      ) : (\n        <ApyLabelContainer alignItems=\"center\" onClick={onPresentApyModal}>\n          <Balance\n            fontSize=\"16px\"\n            isDisabled={isFinished}\n            value={earningsPercentageToDisplay}\n            decimals={2}\n            unit=\"%\"\n            onClick={onPresentApyModal}\n          />\n          <IconButton variant=\"text\" scale=\"sm\">\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\n          </IconButton>\n        </ApyLabelContainer>\n      )}\n    </Flex>\n  )\n}\n\nexport default AprRow\n"]},"metadata":{},"sourceType":"module"}