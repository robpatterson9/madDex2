{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";// Set of helper functions to facilitate wallet setup\nimport{BASE_BSC_SCAN_URL,BASE_URL}from'config';import{nodes}from'./getRpcUrl';/**\n * Prompt the user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\n * @returns {boolean} true if the setup succeeded, false otherwise\n */export var setupNetwork=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var provider,chainId;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:provider=window.ethereum;if(!provider){_context.next=15;break;}chainId=parseInt(process.env.REACT_APP_CHAIN_ID,10);_context.prev=3;_context.next=6;return provider.request({method:'wallet_addEthereumChain',params:[{chainId:\"0x\".concat(chainId.toString(16)),chainName:'Binance Smart Chain Mainnet',nativeCurrency:{name:'BNB',symbol:'bnb',decimals:18},rpcUrls:nodes,blockExplorerUrls:[\"\".concat(BASE_BSC_SCAN_URL,\"/\")]}]});case 6:return _context.abrupt(\"return\",true);case 9:_context.prev=9;_context.t0=_context[\"catch\"](3);console.error('Failed to setup the network in Metamask:',_context.t0);return _context.abrupt(\"return\",false);case 13:_context.next=17;break;case 15:console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\");return _context.abrupt(\"return\",false);case 17:case\"end\":return _context.stop();}}},_callee,null,[[3,9]]);}));return function setupNetwork(){return _ref.apply(this,arguments);};}();/**\n * Prompt the user to add a custom token to metamask\n * @param tokenAddress\n * @param tokenSymbol\n * @param tokenDecimals\n * @returns {boolean} true if the token has been added, false otherwise\n */export var registerToken=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(tokenAddress,tokenSymbol,tokenDecimals){var tokenAdded;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return window.ethereum.request({method:'wallet_watchAsset',params:{type:'ERC20',options:{address:tokenAddress,symbol:tokenSymbol,decimals:tokenDecimals,image:\"\".concat(BASE_URL,\"/images/tokens/\").concat(tokenAddress,\".png\")}}});case 2:tokenAdded=_context2.sent;return _context2.abrupt(\"return\",tokenAdded);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function registerToken(_x,_x2,_x3){return _ref2.apply(this,arguments);};}();","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/utils/wallet.ts"],"names":["BASE_BSC_SCAN_URL","BASE_URL","nodes","setupNetwork","provider","window","ethereum","chainId","parseInt","process","env","REACT_APP_CHAIN_ID","request","method","params","toString","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","console","error","registerToken","tokenAddress","tokenSymbol","tokenDecimals","type","options","address","image","tokenAdded"],"mappings":"6SAAA;AAEA,OAASA,iBAAT,CAA4BC,QAA5B,KAA4C,QAA5C,CACA,OAASC,KAAT,KAAsB,aAAtB,CAEA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,YAAY,0FAAG,wJACpBC,QADoB,CACTC,MAAM,CAACC,QADE,KAEtBF,QAFsB,0BAGlBG,OAHkB,CAGRC,QAAQ,CAACC,OAAO,CAACC,GAAR,CAAYC,kBAAb,CAAiC,EAAjC,CAHA,uCAKhBP,CAAAA,QAAQ,CAACQ,OAAT,CAAiB,CACrBC,MAAM,CAAE,yBADa,CAErBC,MAAM,CAAE,CACN,CACEP,OAAO,aAAOA,OAAO,CAACQ,QAAR,CAAiB,EAAjB,CAAP,CADT,CAEEC,SAAS,CAAE,6BAFb,CAGEC,cAAc,CAAE,CACdC,IAAI,CAAE,KADQ,CAEdC,MAAM,CAAE,KAFM,CAGdC,QAAQ,CAAE,EAHI,CAHlB,CAQEC,OAAO,CAAEnB,KARX,CASEoB,iBAAiB,CAAE,WAAItB,iBAAJ,MATrB,CADM,CAFa,CAAjB,CALgB,wCAqBf,IArBe,0DAuBtBuB,OAAO,CAACC,KAAR,CAAc,0CAAd,cAvBsB,gCAwBf,KAxBe,yCA2BxBD,OAAO,CAACC,KAAR,CAAc,8EAAd,EA3BwB,gCA4BjB,KA5BiB,sEAAH,kBAAZrB,CAAAA,YAAY,0CAAlB,CAgCP;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMsB,CAAAA,aAAa,2FAAG,kBAAOC,YAAP,CAA6BC,WAA7B,CAAkDC,aAAlD,4JACFvB,CAAAA,MAAM,CAACC,QAAP,CAAgBM,OAAhB,CAAwB,CAC/CC,MAAM,CAAE,mBADuC,CAE/CC,MAAM,CAAE,CACNe,IAAI,CAAE,OADA,CAENC,OAAO,CAAE,CACPC,OAAO,CAAEL,YADF,CAEPP,MAAM,CAAEQ,WAFD,CAGPP,QAAQ,CAAEQ,aAHH,CAIPI,KAAK,WAAK/B,QAAL,2BAA+ByB,YAA/B,QAJE,CAFH,CAFuC,CAAxB,CADE,QACrBO,UADqB,iDAcpBA,UAdoB,0DAAH,kBAAbR,CAAAA,aAAa,qDAAnB","sourcesContent":["// Set of helper functions to facilitate wallet setup\n\nimport { BASE_BSC_SCAN_URL, BASE_URL } from 'config'\nimport { nodes } from './getRpcUrl'\n\n/**\n * Prompt the user to add BSC as a network on Metamask, or switch to BSC if the wallet is on a different network\n * @returns {boolean} true if the setup succeeded, false otherwise\n */\nexport const setupNetwork = async () => {\n  const provider = window.ethereum\n  if (provider) {\n    const chainId = parseInt(process.env.REACT_APP_CHAIN_ID, 10)\n    try {\n      await provider.request({\n        method: 'wallet_addEthereumChain',\n        params: [\n          {\n            chainId: `0x${chainId.toString(16)}`,\n            chainName: 'Binance Smart Chain Mainnet',\n            nativeCurrency: {\n              name: 'BNB',\n              symbol: 'bnb',\n              decimals: 18,\n            },\n            rpcUrls: nodes,\n            blockExplorerUrls: [`${BASE_BSC_SCAN_URL}/`],\n          },\n        ],\n      })\n      return true\n    } catch (error) {\n      console.error('Failed to setup the network in Metamask:', error)\n      return false\n    }\n  } else {\n    console.error(\"Can't setup the BSC network on metamask because window.ethereum is undefined\")\n    return false\n  }\n}\n\n/**\n * Prompt the user to add a custom token to metamask\n * @param tokenAddress\n * @param tokenSymbol\n * @param tokenDecimals\n * @returns {boolean} true if the token has been added, false otherwise\n */\nexport const registerToken = async (tokenAddress: string, tokenSymbol: string, tokenDecimals: number) => {\n  const tokenAdded = await window.ethereum.request({\n    method: 'wallet_watchAsset',\n    params: {\n      type: 'ERC20',\n      options: {\n        address: tokenAddress,\n        symbol: tokenSymbol,\n        decimals: tokenDecimals,\n        image: `${BASE_URL}/images/tokens/${tokenAddress}.png`,\n      },\n    },\n  })\n\n  return tokenAdded\n}\n"]},"metadata":{},"sourceType":"module"}