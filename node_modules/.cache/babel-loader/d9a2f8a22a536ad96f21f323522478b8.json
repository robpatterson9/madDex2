{"ast":null,"code":"var _s = $RefreshSig$();\n\n/* eslint-disable no-await-in-loop */\nimport { useState, useEffect } from 'react';\nimport { request, gql } from 'graphql-request';\nimport { INFO_CLIENT } from 'config/constants/endpoints';\nimport { PCS_V2_START } from 'config/constants/info';\nimport { fetchChartData, mapDayData } from '../helpers';\n/**\n * Data for displaying Liquidity and Volume charts on Overview page\n */\n\nconst PANCAKE_DAY_DATAS = gql`\n  query overviewCharts($startTime: Int!, $skip: Int!) {\n    pancakeDayDatas(first: 1000, skip: $skip, where: { date_gt: $startTime }, orderBy: date, orderDirection: asc) {\n      date\n      dailyVolumeUSD\n      totalLiquidityUSD\n    }\n  }\n`;\n\nconst getOverviewChartData = async skip => {\n  try {\n    const {\n      pancakeDayDatas\n    } = await request(INFO_CLIENT, PANCAKE_DAY_DATAS, {\n      startTime: PCS_V2_START,\n      skip\n    });\n    const data = pancakeDayDatas.map(mapDayData);\n    return {\n      data,\n      error: false\n    };\n  } catch (error) {\n    console.error('Failed to fetch overview chart data', error);\n    return {\n      error: true\n    };\n  }\n};\n/**\n * Fetch historic chart data\n */\n\n\nconst useFetchGlobalChartData = () => {\n  _s();\n\n  const [overviewChartData, setOverviewChartData] = useState();\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const fetch = async () => {\n      const {\n        data\n      } = await fetchChartData(getOverviewChartData);\n\n      if (data) {\n        setOverviewChartData(data);\n      } else {\n        setError(true);\n      }\n    };\n\n    if (!overviewChartData && !error) {\n      fetch();\n    }\n  }, [overviewChartData, error]);\n  return {\n    error,\n    data: overviewChartData\n  };\n};\n\n_s(useFetchGlobalChartData, \"giqh/dTSZXOnmTHmXSCh/kLz/jY=\");\n\nexport default useFetchGlobalChartData;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/queries/protocol/chart.ts"],"names":["useState","useEffect","request","gql","INFO_CLIENT","PCS_V2_START","fetchChartData","mapDayData","PANCAKE_DAY_DATAS","getOverviewChartData","skip","pancakeDayDatas","startTime","data","map","error","console","useFetchGlobalChartData","overviewChartData","setOverviewChartData","setError","fetch"],"mappings":";;AAAA;AACA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,YAAT,QAA6B,uBAA7B;AAGA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,YAA3C;AAEA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAGL,GAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;;AAUA,MAAMM,oBAAoB,GAAG,MAAOC,IAAP,IAA0E;AACrG,MAAI;AACF,UAAM;AAAEC,MAAAA;AAAF,QAAsB,MAAMT,OAAO,CAA0BE,WAA1B,EAAuCI,iBAAvC,EAA0D;AACjGI,MAAAA,SAAS,EAAEP,YADsF;AAEjGK,MAAAA;AAFiG,KAA1D,CAAzC;AAIA,UAAMG,IAAI,GAAGF,eAAe,CAACG,GAAhB,CAAoBP,UAApB,CAAb;AACA,WAAO;AAAEM,MAAAA,IAAF;AAAQE,MAAAA,KAAK,EAAE;AAAf,KAAP;AACD,GAPD,CAOE,OAAOA,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,qCAAd,EAAqDA,KAArD;AACA,WAAO;AAAEA,MAAAA,KAAK,EAAE;AAAT,KAAP;AACD;AACF,CAZD;AAcA;AACA;AACA;;;AACA,MAAME,uBAAuB,GAAG,MAG3B;AAAA;;AACH,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CnB,QAAQ,EAA1D;AACA,QAAM,CAACe,KAAD,EAAQK,QAAR,IAAoBpB,QAAQ,CAAC,KAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMoB,KAAK,GAAG,YAAY;AACxB,YAAM;AAAER,QAAAA;AAAF,UAAW,MAAMP,cAAc,CAACG,oBAAD,CAArC;;AACA,UAAII,IAAJ,EAAU;AACRM,QAAAA,oBAAoB,CAACN,IAAD,CAApB;AACD,OAFD,MAEO;AACLO,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,KAPD;;AAQA,QAAI,CAACF,iBAAD,IAAsB,CAACH,KAA3B,EAAkC;AAChCM,MAAAA,KAAK;AACN;AACF,GAZQ,EAYN,CAACH,iBAAD,EAAoBH,KAApB,CAZM,CAAT;AAcA,SAAO;AACLA,IAAAA,KADK;AAELF,IAAAA,IAAI,EAAEK;AAFD,GAAP;AAID,CAzBD;;GAAMD,uB;;AA2BN,eAAeA,uBAAf","sourcesContent":["/* eslint-disable no-await-in-loop */\nimport { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { PCS_V2_START } from 'config/constants/info'\nimport { ChartEntry } from 'state/info/types'\nimport { PancakeDayDatasResponse } from '../types'\nimport { fetchChartData, mapDayData } from '../helpers'\n\n/**\n * Data for displaying Liquidity and Volume charts on Overview page\n */\nconst PANCAKE_DAY_DATAS = gql`\n  query overviewCharts($startTime: Int!, $skip: Int!) {\n    pancakeDayDatas(first: 1000, skip: $skip, where: { date_gt: $startTime }, orderBy: date, orderDirection: asc) {\n      date\n      dailyVolumeUSD\n      totalLiquidityUSD\n    }\n  }\n`\n\nconst getOverviewChartData = async (skip: number): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const { pancakeDayDatas } = await request<PancakeDayDatasResponse>(INFO_CLIENT, PANCAKE_DAY_DATAS, {\n      startTime: PCS_V2_START,\n      skip,\n    })\n    const data = pancakeDayDatas.map(mapDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch overview chart data', error)\n    return { error: true }\n  }\n}\n\n/**\n * Fetch historic chart data\n */\nconst useFetchGlobalChartData = (): {\n  error: boolean\n  data: ChartEntry[] | undefined\n} => {\n  const [overviewChartData, setOverviewChartData] = useState<ChartEntry[] | undefined>()\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    const fetch = async () => {\n      const { data } = await fetchChartData(getOverviewChartData)\n      if (data) {\n        setOverviewChartData(data)\n      } else {\n        setError(true)\n      }\n    }\n    if (!overviewChartData && !error) {\n      fetch()\n    }\n  }, [overviewChartData, error])\n\n  return {\n    error,\n    data: overviewChartData,\n  }\n}\n\nexport default useFetchGlobalChartData\n"]},"metadata":{},"sourceType":"module"}