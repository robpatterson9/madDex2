{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from'react';import{useFarmAuctionContract}from'hooks/useContract';import{getBidderInfo}from'config/constants/farmAuctions';import{AUCTION_WHITELISTED_BIDDERS_TO_FETCH}from'config';var useWhitelistedAddresses=function useWhitelistedAddresses(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),whitelistedAddresses=_useState2[0],setWhitelistedAddresses=_useState2[1];var farmAuctionContract=useFarmAuctionContract();useEffect(function(){var fetchWhitelistedAddresses=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _yield$farmAuctionCon,_yield$farmAuctionCon2,bidderAddresses,bidders;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return farmAuctionContract.viewBidders(0,AUCTION_WHITELISTED_BIDDERS_TO_FETCH);case 3:_yield$farmAuctionCon=_context.sent;_yield$farmAuctionCon2=_slicedToArray(_yield$farmAuctionCon,1);bidderAddresses=_yield$farmAuctionCon2[0];bidders=bidderAddresses.map(function(address){return getBidderInfo(address);});setWhitelistedAddresses(bidders);_context.next=13;break;case 10:_context.prev=10;_context.t0=_context[\"catch\"](0);console.error('Failed to fetch list of whitelisted addresses',_context.t0);case 13:case\"end\":return _context.stop();}}},_callee,null,[[0,10]]);}));return function fetchWhitelistedAddresses(){return _ref.apply(this,arguments);};}();if(!whitelistedAddresses){fetchWhitelistedAddresses();}},[farmAuctionContract,whitelistedAddresses]);return whitelistedAddresses;};export default useWhitelistedAddresses;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/FarmAuction/hooks/useWhitelistedAddresses.ts"],"names":["useState","useEffect","useFarmAuctionContract","getBidderInfo","AUCTION_WHITELISTED_BIDDERS_TO_FETCH","useWhitelistedAddresses","whitelistedAddresses","setWhitelistedAddresses","farmAuctionContract","fetchWhitelistedAddresses","viewBidders","bidderAddresses","bidders","map","address","console","error"],"mappings":"qcAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,OAASC,sBAAT,KAAuC,mBAAvC,CACA,OAASC,aAAT,KAA8B,+BAA9B,CAEA,OAASC,oCAAT,KAAqD,QAArD,CAEA,GAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,EAAM,CACpC,cAAwDL,QAAQ,CAAmC,IAAnC,CAAhE,wCAAOM,oBAAP,eAA6BC,uBAA7B,eACA,GAAMC,CAAAA,mBAAmB,CAAGN,sBAAsB,EAAlD,CAEAD,SAAS,CAAC,UAAM,CACd,GAAMQ,CAAAA,yBAAyB,0FAAG,kPAEED,CAAAA,mBAAmB,CAACE,WAApB,CAAgC,CAAhC,CAAmCN,oCAAnC,CAFF,2GAEvBO,eAFuB,2BAGxBC,OAHwB,CAGdD,eAAe,CAACE,GAAhB,CAAoB,SAACC,OAAD,QAAaX,CAAAA,aAAa,CAACW,OAAD,CAA1B,EAApB,CAHc,CAI9BP,uBAAuB,CAACK,OAAD,CAAvB,CAJ8B,iFAM9BG,OAAO,CAACC,KAAR,CAAc,+CAAd,cAN8B,qEAAH,kBAAzBP,CAAAA,yBAAyB,0CAA/B,CASA,GAAI,CAACH,oBAAL,CAA2B,CACzBG,yBAAyB,GAC1B,CACF,CAbQ,CAaN,CAACD,mBAAD,CAAsBF,oBAAtB,CAbM,CAAT,CAeA,MAAOA,CAAAA,oBAAP,CACD,CApBD,CAsBA,cAAeD,CAAAA,uBAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useFarmAuctionContract } from 'hooks/useContract'\nimport { getBidderInfo } from 'config/constants/farmAuctions'\nimport { FarmAuctionBidderConfig } from 'config/constants/types'\nimport { AUCTION_WHITELISTED_BIDDERS_TO_FETCH } from 'config'\n\nconst useWhitelistedAddresses = () => {\n  const [whitelistedAddresses, setWhitelistedAddresses] = useState<FarmAuctionBidderConfig[] | null>(null)\n  const farmAuctionContract = useFarmAuctionContract()\n\n  useEffect(() => {\n    const fetchWhitelistedAddresses = async () => {\n      try {\n        const [bidderAddresses] = await farmAuctionContract.viewBidders(0, AUCTION_WHITELISTED_BIDDERS_TO_FETCH)\n        const bidders = bidderAddresses.map((address) => getBidderInfo(address))\n        setWhitelistedAddresses(bidders)\n      } catch (error) {\n        console.error('Failed to fetch list of whitelisted addresses', error)\n      }\n    }\n    if (!whitelistedAddresses) {\n      fetchWhitelistedAddresses()\n    }\n  }, [farmAuctionContract, whitelistedAddresses])\n\n  return whitelistedAddresses\n}\n\nexport default useWhitelistedAddresses\n"]},"metadata":{},"sourceType":"module"}