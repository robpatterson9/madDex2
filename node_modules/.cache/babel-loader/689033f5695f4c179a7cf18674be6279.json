{"ast":null,"code":"import _defineProperty from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _toConsumableArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';import BigNumber from'bignumber.js';import poolsConfig from'config/constants/pools';import{BIG_ZERO}from'utils/bigNumber';import{getPoolApr}from'utils/apr';import{getBalanceNumber}from'utils/formatBalance';import{fetchPoolsBlockLimits,fetchPoolsStakingLimits,fetchPoolsTotalStaking}from'./fetchPools';import{fetchPoolsAllowance,fetchUserBalances,fetchUserStakeBalances,fetchUserPendingRewards}from'./fetchPoolsUser';import{fetchPublicVaultData,fetchVaultFees}from'./fetchVaultPublic';import fetchVaultUser from'./fetchVaultUser';import{getTokenPricesFromFarm}from'./helpers';var initialState={data:_toConsumableArray(poolsConfig),userDataLoaded:false,cakeVault:{totalShares:null,pricePerFullShare:null,totalCakeInVault:null,estimatedCakeBountyReward:null,totalPendingCakeHarvest:null,fees:{performanceFee:null,callFee:null,withdrawalFee:null,withdrawalFeePeriod:null},userData:{isLoading:true,userShares:null,cakeAtLastUserAction:null,lastDepositedTime:null,lastUserActionTime:null}}};// Thunks\nexport var fetchPoolsPublicDataAsync=function fetchPoolsPublicDataAsync(currentBlock){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch,getState){var blockLimits,totalStakings,prices,liveData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return fetchPoolsBlockLimits();case 2:blockLimits=_context.sent;_context.next=5;return fetchPoolsTotalStaking();case 5:totalStakings=_context.sent;prices=getTokenPricesFromFarm(getState().farms.data);liveData=poolsConfig.map(function(pool){var blockLimit=blockLimits.find(function(entry){return entry.sousId===pool.sousId;});var totalStaking=totalStakings.find(function(entry){return entry.sousId===pool.sousId;});var isPoolEndBlockExceeded=currentBlock>0&&blockLimit?currentBlock>Number(blockLimit.endBlock):false;var isPoolFinished=pool.isFinished||isPoolEndBlockExceeded;var stakingTokenAddress=pool.stakingToken.address?pool.stakingToken.address.toLowerCase():null;var stakingTokenPrice=stakingTokenAddress?prices[stakingTokenAddress]:0;var earningTokenAddress=pool.earningToken.address?pool.earningToken.address.toLowerCase():null;var earningTokenPrice=earningTokenAddress?prices[earningTokenAddress]:0;var apr=!isPoolFinished?getPoolApr(stakingTokenPrice,earningTokenPrice,getBalanceNumber(new BigNumber(totalStaking.totalStaked),pool.stakingToken.decimals),parseFloat(pool.tokenPerBlock)):0;return _objectSpread(_objectSpread(_objectSpread({},blockLimit),totalStaking),{},{stakingTokenPrice:stakingTokenPrice,earningTokenPrice:earningTokenPrice,apr:apr,isFinished:isPoolFinished});});dispatch(setPoolsPublicData(liveData));case 9:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}();};export var fetchPoolsStakingLimitsAsync=function fetchPoolsStakingLimitsAsync(){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch,getState){var poolsWithStakingLimit,stakingLimits,stakingLimitData;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:poolsWithStakingLimit=getState().pools.data.filter(function(_ref3){var stakingLimit=_ref3.stakingLimit;return stakingLimit!==null&&stakingLimit!==undefined;}).map(function(pool){return pool.sousId;});_context2.next=3;return fetchPoolsStakingLimits(poolsWithStakingLimit);case 3:stakingLimits=_context2.sent;stakingLimitData=poolsConfig.map(function(pool){if(poolsWithStakingLimit.includes(pool.sousId)){return{sousId:pool.sousId};}var stakingLimit=stakingLimits[pool.sousId]||BIG_ZERO;return{sousId:pool.sousId,stakingLimit:stakingLimit.toJSON()};});dispatch(setPoolsPublicData(stakingLimitData));case 6:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x3,_x4){return _ref2.apply(this,arguments);};}();};export var fetchPoolsUserDataAsync=function fetchPoolsUserDataAsync(account){return/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch){var allowances,stakingTokenBalances,stakedBalances,pendingRewards,userData;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return fetchPoolsAllowance(account);case 2:allowances=_context3.sent;_context3.next=5;return fetchUserBalances(account);case 5:stakingTokenBalances=_context3.sent;_context3.next=8;return fetchUserStakeBalances(account);case 8:stakedBalances=_context3.sent;_context3.next=11;return fetchUserPendingRewards(account);case 11:pendingRewards=_context3.sent;userData=poolsConfig.map(function(pool){return{sousId:pool.sousId,allowance:allowances[pool.sousId],stakingTokenBalance:stakingTokenBalances[pool.sousId],stakedBalance:stakedBalances[pool.sousId],pendingReward:pendingRewards[pool.sousId]};});dispatch(setPoolsUserData(userData));case 14:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x5){return _ref4.apply(this,arguments);};}();};export var updateUserAllowance=function updateUserAllowance(sousId,account){return/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch){var allowances;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return fetchPoolsAllowance(account);case 2:allowances=_context4.sent;dispatch(updatePoolsUserData({sousId:sousId,field:'allowance',value:allowances[sousId]}));case 4:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x6){return _ref5.apply(this,arguments);};}();};export var updateUserBalance=function updateUserBalance(sousId,account){return/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch){var tokenBalances;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:_context5.next=2;return fetchUserBalances(account);case 2:tokenBalances=_context5.sent;dispatch(updatePoolsUserData({sousId:sousId,field:'stakingTokenBalance',value:tokenBalances[sousId]}));case 4:case\"end\":return _context5.stop();}}},_callee5);}));return function(_x7){return _ref6.apply(this,arguments);};}();};export var updateUserStakedBalance=function updateUserStakedBalance(sousId,account){return/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch){var stakedBalances;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:_context6.next=2;return fetchUserStakeBalances(account);case 2:stakedBalances=_context6.sent;dispatch(updatePoolsUserData({sousId:sousId,field:'stakedBalance',value:stakedBalances[sousId]}));case 4:case\"end\":return _context6.stop();}}},_callee6);}));return function(_x8){return _ref7.apply(this,arguments);};}();};export var updateUserPendingReward=function updateUserPendingReward(sousId,account){return/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(dispatch){var pendingRewards;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:_context7.next=2;return fetchUserPendingRewards(account);case 2:pendingRewards=_context7.sent;dispatch(updatePoolsUserData({sousId:sousId,field:'pendingReward',value:pendingRewards[sousId]}));case 4:case\"end\":return _context7.stop();}}},_callee7);}));return function(_x9){return _ref8.apply(this,arguments);};}();};export var fetchCakeVaultPublicData=createAsyncThunk('cakeVault/fetchPublicData',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(){var publicVaultInfo;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:_context8.next=2;return fetchPublicVaultData();case 2:publicVaultInfo=_context8.sent;return _context8.abrupt(\"return\",publicVaultInfo);case 4:case\"end\":return _context8.stop();}}},_callee8);})));export var fetchCakeVaultFees=createAsyncThunk('cakeVault/fetchFees',/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee9(){var vaultFees;return _regeneratorRuntime.wrap(function _callee9$(_context9){while(1){switch(_context9.prev=_context9.next){case 0:_context9.next=2;return fetchVaultFees();case 2:vaultFees=_context9.sent;return _context9.abrupt(\"return\",vaultFees);case 4:case\"end\":return _context9.stop();}}},_callee9);})));export var fetchCakeVaultUserData=createAsyncThunk('cakeVault/fetchUser',/*#__PURE__*/function(){var _ref12=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee10(_ref11){var account,userData;return _regeneratorRuntime.wrap(function _callee10$(_context10){while(1){switch(_context10.prev=_context10.next){case 0:account=_ref11.account;_context10.next=3;return fetchVaultUser(account);case 3:userData=_context10.sent;return _context10.abrupt(\"return\",userData);case 5:case\"end\":return _context10.stop();}}},_callee10);}));return function(_x10){return _ref12.apply(this,arguments);};}());export var PoolsSlice=createSlice({name:'Pools',initialState:initialState,reducers:{setPoolsPublicData:function setPoolsPublicData(state,action){var livePoolsData=action.payload;state.data=state.data.map(function(pool){var livePoolData=livePoolsData.find(function(entry){return entry.sousId===pool.sousId;});return _objectSpread(_objectSpread({},pool),livePoolData);});},setPoolsUserData:function setPoolsUserData(state,action){var userData=action.payload;state.data=state.data.map(function(pool){var userPoolData=userData.find(function(entry){return entry.sousId===pool.sousId;});return _objectSpread(_objectSpread({},pool),{},{userData:userPoolData});});state.userDataLoaded=true;},updatePoolsUserData:function updatePoolsUserData(state,action){var _action$payload=action.payload,field=_action$payload.field,value=_action$payload.value,sousId=_action$payload.sousId;var index=state.data.findIndex(function(p){return p.sousId===sousId;});if(index>=0){state.data[index]=_objectSpread(_objectSpread({},state.data[index]),{},{userData:_objectSpread(_objectSpread({},state.data[index].userData),{},_defineProperty({},field,value))});}}},extraReducers:function extraReducers(builder){// Vault public data that updates frequently\nbuilder.addCase(fetchCakeVaultPublicData.fulfilled,function(state,action){state.cakeVault=_objectSpread(_objectSpread({},state.cakeVault),action.payload);});// Vault fees\nbuilder.addCase(fetchCakeVaultFees.fulfilled,function(state,action){var fees=action.payload;state.cakeVault=_objectSpread(_objectSpread({},state.cakeVault),{},{fees:fees});});// Vault user data\nbuilder.addCase(fetchCakeVaultUserData.fulfilled,function(state,action){var userData=action.payload;userData.isLoading=false;state.cakeVault=_objectSpread(_objectSpread({},state.cakeVault),{},{userData:userData});});}});// Actions\nvar _PoolsSlice$actions=PoolsSlice.actions,setPoolsPublicData=_PoolsSlice$actions.setPoolsPublicData,setPoolsUserData=_PoolsSlice$actions.setPoolsUserData,updatePoolsUserData=_PoolsSlice$actions.updatePoolsUserData;export{setPoolsPublicData,setPoolsUserData,updatePoolsUserData};export default PoolsSlice.reducer;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/pools/index.ts"],"names":["createAsyncThunk","createSlice","BigNumber","poolsConfig","BIG_ZERO","getPoolApr","getBalanceNumber","fetchPoolsBlockLimits","fetchPoolsStakingLimits","fetchPoolsTotalStaking","fetchPoolsAllowance","fetchUserBalances","fetchUserStakeBalances","fetchUserPendingRewards","fetchPublicVaultData","fetchVaultFees","fetchVaultUser","getTokenPricesFromFarm","initialState","data","userDataLoaded","cakeVault","totalShares","pricePerFullShare","totalCakeInVault","estimatedCakeBountyReward","totalPendingCakeHarvest","fees","performanceFee","callFee","withdrawalFee","withdrawalFeePeriod","userData","isLoading","userShares","cakeAtLastUserAction","lastDepositedTime","lastUserActionTime","fetchPoolsPublicDataAsync","currentBlock","dispatch","getState","blockLimits","totalStakings","prices","farms","liveData","map","pool","blockLimit","find","entry","sousId","totalStaking","isPoolEndBlockExceeded","Number","endBlock","isPoolFinished","isFinished","stakingTokenAddress","stakingToken","address","toLowerCase","stakingTokenPrice","earningTokenAddress","earningToken","earningTokenPrice","apr","totalStaked","decimals","parseFloat","tokenPerBlock","setPoolsPublicData","fetchPoolsStakingLimitsAsync","poolsWithStakingLimit","pools","filter","stakingLimit","undefined","stakingLimits","stakingLimitData","includes","toJSON","fetchPoolsUserDataAsync","account","allowances","stakingTokenBalances","stakedBalances","pendingRewards","allowance","stakingTokenBalance","stakedBalance","pendingReward","setPoolsUserData","updateUserAllowance","updatePoolsUserData","field","value","updateUserBalance","tokenBalances","updateUserStakedBalance","updateUserPendingReward","fetchCakeVaultPublicData","publicVaultInfo","fetchCakeVaultFees","vaultFees","fetchCakeVaultUserData","PoolsSlice","name","reducers","state","action","livePoolsData","payload","livePoolData","userPoolData","index","findIndex","p","extraReducers","builder","addCase","fulfilled","actions","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport BigNumber from 'bignumber.js'\nimport poolsConfig from 'config/constants/pools'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { PoolsState, SerializedPool, CakeVault, VaultFees, VaultUser, AppThunk } from 'state/types'\nimport { getPoolApr } from 'utils/apr'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { fetchPoolsBlockLimits, fetchPoolsStakingLimits, fetchPoolsTotalStaking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { fetchPublicVaultData, fetchVaultFees } from './fetchVaultPublic'\nimport fetchVaultUser from './fetchVaultUser'\nimport { getTokenPricesFromFarm } from './helpers'\n\nconst initialState: PoolsState = {\n  data: [...poolsConfig],\n  userDataLoaded: false,\n  cakeVault: {\n    totalShares: null,\n    pricePerFullShare: null,\n    totalCakeInVault: null,\n    estimatedCakeBountyReward: null,\n    totalPendingCakeHarvest: null,\n    fees: {\n      performanceFee: null,\n      callFee: null,\n      withdrawalFee: null,\n      withdrawalFeePeriod: null,\n    },\n    userData: {\n      isLoading: true,\n      userShares: null,\n      cakeAtLastUserAction: null,\n      lastDepositedTime: null,\n      lastUserActionTime: null,\n    },\n  },\n}\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = (currentBlock: number) => async (dispatch, getState) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStaking()\n\n  const prices = getTokenPricesFromFarm(getState().farms.data)\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    const isPoolEndBlockExceeded = currentBlock > 0 && blockLimit ? currentBlock > Number(blockLimit.endBlock) : false\n    const isPoolFinished = pool.isFinished || isPoolEndBlockExceeded\n\n    const stakingTokenAddress = pool.stakingToken.address ? pool.stakingToken.address.toLowerCase() : null\n    const stakingTokenPrice = stakingTokenAddress ? prices[stakingTokenAddress] : 0\n\n    const earningTokenAddress = pool.earningToken.address ? pool.earningToken.address.toLowerCase() : null\n    const earningTokenPrice = earningTokenAddress ? prices[earningTokenAddress] : 0\n    const apr = !isPoolFinished\n      ? getPoolApr(\n          stakingTokenPrice,\n          earningTokenPrice,\n          getBalanceNumber(new BigNumber(totalStaking.totalStaked), pool.stakingToken.decimals),\n          parseFloat(pool.tokenPerBlock),\n        )\n      : 0\n\n    return {\n      ...blockLimit,\n      ...totalStaking,\n      stakingTokenPrice,\n      earningTokenPrice,\n      apr,\n      isFinished: isPoolFinished,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsStakingLimitsAsync = () => async (dispatch, getState) => {\n  const poolsWithStakingLimit = getState()\n    .pools.data.filter(({ stakingLimit }) => stakingLimit !== null && stakingLimit !== undefined)\n    .map((pool) => pool.sousId)\n\n  const stakingLimits = await fetchPoolsStakingLimits(poolsWithStakingLimit)\n\n  const stakingLimitData = poolsConfig.map((pool) => {\n    if (poolsWithStakingLimit.includes(pool.sousId)) {\n      return { sousId: pool.sousId }\n    }\n    const stakingLimit = stakingLimits[pool.sousId] || BIG_ZERO\n    return {\n      sousId: pool.sousId,\n      stakingLimit: stakingLimit.toJSON(),\n    }\n  })\n\n  dispatch(setPoolsPublicData(stakingLimitData))\n}\n\nexport const fetchPoolsUserDataAsync =\n  (account: string): AppThunk =>\n  async (dispatch) => {\n    const allowances = await fetchPoolsAllowance(account)\n    const stakingTokenBalances = await fetchUserBalances(account)\n    const stakedBalances = await fetchUserStakeBalances(account)\n    const pendingRewards = await fetchUserPendingRewards(account)\n\n    const userData = poolsConfig.map((pool) => ({\n      sousId: pool.sousId,\n      allowance: allowances[pool.sousId],\n      stakingTokenBalance: stakingTokenBalances[pool.sousId],\n      stakedBalance: stakedBalances[pool.sousId],\n      pendingReward: pendingRewards[pool.sousId],\n    }))\n\n    dispatch(setPoolsUserData(userData))\n  }\n\nexport const updateUserAllowance =\n  (sousId: number, account: string): AppThunk =>\n  async (dispatch) => {\n    const allowances = await fetchPoolsAllowance(account)\n    dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n  }\n\nexport const updateUserBalance =\n  (sousId: number, account: string): AppThunk =>\n  async (dispatch) => {\n    const tokenBalances = await fetchUserBalances(account)\n    dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n  }\n\nexport const updateUserStakedBalance =\n  (sousId: number, account: string): AppThunk =>\n  async (dispatch) => {\n    const stakedBalances = await fetchUserStakeBalances(account)\n    dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n  }\n\nexport const updateUserPendingReward =\n  (sousId: number, account: string): AppThunk =>\n  async (dispatch) => {\n    const pendingRewards = await fetchUserPendingRewards(account)\n    dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n  }\n\nexport const fetchCakeVaultPublicData = createAsyncThunk<CakeVault>('cakeVault/fetchPublicData', async () => {\n  const publicVaultInfo = await fetchPublicVaultData()\n  return publicVaultInfo\n})\n\nexport const fetchCakeVaultFees = createAsyncThunk<VaultFees>('cakeVault/fetchFees', async () => {\n  const vaultFees = await fetchVaultFees()\n  return vaultFees\n})\n\nexport const fetchCakeVaultUserData = createAsyncThunk<VaultUser, { account: string }>(\n  'cakeVault/fetchUser',\n  async ({ account }) => {\n    const userData = await fetchVaultUser(account)\n    return userData\n  },\n)\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: SerializedPool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n      state.userDataLoaded = true\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n\n      if (index >= 0) {\n        state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    // Vault public data that updates frequently\n    builder.addCase(fetchCakeVaultPublicData.fulfilled, (state, action: PayloadAction<CakeVault>) => {\n      state.cakeVault = { ...state.cakeVault, ...action.payload }\n    })\n    // Vault fees\n    builder.addCase(fetchCakeVaultFees.fulfilled, (state, action: PayloadAction<VaultFees>) => {\n      const fees = action.payload\n      state.cakeVault = { ...state.cakeVault, fees }\n    })\n    // Vault user data\n    builder.addCase(fetchCakeVaultUserData.fulfilled, (state, action: PayloadAction<VaultUser>) => {\n      const userData = action.payload\n      userData.isLoading = false\n      state.cakeVault = { ...state.cakeVault, userData }\n    })\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\nexport default PoolsSlice.reducer\n"]},"metadata":{},"sourceType":"module"}