{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config';\nimport getGasPrice from 'utils/getGasPrice';\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT\n};\nexport const stakeFarm = async (masterChefContract, pid, amount) => {\n  const gasPrice = getGasPrice();\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString();\n\n  if (pid === 0) {\n    const tx = await masterChefContract.enterStaking(value, { ...options,\n      gasPrice\n    });\n    const receipt = await tx.wait();\n    return receipt.status;\n  }\n\n  const tx = await masterChefContract.deposit(pid, value, { ...options,\n    gasPrice\n  });\n  const receipt = await tx.wait();\n  return receipt.status;\n};\nexport const unstakeFarm = async (masterChefContract, pid, amount) => {\n  const gasPrice = getGasPrice();\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString();\n\n  if (pid === 0) {\n    const tx = await masterChefContract.leaveStaking(value, { ...options,\n      gasPrice\n    });\n    const receipt = await tx.wait();\n    return receipt.status;\n  }\n\n  const tx = await masterChefContract.withdraw(pid, value, { ...options,\n    gasPrice\n  });\n  const receipt = await tx.wait();\n  return receipt.status;\n};\nexport const harvestFarm = async (masterChefContract, pid) => {\n  const gasPrice = getGasPrice();\n\n  if (pid === 0) {\n    const tx = await masterChefContract.leaveStaking('0', { ...options,\n      gasPrice\n    });\n    const receipt = await tx.wait();\n    return receipt.status;\n  }\n\n  const tx = await masterChefContract.deposit(pid, '0', { ...options,\n    gasPrice\n  });\n  const receipt = await tx.wait();\n  return receipt.status;\n};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/utils/calls/farms.ts"],"names":["BigNumber","DEFAULT_GAS_LIMIT","DEFAULT_TOKEN_DECIMAL","getGasPrice","options","gasLimit","stakeFarm","masterChefContract","pid","amount","gasPrice","value","times","toString","tx","enterStaking","receipt","wait","status","deposit","unstakeFarm","leaveStaking","withdraw","harvestFarm"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,iBAAT,EAA4BC,qBAA5B,QAAyD,QAAzD;AACA,OAAOC,WAAP,MAAwB,mBAAxB;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,QAAQ,EAAEJ;AADI,CAAhB;AAIA,OAAO,MAAMK,SAAS,GAAG,OAAOC,kBAAP,EAA2BC,GAA3B,EAAgCC,MAAhC,KAA2C;AAClE,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,KAAK,GAAG,IAAIX,SAAJ,CAAcS,MAAd,EAAsBG,KAAtB,CAA4BV,qBAA5B,EAAmDW,QAAnD,EAAd;;AACA,MAAIL,GAAG,KAAK,CAAZ,EAAe;AACb,UAAMM,EAAE,GAAG,MAAMP,kBAAkB,CAACQ,YAAnB,CAAgCJ,KAAhC,EAAuC,EAAE,GAAGP,OAAL;AAAcM,MAAAA;AAAd,KAAvC,CAAjB;AACA,UAAMM,OAAO,GAAG,MAAMF,EAAE,CAACG,IAAH,EAAtB;AACA,WAAOD,OAAO,CAACE,MAAf;AACD;;AAED,QAAMJ,EAAE,GAAG,MAAMP,kBAAkB,CAACY,OAAnB,CAA2BX,GAA3B,EAAgCG,KAAhC,EAAuC,EAAE,GAAGP,OAAL;AAAcM,IAAAA;AAAd,GAAvC,CAAjB;AACA,QAAMM,OAAO,GAAG,MAAMF,EAAE,CAACG,IAAH,EAAtB;AACA,SAAOD,OAAO,CAACE,MAAf;AACD,CAZM;AAcP,OAAO,MAAME,WAAW,GAAG,OAAOb,kBAAP,EAA2BC,GAA3B,EAAgCC,MAAhC,KAA2C;AACpE,QAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,KAAK,GAAG,IAAIX,SAAJ,CAAcS,MAAd,EAAsBG,KAAtB,CAA4BV,qBAA5B,EAAmDW,QAAnD,EAAd;;AACA,MAAIL,GAAG,KAAK,CAAZ,EAAe;AACb,UAAMM,EAAE,GAAG,MAAMP,kBAAkB,CAACc,YAAnB,CAAgCV,KAAhC,EAAuC,EAAE,GAAGP,OAAL;AAAcM,MAAAA;AAAd,KAAvC,CAAjB;AACA,UAAMM,OAAO,GAAG,MAAMF,EAAE,CAACG,IAAH,EAAtB;AACA,WAAOD,OAAO,CAACE,MAAf;AACD;;AAED,QAAMJ,EAAE,GAAG,MAAMP,kBAAkB,CAACe,QAAnB,CAA4Bd,GAA5B,EAAiCG,KAAjC,EAAwC,EAAE,GAAGP,OAAL;AAAcM,IAAAA;AAAd,GAAxC,CAAjB;AACA,QAAMM,OAAO,GAAG,MAAMF,EAAE,CAACG,IAAH,EAAtB;AACA,SAAOD,OAAO,CAACE,MAAf;AACD,CAZM;AAcP,OAAO,MAAMK,WAAW,GAAG,OAAOhB,kBAAP,EAA2BC,GAA3B,KAAmC;AAC5D,QAAME,QAAQ,GAAGP,WAAW,EAA5B;;AACA,MAAIK,GAAG,KAAK,CAAZ,EAAe;AACb,UAAMM,EAAE,GAAG,MAAMP,kBAAkB,CAACc,YAAnB,CAAgC,GAAhC,EAAqC,EAAE,GAAGjB,OAAL;AAAcM,MAAAA;AAAd,KAArC,CAAjB;AACA,UAAMM,OAAO,GAAG,MAAMF,EAAE,CAACG,IAAH,EAAtB;AACA,WAAOD,OAAO,CAACE,MAAf;AACD;;AAED,QAAMJ,EAAE,GAAG,MAAMP,kBAAkB,CAACY,OAAnB,CAA2BX,GAA3B,EAAgC,GAAhC,EAAqC,EAAE,GAAGJ,OAAL;AAAcM,IAAAA;AAAd,GAArC,CAAjB;AACA,QAAMM,OAAO,GAAG,MAAMF,EAAE,CAACG,IAAH,EAAtB;AACA,SAAOD,OAAO,CAACE,MAAf;AACD,CAXM","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport getGasPrice from 'utils/getGasPrice'\n\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT,\n}\n\nexport const stakeFarm = async (masterChefContract, pid, amount) => {\n  const gasPrice = getGasPrice()\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n  if (pid === 0) {\n    const tx = await masterChefContract.enterStaking(value, { ...options, gasPrice })\n    const receipt = await tx.wait()\n    return receipt.status\n  }\n\n  const tx = await masterChefContract.deposit(pid, value, { ...options, gasPrice })\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const unstakeFarm = async (masterChefContract, pid, amount) => {\n  const gasPrice = getGasPrice()\n  const value = new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\n  if (pid === 0) {\n    const tx = await masterChefContract.leaveStaking(value, { ...options, gasPrice })\n    const receipt = await tx.wait()\n    return receipt.status\n  }\n\n  const tx = await masterChefContract.withdraw(pid, value, { ...options, gasPrice })\n  const receipt = await tx.wait()\n  return receipt.status\n}\n\nexport const harvestFarm = async (masterChefContract, pid) => {\n  const gasPrice = getGasPrice()\n  if (pid === 0) {\n    const tx = await masterChefContract.leaveStaking('0', { ...options, gasPrice })\n    const receipt = await tx.wait()\n    return receipt.status\n  }\n\n  const tx = await masterChefContract.deposit(pid, '0', { ...options, gasPrice })\n  const receipt = await tx.wait()\n  return receipt.status\n}\n"]},"metadata":{},"sourceType":"module"}