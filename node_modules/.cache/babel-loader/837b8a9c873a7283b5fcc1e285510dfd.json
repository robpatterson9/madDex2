{"ast":null,"code":"import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _templateObject;import{useState,useEffect}from'react';import{request,gql}from'graphql-request';import{INFO_CLIENT}from'config/constants/endpoints';import{TOKEN_BLACKLIST}from'config/constants/info';import{getDeltaTimestamps}from'views/Info/utils/infoQueryHelpers';/**\n * Initial pools to display on the home page\n */var fetchTopPools=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(timestamp24hAgo){var query,data;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;query=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n      query topPools($blacklist: [String!], $timestamp24hAgo: Int) {\\n        pairDayDatas(\\n          first: 30\\n          where: { dailyTxns_gt: 300, token0_not_in: $blacklist, token1_not_in: $blacklist, date_gt: $timestamp24hAgo }\\n          orderBy: dailyVolumeUSD\\n          orderDirection: desc\\n        ) {\\n          id\\n        }\\n      }\\n    \"])));_context.next=4;return request(INFO_CLIENT,query,{blacklist:TOKEN_BLACKLIST,timestamp24hAgo:timestamp24hAgo});case 4:data=_context.sent;return _context.abrupt(\"return\",data.pairDayDatas.map(function(p){return p.id.split('-')[0];}));case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);console.error('Failed to fetch top pools',_context.t0);return _context.abrupt(\"return\",[]);case 12:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));return function fetchTopPools(_x){return _ref.apply(this,arguments);};}();/**\n * Fetch top addresses by volume\n */var useTopPoolAddresses=function useTopPoolAddresses(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),topPoolAddresses=_useState2[0],setTopPoolAddresse=_useState2[1];var _getDeltaTimestamps=getDeltaTimestamps(),_getDeltaTimestamps2=_slicedToArray(_getDeltaTimestamps,1),timestamp24hAgo=_getDeltaTimestamps2[0];useEffect(function(){var fetch=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var addresses;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return fetchTopPools(timestamp24hAgo);case 2:addresses=_context2.sent;setTopPoolAddresse(addresses);case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function fetch(){return _ref2.apply(this,arguments);};}();if(topPoolAddresses.length===0){fetch();}},[topPoolAddresses,timestamp24hAgo]);return topPoolAddresses;};export default useTopPoolAddresses;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/queries/pools/topPools.ts"],"names":["useState","useEffect","request","gql","INFO_CLIENT","TOKEN_BLACKLIST","getDeltaTimestamps","fetchTopPools","timestamp24hAgo","query","blacklist","data","pairDayDatas","map","p","id","split","console","error","useTopPoolAddresses","topPoolAddresses","setTopPoolAddresse","fetch","addresses","length"],"mappings":"ioBAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,OAASC,OAAT,CAAkBC,GAAlB,KAA6B,iBAA7B,CACA,OAASC,WAAT,KAA4B,4BAA5B,CACA,OAASC,eAAT,KAAgC,uBAAhC,CACA,OAASC,kBAAT,KAAmC,mCAAnC,CAQA;AACA;AACA,GACA,GAAMC,CAAAA,aAAa,0FAAG,iBAAOC,eAAP,iJAEZC,KAFY,CAEJN,GAFI,2bAcCD,CAAAA,OAAO,CAAmBE,WAAnB,CAAgCK,KAAhC,CAAuC,CAAEC,SAAS,CAAEL,eAAb,CAA8BG,eAAe,CAAfA,eAA9B,CAAvC,CAdR,QAcZG,IAdY,+CAgBXA,IAAI,CAACC,YAAL,CAAkBC,GAAlB,CAAsB,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACC,EAAF,CAAKC,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAP,EAAtB,CAhBW,0DAkBlBC,OAAO,CAACC,KAAR,CAAc,2BAAd,cAlBkB,gCAmBX,EAnBW,sEAAH,kBAAbX,CAAAA,aAAa,4CAAnB,CAuBA;AACA;AACA,GACA,GAAMY,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,EAAgB,CAC1C,cAA+CnB,QAAQ,CAAC,EAAD,CAAvD,wCAAOoB,gBAAP,eAAyBC,kBAAzB,eACA,wBAA0Bf,kBAAkB,EAA5C,4DAAOE,eAAP,yBAEAP,SAAS,CAAC,UAAM,CACd,GAAMqB,CAAAA,KAAK,2FAAG,6KACYf,CAAAA,aAAa,CAACC,eAAD,CADzB,QACNe,SADM,gBAEZF,kBAAkB,CAACE,SAAD,CAAlB,CAFY,wDAAH,kBAALD,CAAAA,KAAK,2CAAX,CAIA,GAAIF,gBAAgB,CAACI,MAAjB,GAA4B,CAAhC,CAAmC,CACjCF,KAAK,GACN,CACF,CARQ,CAQN,CAACF,gBAAD,CAAmBZ,eAAnB,CARM,CAAT,CAUA,MAAOY,CAAAA,gBAAP,CACD,CAfD,CAiBA,cAAeD,CAAAA,mBAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { TOKEN_BLACKLIST } from 'config/constants/info'\nimport { getDeltaTimestamps } from 'views/Info/utils/infoQueryHelpers'\n\ninterface TopPoolsResponse {\n  pairDayDatas: {\n    id: string\n  }[]\n}\n\n/**\n * Initial pools to display on the home page\n */\nconst fetchTopPools = async (timestamp24hAgo: number): Promise<string[]> => {\n  try {\n    const query = gql`\n      query topPools($blacklist: [String!], $timestamp24hAgo: Int) {\n        pairDayDatas(\n          first: 30\n          where: { dailyTxns_gt: 300, token0_not_in: $blacklist, token1_not_in: $blacklist, date_gt: $timestamp24hAgo }\n          orderBy: dailyVolumeUSD\n          orderDirection: desc\n        ) {\n          id\n        }\n      }\n    `\n    const data = await request<TopPoolsResponse>(INFO_CLIENT, query, { blacklist: TOKEN_BLACKLIST, timestamp24hAgo })\n    // pairDayDatas id has compound id \"0xPOOLADDRESS-NUMBERS\", extracting pool address with .split('-')\n    return data.pairDayDatas.map((p) => p.id.split('-')[0])\n  } catch (error) {\n    console.error('Failed to fetch top pools', error)\n    return []\n  }\n}\n\n/**\n * Fetch top addresses by volume\n */\nconst useTopPoolAddresses = (): string[] => {\n  const [topPoolAddresses, setTopPoolAddresse] = useState([])\n  const [timestamp24hAgo] = getDeltaTimestamps()\n\n  useEffect(() => {\n    const fetch = async () => {\n      const addresses = await fetchTopPools(timestamp24hAgo)\n      setTopPoolAddresse(addresses)\n    }\n    if (topPoolAddresses.length === 0) {\n      fetch()\n    }\n  }, [topPoolAddresses, timestamp24hAgo])\n\n  return topPoolAddresses\n}\n\nexport default useTopPoolAddresses\n"]},"metadata":{},"sourceType":"module"}