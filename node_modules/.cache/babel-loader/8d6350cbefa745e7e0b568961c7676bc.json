{"ast":null,"code":"import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{useEffect,useRef}from'react';import{useWeb3React}from'@web3-react/core';import{useAppDispatch}from'state';import{useGetCurrentEpoch,useGetEarliestEpoch,useGetPredictionsStatus}from'state/predictions/hooks';import{fetchClaimableStatuses,fetchLedgerData,fetchMarketData,fetchRounds}from'state/predictions';import{PredictionStatus}from'state/types';import{range}from'lodash';var POLL_TIME_IN_SECONDS=10;var usePollPredictions=function usePollPredictions(){var timer=useRef(null);var dispatch=useAppDispatch();var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var currentEpoch=useGetCurrentEpoch();var earliestEpoch=useGetEarliestEpoch();var status=useGetPredictionsStatus();useEffect(function(){// Clear old timer\nif(timer.current){clearInterval(timer.current);}if(status!==PredictionStatus.INITIAL){timer.current=setInterval(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var liveCurrentAndRecent,epochRange;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:liveCurrentAndRecent=[currentEpoch,currentEpoch-1,currentEpoch-2];dispatch(fetchRounds(liveCurrentAndRecent));dispatch(fetchMarketData());if(account){epochRange=range(earliestEpoch,currentEpoch+1);dispatch(fetchLedgerData({account:account,epochs:epochRange}));dispatch(fetchClaimableStatuses({account:account,epochs:epochRange}));}case 4:case\"end\":return _context.stop();}}},_callee);})),POLL_TIME_IN_SECONDS*1000);}return function(){if(timer.current){clearInterval(timer.current);}};},[timer,account,status,currentEpoch,earliestEpoch,dispatch]);};export default usePollPredictions;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Predictions/hooks/usePollPredictions.ts"],"names":["useEffect","useRef","useWeb3React","useAppDispatch","useGetCurrentEpoch","useGetEarliestEpoch","useGetPredictionsStatus","fetchClaimableStatuses","fetchLedgerData","fetchMarketData","fetchRounds","PredictionStatus","range","POLL_TIME_IN_SECONDS","usePollPredictions","timer","dispatch","account","currentEpoch","earliestEpoch","status","current","clearInterval","INITIAL","setInterval","liveCurrentAndRecent","epochRange","epochs"],"mappings":"6SAAA,OAASA,SAAT,CAAoBC,MAApB,KAAkC,OAAlC,CACA,OAASC,YAAT,KAA6B,kBAA7B,CACA,OAASC,cAAT,KAA+B,OAA/B,CACA,OAASC,kBAAT,CAA6BC,mBAA7B,CAAkDC,uBAAlD,KAAiF,yBAAjF,CACA,OAASC,sBAAT,CAAiCC,eAAjC,CAAkDC,eAAlD,CAAmEC,WAAnE,KAAsF,mBAAtF,CACA,OAASC,gBAAT,KAAiC,aAAjC,CACA,OAASC,KAAT,KAAsB,QAAtB,CAEA,GAAMC,CAAAA,oBAAoB,CAAG,EAA7B,CAEA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,EAAM,CAC/B,GAAMC,CAAAA,KAAK,CAAGd,MAAM,CAAiB,IAAjB,CAApB,CACA,GAAMe,CAAAA,QAAQ,CAAGb,cAAc,EAA/B,CACA,kBAAoBD,YAAY,EAAhC,CAAQe,OAAR,eAAQA,OAAR,CACA,GAAMC,CAAAA,YAAY,CAAGd,kBAAkB,EAAvC,CACA,GAAMe,CAAAA,aAAa,CAAGd,mBAAmB,EAAzC,CACA,GAAMe,CAAAA,MAAM,CAAGd,uBAAuB,EAAtC,CAEAN,SAAS,CAAC,UAAM,CACd;AACA,GAAIe,KAAK,CAACM,OAAV,CAAmB,CACjBC,aAAa,CAACP,KAAK,CAACM,OAAP,CAAb,CACD,CAED,GAAID,MAAM,GAAKT,gBAAgB,CAACY,OAAhC,CAAyC,CACvCR,KAAK,CAACM,OAAN,CAAgBG,WAAW,sEAAC,uKACpBC,oBADoB,CACG,CAACP,YAAD,CAAeA,YAAY,CAAG,CAA9B,CAAiCA,YAAY,CAAG,CAAhD,CADH,CAG1BF,QAAQ,CAACN,WAAW,CAACe,oBAAD,CAAZ,CAAR,CACAT,QAAQ,CAACP,eAAe,EAAhB,CAAR,CAEA,GAAIQ,OAAJ,CAAa,CACLS,UADK,CACQd,KAAK,CAACO,aAAD,CAAgBD,YAAY,CAAG,CAA/B,CADb,CAEXF,QAAQ,CAACR,eAAe,CAAC,CAAES,OAAO,CAAPA,OAAF,CAAWU,MAAM,CAAED,UAAnB,CAAD,CAAhB,CAAR,CACAV,QAAQ,CAACT,sBAAsB,CAAC,CAAEU,OAAO,CAAPA,OAAF,CAAWU,MAAM,CAAED,UAAnB,CAAD,CAAvB,CAAR,CACD,CAVyB,sDAAD,GAWxBb,oBAAoB,CAAG,IAXC,CAA3B,CAYD,CAED,MAAO,WAAM,CACX,GAAIE,KAAK,CAACM,OAAV,CAAmB,CACjBC,aAAa,CAACP,KAAK,CAACM,OAAP,CAAb,CACD,CACF,CAJD,CAKD,CA1BQ,CA0BN,CAACN,KAAD,CAAQE,OAAR,CAAiBG,MAAjB,CAAyBF,YAAzB,CAAuCC,aAAvC,CAAsDH,QAAtD,CA1BM,CAAT,CA2BD,CAnCD,CAqCA,cAAeF,CAAAA,kBAAf","sourcesContent":["import { useEffect, useRef } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useAppDispatch } from 'state'\nimport { useGetCurrentEpoch, useGetEarliestEpoch, useGetPredictionsStatus } from 'state/predictions/hooks'\nimport { fetchClaimableStatuses, fetchLedgerData, fetchMarketData, fetchRounds } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { range } from 'lodash'\n\nconst POLL_TIME_IN_SECONDS = 10\n\nconst usePollPredictions = () => {\n  const timer = useRef<NodeJS.Timeout>(null)\n  const dispatch = useAppDispatch()\n  const { account } = useWeb3React()\n  const currentEpoch = useGetCurrentEpoch()\n  const earliestEpoch = useGetEarliestEpoch()\n  const status = useGetPredictionsStatus()\n\n  useEffect(() => {\n    // Clear old timer\n    if (timer.current) {\n      clearInterval(timer.current)\n    }\n\n    if (status !== PredictionStatus.INITIAL) {\n      timer.current = setInterval(async () => {\n        const liveCurrentAndRecent = [currentEpoch, currentEpoch - 1, currentEpoch - 2]\n\n        dispatch(fetchRounds(liveCurrentAndRecent))\n        dispatch(fetchMarketData())\n\n        if (account) {\n          const epochRange = range(earliestEpoch, currentEpoch + 1)\n          dispatch(fetchLedgerData({ account, epochs: epochRange }))\n          dispatch(fetchClaimableStatuses({ account, epochs: epochRange }))\n        }\n      }, POLL_TIME_IN_SECONDS * 1000)\n    }\n\n    return () => {\n      if (timer.current) {\n        clearInterval(timer.current)\n      }\n    }\n  }, [timer, account, status, currentEpoch, earliestEpoch, dispatch])\n}\n\nexport default usePollPredictions\n"]},"metadata":{},"sourceType":"module"}