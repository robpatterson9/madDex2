{"ast":null,"code":"import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";var _excluded=[\"value\"];import React from'react';import{Text}from'@pancakeswap/uikit';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Percent=function Percent(_ref){var value=_ref.value,rest=_objectWithoutProperties(_ref,_excluded);if(!value||Number.isNaN(value)){return/*#__PURE__*/_jsx(Text,_objectSpread(_objectSpread({},rest),{},{children:\"-\"}));}var isNegative=value<0;return/*#__PURE__*/_jsxs(Text,_objectSpread(_objectSpread({},rest),{},{color:isNegative?'failure':'success',children:[isNegative?'↓':'↑',Math.abs(value).toFixed(2),\"%\"]}));};export default Percent;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Info/components/Percent/index.tsx"],"names":["React","Text","Percent","value","rest","Number","isNaN","isNegative","Math","abs","toFixed"],"mappings":"2VAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,KAAgC,oBAAhC,C,wFAMA,GAAMC,CAAAA,OAA+B,CAAG,QAAlCA,CAAAA,OAAkC,MAAwB,IAArBC,CAAAA,KAAqB,MAArBA,KAAqB,CAAXC,IAAW,0CAC9D,GAAI,CAACD,KAAD,EAAUE,MAAM,CAACC,KAAP,CAAaH,KAAb,CAAd,CAAmC,CACjC,mBAAO,KAAC,IAAD,gCAAUC,IAAV,qBAAP,CACD,CAED,GAAMG,CAAAA,UAAU,CAAGJ,KAAK,CAAG,CAA3B,CAEA,mBACE,MAAC,IAAD,gCAAUC,IAAV,MAAgB,KAAK,CAAEG,UAAU,CAAG,SAAH,CAAe,SAAhD,WACGA,UAAU,CAAG,GAAH,CAAS,GADtB,CAEGC,IAAI,CAACC,GAAL,CAASN,KAAT,EAAgBO,OAAhB,CAAwB,CAAxB,CAFH,QADF,CAMD,CAbD,CAeA,cAAeR,CAAAA,OAAf","sourcesContent":["import React from 'react'\nimport { Text, TextProps } from '@pancakeswap/uikit'\n\nexport interface PercentProps extends TextProps {\n  value: number | undefined\n}\n\nconst Percent: React.FC<PercentProps> = ({ value, ...rest }) => {\n  if (!value || Number.isNaN(value)) {\n    return <Text {...rest}>-</Text>\n  }\n\n  const isNegative = value < 0\n\n  return (\n    <Text {...rest} color={isNegative ? 'failure' : 'success'}>\n      {isNegative ? '↓' : '↑'}\n      {Math.abs(value).toFixed(2)}%\n    </Text>\n  )\n}\n\nexport default Percent\n"]},"metadata":{},"sourceType":"module"}