{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { ChainId, currencyEquals, JSBI, Price } from '@pancakeswap/sdk';\nimport { useMemo } from 'react';\nimport useActiveWeb3React from 'hooks/useActiveWeb3React';\nimport tokens, { mainnetTokens } from 'config/constants/tokens';\nimport { PairState, usePairs } from './usePairs';\nimport { wrappedCurrency } from '../utils/wrappedCurrency';\nconst BUSD_MAINNET = mainnetTokens.busd;\nconst {\n  wbnb: WBNB\n} = tokens;\n/**\n * Returns the price in BUSD of the input currency\n * @param currency currency to compute the BUSD price of\n */\n\nexport default function useBUSDPrice(currency) {\n  _s();\n\n  const {\n    chainId\n  } = useActiveWeb3React();\n  const wrapped = wrappedCurrency(currency, chainId);\n  const tokenPairs = useMemo(() => [[chainId && wrapped && currencyEquals(WBNB, wrapped) ? undefined : currency, chainId ? WBNB : undefined], [(wrapped === null || wrapped === void 0 ? void 0 : wrapped.equals(BUSD_MAINNET)) ? undefined : wrapped, chainId === ChainId.MAINNET ? BUSD_MAINNET : undefined], [chainId ? WBNB : undefined, chainId === ChainId.MAINNET ? BUSD_MAINNET : undefined]], [chainId, currency, wrapped]);\n  const [[ethPairState, ethPair], [busdPairState, busdPair], [busdEthPairState, busdEthPair]] = usePairs(tokenPairs);\n  return useMemo(() => {\n    if (!currency || !wrapped || !chainId) {\n      return undefined;\n    } // handle weth/eth\n\n\n    if (wrapped.equals(WBNB)) {\n      if (busdPair) {\n        const price = busdPair.priceOf(WBNB);\n        return new Price(currency, BUSD_MAINNET, price.denominator, price.numerator);\n      }\n\n      return undefined;\n    } // handle busd\n\n\n    if (wrapped.equals(BUSD_MAINNET)) {\n      return new Price(BUSD_MAINNET, BUSD_MAINNET, '1', '1');\n    }\n\n    const ethPairETHAmount = ethPair === null || ethPair === void 0 ? void 0 : ethPair.reserveOf(WBNB);\n    const ethPairETHBUSDValue = ethPairETHAmount && busdEthPair ? busdEthPair.priceOf(WBNB).quote(ethPairETHAmount).raw : JSBI.BigInt(0); // all other tokens\n    // first try the busd pair\n\n    if (busdPairState === PairState.EXISTS && busdPair && busdPair.reserveOf(BUSD_MAINNET).greaterThan(ethPairETHBUSDValue)) {\n      const price = busdPair.priceOf(wrapped);\n      return new Price(currency, BUSD_MAINNET, price.denominator, price.numerator);\n    }\n\n    if (ethPairState === PairState.EXISTS && ethPair && busdEthPairState === PairState.EXISTS && busdEthPair) {\n      if (busdEthPair.reserveOf(BUSD_MAINNET).greaterThan('0') && ethPair.reserveOf(WBNB).greaterThan('0')) {\n        const ethBusdPrice = busdEthPair.priceOf(BUSD_MAINNET);\n        const currencyEthPrice = ethPair.priceOf(WBNB);\n        const busdPrice = ethBusdPrice.multiply(currencyEthPrice).invert();\n        return new Price(currency, BUSD_MAINNET, busdPrice.denominator, busdPrice.numerator);\n      }\n    }\n\n    return undefined;\n  }, [chainId, currency, ethPair, ethPairState, busdEthPair, busdEthPairState, busdPair, busdPairState, wrapped]);\n}\n\n_s(useBUSDPrice, \"Wn+Sj252hraJi9Spmk5baOcVmto=\", false, function () {\n  return [useActiveWeb3React, usePairs];\n});\n\nexport const useCakeBusdPrice = () => {\n  _s2();\n\n  const cakeBusdPrice = useBUSDPrice(tokens.cake);\n  return cakeBusdPrice;\n};\n\n_s2(useCakeBusdPrice, \"/Vv3d+e0iAfNcQcJJ+Hh6Le5AYY=\", false, function () {\n  return [useBUSDPrice];\n});\n\nexport const useBNBBusdPrice = () => {\n  _s3();\n\n  const bnbBusdPrice = useBUSDPrice(tokens.wbnb);\n  return bnbBusdPrice;\n};\n\n_s3(useBNBBusdPrice, \"T1hOAXtjg4jLKWJ2lwcBi6z4J/8=\", false, function () {\n  return [useBUSDPrice];\n});","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/hooks/useBUSDPrice.ts"],"names":["ChainId","currencyEquals","JSBI","Price","useMemo","useActiveWeb3React","tokens","mainnetTokens","PairState","usePairs","wrappedCurrency","BUSD_MAINNET","busd","wbnb","WBNB","useBUSDPrice","currency","chainId","wrapped","tokenPairs","undefined","equals","MAINNET","ethPairState","ethPair","busdPairState","busdPair","busdEthPairState","busdEthPair","price","priceOf","denominator","numerator","ethPairETHAmount","reserveOf","ethPairETHBUSDValue","quote","raw","BigInt","EXISTS","greaterThan","ethBusdPrice","currencyEthPrice","busdPrice","multiply","invert","useCakeBusdPrice","cakeBusdPrice","cake","useBNBBusdPrice","bnbBusdPrice"],"mappings":"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","sourcesContent":["import { ChainId, Currency, currencyEquals, JSBI, Price } from '@pancakeswap/sdk'\nimport { useMemo } from 'react'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport tokens, { mainnetTokens } from 'config/constants/tokens'\nimport { PairState, usePairs } from './usePairs'\nimport { wrappedCurrency } from '../utils/wrappedCurrency'\n\nconst BUSD_MAINNET = mainnetTokens.busd\nconst { wbnb: WBNB } = tokens\n\n/**\n * Returns the price in BUSD of the input currency\n * @param currency currency to compute the BUSD price of\n */\nexport default function useBUSDPrice(currency?: Currency): Price | undefined {\n  const { chainId } = useActiveWeb3React()\n  const wrapped = wrappedCurrency(currency, chainId)\n  const tokenPairs: [Currency | undefined, Currency | undefined][] = useMemo(\n    () => [\n      [chainId && wrapped && currencyEquals(WBNB, wrapped) ? undefined : currency, chainId ? WBNB : undefined],\n      [wrapped?.equals(BUSD_MAINNET) ? undefined : wrapped, chainId === ChainId.MAINNET ? BUSD_MAINNET : undefined],\n      [chainId ? WBNB : undefined, chainId === ChainId.MAINNET ? BUSD_MAINNET : undefined],\n    ],\n    [chainId, currency, wrapped],\n  )\n  const [[ethPairState, ethPair], [busdPairState, busdPair], [busdEthPairState, busdEthPair]] = usePairs(tokenPairs)\n\n  return useMemo(() => {\n    if (!currency || !wrapped || !chainId) {\n      return undefined\n    }\n    // handle weth/eth\n    if (wrapped.equals(WBNB)) {\n      if (busdPair) {\n        const price = busdPair.priceOf(WBNB)\n        return new Price(currency, BUSD_MAINNET, price.denominator, price.numerator)\n      }\n      return undefined\n    }\n    // handle busd\n    if (wrapped.equals(BUSD_MAINNET)) {\n      return new Price(BUSD_MAINNET, BUSD_MAINNET, '1', '1')\n    }\n\n    const ethPairETHAmount = ethPair?.reserveOf(WBNB)\n    const ethPairETHBUSDValue: JSBI =\n      ethPairETHAmount && busdEthPair ? busdEthPair.priceOf(WBNB).quote(ethPairETHAmount).raw : JSBI.BigInt(0)\n\n    // all other tokens\n    // first try the busd pair\n    if (\n      busdPairState === PairState.EXISTS &&\n      busdPair &&\n      busdPair.reserveOf(BUSD_MAINNET).greaterThan(ethPairETHBUSDValue)\n    ) {\n      const price = busdPair.priceOf(wrapped)\n      return new Price(currency, BUSD_MAINNET, price.denominator, price.numerator)\n    }\n    if (ethPairState === PairState.EXISTS && ethPair && busdEthPairState === PairState.EXISTS && busdEthPair) {\n      if (busdEthPair.reserveOf(BUSD_MAINNET).greaterThan('0') && ethPair.reserveOf(WBNB).greaterThan('0')) {\n        const ethBusdPrice = busdEthPair.priceOf(BUSD_MAINNET)\n        const currencyEthPrice = ethPair.priceOf(WBNB)\n        const busdPrice = ethBusdPrice.multiply(currencyEthPrice).invert()\n        return new Price(currency, BUSD_MAINNET, busdPrice.denominator, busdPrice.numerator)\n      }\n    }\n\n    return undefined\n  }, [chainId, currency, ethPair, ethPairState, busdEthPair, busdEthPairState, busdPair, busdPairState, wrapped])\n}\n\nexport const useCakeBusdPrice = (): Price | undefined => {\n  const cakeBusdPrice = useBUSDPrice(tokens.cake)\n  return cakeBusdPrice\n}\n\nexport const useBNBBusdPrice = (): Price | undefined => {\n  const bnbBusdPrice = useBUSDPrice(tokens.wbnb)\n  return bnbBusdPrice\n}\n"]},"metadata":{},"sourceType":"module"}