{"ast":null,"code":"import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from'react';import isEqual from'lodash/isEqual';import{useFarmAuctionContract}from'hooks/useContract';import{getBidderInfo}from'config/constants/farmAuctions';import useLastUpdated from'hooks/useLastUpdated';import useRefresh from'hooks/useRefresh';import{AUCTION_BIDDERS_TO_FETCH}from'config';import{BIG_ZERO}from'utils/bigNumber';import{sortAuctionBidders,processAuctionData}from'../helpers';export var useCurrentFarmAuction=function useCurrentFarmAuction(account){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),currentAuction=_useState2[0],setCurrentAuction=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),bidders=_useState4[0],setBidders=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),connectedBidder=_useState6[0],setConnectedBidder=_useState6[1];// Used to force-refresh bidders after successful bid\nvar _useLastUpdated=useLastUpdated(),lastUpdated=_useLastUpdated.lastUpdated,setLastUpdated=_useLastUpdated.setLastUpdated;var _useRefresh=useRefresh(),fastRefresh=_useRefresh.fastRefresh;var farmAuctionContract=useFarmAuctionContract();// Get latest auction id and its data\nuseEffect(function(){var fetchCurrentAuction=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var auctionId,auctionData,processedAuctionData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return farmAuctionContract.currentAuctionId();case 3:auctionId=_context.sent;_context.next=6;return farmAuctionContract.auctions(auctionId);case 6:auctionData=_context.sent;_context.next=9;return processAuctionData(auctionId.toNumber(),auctionData);case 9:processedAuctionData=_context.sent;setCurrentAuction(processedAuctionData);_context.next=16;break;case 13:_context.prev=13;_context.t0=_context[\"catch\"](0);console.error('Failed to fetch current auction',_context.t0);case 16:case\"end\":return _context.stop();}}},_callee,null,[[0,13]]);}));return function fetchCurrentAuction(){return _ref.apply(this,arguments);};}();fetchCurrentAuction();},[farmAuctionContract,fastRefresh]);// Fetch bidders for current auction\nuseEffect(function(){var fetchBidders=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var _yield$farmAuctionCon,_yield$farmAuctionCon2,currentAuctionBidders,sortedBidders;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return farmAuctionContract.viewBidsPerAuction(currentAuction.id,0,AUCTION_BIDDERS_TO_FETCH);case 3:_yield$farmAuctionCon=_context2.sent;_yield$farmAuctionCon2=_slicedToArray(_yield$farmAuctionCon,1);currentAuctionBidders=_yield$farmAuctionCon2[0];sortedBidders=sortAuctionBidders(currentAuctionBidders,currentAuction);setBidders(sortedBidders);_context2.next=13;break;case 10:_context2.prev=10;_context2.t0=_context2[\"catch\"](0);console.error('Failed to fetch bidders',_context2.t0);case 13:case\"end\":return _context2.stop();}}},_callee2,null,[[0,10]]);}));return function fetchBidders(){return _ref2.apply(this,arguments);};}();if(currentAuction){fetchBidders();}},[currentAuction,farmAuctionContract,lastUpdated,fastRefresh]);// Check if connected wallet is whitelisted\nuseEffect(function(){var checkAccount=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var whitelistedStatus;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;_context3.next=3;return farmAuctionContract.whitelisted(account);case 3:whitelistedStatus=_context3.sent;setConnectedBidder({account:account,isWhitelisted:whitelistedStatus});_context3.next=10;break;case 7:_context3.prev=7;_context3.t0=_context3[\"catch\"](0);console.error('Failed to check if account is whitelisted',_context3.t0);case 10:case\"end\":return _context3.stop();}}},_callee3,null,[[0,7]]);}));return function checkAccount(){return _ref3.apply(this,arguments);};}();if(account&&(!connectedBidder||connectedBidder.account!==account)){checkAccount();}// Refresh UI if user logs out\nif(!account){setConnectedBidder(null);}},[account,connectedBidder,farmAuctionContract]);// Attach bidder data to connectedBidder object\nuseEffect(function(){var getBidderData=function getBidderData(){if(bidders&&bidders.length>0){var bidderData=bidders.find(function(bidder){return bidder.account===account;});if(bidderData){return bidderData;}}var bidderInfo=getBidderInfo(account);var defaultBidderData=_objectSpread({position:null,samePositionAsAbove:false,isTopPosition:false,amount:BIG_ZERO},bidderInfo);return defaultBidderData;};if(connectedBidder&&connectedBidder.isWhitelisted){var bidderData=getBidderData();if(!isEqual(bidderData,connectedBidder.bidderData)){setConnectedBidder({account:account,isWhitelisted:true,bidderData:bidderData});}}},[account,connectedBidder,bidders]);return{currentAuction:currentAuction,bidders:bidders,connectedBidder:connectedBidder,refreshBidders:setLastUpdated};};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/FarmAuction/hooks/useCurrentFarmAuction.ts"],"names":["useState","useEffect","isEqual","useFarmAuctionContract","getBidderInfo","useLastUpdated","useRefresh","AUCTION_BIDDERS_TO_FETCH","BIG_ZERO","sortAuctionBidders","processAuctionData","useCurrentFarmAuction","account","currentAuction","setCurrentAuction","bidders","setBidders","connectedBidder","setConnectedBidder","lastUpdated","setLastUpdated","fastRefresh","farmAuctionContract","fetchCurrentAuction","currentAuctionId","auctionId","auctions","auctionData","toNumber","processedAuctionData","console","error","fetchBidders","viewBidsPerAuction","id","currentAuctionBidders","sortedBidders","checkAccount","whitelisted","whitelistedStatus","isWhitelisted","getBidderData","length","bidderData","find","bidder","bidderInfo","defaultBidderData","position","samePositionAsAbove","isTopPosition","amount","refreshBidders"],"mappings":"4lBAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CACA,MAAOC,CAAAA,OAAP,KAAoB,gBAApB,CACA,OAASC,sBAAT,KAAuC,mBAAvC,CAEA,OAASC,aAAT,KAA8B,+BAA9B,CACA,MAAOC,CAAAA,cAAP,KAA2B,sBAA3B,CACA,MAAOC,CAAAA,UAAP,KAAuB,kBAAvB,CACA,OAASC,wBAAT,KAAyC,QAAzC,CACA,OAASC,QAAT,KAAyB,iBAAzB,CACA,OAASC,kBAAT,CAA6BC,kBAA7B,KAAuD,YAAvD,CAEA,MAAO,IAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACC,OAAD,CAAqB,CACxD,cAA4CZ,QAAQ,CAAiB,IAAjB,CAApD,wCAAOa,cAAP,eAAuBC,iBAAvB,eACA,eAA8Bd,QAAQ,CAAkB,IAAlB,CAAtC,yCAAOe,OAAP,eAAgBC,UAAhB,eACA,eAA8ChB,QAAQ,CAAyB,IAAzB,CAAtD,yCAAOiB,eAAP,eAAwBC,kBAAxB,eACA;AACA,oBAAwCb,cAAc,EAAtD,CAAQc,WAAR,iBAAQA,WAAR,CAAqBC,cAArB,iBAAqBA,cAArB,CAEA,gBAAwBd,UAAU,EAAlC,CAAQe,WAAR,aAAQA,WAAR,CAEA,GAAMC,CAAAA,mBAAmB,CAAGnB,sBAAsB,EAAlD,CAEA;AACAF,SAAS,CAAC,UAAM,CACd,GAAMsB,CAAAA,mBAAmB,0FAAG,wNAEAD,CAAAA,mBAAmB,CAACE,gBAApB,EAFA,QAElBC,SAFkB,qCAGEH,CAAAA,mBAAmB,CAACI,QAApB,CAA6BD,SAA7B,CAHF,QAGlBE,WAHkB,qCAIWjB,CAAAA,kBAAkB,CAACe,SAAS,CAACG,QAAV,EAAD,CAAuBD,WAAvB,CAJ7B,QAIlBE,oBAJkB,eAKxBf,iBAAiB,CAACe,oBAAD,CAAjB,CALwB,iFAOxBC,OAAO,CAACC,KAAR,CAAc,iCAAd,cAPwB,qEAAH,kBAAnBR,CAAAA,mBAAmB,0CAAzB,CAUAA,mBAAmB,GACpB,CAZQ,CAYN,CAACD,mBAAD,CAAsBD,WAAtB,CAZM,CAAT,CAcA;AACApB,SAAS,CAAC,UAAM,CACd,GAAM+B,CAAAA,YAAY,2FAAG,qQAEqBV,CAAAA,mBAAmB,CAACW,kBAApB,CACpCpB,cAAc,CAACqB,EADqB,CAEpC,CAFoC,CAGpC3B,wBAHoC,CAFrB,4GAEV4B,qBAFU,2BAOXC,aAPW,CAOK3B,kBAAkB,CAAC0B,qBAAD,CAAwBtB,cAAxB,CAPvB,CAQjBG,UAAU,CAACoB,aAAD,CAAV,CARiB,qFAUjBN,OAAO,CAACC,KAAR,CAAc,yBAAd,eAViB,uEAAH,kBAAZC,CAAAA,YAAY,2CAAlB,CAaA,GAAInB,cAAJ,CAAoB,CAClBmB,YAAY,GACb,CACF,CAjBQ,CAiBN,CAACnB,cAAD,CAAiBS,mBAAjB,CAAsCH,WAAtC,CAAmDE,WAAnD,CAjBM,CAAT,CAmBA;AACApB,SAAS,CAAC,UAAM,CACd,GAAMoC,CAAAA,YAAY,2FAAG,sMAEef,CAAAA,mBAAmB,CAACgB,WAApB,CAAgC1B,OAAhC,CAFf,QAEX2B,iBAFW,gBAGjBrB,kBAAkB,CAAC,CACjBN,OAAO,CAAPA,OADiB,CAEjB4B,aAAa,CAAED,iBAFE,CAAD,CAAlB,CAHiB,mFAQjBT,OAAO,CAACC,KAAR,CAAc,2CAAd,eARiB,sEAAH,kBAAZM,CAAAA,YAAY,2CAAlB,CAWA,GAAIzB,OAAO,GAAK,CAACK,eAAD,EAAoBA,eAAe,CAACL,OAAhB,GAA4BA,OAArD,CAAX,CAA0E,CACxEyB,YAAY,GACb,CACD;AACA,GAAI,CAACzB,OAAL,CAAc,CACZM,kBAAkB,CAAC,IAAD,CAAlB,CACD,CACF,CAnBQ,CAmBN,CAACN,OAAD,CAAUK,eAAV,CAA2BK,mBAA3B,CAnBM,CAAT,CAqBA;AACArB,SAAS,CAAC,UAAM,CACd,GAAMwC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B,GAAI1B,OAAO,EAAIA,OAAO,CAAC2B,MAAR,CAAiB,CAAhC,CAAmC,CACjC,GAAMC,CAAAA,UAAU,CAAG5B,OAAO,CAAC6B,IAAR,CAAa,SAACC,MAAD,QAAYA,CAAAA,MAAM,CAACjC,OAAP,GAAmBA,OAA/B,EAAb,CAAnB,CACA,GAAI+B,UAAJ,CAAgB,CACd,MAAOA,CAAAA,UAAP,CACD,CACF,CACD,GAAMG,CAAAA,UAAU,CAAG1C,aAAa,CAACQ,OAAD,CAAhC,CACA,GAAMmC,CAAAA,iBAAiB,gBACrBC,QAAQ,CAAE,IADW,CAErBC,mBAAmB,CAAE,KAFA,CAGrBC,aAAa,CAAE,KAHM,CAIrBC,MAAM,CAAE3C,QAJa,EAKlBsC,UALkB,CAAvB,CAOA,MAAOC,CAAAA,iBAAP,CACD,CAhBD,CAiBA,GAAI9B,eAAe,EAAIA,eAAe,CAACuB,aAAvC,CAAsD,CACpD,GAAMG,CAAAA,UAAU,CAAGF,aAAa,EAAhC,CACA,GAAI,CAACvC,OAAO,CAACyC,UAAD,CAAa1B,eAAe,CAAC0B,UAA7B,CAAZ,CAAsD,CACpDzB,kBAAkB,CAAC,CACjBN,OAAO,CAAPA,OADiB,CAEjB4B,aAAa,CAAE,IAFE,CAGjBG,UAAU,CAAVA,UAHiB,CAAD,CAAlB,CAKD,CACF,CACF,CA5BQ,CA4BN,CAAC/B,OAAD,CAAUK,eAAV,CAA2BF,OAA3B,CA5BM,CAAT,CA8BA,MAAO,CACLF,cAAc,CAAdA,cADK,CAELE,OAAO,CAAPA,OAFK,CAGLE,eAAe,CAAfA,eAHK,CAILmC,cAAc,CAAEhC,cAJX,CAAP,CAMD,CAzGM","sourcesContent":["import { useState, useEffect } from 'react'\nimport isEqual from 'lodash/isEqual'\nimport { useFarmAuctionContract } from 'hooks/useContract'\nimport { Auction, ConnectedBidder, Bidder } from 'config/constants/types'\nimport { getBidderInfo } from 'config/constants/farmAuctions'\nimport useLastUpdated from 'hooks/useLastUpdated'\nimport useRefresh from 'hooks/useRefresh'\nimport { AUCTION_BIDDERS_TO_FETCH } from 'config'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { sortAuctionBidders, processAuctionData } from '../helpers'\n\nexport const useCurrentFarmAuction = (account: string) => {\n  const [currentAuction, setCurrentAuction] = useState<Auction | null>(null)\n  const [bidders, setBidders] = useState<Bidder[] | null>(null)\n  const [connectedBidder, setConnectedBidder] = useState<ConnectedBidder | null>(null)\n  // Used to force-refresh bidders after successful bid\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n\n  const { fastRefresh } = useRefresh()\n\n  const farmAuctionContract = useFarmAuctionContract()\n\n  // Get latest auction id and its data\n  useEffect(() => {\n    const fetchCurrentAuction = async () => {\n      try {\n        const auctionId = await farmAuctionContract.currentAuctionId()\n        const auctionData = await farmAuctionContract.auctions(auctionId)\n        const processedAuctionData = await processAuctionData(auctionId.toNumber(), auctionData)\n        setCurrentAuction(processedAuctionData)\n      } catch (error) {\n        console.error('Failed to fetch current auction', error)\n      }\n    }\n    fetchCurrentAuction()\n  }, [farmAuctionContract, fastRefresh])\n\n  // Fetch bidders for current auction\n  useEffect(() => {\n    const fetchBidders = async () => {\n      try {\n        const [currentAuctionBidders] = await farmAuctionContract.viewBidsPerAuction(\n          currentAuction.id,\n          0,\n          AUCTION_BIDDERS_TO_FETCH,\n        )\n        const sortedBidders = sortAuctionBidders(currentAuctionBidders, currentAuction)\n        setBidders(sortedBidders)\n      } catch (error) {\n        console.error('Failed to fetch bidders', error)\n      }\n    }\n    if (currentAuction) {\n      fetchBidders()\n    }\n  }, [currentAuction, farmAuctionContract, lastUpdated, fastRefresh])\n\n  // Check if connected wallet is whitelisted\n  useEffect(() => {\n    const checkAccount = async () => {\n      try {\n        const whitelistedStatus = await farmAuctionContract.whitelisted(account)\n        setConnectedBidder({\n          account,\n          isWhitelisted: whitelistedStatus,\n        })\n      } catch (error) {\n        console.error('Failed to check if account is whitelisted', error)\n      }\n    }\n    if (account && (!connectedBidder || connectedBidder.account !== account)) {\n      checkAccount()\n    }\n    // Refresh UI if user logs out\n    if (!account) {\n      setConnectedBidder(null)\n    }\n  }, [account, connectedBidder, farmAuctionContract])\n\n  // Attach bidder data to connectedBidder object\n  useEffect(() => {\n    const getBidderData = () => {\n      if (bidders && bidders.length > 0) {\n        const bidderData = bidders.find((bidder) => bidder.account === account)\n        if (bidderData) {\n          return bidderData\n        }\n      }\n      const bidderInfo = getBidderInfo(account)\n      const defaultBidderData = {\n        position: null,\n        samePositionAsAbove: false,\n        isTopPosition: false,\n        amount: BIG_ZERO,\n        ...bidderInfo,\n      }\n      return defaultBidderData\n    }\n    if (connectedBidder && connectedBidder.isWhitelisted) {\n      const bidderData = getBidderData()\n      if (!isEqual(bidderData, connectedBidder.bidderData)) {\n        setConnectedBidder({\n          account,\n          isWhitelisted: true,\n          bidderData,\n        })\n      }\n    }\n  }, [account, connectedBidder, bidders])\n\n  return {\n    currentAuction,\n    bidders,\n    connectedBidder,\n    refreshBidders: setLastUpdated,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}