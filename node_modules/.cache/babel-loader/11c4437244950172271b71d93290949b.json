{"ast":null,"code":"import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3;import React from'react';import{useRouteMatch,Link}from'react-router-dom';import styled from'styled-components';import{ButtonMenu,ButtonMenuItem,Toggle,Text,NotificationDot}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import ToggleView from'./ToggleView/ToggleView';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var ToggleWrapper=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n  align-items: center;\\n  margin-left: 10px;\\n\\n  \",\" {\\n    margin-left: 8px;\\n  }\\n\"])),Text);var ViewControls=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  flex-wrap: wrap;\\n  justify-content: space-between;\\n  display: flex;\\n  align-items: center;\\n  width: 100%;\\n\\n  > div {\\n    padding: 8px 0px;\\n  }\\n\\n  \",\" {\\n    justify-content: flex-start;\\n    width: auto;\\n\\n    > div {\\n      padding: 0;\\n    }\\n  }\\n\"])),function(_ref){var theme=_ref.theme;return theme.mediaQueries.sm;});var Wrapper=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n\\n  a {\\n    padding-left: 12px;\\n    padding-right: 12px;\\n  }\\n\\n  \",\" {\\n    margin-left: 16px;\\n  }\\n\"])),function(_ref2){var theme=_ref2.theme;return theme.mediaQueries.sm;});var PoolTabButtons=function PoolTabButtons(_ref3){var stakedOnly=_ref3.stakedOnly,setStakedOnly=_ref3.setStakedOnly,hasStakeInFinishedPools=_ref3.hasStakeInFinishedPools,viewMode=_ref3.viewMode,setViewMode=_ref3.setViewMode;var _useRouteMatch=useRouteMatch(),url=_useRouteMatch.url,isExact=_useRouteMatch.isExact;var _useTranslation=useTranslation(),t=_useTranslation.t;var viewModeToggle=/*#__PURE__*/_jsx(ToggleView,{viewMode:viewMode,onToggle:function onToggle(mode){return setViewMode(mode);}});var liveOrFinishedSwitch=/*#__PURE__*/_jsx(Wrapper,{children:/*#__PURE__*/_jsxs(ButtonMenu,{activeIndex:isExact?0:1,scale:\"sm\",variant:\"subtle\",children:[/*#__PURE__*/_jsx(ButtonMenuItem,{as:Link,to:\"\".concat(url),children:t('Live')}),/*#__PURE__*/_jsx(NotificationDot,{show:hasStakeInFinishedPools,children:/*#__PURE__*/_jsx(ButtonMenuItem,{id:\"finished-pools-button\",as:Link,to:\"\".concat(url,\"/history\"),children:t('Finished')})})]})});var stakedOnlySwitch=/*#__PURE__*/_jsxs(ToggleWrapper,{children:[/*#__PURE__*/_jsx(Toggle,{checked:stakedOnly,onChange:function onChange(){return setStakedOnly(!stakedOnly);},scale:\"sm\"}),/*#__PURE__*/_jsxs(Text,{children:[\" \",t('Staked only')]})]});return/*#__PURE__*/_jsxs(ViewControls,{children:[viewModeToggle,stakedOnlySwitch,liveOrFinishedSwitch]});};export default PoolTabButtons;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Pools/components/PoolTabButtons.tsx"],"names":["React","useRouteMatch","Link","styled","ButtonMenu","ButtonMenuItem","Toggle","Text","NotificationDot","useTranslation","ToggleView","ToggleWrapper","div","ViewControls","theme","mediaQueries","sm","Wrapper","PoolTabButtons","stakedOnly","setStakedOnly","hasStakeInFinishedPools","viewMode","setViewMode","url","isExact","t","viewModeToggle","mode","liveOrFinishedSwitch","stakedOnlySwitch"],"mappings":"8NAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,aAAT,CAAwBC,IAAxB,KAAoC,kBAApC,CAEA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,UAAT,CAAqBC,cAArB,CAAqCC,MAArC,CAA6CC,IAA7C,CAAmDC,eAAnD,KAA0E,oBAA1E,CACA,OAASC,cAAT,KAA+B,uBAA/B,CACA,MAAOC,CAAAA,UAAP,KAAuB,yBAAvB,C,wFAEA,GAAMC,CAAAA,aAAa,CAAGR,MAAM,CAACS,GAAV,0KAKfL,IALe,CAAnB,CAUA,GAAMM,CAAAA,YAAY,CAAGV,MAAM,CAACS,GAAV,4UAWd,kBAAGE,CAAAA,KAAH,MAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACC,YAAN,CAAmBC,EAAlC,EAXc,CAAlB,CAqBA,GAAMC,CAAAA,OAAO,CAAGd,MAAM,CAACS,GAAV,oPAUT,mBAAGE,CAAAA,KAAH,OAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACC,YAAN,CAAmBC,EAAlC,EAVS,CAAb,CAeA,GAAME,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,OAAmF,IAAhFC,CAAAA,UAAgF,OAAhFA,UAAgF,CAApEC,aAAoE,OAApEA,aAAoE,CAArDC,uBAAqD,OAArDA,uBAAqD,CAA5BC,QAA4B,OAA5BA,QAA4B,CAAlBC,WAAkB,OAAlBA,WAAkB,CACxG,mBAAyBtB,aAAa,EAAtC,CAAQuB,GAAR,gBAAQA,GAAR,CAAaC,OAAb,gBAAaA,OAAb,CACA,oBAAchB,cAAc,EAA5B,CAAQiB,CAAR,iBAAQA,CAAR,CAEA,GAAMC,CAAAA,cAAc,cAAG,KAAC,UAAD,EAAY,QAAQ,CAAEL,QAAtB,CAAgC,QAAQ,CAAE,kBAACM,IAAD,QAAoBL,CAAAA,WAAW,CAACK,IAAD,CAA/B,EAA1C,EAAvB,CAEA,GAAMC,CAAAA,oBAAoB,cACxB,KAAC,OAAD,wBACE,MAAC,UAAD,EAAY,WAAW,CAAEJ,OAAO,CAAG,CAAH,CAAO,CAAvC,CAA0C,KAAK,CAAC,IAAhD,CAAqD,OAAO,CAAC,QAA7D,wBACE,KAAC,cAAD,EAAgB,EAAE,CAAEvB,IAApB,CAA0B,EAAE,WAAKsB,GAAL,CAA5B,UACGE,CAAC,CAAC,MAAD,CADJ,EADF,cAIE,KAAC,eAAD,EAAiB,IAAI,CAAEL,uBAAvB,uBACE,KAAC,cAAD,EAAgB,EAAE,CAAC,uBAAnB,CAA2C,EAAE,CAAEnB,IAA/C,CAAqD,EAAE,WAAKsB,GAAL,YAAvD,UACGE,CAAC,CAAC,UAAD,CADJ,EADF,EAJF,GADF,EADF,CAeA,GAAMI,CAAAA,gBAAgB,cACpB,MAAC,aAAD,yBACE,KAAC,MAAD,EAAQ,OAAO,CAAEX,UAAjB,CAA6B,QAAQ,CAAE,0BAAMC,CAAAA,aAAa,CAAC,CAACD,UAAF,CAAnB,EAAvC,CAAyE,KAAK,CAAC,IAA/E,EADF,cAEE,MAAC,IAAD,gBAAQO,CAAC,CAAC,aAAD,CAAT,GAFF,GADF,CAOA,mBACE,MAAC,YAAD,YACGC,cADH,CAEGG,gBAFH,CAGGD,oBAHH,GADF,CAOD,CAnCD,CAqCA,cAAeX,CAAAA,cAAf","sourcesContent":["import React from 'react'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ViewMode } from 'state/user/actions'\nimport styled from 'styled-components'\nimport { ButtonMenu, ButtonMenuItem, Toggle, Text, NotificationDot } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport ToggleView from './ToggleView/ToggleView'\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n\nconst PoolTabButtons = ({ stakedOnly, setStakedOnly, hasStakeInFinishedPools, viewMode, setViewMode }) => {\n  const { url, isExact } = useRouteMatch()\n  const { t } = useTranslation()\n\n  const viewModeToggle = <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n\n  const liveOrFinishedSwitch = (\n    <Wrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <NotificationDot show={hasStakeInFinishedPools}>\n          <ButtonMenuItem id=\"finished-pools-button\" as={Link} to={`${url}/history`}>\n            {t('Finished')}\n          </ButtonMenuItem>\n        </NotificationDot>\n      </ButtonMenu>\n    </Wrapper>\n  )\n\n  const stakedOnlySwitch = (\n    <ToggleWrapper>\n      <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n      <Text> {t('Staked only')}</Text>\n    </ToggleWrapper>\n  )\n\n  return (\n    <ViewControls>\n      {viewModeToggle}\n      {stakedOnlySwitch}\n      {liveOrFinishedSwitch}\n    </ViewControls>\n  )\n}\n\nexport default PoolTabButtons\n"]},"metadata":{},"sourceType":"module"}