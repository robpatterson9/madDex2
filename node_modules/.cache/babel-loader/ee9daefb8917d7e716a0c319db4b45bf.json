{"ast":null,"code":"import Cookies from 'js-cookie';\nimport { getProfileContract } from 'utils/contractHelpers';\nimport { getTeam } from 'state/teams/helpers';\nimport { getNftApi } from 'state/nftMarket/helpers';\n\nconst transformProfileResponse = profileResponse => {\n  const {\n    0: userId,\n    1: numberPoints,\n    2: teamId,\n    3: collectionAddress,\n    4: tokenId,\n    5: isActive\n  } = profileResponse;\n  return {\n    userId: userId.toNumber(),\n    points: numberPoints.toNumber(),\n    teamId: teamId.toNumber(),\n    tokenId: tokenId.toNumber(),\n    collectionAddress,\n    isActive\n  };\n};\n\nconst profileContract = getProfileContract();\nconst profileApi = process.env.REACT_APP_API_PROFILE;\nexport const getUsername = async address => {\n  try {\n    const response = await fetch(`${profileApi}/api/users/${address.toLowerCase()}`);\n\n    if (!response.ok) {\n      return '';\n    }\n\n    const {\n      username = ''\n    } = await response.json();\n    return username;\n  } catch (error) {\n    return '';\n  }\n};\n/**\n * Intended to be used for getting a profile avatar\n */\n\nexport const getProfileAvatar = async address => {\n  try {\n    const hasRegistered = await profileContract.hasRegistered(address);\n\n    if (!hasRegistered) {\n      return null;\n    }\n\n    const profileResponse = await profileContract.getUserProfile(address);\n    const {\n      tokenId,\n      collectionAddress,\n      isActive\n    } = transformProfileResponse(profileResponse);\n    let nft = null;\n\n    if (isActive) {\n      var _apiRes$image, _apiRes$image2;\n\n      const apiRes = await getNftApi(collectionAddress, tokenId.toString());\n      nft = {\n        tokenId: apiRes.tokenId,\n        name: apiRes.name,\n        collectionName: apiRes.collection.name,\n        collectionAddress,\n        description: apiRes.description,\n        attributes: apiRes.attributes,\n        createdAt: apiRes.createdAt,\n        updatedAt: apiRes.updatedAt,\n        image: {\n          original: (_apiRes$image = apiRes.image) === null || _apiRes$image === void 0 ? void 0 : _apiRes$image.original,\n          thumbnail: (_apiRes$image2 = apiRes.image) === null || _apiRes$image2 === void 0 ? void 0 : _apiRes$image2.thumbnail\n        }\n      };\n    }\n\n    return {\n      nft,\n      hasRegistered\n    };\n  } catch {\n    return {\n      nft: null,\n      hasRegistered: false\n    };\n  }\n};\nexport const getProfile = async address => {\n  try {\n    const hasRegistered = await profileContract.hasRegistered(address);\n\n    if (!hasRegistered) {\n      return {\n        hasRegistered,\n        profile: null\n      };\n    }\n\n    const profileResponse = await profileContract.getUserProfile(address);\n    const {\n      userId,\n      points,\n      teamId,\n      tokenId,\n      collectionAddress,\n      isActive\n    } = transformProfileResponse(profileResponse);\n    const team = await getTeam(teamId);\n    const username = await getUsername(address);\n    let nftToken; // If the profile is not active the tokenId returns 0, which is still a valid token id\n    // so only fetch the nft data if active\n\n    if (isActive) {\n      var _apiRes$image3, _apiRes$image4;\n\n      const apiRes = await getNftApi(collectionAddress, tokenId.toString());\n      nftToken = {\n        tokenId: apiRes.tokenId,\n        name: apiRes.name,\n        collectionName: apiRes.collection.name,\n        collectionAddress,\n        description: apiRes.description,\n        attributes: apiRes.attributes,\n        createdAt: apiRes.createdAt,\n        updatedAt: apiRes.updatedAt,\n        image: {\n          original: (_apiRes$image3 = apiRes.image) === null || _apiRes$image3 === void 0 ? void 0 : _apiRes$image3.original,\n          thumbnail: (_apiRes$image4 = apiRes.image) === null || _apiRes$image4 === void 0 ? void 0 : _apiRes$image4.thumbnail\n        }\n      }; // Save the preview image in a cookie so it can be used on the exchange\n\n      Cookies.set(`profile_${address}`, {\n        username,\n        avatar: `${nftToken.image.thumbnail}`\n      }, {\n        domain: 'pancakeswap.finance',\n        secure: true,\n        expires: 30\n      });\n    }\n\n    const profile = {\n      userId,\n      points,\n      teamId,\n      tokenId,\n      username,\n      collectionAddress,\n      isActive,\n      nft: nftToken,\n      team\n    };\n    return {\n      hasRegistered,\n      profile\n    };\n  } catch (e) {\n    console.error(e);\n    return null;\n  }\n};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/profile/helpers.ts"],"names":["Cookies","getProfileContract","getTeam","getNftApi","transformProfileResponse","profileResponse","userId","numberPoints","teamId","collectionAddress","tokenId","isActive","toNumber","points","profileContract","profileApi","process","env","REACT_APP_API_PROFILE","getUsername","address","response","fetch","toLowerCase","ok","username","json","error","getProfileAvatar","hasRegistered","getUserProfile","nft","apiRes","toString","name","collectionName","collection","description","attributes","createdAt","updatedAt","image","original","thumbnail","getProfile","profile","team","nftToken","set","avatar","domain","secure","expires","e","console"],"mappings":"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","sourcesContent":["import Cookies from 'js-cookie'\nimport { Profile } from 'state/types'\nimport { GetUserProfileResponse } from 'utils/types'\nimport { getProfileContract } from 'utils/contractHelpers'\nimport { getTeam } from 'state/teams/helpers'\nimport { NftToken } from 'state/nftMarket/types'\nimport { getNftApi } from 'state/nftMarket/helpers'\n\nexport interface GetProfileResponse {\n  hasRegistered: boolean\n  profile?: Profile\n}\n\nconst transformProfileResponse = (profileResponse: GetUserProfileResponse): Partial<Profile> => {\n  const { 0: userId, 1: numberPoints, 2: teamId, 3: collectionAddress, 4: tokenId, 5: isActive } = profileResponse\n\n  return {\n    userId: userId.toNumber(),\n    points: numberPoints.toNumber(),\n    teamId: teamId.toNumber(),\n    tokenId: tokenId.toNumber(),\n    collectionAddress,\n    isActive,\n  }\n}\n\nconst profileContract = getProfileContract()\nconst profileApi = process.env.REACT_APP_API_PROFILE\n\nexport const getUsername = async (address: string): Promise<string> => {\n  try {\n    const response = await fetch(`${profileApi}/api/users/${address.toLowerCase()}`)\n\n    if (!response.ok) {\n      return ''\n    }\n\n    const { username = '' } = await response.json()\n\n    return username\n  } catch (error) {\n    return ''\n  }\n}\n\n/**\n * Intended to be used for getting a profile avatar\n */\nexport const getProfileAvatar = async (address: string) => {\n  try {\n    const hasRegistered = await profileContract.hasRegistered(address)\n\n    if (!hasRegistered) {\n      return null\n    }\n\n    const profileResponse = await profileContract.getUserProfile(address)\n    const { tokenId, collectionAddress, isActive } = transformProfileResponse(profileResponse)\n\n    let nft = null\n    if (isActive) {\n      const apiRes = await getNftApi(collectionAddress, tokenId.toString())\n\n      nft = {\n        tokenId: apiRes.tokenId,\n        name: apiRes.name,\n        collectionName: apiRes.collection.name,\n        collectionAddress,\n        description: apiRes.description,\n        attributes: apiRes.attributes,\n        createdAt: apiRes.createdAt,\n        updatedAt: apiRes.updatedAt,\n        image: {\n          original: apiRes.image?.original,\n          thumbnail: apiRes.image?.thumbnail,\n        },\n      }\n    }\n\n    return { nft, hasRegistered }\n  } catch {\n    return { nft: null, hasRegistered: false }\n  }\n}\n\nexport const getProfile = async (address: string): Promise<GetProfileResponse> => {\n  try {\n    const hasRegistered = await profileContract.hasRegistered(address)\n\n    if (!hasRegistered) {\n      return { hasRegistered, profile: null }\n    }\n\n    const profileResponse = await profileContract.getUserProfile(address)\n    const { userId, points, teamId, tokenId, collectionAddress, isActive } = transformProfileResponse(profileResponse)\n    const team = await getTeam(teamId)\n    const username = await getUsername(address)\n    let nftToken: NftToken\n\n    // If the profile is not active the tokenId returns 0, which is still a valid token id\n    // so only fetch the nft data if active\n    if (isActive) {\n      const apiRes = await getNftApi(collectionAddress, tokenId.toString())\n\n      nftToken = {\n        tokenId: apiRes.tokenId,\n        name: apiRes.name,\n        collectionName: apiRes.collection.name,\n        collectionAddress,\n        description: apiRes.description,\n        attributes: apiRes.attributes,\n        createdAt: apiRes.createdAt,\n        updatedAt: apiRes.updatedAt,\n        image: {\n          original: apiRes.image?.original,\n          thumbnail: apiRes.image?.thumbnail,\n        },\n      }\n\n      // Save the preview image in a cookie so it can be used on the exchange\n      Cookies.set(\n        `profile_${address}`,\n        {\n          username,\n          avatar: `${nftToken.image.thumbnail}`,\n        },\n        { domain: 'pancakeswap.finance', secure: true, expires: 30 },\n      )\n    }\n\n    const profile = {\n      userId,\n      points,\n      teamId,\n      tokenId,\n      username,\n      collectionAddress,\n      isActive,\n      nft: nftToken,\n      team,\n    } as Profile\n\n    return { hasRegistered, profile }\n  } catch (e) {\n    console.error(e)\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"module"}