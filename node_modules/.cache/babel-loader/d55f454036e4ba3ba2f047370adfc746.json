{"ast":null,"code":"import _taggedTemplateLiteral from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7;import React,{useEffect,useRef}from'react';import styled from'styled-components';import Split from'split-grid';import{ArrowDownIcon,Button,ChartIcon}from'@pancakeswap/uikit';import debounce from'lodash/debounce';import delay from'lodash/delay';import{useAppDispatch}from'state';import{useGetPredictionsStatus,useIsChartPaneOpen,useIsHistoryPaneOpen}from'state/predictions/hooks';import{setChartPaneState}from'state/predictions';import{PredictionStatus}from'state/types';import{useTranslation}from'contexts/Localization';import TradingView from'./components/TradingView';import{ErrorNotification,PauseNotification}from'./components/Notification';import History from'./History';import Positions from'./Positions';// The value to set the chart when the user clicks the chart tab at the bottom\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var GRID_TEMPLATE_ROW='1.2fr 12px .8fr';var ExpandChartButton=styled(Button)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  background-color: \",\";\\n  border-bottom-left-radius: 0;\\n  border-bottom-right-radius: 0;\\n  bottom: 12px;\\n  color: \",\";\\n  display: none;\\n  left: 32px;\\n  position: absolute;\\n  z-index: 50;\\n\\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\\n    background-color: \",\";\\n    opacity: 1;\\n  }\\n\\n  \",\" {\\n    display: inline-flex;\\n  }\\n\"])),function(_ref){var theme=_ref.theme;return theme.card.background;},function(_ref2){var theme=_ref2.theme;return theme.colors.text;},function(_ref3){var theme=_ref3.theme;return theme.card.background;},function(_ref4){var theme=_ref4.theme;return theme.mediaQueries.lg;});var SplitWrapper=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  display: grid;\\n  grid-template-columns: 1fr;\\n  grid-template-rows: 1fr 12px 0;\\n  flex: 1;\\n  overflow: hidden;\\n\"])));var ChartPane=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  overflow: hidden;\\n  position: relative;\\n\"])));var HistoryPane=styled.div(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  flex: none;\\n  overflow: hidden;\\n  transition: width 200ms ease-in-out;\\n  width: \",\";\\n\"])),function(_ref5){var isHistoryPaneOpen=_ref5.isHistoryPaneOpen;return isHistoryPaneOpen?'384px':0;});var StyledDesktop=styled.div(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  display: none;\\n\\n  \",\" {\\n    display: flex;\\n    height: 100%;\\n  }\\n\"])),function(_ref6){var theme=_ref6.theme;return theme.mediaQueries.lg;});var PositionPane=styled.div(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n  align-items: center;\\n  display: flex;\\n  max-width: 100%;\\n  overflow-y: auto;\\n  overflow-x: hidden;\\n\\n  & > div {\\n    flex: 1;\\n    overflow: hidden;\\n  }\\n\"])));var Gutter=styled.div(_templateObject7||(_templateObject7=_taggedTemplateLiteral([\"\\n  background: \",\";\\n  cursor: row-resize;\\n  height: 12px;\\n  position: relative;\\n\\n  &:before {\\n    background-color: \",\";\\n    border-radius: 8px;\\n    content: '';\\n    height: 4px;\\n    left: 50%;\\n    margin-left: -32px;\\n    position: absolute;\\n    top: 4px;\\n    width: 64px;\\n  }\\n\"])),function(_ref7){var theme=_ref7.theme;return theme.colors.dropdown;},function(_ref8){var theme=_ref8.theme;return theme.colors.textSubtle;});var Desktop=function Desktop(){var splitWrapperRef=useRef();var chartRef=useRef();var gutterRef=useRef();var isHistoryPaneOpen=useIsHistoryPaneOpen();var isChartPaneOpen=useIsChartPaneOpen();var dispatch=useAppDispatch();var _useTranslation=useTranslation(),t=_useTranslation.t;var status=useGetPredictionsStatus();var toggleChartPane=function toggleChartPane(){var newChartPaneState=!isChartPaneOpen;if(newChartPaneState){splitWrapperRef.current.style.transition='grid-template-rows 150ms';splitWrapperRef.current.style.gridTemplateRows=GRID_TEMPLATE_ROW;// Purely comedic: We only want to animate if we are clicking the open chart button\n// If we keep the transition on the resizing becomes very choppy\ndelay(function(){splitWrapperRef.current.style.transition='';},150);}dispatch(setChartPaneState(newChartPaneState));};useEffect(function(){var threshold=100;var handleDrag=debounce(function(){var _chartRef$current$get=chartRef.current.getBoundingClientRect(),height=_chartRef$current$get.height;// If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\ndispatch(setChartPaneState(height>threshold));},50);var split=Split({dragInterval:1,snapOffset:threshold,onDrag:handleDrag,rowGutters:[{track:1,element:gutterRef.current}]});return function(){split.destroy();};},[gutterRef,chartRef,dispatch]);return/*#__PURE__*/_jsxs(_Fragment,{children:[!isChartPaneOpen&&/*#__PURE__*/_jsx(ExpandChartButton,{variant:\"tertiary\",scale:\"sm\",startIcon:isChartPaneOpen?/*#__PURE__*/_jsx(ArrowDownIcon,{}):/*#__PURE__*/_jsx(ChartIcon,{}),onClick:toggleChartPane,children:isChartPaneOpen?t('Close'):t('Charts')}),/*#__PURE__*/_jsxs(StyledDesktop,{children:[/*#__PURE__*/_jsxs(SplitWrapper,{ref:splitWrapperRef,children:[/*#__PURE__*/_jsxs(PositionPane,{children:[status===PredictionStatus.ERROR&&/*#__PURE__*/_jsx(ErrorNotification,{}),status===PredictionStatus.PAUSED&&/*#__PURE__*/_jsx(PauseNotification,{}),status===PredictionStatus.LIVE&&/*#__PURE__*/_jsx(Positions,{})]}),/*#__PURE__*/_jsx(Gutter,{ref:gutterRef}),/*#__PURE__*/_jsx(ChartPane,{ref:chartRef,children:/*#__PURE__*/_jsx(TradingView,{})})]}),/*#__PURE__*/_jsx(HistoryPane,{isHistoryPaneOpen:isHistoryPaneOpen,children:/*#__PURE__*/_jsx(History,{})})]})]});};export default Desktop;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Predictions/Desktop.tsx"],"names":["React","useEffect","useRef","styled","Split","ArrowDownIcon","Button","ChartIcon","debounce","delay","useAppDispatch","useGetPredictionsStatus","useIsChartPaneOpen","useIsHistoryPaneOpen","setChartPaneState","PredictionStatus","useTranslation","TradingView","ErrorNotification","PauseNotification","History","Positions","GRID_TEMPLATE_ROW","ExpandChartButton","theme","card","background","colors","text","mediaQueries","lg","SplitWrapper","div","ChartPane","HistoryPane","isHistoryPaneOpen","StyledDesktop","PositionPane","Gutter","dropdown","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","isChartPaneOpen","dispatch","t","status","toggleChartPane","newChartPaneState","current","style","transition","gridTemplateRows","threshold","handleDrag","getBoundingClientRect","height","split","dragInterval","snapOffset","onDrag","rowGutters","track","element","destroy","ERROR","PAUSED","LIVE"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport styled from 'styled-components'\nimport Split from 'split-grid'\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\nimport debounce from 'lodash/debounce'\nimport delay from 'lodash/delay'\nimport { useAppDispatch } from 'state'\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\nimport { setChartPaneState } from 'state/predictions'\nimport { PredictionStatus } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport TradingView from './components/TradingView'\nimport { ErrorNotification, PauseNotification } from './components/Notification'\nimport History from './History'\nimport Positions from './Positions'\n\n// The value to set the chart when the user clicks the chart tab at the bottom\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\n\nconst ExpandChartButton = styled(Button)`\n  background-color: ${({ theme }) => theme.card.background};\n  border-bottom-left-radius: 0;\n  border-bottom-right-radius: 0;\n  bottom: 12px;\n  color: ${({ theme }) => theme.colors.text};\n  display: none;\n  left: 32px;\n  position: absolute;\n  z-index: 50;\n\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\n    background-color: ${({ theme }) => theme.card.background};\n    opacity: 1;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: inline-flex;\n  }\n`\n\nconst SplitWrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-template-rows: 1fr 12px 0;\n  flex: 1;\n  overflow: hidden;\n`\n\nconst ChartPane = styled.div`\n  overflow: hidden;\n  position: relative;\n`\n\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\n  flex: none;\n  overflow: hidden;\n  transition: width 200ms ease-in-out;\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\n`\n\nconst StyledDesktop = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: flex;\n    height: 100%;\n  }\n`\n\nconst PositionPane = styled.div`\n  align-items: center;\n  display: flex;\n  max-width: 100%;\n  overflow-y: auto;\n  overflow-x: hidden;\n\n  & > div {\n    flex: 1;\n    overflow: hidden;\n  }\n`\n\nconst Gutter = styled.div`\n  background: ${({ theme }) => theme.colors.dropdown};\n  cursor: row-resize;\n  height: 12px;\n  position: relative;\n\n  &:before {\n    background-color: ${({ theme }) => theme.colors.textSubtle};\n    border-radius: 8px;\n    content: '';\n    height: 4px;\n    left: 50%;\n    margin-left: -32px;\n    position: absolute;\n    top: 4px;\n    width: 64px;\n  }\n`\n\nconst Desktop: React.FC = () => {\n  const splitWrapperRef = useRef<HTMLDivElement>()\n  const chartRef = useRef<HTMLDivElement>()\n  const gutterRef = useRef<HTMLDivElement>()\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\n  const isChartPaneOpen = useIsChartPaneOpen()\n  const dispatch = useAppDispatch()\n  const { t } = useTranslation()\n  const status = useGetPredictionsStatus()\n\n  const toggleChartPane = () => {\n    const newChartPaneState = !isChartPaneOpen\n\n    if (newChartPaneState) {\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\n\n      // Purely comedic: We only want to animate if we are clicking the open chart button\n      // If we keep the transition on the resizing becomes very choppy\n      delay(() => {\n        splitWrapperRef.current.style.transition = ''\n      }, 150)\n    }\n\n    dispatch(setChartPaneState(newChartPaneState))\n  }\n\n  useEffect(() => {\n    const threshold = 100\n    const handleDrag = debounce(() => {\n      const { height } = chartRef.current.getBoundingClientRect()\n\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\n      dispatch(setChartPaneState(height > threshold))\n    }, 50)\n\n    const split = Split({\n      dragInterval: 1,\n      snapOffset: threshold,\n      onDrag: handleDrag,\n      rowGutters: [\n        {\n          track: 1,\n          element: gutterRef.current,\n        },\n      ],\n    })\n\n    return () => {\n      split.destroy()\n    }\n  }, [gutterRef, chartRef, dispatch])\n\n  return (\n    <>\n      {!isChartPaneOpen && (\n        <ExpandChartButton\n          variant=\"tertiary\"\n          scale=\"sm\"\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\n          onClick={toggleChartPane}\n        >\n          {isChartPaneOpen ? t('Close') : t('Charts')}\n        </ExpandChartButton>\n      )}\n      <StyledDesktop>\n        <SplitWrapper ref={splitWrapperRef}>\n          <PositionPane>\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\n            {status === PredictionStatus.LIVE && <Positions />}\n          </PositionPane>\n          <Gutter ref={gutterRef} />\n          <ChartPane ref={chartRef}>\n            <TradingView />\n          </ChartPane>\n        </SplitWrapper>\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\n          <History />\n        </HistoryPane>\n      </StyledDesktop>\n    </>\n  )\n}\n\nexport default Desktop\n"]},"metadata":{},"sourceType":"module"}