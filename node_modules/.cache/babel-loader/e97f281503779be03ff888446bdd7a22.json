{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Predictions/Leaderboard/components/PreviousBetsTable.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport times from 'lodash/times';\nimport orderBy from 'lodash/orderBy';\nimport { Skeleton, Table, Td, Th } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { getBetHistory, transformBetResponse } from 'state/predictions/helpers';\nimport PositionLabel from './PositionLabel';\nimport { NetWinnings } from './Results/styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst PreviousBetsTable = ({\n  numberOfBets = 5,\n  account\n}) => {\n  _s();\n\n  const [isFetching, setIsFetching] = useState(false);\n  const [bets, setBets] = useState([]);\n  const {\n    t\n  } = useTranslation();\n  const orderedBets = orderBy(bets, ['round.epoch'], ['desc']);\n  useEffect(() => {\n    const fetchBetHistory = async () => {\n      setIsFetching(true);\n\n      try {\n        const response = await getBetHistory({\n          user: account.toLowerCase()\n        }, numberOfBets);\n        setBets(response.map(transformBetResponse));\n      } finally {\n        setIsFetching(false);\n      }\n    };\n\n    fetchBetHistory();\n  }, [account, numberOfBets, setIsFetching, setBets]);\n  return /*#__PURE__*/_jsxDEV(Table, {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(Th, {\n          children: t('Round')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Th, {\n          children: t('Direction')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Th, {\n          textAlign: \"right\",\n          children: t('Winnings (BNB)')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: isFetching ? times(numberOfBets).map(num => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(Td, {\n          children: /*#__PURE__*/_jsxDEV(Skeleton, {\n            width: \"80px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Td, {\n          children: /*#__PURE__*/_jsxDEV(Skeleton, {\n            width: \"60px\",\n            height: \"32px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Td, {\n          children: /*#__PURE__*/_jsxDEV(Skeleton, {\n            width: \"80px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this)]\n      }, num, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }, this)) : orderedBets.map(bet => {\n        const isWinner = bet.position === bet.round.position;\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(Td, {\n            textAlign: \"center\",\n            fontWeight: \"bold\",\n            children: bet.round.epoch.toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Td, {\n            textAlign: \"center\",\n            children: /*#__PURE__*/_jsxDEV(PositionLabel, {\n              position: bet.position\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(Td, {\n            textAlign: \"right\",\n            children: /*#__PURE__*/_jsxDEV(NetWinnings, {\n              amount: isWinner ? bet.claimedNetBNB : bet.amount,\n              textPrefix: isWinner ? '+' : '-',\n              textColor: isWinner ? 'success' : 'failure'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 19\n          }, this)]\n        }, bet.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PreviousBetsTable, \"S019TZ4JSevrX+8fzeJduJbjibQ=\", false, function () {\n  return [useTranslation];\n});\n\n_c = PreviousBetsTable;\nexport default PreviousBetsTable;\n\nvar _c;\n\n$RefreshReg$(_c, \"PreviousBetsTable\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Predictions/Leaderboard/components/PreviousBetsTable.tsx"],"names":["React","useEffect","useState","times","orderBy","Skeleton","Table","Td","Th","useTranslation","getBetHistory","transformBetResponse","PositionLabel","NetWinnings","PreviousBetsTable","numberOfBets","account","isFetching","setIsFetching","bets","setBets","t","orderedBets","fetchBetHistory","response","user","toLowerCase","map","num","bet","isWinner","position","round","epoch","toLocaleString","claimedNetBNB","amount","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport times from 'lodash/times'\nimport orderBy from 'lodash/orderBy'\nimport { Skeleton, Table, Td, Th } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBetHistory, transformBetResponse } from 'state/predictions/helpers'\nimport { Bet } from 'state/types'\nimport PositionLabel from './PositionLabel'\nimport { NetWinnings } from './Results/styles'\n\ninterface PreviousBetsTableProps {\n  numberOfBets?: number\n  account: string\n}\n\nconst PreviousBetsTable: React.FC<PreviousBetsTableProps> = ({ numberOfBets = 5, account }) => {\n  const [isFetching, setIsFetching] = useState(false)\n  const [bets, setBets] = useState<Bet[]>([])\n  const { t } = useTranslation()\n  const orderedBets = orderBy(bets, ['round.epoch'], ['desc'])\n\n  useEffect(() => {\n    const fetchBetHistory = async () => {\n      setIsFetching(true)\n      try {\n        const response = await getBetHistory(\n          {\n            user: account.toLowerCase(),\n          },\n          numberOfBets,\n        )\n\n        setBets(response.map(transformBetResponse))\n      } finally {\n        setIsFetching(false)\n      }\n    }\n\n    fetchBetHistory()\n  }, [account, numberOfBets, setIsFetching, setBets])\n\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <Th>{t('Round')}</Th>\n          <Th>{t('Direction')}</Th>\n          <Th textAlign=\"right\">{t('Winnings (BNB)')}</Th>\n        </tr>\n      </thead>\n      <tbody>\n        {isFetching\n          ? times(numberOfBets).map((num) => (\n              <tr key={num}>\n                <Td>\n                  <Skeleton width=\"80px\" />\n                </Td>\n                <Td>\n                  <Skeleton width=\"60px\" height=\"32px\" />\n                </Td>\n                <Td>\n                  <Skeleton width=\"80px\" />\n                </Td>\n              </tr>\n            ))\n          : orderedBets.map((bet) => {\n              const isWinner = bet.position === bet.round.position\n\n              return (\n                <tr key={bet.id}>\n                  <Td textAlign=\"center\" fontWeight=\"bold\">\n                    {bet.round.epoch.toLocaleString()}\n                  </Td>\n                  <Td textAlign=\"center\">\n                    <PositionLabel position={bet.position} />\n                  </Td>\n                  <Td textAlign=\"right\">\n                    <NetWinnings\n                      amount={isWinner ? bet.claimedNetBNB : bet.amount}\n                      textPrefix={isWinner ? '+' : '-'}\n                      textColor={isWinner ? 'success' : 'failure'}\n                    />\n                  </Td>\n                </tr>\n              )\n            })}\n      </tbody>\n    </Table>\n  )\n}\n\nexport default PreviousBetsTable\n"]},"metadata":{},"sourceType":"module"}