{"ast":null,"code":"import _createForOfIteratorHelper from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{useWeb3React}from'@web3-react/core';import{Flex,Button,Text,AutoRenewIcon,PresentWonIcon}from'@pancakeswap/uikit';import{useTranslation}from'contexts/Localization';import{getBalanceAmount}from'utils/formatBalance';import{callWithEstimateGas}from'utils/calls';import{usePriceCakeBusd}from'state/farms/hooks';import{useLottery}from'state/lottery/hooks';import{fetchUserLotteries}from'state/lottery';import{useGasPrice}from'state/user/hooks';import{useAppDispatch}from'state';import Balance from'components/Balance';import{ToastDescriptionWithTx}from'components/Toast';import useToast from'hooks/useToast';import{useLotteryV2Contract}from'hooks/useContract';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var ClaimInnerContainer=function ClaimInnerContainer(_ref){var onSuccess=_ref.onSuccess,roundsToClaim=_ref.roundsToClaim;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var _useTranslation=useTranslation(),t=_useTranslation.t;var dispatch=useAppDispatch();var _useLottery=useLottery(),maxNumberTicketsPerBuyOrClaim=_useLottery.maxNumberTicketsPerBuyOrClaim,currentLotteryId=_useLottery.currentLotteryId;var gasPrice=useGasPrice();var _useToast=useToast(),toastSuccess=_useToast.toastSuccess,toastError=_useToast.toastError;var _useState=useState(0),_useState2=_slicedToArray(_useState,2),activeClaimIndex=_useState2[0],setActiveClaimIndex=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),pendingTx=_useState4[0],setPendingTx=_useState4[1];var _useState5=useState(Math.ceil(roundsToClaim[activeClaimIndex].ticketsWithUnclaimedRewards.length/maxNumberTicketsPerBuyOrClaim.toNumber())),_useState6=_slicedToArray(_useState5,2),pendingBatchClaims=_useState6[0],setPendingBatchClaims=_useState6[1];var lotteryContract=useLotteryV2Contract();var activeClaimData=roundsToClaim[activeClaimIndex];var cakePriceBusd=usePriceCakeBusd();var cakeReward=activeClaimData.cakeTotal;var dollarReward=cakeReward.times(cakePriceBusd);var rewardAsBalance=getBalanceAmount(cakeReward).toNumber();var dollarRewardAsBalance=getBalanceAmount(dollarReward).toNumber();var parseUnclaimedTicketDataForClaimCall=function parseUnclaimedTicketDataForClaimCall(ticketsWithUnclaimedRewards,lotteryId){var ticketIds=ticketsWithUnclaimedRewards.map(function(ticket){return ticket.id;});var brackets=ticketsWithUnclaimedRewards.map(function(ticket){return ticket.rewardBracket;});return{lotteryId:lotteryId,ticketIds:ticketIds,brackets:brackets};};var claimTicketsCallData=parseUnclaimedTicketDataForClaimCall(activeClaimData.ticketsWithUnclaimedRewards,activeClaimData.roundId);var shouldBatchRequest=maxNumberTicketsPerBuyOrClaim.lt(claimTicketsCallData.ticketIds.length);var handleProgressToNextClaim=function handleProgressToNextClaim(){if(roundsToClaim.length>activeClaimIndex+1){// If there are still rounds to claim, move onto the next claim\nsetActiveClaimIndex(activeClaimIndex+1);dispatch(fetchUserLotteries({account:account,currentLotteryId:currentLotteryId}));}else{onSuccess();}};var getTicketBatches=function getTicketBatches(ticketIds,brackets){var requests=[];var maxAsNumber=maxNumberTicketsPerBuyOrClaim.toNumber();for(var i=0;i<ticketIds.length;i+=maxAsNumber){var ticketIdsSlice=ticketIds.slice(i,maxAsNumber+i);var bracketsSlice=brackets.slice(i,maxAsNumber+i);requests.push({ticketIds:ticketIdsSlice,brackets:bracketsSlice});}return requests;};var handleClaim=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var lotteryId,ticketIds,brackets,tx,receipt;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:lotteryId=claimTicketsCallData.lotteryId,ticketIds=claimTicketsCallData.ticketIds,brackets=claimTicketsCallData.brackets;setPendingTx(true);_context.prev=2;_context.next=5;return callWithEstimateGas(lotteryContract,'claimTickets',[lotteryId,ticketIds,brackets],{gasPrice:gasPrice});case 5:tx=_context.sent;_context.next=8;return tx.wait();case 8:receipt=_context.sent;if(receipt.status){toastSuccess(t('Prizes Collected!'),/*#__PURE__*/_jsx(ToastDescriptionWithTx,{txHash:receipt.transactionHash,children:t('Your CAKE prizes for round %lotteryId% have been sent to your wallet',{lotteryId:lotteryId})}));setPendingTx(false);handleProgressToNextClaim();}_context.next=17;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](2);console.error(_context.t0);toastError(t('Error'),t('%error% - Please try again.',{error:_context.t0.message}));setPendingTx(false);case 17:case\"end\":return _context.stop();}}},_callee,null,[[2,12]]);}));return function handleClaim(){return _ref2.apply(this,arguments);};}();var handleBatchClaim=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var lotteryId,ticketIds,brackets,ticketBatches,transactionsToFire,receipts,_iterator,_step,ticketBatch,tx,receipt;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:lotteryId=claimTicketsCallData.lotteryId,ticketIds=claimTicketsCallData.ticketIds,brackets=claimTicketsCallData.brackets;ticketBatches=getTicketBatches(ticketIds,brackets);transactionsToFire=ticketBatches.length;receipts=[];setPendingTx(true);// eslint-disable-next-line no-restricted-syntax\n_iterator=_createForOfIteratorHelper(ticketBatches);_context2.prev=6;_iterator.s();case 8:if((_step=_iterator.n()).done){_context2.next=28;break;}ticketBatch=_step.value;_context2.prev=10;_context2.next=13;return callWithEstimateGas(lotteryContract,'claimTickets',[lotteryId,ticketBatch.ticketIds,ticketBatch.brackets],{gasPrice:gasPrice});case 13:tx=_context2.sent;_context2.next=16;return tx.wait();case 16:receipt=_context2.sent;/* eslint-enable no-await-in-loop */if(receipt.status){// One transaction within batch has succeeded\nreceipts.push(receipt);setPendingBatchClaims(transactionsToFire-receipts.length);// More transactions are to be done within the batch. Issue toast to give user feedback.\nif(receipts.length!==transactionsToFire){toastSuccess(t('Prizes Collected!'),/*#__PURE__*/_jsx(ToastDescriptionWithTx,{txHash:receipt.transactionHash,children:t('Claim %claimNum% of %claimTotal% for round %lotteryId% was successful. Please confirm the next transaction',{claimNum:receipts.length,claimTotal:transactionsToFire,lotteryId:lotteryId})}));}}_context2.next=26;break;case 20:_context2.prev=20;_context2.t0=_context2[\"catch\"](10);console.error(_context2.t0);setPendingTx(false);toastError(t('Error'),t('%error% - Please try again.',{error:_context2.t0.message}));return _context2.abrupt(\"break\",28);case 26:_context2.next=8;break;case 28:_context2.next=33;break;case 30:_context2.prev=30;_context2.t1=_context2[\"catch\"](6);_iterator.e(_context2.t1);case 33:_context2.prev=33;_iterator.f();return _context2.finish(33);case 36:// Batch is finished\nif(receipts.length===transactionsToFire){setPendingTx(false);toastSuccess(t('Prizes Collected!'),t('Your CAKE prizes for round %lotteryId% have been sent to your wallet',{lotteryId:lotteryId}));handleProgressToNextClaim();}case 37:case\"end\":return _context2.stop();}}},_callee2,null,[[6,30,33,36],[10,20]]);}));return function handleBatchClaim(){return _ref3.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Flex,{flexDirection:\"column\",children:[/*#__PURE__*/_jsx(Text,{mb:\"4px\",textAlign:['center',null,'left'],children:t('You won')}),/*#__PURE__*/_jsxs(Flex,{alignItems:['flex-start',null,'center'],justifyContent:['flex-start',null,'space-between'],flexDirection:['column',null,'row'],children:[/*#__PURE__*/_jsx(Balance,{textAlign:['center',null,'left'],lineHeight:\"1.1\",value:rewardAsBalance,fontSize:\"44px\",bold:true,color:\"secondary\",unit:\" CAKE!\"}),/*#__PURE__*/_jsx(PresentWonIcon,{ml:['0',null,'12px'],width:\"64px\"})]}),/*#__PURE__*/_jsx(Balance,{mt:['12px',null,'0'],textAlign:['center',null,'left'],value:dollarRewardAsBalance,fontSize:\"12px\",color:\"textSubtle\",unit:\" USD\",prefix:\"~\"})]}),/*#__PURE__*/_jsx(Flex,{alignItems:\"center\",justifyContent:\"center\",children:/*#__PURE__*/_jsxs(Text,{mt:\"8px\",fontSize:\"12px\",color:\"textSubtle\",children:[t('Round'),\" #\",activeClaimData.roundId]})}),/*#__PURE__*/_jsx(Flex,{alignItems:\"center\",justifyContent:\"center\",children:/*#__PURE__*/_jsxs(Button,{isLoading:pendingTx,endIcon:pendingTx?/*#__PURE__*/_jsx(AutoRenewIcon,{spin:true,color:\"currentColor\"}):null,mt:\"20px\",width:\"100%\",onClick:function onClick(){return shouldBatchRequest?handleBatchClaim():handleClaim();},children:[pendingTx?t('Claiming'):t('Claim'),\" \",pendingBatchClaims>1?\"(\".concat(pendingBatchClaims,\")\"):'']})})]});};export default ClaimInnerContainer;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Lottery/components/ClaimPrizesModal/ClaimPrizesInner.tsx"],"names":["React","useState","useWeb3React","Flex","Button","Text","AutoRenewIcon","PresentWonIcon","useTranslation","getBalanceAmount","callWithEstimateGas","usePriceCakeBusd","useLottery","fetchUserLotteries","useGasPrice","useAppDispatch","Balance","ToastDescriptionWithTx","useToast","useLotteryV2Contract","ClaimInnerContainer","onSuccess","roundsToClaim","account","t","dispatch","maxNumberTicketsPerBuyOrClaim","currentLotteryId","gasPrice","toastSuccess","toastError","activeClaimIndex","setActiveClaimIndex","pendingTx","setPendingTx","Math","ceil","ticketsWithUnclaimedRewards","length","toNumber","pendingBatchClaims","setPendingBatchClaims","lotteryContract","activeClaimData","cakePriceBusd","cakeReward","cakeTotal","dollarReward","times","rewardAsBalance","dollarRewardAsBalance","parseUnclaimedTicketDataForClaimCall","lotteryId","ticketIds","map","ticket","id","brackets","rewardBracket","claimTicketsCallData","roundId","shouldBatchRequest","lt","handleProgressToNextClaim","getTicketBatches","requests","maxAsNumber","i","ticketIdsSlice","slice","bracketsSlice","push","handleClaim","tx","wait","receipt","status","transactionHash","console","error","message","handleBatchClaim","ticketBatches","transactionsToFire","receipts","ticketBatch","claimNum","claimTotal"],"mappings":"qnBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,YAAT,KAA6B,kBAA7B,CACA,OAASC,IAAT,CAAeC,MAAf,CAAuBC,IAAvB,CAA6BC,aAA7B,CAA4CC,cAA5C,KAAkE,oBAAlE,CACA,OAASC,cAAT,KAA+B,uBAA/B,CAEA,OAASC,gBAAT,KAAiC,qBAAjC,CACA,OAASC,mBAAT,KAAoC,aAApC,CACA,OAASC,gBAAT,KAAiC,mBAAjC,CACA,OAASC,UAAT,KAA2B,qBAA3B,CACA,OAASC,kBAAT,KAAmC,eAAnC,CACA,OAASC,WAAT,KAA4B,kBAA5B,CACA,OAASC,cAAT,KAA+B,OAA/B,CACA,MAAOC,CAAAA,OAAP,KAAoB,oBAApB,CACA,OAASC,sBAAT,KAAuC,kBAAvC,CACA,MAAOC,CAAAA,QAAP,KAAqB,gBAArB,CACA,OAASC,oBAAT,KAAqC,mBAArC,C,6IAOA,GAAMC,CAAAA,mBAA8C,CAAG,QAAjDA,CAAAA,mBAAiD,MAAkC,IAA/BC,CAAAA,SAA+B,MAA/BA,SAA+B,CAApBC,aAAoB,MAApBA,aAAoB,CACvF,kBAAoBpB,YAAY,EAAhC,CAAQqB,OAAR,eAAQA,OAAR,CACA,oBAAcf,cAAc,EAA5B,CAAQgB,CAAR,iBAAQA,CAAR,CACA,GAAMC,CAAAA,QAAQ,CAAGV,cAAc,EAA/B,CACA,gBAA4DH,UAAU,EAAtE,CAAQc,6BAAR,aAAQA,6BAAR,CAAuCC,gBAAvC,aAAuCA,gBAAvC,CACA,GAAMC,CAAAA,QAAQ,CAAGd,WAAW,EAA5B,CACA,cAAqCI,QAAQ,EAA7C,CAAQW,YAAR,WAAQA,YAAR,CAAsBC,UAAtB,WAAsBA,UAAtB,CACA,cAAgD7B,QAAQ,CAAC,CAAD,CAAxD,wCAAO8B,gBAAP,eAAyBC,mBAAzB,eACA,eAAkC/B,QAAQ,CAAC,KAAD,CAA1C,yCAAOgC,SAAP,eAAkBC,YAAlB,eACA,eAAoDjC,QAAQ,CAC1DkC,IAAI,CAACC,IAAL,CACEd,aAAa,CAACS,gBAAD,CAAb,CAAgCM,2BAAhC,CAA4DC,MAA5D,CAAqEZ,6BAA6B,CAACa,QAA9B,EADvE,CAD0D,CAA5D,yCAAOC,kBAAP,eAA2BC,qBAA3B,eAKA,GAAMC,CAAAA,eAAe,CAAGvB,oBAAoB,EAA5C,CACA,GAAMwB,CAAAA,eAAe,CAAGrB,aAAa,CAACS,gBAAD,CAArC,CAEA,GAAMa,CAAAA,aAAa,CAAGjC,gBAAgB,EAAtC,CACA,GAAMkC,CAAAA,UAAU,CAAGF,eAAe,CAACG,SAAnC,CACA,GAAMC,CAAAA,YAAY,CAAGF,UAAU,CAACG,KAAX,CAAiBJ,aAAjB,CAArB,CACA,GAAMK,CAAAA,eAAe,CAAGxC,gBAAgB,CAACoC,UAAD,CAAhB,CAA6BN,QAA7B,EAAxB,CACA,GAAMW,CAAAA,qBAAqB,CAAGzC,gBAAgB,CAACsC,YAAD,CAAhB,CAA+BR,QAA/B,EAA9B,CAEA,GAAMY,CAAAA,oCAAoC,CAAG,QAAvCA,CAAAA,oCAAuC,CAACd,2BAAD,CAA+Ce,SAA/C,CAAqE,CAChH,GAAMC,CAAAA,SAAS,CAAGhB,2BAA2B,CAACiB,GAA5B,CAAgC,SAACC,MAAD,CAAY,CAC5D,MAAOA,CAAAA,MAAM,CAACC,EAAd,CACD,CAFiB,CAAlB,CAGA,GAAMC,CAAAA,QAAQ,CAAGpB,2BAA2B,CAACiB,GAA5B,CAAgC,SAACC,MAAD,CAAY,CAC3D,MAAOA,CAAAA,MAAM,CAACG,aAAd,CACD,CAFgB,CAAjB,CAGA,MAAO,CAAEN,SAAS,CAATA,SAAF,CAAaC,SAAS,CAATA,SAAb,CAAwBI,QAAQ,CAARA,QAAxB,CAAP,CACD,CARD,CAUA,GAAME,CAAAA,oBAAoB,CAAGR,oCAAoC,CAC/DR,eAAe,CAACN,2BAD+C,CAE/DM,eAAe,CAACiB,OAF+C,CAAjE,CAKA,GAAMC,CAAAA,kBAAkB,CAAGnC,6BAA6B,CAACoC,EAA9B,CAAiCH,oBAAoB,CAACN,SAArB,CAA+Bf,MAAhE,CAA3B,CAEA,GAAMyB,CAAAA,yBAAyB,CAAG,QAA5BA,CAAAA,yBAA4B,EAAM,CACtC,GAAIzC,aAAa,CAACgB,MAAd,CAAuBP,gBAAgB,CAAG,CAA9C,CAAiD,CAC/C;AACAC,mBAAmB,CAACD,gBAAgB,CAAG,CAApB,CAAnB,CACAN,QAAQ,CAACZ,kBAAkB,CAAC,CAAEU,OAAO,CAAPA,OAAF,CAAWI,gBAAgB,CAAhBA,gBAAX,CAAD,CAAnB,CAAR,CACD,CAJD,IAIO,CACLN,SAAS,GACV,CACF,CARD,CAUA,GAAM2C,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACX,SAAD,CAAsBI,QAAtB,CAA4F,CACnH,GAAMQ,CAAAA,QAAQ,CAAG,EAAjB,CACA,GAAMC,CAAAA,WAAW,CAAGxC,6BAA6B,CAACa,QAA9B,EAApB,CAEA,IAAK,GAAI4B,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGd,SAAS,CAACf,MAA9B,CAAsC6B,CAAC,EAAID,WAA3C,CAAwD,CACtD,GAAME,CAAAA,cAAc,CAAGf,SAAS,CAACgB,KAAV,CAAgBF,CAAhB,CAAmBD,WAAW,CAAGC,CAAjC,CAAvB,CACA,GAAMG,CAAAA,aAAa,CAAGb,QAAQ,CAACY,KAAT,CAAeF,CAAf,CAAkBD,WAAW,CAAGC,CAAhC,CAAtB,CACAF,QAAQ,CAACM,IAAT,CAAc,CAAElB,SAAS,CAAEe,cAAb,CAA6BX,QAAQ,CAAEa,aAAvC,CAAd,EACD,CAED,MAAOL,CAAAA,QAAP,CACD,CAXD,CAaA,GAAMO,CAAAA,WAAW,2FAAG,+KACVpB,SADU,CACyBO,oBADzB,CACVP,SADU,CACCC,SADD,CACyBM,oBADzB,CACCN,SADD,CACYI,QADZ,CACyBE,oBADzB,CACYF,QADZ,CAElBvB,YAAY,CAAC,IAAD,CAAZ,CAFkB,sCAICxB,CAAAA,mBAAmB,CAACgC,eAAD,CAAkB,cAAlB,CAAkC,CAACU,SAAD,CAAYC,SAAZ,CAAuBI,QAAvB,CAAlC,CAAoE,CACtG7B,QAAQ,CAARA,QADsG,CAApE,CAJpB,QAIV6C,EAJU,qCAOMA,CAAAA,EAAE,CAACC,IAAH,EAPN,QAOVC,OAPU,eAQhB,GAAIA,OAAO,CAACC,MAAZ,CAAoB,CAClB/C,YAAY,CACVL,CAAC,CAAC,mBAAD,CADS,cAEV,KAAC,sBAAD,EAAwB,MAAM,CAAEmD,OAAO,CAACE,eAAxC,UACGrD,CAAC,CAAC,sEAAD,CAAyE,CAAE4B,SAAS,CAATA,SAAF,CAAzE,CADJ,EAFU,CAAZ,CAMAlB,YAAY,CAAC,KAAD,CAAZ,CACA6B,yBAAyB,GAC1B,CAjBe,iFAmBhBe,OAAO,CAACC,KAAR,cACAjD,UAAU,CAACN,CAAC,CAAC,OAAD,CAAF,CAAaA,CAAC,CAAC,6BAAD,CAAgC,CAAEuD,KAAK,CAAE,YAAMC,OAAf,CAAhC,CAAd,CAAV,CACA9C,YAAY,CAAC,KAAD,CAAZ,CArBgB,qEAAH,kBAAXsC,CAAAA,WAAW,2CAAjB,CAyBA,GAAMS,CAAAA,gBAAgB,2FAAG,0PACf7B,SADe,CACoBO,oBADpB,CACfP,SADe,CACJC,SADI,CACoBM,oBADpB,CACJN,SADI,CACOI,QADP,CACoBE,oBADpB,CACOF,QADP,CAEjByB,aAFiB,CAEDlB,gBAAgB,CAACX,SAAD,CAAYI,QAAZ,CAFf,CAGjB0B,kBAHiB,CAGID,aAAa,CAAC5C,MAHlB,CAIjB8C,QAJiB,CAIN,EAJM,CAKvBlD,YAAY,CAAC,IAAD,CAAZ,CACA;AANuB,qCAOGgD,aAPH,gGAOZG,WAPY,uDAUF3E,CAAAA,mBAAmB,CAClCgC,eADkC,CAElC,cAFkC,CAGlC,CAACU,SAAD,CAAYiC,WAAW,CAAChC,SAAxB,CAAmCgC,WAAW,CAAC5B,QAA/C,CAHkC,CAIlC,CAAE7B,QAAQ,CAARA,QAAF,CAJkC,CAVjB,SAUb6C,EAVa,wCAgBGA,CAAAA,EAAE,CAACC,IAAH,EAhBH,SAgBbC,OAhBa,gBAiBnB,oCACA,GAAIA,OAAO,CAACC,MAAZ,CAAoB,CAClB;AACAQ,QAAQ,CAACb,IAAT,CAAcI,OAAd,EACAlC,qBAAqB,CAAC0C,kBAAkB,CAAGC,QAAQ,CAAC9C,MAA/B,CAArB,CAEA;AACA,GAAI8C,QAAQ,CAAC9C,MAAT,GAAoB6C,kBAAxB,CAA4C,CAC1CtD,YAAY,CACVL,CAAC,CAAC,mBAAD,CADS,cAEV,KAAC,sBAAD,EAAwB,MAAM,CAAEmD,OAAO,CAACE,eAAxC,UACGrD,CAAC,CACA,4GADA,CAEA,CACE8D,QAAQ,CAAEF,QAAQ,CAAC9C,MADrB,CAEEiD,UAAU,CAAEJ,kBAFd,CAGE/B,SAAS,CAATA,SAHF,CAFA,CADJ,EAFU,CAAZ,CAaD,CACF,CAvCkB,sFAyCnB0B,OAAO,CAACC,KAAR,eACA7C,YAAY,CAAC,KAAD,CAAZ,CACAJ,UAAU,CAACN,CAAC,CAAC,OAAD,CAAF,CAAaA,CAAC,CAAC,6BAAD,CAAgC,CAAEuD,KAAK,CAAE,aAAMC,OAAf,CAAhC,CAAd,CAAV,CA3CmB,sQAgDvB;AACA,GAAII,QAAQ,CAAC9C,MAAT,GAAoB6C,kBAAxB,CAA4C,CAC1CjD,YAAY,CAAC,KAAD,CAAZ,CACAL,YAAY,CACVL,CAAC,CAAC,mBAAD,CADS,CAEVA,CAAC,CAAC,sEAAD,CAAyE,CAAE4B,SAAS,CAATA,SAAF,CAAzE,CAFS,CAAZ,CAIAW,yBAAyB,GAC1B,CAxDsB,qFAAH,kBAAhBkB,CAAAA,gBAAgB,2CAAtB,CA2DA,mBACE,wCACE,MAAC,IAAD,EAAM,aAAa,CAAC,QAApB,wBACE,KAAC,IAAD,EAAM,EAAE,CAAC,KAAT,CAAe,SAAS,CAAE,CAAC,QAAD,CAAW,IAAX,CAAiB,MAAjB,CAA1B,UACGzD,CAAC,CAAC,SAAD,CADJ,EADF,cAIE,MAAC,IAAD,EACE,UAAU,CAAE,CAAC,YAAD,CAAe,IAAf,CAAqB,QAArB,CADd,CAEE,cAAc,CAAE,CAAC,YAAD,CAAe,IAAf,CAAqB,eAArB,CAFlB,CAGE,aAAa,CAAE,CAAC,QAAD,CAAW,IAAX,CAAiB,KAAjB,CAHjB,wBAKE,KAAC,OAAD,EACE,SAAS,CAAE,CAAC,QAAD,CAAW,IAAX,CAAiB,MAAjB,CADb,CAEE,UAAU,CAAC,KAFb,CAGE,KAAK,CAAEyB,eAHT,CAIE,QAAQ,CAAC,MAJX,CAKE,IAAI,KALN,CAME,KAAK,CAAC,WANR,CAOE,IAAI,CAAC,QAPP,EALF,cAcE,KAAC,cAAD,EAAgB,EAAE,CAAE,CAAC,GAAD,CAAM,IAAN,CAAY,MAAZ,CAApB,CAAyC,KAAK,CAAC,MAA/C,EAdF,GAJF,cAoBE,KAAC,OAAD,EACE,EAAE,CAAE,CAAC,MAAD,CAAS,IAAT,CAAe,GAAf,CADN,CAEE,SAAS,CAAE,CAAC,QAAD,CAAW,IAAX,CAAiB,MAAjB,CAFb,CAGE,KAAK,CAAEC,qBAHT,CAIE,QAAQ,CAAC,MAJX,CAKE,KAAK,CAAC,YALR,CAME,IAAI,CAAC,MANP,CAOE,MAAM,CAAC,GAPT,EApBF,GADF,cAgCE,KAAC,IAAD,EAAM,UAAU,CAAC,QAAjB,CAA0B,cAAc,CAAC,QAAzC,uBACE,MAAC,IAAD,EAAM,EAAE,CAAC,KAAT,CAAe,QAAQ,CAAC,MAAxB,CAA+B,KAAK,CAAC,YAArC,WACG1B,CAAC,CAAC,OAAD,CADJ,MACiBmB,eAAe,CAACiB,OADjC,GADF,EAhCF,cAqCE,KAAC,IAAD,EAAM,UAAU,CAAC,QAAjB,CAA0B,cAAc,CAAC,QAAzC,uBACE,MAAC,MAAD,EACE,SAAS,CAAE3B,SADb,CAEE,OAAO,CAAEA,SAAS,cAAG,KAAC,aAAD,EAAe,IAAI,KAAnB,CAAoB,KAAK,CAAC,cAA1B,EAAH,CAAiD,IAFrE,CAGE,EAAE,CAAC,MAHL,CAIE,KAAK,CAAC,MAJR,CAKE,OAAO,CAAE,yBAAO4B,CAAAA,kBAAkB,CAAGoB,gBAAgB,EAAnB,CAAwBT,WAAW,EAA5D,EALX,WAOGvC,SAAS,CAAGT,CAAC,CAAC,UAAD,CAAJ,CAAmBA,CAAC,CAAC,OAAD,CAPhC,KAO4CgB,kBAAkB,CAAG,CAArB,YAA6BA,kBAA7B,MAAqD,EAPjG,GADF,EArCF,GADF,CAmDD,CAtMD,CAwMA,cAAepB,CAAAA,mBAAf","sourcesContent":["import React, { useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Flex, Button, Text, AutoRenewIcon, PresentWonIcon } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { LotteryTicket, LotteryTicketClaimData } from 'config/constants/types'\nimport { getBalanceAmount } from 'utils/formatBalance'\nimport { callWithEstimateGas } from 'utils/calls'\nimport { usePriceCakeBusd } from 'state/farms/hooks'\nimport { useLottery } from 'state/lottery/hooks'\nimport { fetchUserLotteries } from 'state/lottery'\nimport { useGasPrice } from 'state/user/hooks'\nimport { useAppDispatch } from 'state'\nimport Balance from 'components/Balance'\nimport { ToastDescriptionWithTx } from 'components/Toast'\nimport useToast from 'hooks/useToast'\nimport { useLotteryV2Contract } from 'hooks/useContract'\n\ninterface ClaimInnerProps {\n  roundsToClaim: LotteryTicketClaimData[]\n  onSuccess?: () => void\n}\n\nconst ClaimInnerContainer: React.FC<ClaimInnerProps> = ({ onSuccess, roundsToClaim }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const dispatch = useAppDispatch()\n  const { maxNumberTicketsPerBuyOrClaim, currentLotteryId } = useLottery()\n  const gasPrice = useGasPrice()\n  const { toastSuccess, toastError } = useToast()\n  const [activeClaimIndex, setActiveClaimIndex] = useState(0)\n  const [pendingTx, setPendingTx] = useState(false)\n  const [pendingBatchClaims, setPendingBatchClaims] = useState(\n    Math.ceil(\n      roundsToClaim[activeClaimIndex].ticketsWithUnclaimedRewards.length / maxNumberTicketsPerBuyOrClaim.toNumber(),\n    ),\n  )\n  const lotteryContract = useLotteryV2Contract()\n  const activeClaimData = roundsToClaim[activeClaimIndex]\n\n  const cakePriceBusd = usePriceCakeBusd()\n  const cakeReward = activeClaimData.cakeTotal\n  const dollarReward = cakeReward.times(cakePriceBusd)\n  const rewardAsBalance = getBalanceAmount(cakeReward).toNumber()\n  const dollarRewardAsBalance = getBalanceAmount(dollarReward).toNumber()\n\n  const parseUnclaimedTicketDataForClaimCall = (ticketsWithUnclaimedRewards: LotteryTicket[], lotteryId: string) => {\n    const ticketIds = ticketsWithUnclaimedRewards.map((ticket) => {\n      return ticket.id\n    })\n    const brackets = ticketsWithUnclaimedRewards.map((ticket) => {\n      return ticket.rewardBracket\n    })\n    return { lotteryId, ticketIds, brackets }\n  }\n\n  const claimTicketsCallData = parseUnclaimedTicketDataForClaimCall(\n    activeClaimData.ticketsWithUnclaimedRewards,\n    activeClaimData.roundId,\n  )\n\n  const shouldBatchRequest = maxNumberTicketsPerBuyOrClaim.lt(claimTicketsCallData.ticketIds.length)\n\n  const handleProgressToNextClaim = () => {\n    if (roundsToClaim.length > activeClaimIndex + 1) {\n      // If there are still rounds to claim, move onto the next claim\n      setActiveClaimIndex(activeClaimIndex + 1)\n      dispatch(fetchUserLotteries({ account, currentLotteryId }))\n    } else {\n      onSuccess()\n    }\n  }\n\n  const getTicketBatches = (ticketIds: string[], brackets: number[]): { ticketIds: string[]; brackets: number[] }[] => {\n    const requests = []\n    const maxAsNumber = maxNumberTicketsPerBuyOrClaim.toNumber()\n\n    for (let i = 0; i < ticketIds.length; i += maxAsNumber) {\n      const ticketIdsSlice = ticketIds.slice(i, maxAsNumber + i)\n      const bracketsSlice = brackets.slice(i, maxAsNumber + i)\n      requests.push({ ticketIds: ticketIdsSlice, brackets: bracketsSlice })\n    }\n\n    return requests\n  }\n\n  const handleClaim = async () => {\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\n    setPendingTx(true)\n    try {\n      const tx = await callWithEstimateGas(lotteryContract, 'claimTickets', [lotteryId, ticketIds, brackets], {\n        gasPrice,\n      })\n      const receipt = await tx.wait()\n      if (receipt.status) {\n        toastSuccess(\n          t('Prizes Collected!'),\n          <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n            {t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', { lotteryId })}\n          </ToastDescriptionWithTx>,\n        )\n        setPendingTx(false)\n        handleProgressToNextClaim()\n      }\n    } catch (error) {\n      console.error(error)\n      toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n      setPendingTx(false)\n    }\n  }\n\n  const handleBatchClaim = async () => {\n    const { lotteryId, ticketIds, brackets } = claimTicketsCallData\n    const ticketBatches = getTicketBatches(ticketIds, brackets)\n    const transactionsToFire = ticketBatches.length\n    const receipts = []\n    setPendingTx(true)\n    // eslint-disable-next-line no-restricted-syntax\n    for (const ticketBatch of ticketBatches) {\n      try {\n        /* eslint-disable no-await-in-loop */\n        const tx = await callWithEstimateGas(\n          lotteryContract,\n          'claimTickets',\n          [lotteryId, ticketBatch.ticketIds, ticketBatch.brackets],\n          { gasPrice },\n        )\n        const receipt = await tx.wait()\n        /* eslint-enable no-await-in-loop */\n        if (receipt.status) {\n          // One transaction within batch has succeeded\n          receipts.push(receipt)\n          setPendingBatchClaims(transactionsToFire - receipts.length)\n\n          // More transactions are to be done within the batch. Issue toast to give user feedback.\n          if (receipts.length !== transactionsToFire) {\n            toastSuccess(\n              t('Prizes Collected!'),\n              <ToastDescriptionWithTx txHash={receipt.transactionHash}>\n                {t(\n                  'Claim %claimNum% of %claimTotal% for round %lotteryId% was successful. Please confirm the next transaction',\n                  {\n                    claimNum: receipts.length,\n                    claimTotal: transactionsToFire,\n                    lotteryId,\n                  },\n                )}\n              </ToastDescriptionWithTx>,\n            )\n          }\n        }\n      } catch (error) {\n        console.error(error)\n        setPendingTx(false)\n        toastError(t('Error'), t('%error% - Please try again.', { error: error.message }))\n        break\n      }\n    }\n\n    // Batch is finished\n    if (receipts.length === transactionsToFire) {\n      setPendingTx(false)\n      toastSuccess(\n        t('Prizes Collected!'),\n        t('Your CAKE prizes for round %lotteryId% have been sent to your wallet', { lotteryId }),\n      )\n      handleProgressToNextClaim()\n    }\n  }\n\n  return (\n    <>\n      <Flex flexDirection=\"column\">\n        <Text mb=\"4px\" textAlign={['center', null, 'left']}>\n          {t('You won')}\n        </Text>\n        <Flex\n          alignItems={['flex-start', null, 'center']}\n          justifyContent={['flex-start', null, 'space-between']}\n          flexDirection={['column', null, 'row']}\n        >\n          <Balance\n            textAlign={['center', null, 'left']}\n            lineHeight=\"1.1\"\n            value={rewardAsBalance}\n            fontSize=\"44px\"\n            bold\n            color=\"secondary\"\n            unit=\" CAKE!\"\n          />\n          <PresentWonIcon ml={['0', null, '12px']} width=\"64px\" />\n        </Flex>\n        <Balance\n          mt={['12px', null, '0']}\n          textAlign={['center', null, 'left']}\n          value={dollarRewardAsBalance}\n          fontSize=\"12px\"\n          color=\"textSubtle\"\n          unit=\" USD\"\n          prefix=\"~\"\n        />\n      </Flex>\n\n      <Flex alignItems=\"center\" justifyContent=\"center\">\n        <Text mt=\"8px\" fontSize=\"12px\" color=\"textSubtle\">\n          {t('Round')} #{activeClaimData.roundId}\n        </Text>\n      </Flex>\n      <Flex alignItems=\"center\" justifyContent=\"center\">\n        <Button\n          isLoading={pendingTx}\n          endIcon={pendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\n          mt=\"20px\"\n          width=\"100%\"\n          onClick={() => (shouldBatchRequest ? handleBatchClaim() : handleClaim())}\n        >\n          {pendingTx ? t('Claiming') : t('Claim')} {pendingBatchClaims > 1 ? `(${pendingBatchClaims})` : ''}\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default ClaimInnerContainer\n"]},"metadata":{},"sourceType":"module"}