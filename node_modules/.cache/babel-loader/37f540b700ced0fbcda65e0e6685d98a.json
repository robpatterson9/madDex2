{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport { createReducer } from '@reduxjs/toolkit';\nimport { updateProtocolData, updateProtocolChartData, updateProtocolTransactions, updatePoolData, addPoolKeys, updatePoolChartData, updatePoolTransactions, updateTokenData, addTokenKeys, addTokenPoolAddresses, updateTokenChartData, updateTokenPriceData, updateTokenTransactions } from './actions';\nconst initialState = {\n  protocol: {\n    overview: undefined,\n    chartData: undefined,\n    transactions: undefined\n  },\n  pools: {\n    byAddress: {}\n  },\n  tokens: {\n    byAddress: {}\n  }\n};\nexport default createReducer(initialState, builder => builder // Protocol actions\n.addCase(updateProtocolData, (state, {\n  payload: {\n    protocolData\n  }\n}) => {\n  state.protocol.overview = protocolData;\n}).addCase(updateProtocolChartData, (state, {\n  payload: {\n    chartData\n  }\n}) => {\n  state.protocol.chartData = chartData;\n}).addCase(updateProtocolTransactions, (state, {\n  payload: {\n    transactions\n  }\n}) => {\n  state.protocol.transactions = transactions;\n}) // Pools actions\n.addCase(updatePoolData, (state, {\n  payload: {\n    pools\n  }\n}) => {\n  pools.forEach(poolData => {\n    state.pools.byAddress[poolData.address] = { ...state.pools.byAddress[poolData.address],\n      data: poolData\n    };\n  });\n}).addCase(addPoolKeys, (state, {\n  payload: {\n    poolAddresses\n  }\n}) => {\n  poolAddresses.forEach(address => {\n    if (!state.pools.byAddress[address]) {\n      state.pools.byAddress[address] = {\n        data: undefined,\n        chartData: undefined,\n        transactions: undefined\n      };\n    }\n  });\n}).addCase(updatePoolChartData, (state, {\n  payload: {\n    poolAddress,\n    chartData\n  }\n}) => {\n  state.pools.byAddress[poolAddress] = { ...state.pools.byAddress[poolAddress],\n    chartData\n  };\n}).addCase(updatePoolTransactions, (state, {\n  payload: {\n    poolAddress,\n    transactions\n  }\n}) => {\n  state.pools.byAddress[poolAddress] = { ...state.pools.byAddress[poolAddress],\n    transactions\n  };\n}) // Tokens actions\n.addCase(updateTokenData, (state, {\n  payload: {\n    tokens\n  }\n}) => {\n  tokens.forEach(tokenData => {\n    state.tokens.byAddress[tokenData.address] = { ...state.tokens.byAddress[tokenData.address],\n      data: tokenData\n    };\n  });\n}).addCase(addTokenKeys, (state, {\n  payload: {\n    tokenAddresses\n  }\n}) => {\n  tokenAddresses.forEach(address => {\n    if (!state.tokens.byAddress[address]) {\n      state.tokens.byAddress[address] = {\n        poolAddresses: undefined,\n        data: undefined,\n        chartData: undefined,\n        priceData: {},\n        transactions: undefined\n      };\n    }\n  });\n}).addCase(addTokenPoolAddresses, (state, {\n  payload: {\n    tokenAddress,\n    poolAddresses\n  }\n}) => {\n  state.tokens.byAddress[tokenAddress] = { ...state.tokens.byAddress[tokenAddress],\n    poolAddresses\n  };\n}).addCase(updateTokenChartData, (state, {\n  payload: {\n    tokenAddress,\n    chartData\n  }\n}) => {\n  state.tokens.byAddress[tokenAddress] = { ...state.tokens.byAddress[tokenAddress],\n    chartData\n  };\n}).addCase(updateTokenTransactions, (state, {\n  payload: {\n    tokenAddress,\n    transactions\n  }\n}) => {\n  state.tokens.byAddress[tokenAddress] = { ...state.tokens.byAddress[tokenAddress],\n    transactions\n  };\n}).addCase(updateTokenPriceData, (state, {\n  payload: {\n    tokenAddress,\n    secondsInterval,\n    priceData,\n    oldestFetchedTimestamp\n  }\n}) => {\n  state.tokens.byAddress[tokenAddress] = { ...state.tokens.byAddress[tokenAddress],\n    priceData: { ...state.tokens.byAddress[tokenAddress].priceData,\n      [secondsInterval]: priceData,\n      oldestFetchedTimestamp\n    }\n  };\n}));","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/index.ts"],"names":["createReducer","updateProtocolData","updateProtocolChartData","updateProtocolTransactions","updatePoolData","addPoolKeys","updatePoolChartData","updatePoolTransactions","updateTokenData","addTokenKeys","addTokenPoolAddresses","updateTokenChartData","updateTokenPriceData","updateTokenTransactions","initialState","protocol","overview","undefined","chartData","transactions","pools","byAddress","tokens","builder","addCase","state","payload","protocolData","forEach","poolData","address","data","poolAddresses","poolAddress","tokenData","tokenAddresses","priceData","tokenAddress","secondsInterval","oldestFetchedTimestamp"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createReducer } from '@reduxjs/toolkit'\nimport { InfoState } from './types'\nimport {\n  updateProtocolData,\n  updateProtocolChartData,\n  updateProtocolTransactions,\n  updatePoolData,\n  addPoolKeys,\n  updatePoolChartData,\n  updatePoolTransactions,\n  updateTokenData,\n  addTokenKeys,\n  addTokenPoolAddresses,\n  updateTokenChartData,\n  updateTokenPriceData,\n  updateTokenTransactions,\n} from './actions'\n\nconst initialState: InfoState = {\n  protocol: {\n    overview: undefined,\n    chartData: undefined,\n    transactions: undefined,\n  },\n  pools: { byAddress: {} },\n  tokens: { byAddress: {} },\n}\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    // Protocol actions\n    .addCase(updateProtocolData, (state, { payload: { protocolData } }) => {\n      state.protocol.overview = protocolData\n    })\n    .addCase(updateProtocolChartData, (state, { payload: { chartData } }) => {\n      state.protocol.chartData = chartData\n    })\n    .addCase(updateProtocolTransactions, (state, { payload: { transactions } }) => {\n      state.protocol.transactions = transactions\n    })\n    // Pools actions\n    .addCase(updatePoolData, (state, { payload: { pools } }) => {\n      pools.forEach((poolData) => {\n        state.pools.byAddress[poolData.address] = {\n          ...state.pools.byAddress[poolData.address],\n          data: poolData,\n        }\n      })\n    })\n    .addCase(addPoolKeys, (state, { payload: { poolAddresses } }) => {\n      poolAddresses.forEach((address) => {\n        if (!state.pools.byAddress[address]) {\n          state.pools.byAddress[address] = {\n            data: undefined,\n            chartData: undefined,\n            transactions: undefined,\n          }\n        }\n      })\n    })\n    .addCase(updatePoolChartData, (state, { payload: { poolAddress, chartData } }) => {\n      state.pools.byAddress[poolAddress] = { ...state.pools.byAddress[poolAddress], chartData }\n    })\n    .addCase(updatePoolTransactions, (state, { payload: { poolAddress, transactions } }) => {\n      state.pools.byAddress[poolAddress] = { ...state.pools.byAddress[poolAddress], transactions }\n    })\n    // Tokens actions\n    .addCase(updateTokenData, (state, { payload: { tokens } }) => {\n      tokens.forEach((tokenData) => {\n        state.tokens.byAddress[tokenData.address] = {\n          ...state.tokens.byAddress[tokenData.address],\n          data: tokenData,\n        }\n      })\n    })\n    .addCase(addTokenKeys, (state, { payload: { tokenAddresses } }) => {\n      tokenAddresses.forEach((address) => {\n        if (!state.tokens.byAddress[address]) {\n          state.tokens.byAddress[address] = {\n            poolAddresses: undefined,\n            data: undefined,\n            chartData: undefined,\n            priceData: {},\n            transactions: undefined,\n          }\n        }\n      })\n    })\n    .addCase(addTokenPoolAddresses, (state, { payload: { tokenAddress, poolAddresses } }) => {\n      state.tokens.byAddress[tokenAddress] = { ...state.tokens.byAddress[tokenAddress], poolAddresses }\n    })\n    .addCase(updateTokenChartData, (state, { payload: { tokenAddress, chartData } }) => {\n      state.tokens.byAddress[tokenAddress] = { ...state.tokens.byAddress[tokenAddress], chartData }\n    })\n    .addCase(updateTokenTransactions, (state, { payload: { tokenAddress, transactions } }) => {\n      state.tokens.byAddress[tokenAddress] = { ...state.tokens.byAddress[tokenAddress], transactions }\n    })\n    .addCase(\n      updateTokenPriceData,\n      (state, { payload: { tokenAddress, secondsInterval, priceData, oldestFetchedTimestamp } }) => {\n        state.tokens.byAddress[tokenAddress] = {\n          ...state.tokens.byAddress[tokenAddress],\n          priceData: {\n            ...state.tokens.byAddress[tokenAddress].priceData,\n            [secondsInterval]: priceData,\n            oldestFetchedTimestamp,\n          },\n        }\n      },\n    ),\n)\n"]},"metadata":{},"sourceType":"module"}