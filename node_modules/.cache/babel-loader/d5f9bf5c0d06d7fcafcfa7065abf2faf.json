{"ast":null,"code":"export var PoolIds;(function(PoolIds){PoolIds[\"poolBasic\"]=\"poolBasic\";PoolIds[\"poolUnlimited\"]=\"poolUnlimited\";})(PoolIds||(PoolIds={}));export var PoolCategory;(function(PoolCategory){PoolCategory[\"COMMUNITY\"]=\"Community\";PoolCategory[\"CORE\"]=\"Core\";PoolCategory[\"BINANCE\"]=\"Binance\";PoolCategory[\"AUTO\"]=\"Auto\";})(PoolCategory||(PoolCategory={}));export var LotteryStatus;(function(LotteryStatus){LotteryStatus[\"PENDING\"]=\"pending\";LotteryStatus[\"OPEN\"]=\"open\";LotteryStatus[\"CLOSE\"]=\"close\";LotteryStatus[\"CLAIMABLE\"]=\"claimable\";})(LotteryStatus||(LotteryStatus={}));// Note: this status is slightly different compared to 'status' comfing\n// from Farm Auction smart contract\nexport var AuctionStatus;(function(AuctionStatus){AuctionStatus[AuctionStatus[\"ToBeAnnounced\"]=0]=\"ToBeAnnounced\";AuctionStatus[AuctionStatus[\"Pending\"]=1]=\"Pending\";AuctionStatus[AuctionStatus[\"Open\"]=2]=\"Open\";AuctionStatus[AuctionStatus[\"Finished\"]=3]=\"Finished\";AuctionStatus[AuctionStatus[\"Closed\"]=4]=\"Closed\";})(AuctionStatus||(AuctionStatus={}));","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/config/constants/types.ts"],"names":["PoolIds","PoolCategory","LotteryStatus","AuctionStatus"],"mappings":"AAyBA,UAAYA,CAAAA,OAAZ,C,UAAYA,O,EAAAA,O,0BAAAA,O,qCAAAA,O,GAAAA,O,MA8BZ,UAAYC,CAAAA,YAAZ,C,UAAYA,Y,EAAAA,Y,0BAAAA,Y,gBAAAA,Y,sBAAAA,Y,mBAAAA,Y,GAAAA,Y,MA0FZ,UAAYC,CAAAA,aAAZ,C,UAAYA,a,EAAAA,a,sBAAAA,a,gBAAAA,a,kBAAAA,a,6BAAAA,a,GAAAA,a,MAkCZ;AACA;AACA,UAAYC,CAAAA,aAAZ,C,UAAYA,a,EAAAA,a,CAAAA,a,qCAAAA,a,CAAAA,a,yBAAAA,a,CAAAA,a,mBAAAA,a,CAAAA,a,2BAAAA,a,CAAAA,a,0BAAAA,a,GAAAA,a","sourcesContent":["import BigNumber from 'bignumber.js'\nimport { Token } from '@pancakeswap/sdk'\n\nexport type TranslatableText =\n  | string\n  | {\n      key: string\n      data?: {\n        [key: string]: string | number\n      }\n    }\nexport interface Address {\n  97?: string\n  56: string\n}\n\nexport interface SerializedToken {\n  chainId: number\n  address: string\n  decimals: number\n  symbol?: string\n  name?: string\n  projectLink?: string\n}\n\nexport enum PoolIds {\n  poolBasic = 'poolBasic',\n  poolUnlimited = 'poolUnlimited',\n}\n\nexport type IfoStatus = 'idle' | 'coming_soon' | 'live' | 'finished'\n\ninterface IfoPoolInfo {\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  distributionRatio: number // Range [0-1]\n}\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  currency: Token\n  token: Token\n  releaseBlockNumber: number\n  articleUrl: string\n  campaignId: string\n  tokenOfferingPrice: number\n  version: number\n  [PoolIds.poolBasic]?: IfoPoolInfo\n  [PoolIds.poolUnlimited]: IfoPoolInfo\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n  'AUTO' = 'Auto',\n}\n\ninterface FarmConfigBaseProps {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  multiplier?: string\n  isCommunity?: boolean\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface SerializedFarmConfig extends FarmConfigBaseProps {\n  token: SerializedToken\n  quoteToken: SerializedToken\n}\n\nexport interface DeserializedFarmConfig extends FarmConfigBaseProps {\n  token: Token\n  quoteToken: Token\n}\n\ninterface PoolConfigBaseProps {\n  sousId: number\n  contractAddress: Address\n  poolCategory: PoolCategory\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  enableEmergencyWithdraw?: boolean\n}\n\nexport interface SerializedPoolConfig extends PoolConfigBaseProps {\n  earningToken: SerializedToken\n  stakingToken: SerializedToken\n}\n\nexport interface DeserializedPoolConfig extends PoolConfigBaseProps {\n  earningToken: Token\n  stakingToken: Token\n}\n\nexport type Images = {\n  lg: string\n  md: string\n  sm: string\n  ipfs?: string\n}\n\nexport type TeamImages = {\n  alt: string\n} & Images\n\nexport type Team = {\n  id: number\n  name: string\n  description: string\n  isJoinable?: boolean\n  users: number\n  points: number\n  images: TeamImages\n  background: string\n  textColor: string\n}\n\nexport type CampaignType = 'ifo' | 'teambattle' | 'participation'\n\nexport type Campaign = {\n  id: string\n  type: CampaignType\n  title?: TranslatableText\n  description?: TranslatableText\n  badge?: string\n}\n\nexport type PageMeta = {\n  title: string\n  description?: string\n  image?: string\n}\n\nexport enum LotteryStatus {\n  PENDING = 'pending',\n  OPEN = 'open',\n  CLOSE = 'close',\n  CLAIMABLE = 'claimable',\n}\n\nexport interface LotteryTicket {\n  id: string\n  number: string\n  status: boolean\n  rewardBracket?: number\n  roundId?: string\n  cakeReward?: string\n}\n\nexport interface LotteryTicketClaimData {\n  ticketsWithUnclaimedRewards: LotteryTicket[]\n  allWinningTickets: LotteryTicket[]\n  cakeTotal: BigNumber\n  roundId: string\n}\n\n// Farm Auction\nexport interface FarmAuctionBidderConfig {\n  account: string\n  farmName: string\n  tokenAddress: string\n  quoteToken: Token\n  tokenName: string\n  projectSite?: string\n  lpAddress?: string\n}\n\n// Note: this status is slightly different compared to 'status' comfing\n// from Farm Auction smart contract\nexport enum AuctionStatus {\n  ToBeAnnounced, // No specific dates/blocks to display\n  Pending, // Auction is scheduled but not live yet (i.e. waiting for startBlock)\n  Open, // Auction is open for bids\n  Finished, // Auction end block is reached, bidding is not possible\n  Closed, // Auction was closed in smart contract\n}\n\nexport interface Auction {\n  id: number\n  status: AuctionStatus\n  startBlock: number\n  startDate: Date\n  endBlock: number\n  endDate: Date\n  auctionDuration: number\n  initialBidAmount: number\n  topLeaderboard: number\n  leaderboardThreshold: BigNumber\n}\n\nexport interface BidderAuction {\n  id: number\n  amount: BigNumber\n  claimed: boolean\n}\n\nexport interface Bidder extends FarmAuctionBidderConfig {\n  position?: number\n  isTopPosition: boolean\n  samePositionAsAbove: boolean\n  amount: BigNumber\n}\n\nexport interface ConnectedBidder {\n  account: string\n  isWhitelisted: boolean\n  bidderData?: Bidder\n}\n"]},"metadata":{},"sourceType":"module"}