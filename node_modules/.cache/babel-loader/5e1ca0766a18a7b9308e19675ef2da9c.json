{"ast":null,"code":"var _jsxFileName = \"/Volumes/evo970/lou/madDex-master/src/views/Nft/market/components/BuySellModals/SellModal/TransferStage.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Flex, Grid, Text, Button, Input, BinanceIcon, ErrorIcon } from '@pancakeswap/uikit';\nimport { useWeb3React } from '@web3-react/core';\nimport { useTranslation } from 'contexts/Localization';\nimport { Divider, RoundedImage } from '../shared/styles';\nimport { GreyedOutContainer } from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TransferStage = ({\n  nftToSell,\n  lowestPrice,\n  transferAddress,\n  setTransferAddress,\n  isInvalidTransferAddress,\n  continueToNextStage\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const {\n    account\n  } = useWeb3React();\n  const transferAddressEqualsConnectedAddress = transferAddress.toLowerCase() === account.toLowerCase();\n\n  const getErrorText = () => {\n    if (isInvalidTransferAddress) {\n      return t('That’s not a Binance Smart Chain wallet address.');\n    }\n\n    if (transferAddressEqualsConnectedAddress) {\n      return t('This address is the one that is currently connected');\n    }\n\n    return null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      fontSize: \"24px\",\n      bold: true,\n      px: \"16px\",\n      pt: \"16px\",\n      children: t('Transfer to New Wallet')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      p: \"16px\",\n      children: [/*#__PURE__*/_jsxDEV(RoundedImage, {\n        src: nftToSell.image.thumbnail,\n        height: 68,\n        width: 68,\n        mr: \"8px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        flex: \"1\",\n        gridTemplateColumns: \"1fr 1fr\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          bold: true,\n          children: nftToSell.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"12px\",\n          color: \"textSubtle\",\n          textAlign: \"right\",\n          children: nftToSell.collectionName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          small: true,\n          color: \"textSubtle\",\n          children: t('Lowest price')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          justifyContent: \"flex-end\",\n          children: [/*#__PURE__*/_jsxDEV(BinanceIcon, {\n            width: 16,\n            height: 16,\n            mr: \"4px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            small: true,\n            children: lowestPrice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GreyedOutContainer, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"12px\",\n        color: \"secondary\",\n        textTransform: \"uppercase\",\n        bold: true,\n        children: t('Receiving address')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        scale: \"sm\",\n        isWarning: isInvalidTransferAddress || transferAddressEqualsConnectedAddress,\n        placeholder: t('Paste BSC address'),\n        value: transferAddress,\n        onChange: e => setTransferAddress(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), isInvalidTransferAddress || transferAddressEqualsConnectedAddress && /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"12px\",\n        color: \"failure\",\n        mt: \"4px\",\n        children: getErrorText()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      gridTemplateColumns: \"32px 1fr\",\n      p: \"16px\",\n      maxWidth: \"360px\",\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        alignSelf: \"flex-start\",\n        children: /*#__PURE__*/_jsxDEV(ErrorIcon, {\n          width: 24,\n          height: 24,\n          color: \"textSubtle\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        small: true,\n        color: \"textSubtle\",\n        children: t('This action will send your wallet to the address you have indicated above. Make sure it’s the correct')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      px: \"16px\",\n      pb: \"16px\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        mb: \"8px\",\n        onClick: continueToNextStage,\n        disabled: isInvalidTransferAddress || transferAddress.length === 0 || transferAddressEqualsConnectedAddress,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TransferStage, \"BMrHDyyq4uC6OiQr4QtbrPp+6H8=\", false, function () {\n  return [useTranslation, useWeb3React];\n});\n\n_c = TransferStage;\nexport default TransferStage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransferStage\");","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/components/BuySellModals/SellModal/TransferStage.tsx"],"names":["React","Flex","Grid","Text","Button","Input","BinanceIcon","ErrorIcon","useWeb3React","useTranslation","Divider","RoundedImage","GreyedOutContainer","TransferStage","nftToSell","lowestPrice","transferAddress","setTransferAddress","isInvalidTransferAddress","continueToNextStage","t","account","transferAddressEqualsConnectedAddress","toLowerCase","getErrorText","image","thumbnail","name","collectionName","e","target","value","length"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Flex, Grid, Text, Button, Input, BinanceIcon, ErrorIcon } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { NftToken } from 'state/nftMarket/types'\nimport { Divider, RoundedImage } from '../shared/styles'\nimport { GreyedOutContainer } from './styles'\n\ninterface TransferStageProps {\n  nftToSell: NftToken\n  lowestPrice: number\n  transferAddress: string\n  setTransferAddress: React.Dispatch<React.SetStateAction<string>>\n  isInvalidTransferAddress: boolean\n  continueToNextStage: () => void\n}\n\nconst TransferStage: React.FC<TransferStageProps> = ({\n  nftToSell,\n  lowestPrice,\n  transferAddress,\n  setTransferAddress,\n  isInvalidTransferAddress,\n  continueToNextStage,\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const transferAddressEqualsConnectedAddress = transferAddress.toLowerCase() === account.toLowerCase()\n  const getErrorText = () => {\n    if (isInvalidTransferAddress) {\n      return t('That’s not a Binance Smart Chain wallet address.')\n    }\n    if (transferAddressEqualsConnectedAddress) {\n      return t('This address is the one that is currently connected')\n    }\n    return null\n  }\n  return (\n    <>\n      <Text fontSize=\"24px\" bold px=\"16px\" pt=\"16px\">\n        {t('Transfer to New Wallet')}\n      </Text>\n      <Flex p=\"16px\">\n        <RoundedImage src={nftToSell.image.thumbnail} height={68} width={68} mr=\"8px\" />\n        <Grid flex=\"1\" gridTemplateColumns=\"1fr 1fr\" alignItems=\"center\">\n          <Text bold>{nftToSell.name}</Text>\n          <Text fontSize=\"12px\" color=\"textSubtle\" textAlign=\"right\">\n            {nftToSell.collectionName}\n          </Text>\n          <Text small color=\"textSubtle\">\n            {t('Lowest price')}\n          </Text>\n          <Flex alignItems=\"center\" justifyContent=\"flex-end\">\n            <BinanceIcon width={16} height={16} mr=\"4px\" />\n            <Text small>{lowestPrice}</Text>\n          </Flex>\n        </Grid>\n      </Flex>\n      <GreyedOutContainer>\n        <Text fontSize=\"12px\" color=\"secondary\" textTransform=\"uppercase\" bold>\n          {t('Receiving address')}\n        </Text>\n        <Input\n          scale=\"sm\"\n          isWarning={isInvalidTransferAddress || transferAddressEqualsConnectedAddress}\n          placeholder={t('Paste BSC address')}\n          value={transferAddress}\n          onChange={(e) => setTransferAddress(e.target.value)}\n        />\n        {isInvalidTransferAddress ||\n          (transferAddressEqualsConnectedAddress && (\n            <Text fontSize=\"12px\" color=\"failure\" mt=\"4px\">\n              {getErrorText()}\n            </Text>\n          ))}\n      </GreyedOutContainer>\n      <Grid gridTemplateColumns=\"32px 1fr\" p=\"16px\" maxWidth=\"360px\">\n        <Flex alignSelf=\"flex-start\">\n          <ErrorIcon width={24} height={24} color=\"textSubtle\" />\n        </Flex>\n        <Text small color=\"textSubtle\">\n          {t('This action will send your wallet to the address you have indicated above. Make sure it’s the correct')}\n        </Text>\n      </Grid>\n      <Divider />\n      <Flex flexDirection=\"column\" px=\"16px\" pb=\"16px\">\n        <Button\n          mb=\"8px\"\n          onClick={continueToNextStage}\n          disabled={isInvalidTransferAddress || transferAddress.length === 0 || transferAddressEqualsConnectedAddress}\n        >\n          Confirm\n        </Button>\n      </Flex>\n    </>\n  )\n}\n\nexport default TransferStage\n"]},"metadata":{},"sourceType":"module"}