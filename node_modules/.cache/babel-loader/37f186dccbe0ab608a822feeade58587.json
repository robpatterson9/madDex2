{"ast":null,"code":"import { request, gql } from 'graphql-request';\nimport { INFO_CLIENT } from 'config/constants/endpoints';\nimport { PCS_V2_START } from 'config/constants/info';\nimport { mapDayData, fetchChartData } from '../helpers';\n\nconst getTokenChartData = async (skip, address) => {\n  try {\n    const query = gql`\n      query tokenDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\n        tokenDayDatas(\n          first: 1000\n          skip: $skip\n          where: { token: $address, date_gt: $startTime }\n          orderBy: date\n          orderDirection: asc\n        ) {\n          date\n          dailyVolumeUSD\n          totalLiquidityUSD\n        }\n      }\n    `;\n    const {\n      tokenDayDatas\n    } = await request(INFO_CLIENT, query, {\n      startTime: PCS_V2_START,\n      skip,\n      address\n    });\n    const data = tokenDayDatas.map(mapDayData);\n    return {\n      data,\n      error: false\n    };\n  } catch (error) {\n    console.error('Failed to fetch token chart data', error);\n    return {\n      error: true\n    };\n  }\n};\n\nconst fetchTokenChartData = async address => {\n  return fetchChartData(getTokenChartData, address);\n};\n\nexport default fetchTokenChartData;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/info/queries/tokens/chartData.ts"],"names":["request","gql","INFO_CLIENT","PCS_V2_START","mapDayData","fetchChartData","getTokenChartData","skip","address","query","tokenDayDatas","startTime","data","map","error","console","fetchTokenChartData"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,GAAlB,QAA6B,iBAA7B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AAEA,SAASC,YAAT,QAA6B,uBAA7B;AAEA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,YAA3C;;AAEA,MAAMC,iBAAiB,GAAG,OAAOC,IAAP,EAAqBC,OAArB,KAA2F;AACnH,MAAI;AACF,UAAMC,KAAK,GAAGR,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAdI;AAeA,UAAM;AAAES,MAAAA;AAAF,QAAoB,MAAMV,OAAO,CAAwBE,WAAxB,EAAqCO,KAArC,EAA4C;AACjFE,MAAAA,SAAS,EAAER,YADsE;AAEjFI,MAAAA,IAFiF;AAGjFC,MAAAA;AAHiF,KAA5C,CAAvC;AAKA,UAAMI,IAAI,GAAGF,aAAa,CAACG,GAAd,CAAkBT,UAAlB,CAAb;AACA,WAAO;AAAEQ,MAAAA,IAAF;AAAQE,MAAAA,KAAK,EAAE;AAAf,KAAP;AACD,GAvBD,CAuBE,OAAOA,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAc,kCAAd,EAAkDA,KAAlD;AACA,WAAO;AAAEA,MAAAA,KAAK,EAAE;AAAT,KAAP;AACD;AACF,CA5BD;;AA8BA,MAAME,mBAAmB,GAAG,MAAOR,OAAP,IAA6E;AACvG,SAAOH,cAAc,CAACC,iBAAD,EAAoBE,OAApB,CAArB;AACD,CAFD;;AAIA,eAAeQ,mBAAf","sourcesContent":["import { request, gql } from 'graphql-request'\nimport { INFO_CLIENT } from 'config/constants/endpoints'\nimport { ChartEntry } from 'state/info/types'\nimport { PCS_V2_START } from 'config/constants/info'\nimport { TokenDayDatasResponse } from '../types'\nimport { mapDayData, fetchChartData } from '../helpers'\n\nconst getTokenChartData = async (skip: number, address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  try {\n    const query = gql`\n      query tokenDayDatas($startTime: Int!, $skip: Int!, $address: Bytes!) {\n        tokenDayDatas(\n          first: 1000\n          skip: $skip\n          where: { token: $address, date_gt: $startTime }\n          orderBy: date\n          orderDirection: asc\n        ) {\n          date\n          dailyVolumeUSD\n          totalLiquidityUSD\n        }\n      }\n    `\n    const { tokenDayDatas } = await request<TokenDayDatasResponse>(INFO_CLIENT, query, {\n      startTime: PCS_V2_START,\n      skip,\n      address,\n    })\n    const data = tokenDayDatas.map(mapDayData)\n    return { data, error: false }\n  } catch (error) {\n    console.error('Failed to fetch token chart data', error)\n    return { error: true }\n  }\n}\n\nconst fetchTokenChartData = async (address: string): Promise<{ data?: ChartEntry[]; error: boolean }> => {\n  return fetchChartData(getTokenChartData, address)\n}\n\nexport default fetchTokenChartData\n"]},"metadata":{},"sourceType":"module"}