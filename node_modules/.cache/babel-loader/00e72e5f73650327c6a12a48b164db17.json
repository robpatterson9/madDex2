{"ast":null,"code":"import{useMemo}from'react';import{useSelector}from'react-redux';import useActiveWeb3React from'hooks/useActiveWeb3React';import{deserializeToken}from'./helpers';export default function useUserAddedTokens(){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var serializedTokensMap=useSelector(function(_ref){var tokens=_ref.user.tokens;return tokens;});return useMemo(function(){var _serializedTokensMap;if(!chainId)return[];return Object.values((_serializedTokensMap=serializedTokensMap===null||serializedTokensMap===void 0?void 0:serializedTokensMap[chainId])!==null&&_serializedTokensMap!==void 0?_serializedTokensMap:{}).map(deserializeToken);},[serializedTokensMap,chainId]);}","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/state/user/hooks/useUserAddedTokens.ts"],"names":["useMemo","useSelector","useActiveWeb3React","deserializeToken","useUserAddedTokens","chainId","serializedTokensMap","tokens","user","Object","values","map"],"mappings":"AAAA,OAASA,OAAT,KAAwB,OAAxB,CAEA,OAASC,WAAT,KAA4B,aAA5B,CACA,MAAOC,CAAAA,kBAAP,KAA+B,0BAA/B,CAEA,OAASC,gBAAT,KAAiC,WAAjC,CAEA,cAAe,SAASC,CAAAA,kBAAT,EAAuC,CACpD,wBAAoBF,kBAAkB,EAAtC,CAAQG,OAAR,qBAAQA,OAAR,CACA,GAAMC,CAAAA,mBAAmB,CAAGL,WAAW,CAAuC,kBAAWM,CAAAA,MAAX,MAAGC,IAAH,CAAWD,MAAX,OAA0BA,CAAAA,MAA1B,EAAvC,CAAvC,CAEA,MAAOP,CAAAA,OAAO,CAAC,UAAM,0BACnB,GAAI,CAACK,OAAL,CAAc,MAAO,EAAP,CACd,MAAOI,CAAAA,MAAM,CAACC,MAAP,uBAAcJ,mBAAd,SAAcA,mBAAd,iBAAcA,mBAAmB,CAAGD,OAAH,CAAjC,6DAA2D,EAA3D,EAA+DM,GAA/D,CAAmER,gBAAnE,CAAP,CACD,CAHa,CAGX,CAACG,mBAAD,CAAsBD,OAAtB,CAHW,CAAd,CAID","sourcesContent":["import { useMemo } from 'react'\nimport { ChainId, Token } from '@pancakeswap/sdk'\nimport { useSelector } from 'react-redux'\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\nimport { AppState } from '../../index'\nimport { deserializeToken } from './helpers'\n\nexport default function useUserAddedTokens(): Token[] {\n  const { chainId } = useActiveWeb3React()\n  const serializedTokensMap = useSelector<AppState, AppState['user']['tokens']>(({ user: { tokens } }) => tokens)\n\n  return useMemo(() => {\n    if (!chainId) return []\n    return Object.values(serializedTokensMap?.[chainId as ChainId] ?? {}).map(deserializeToken)\n  }, [serializedTokensMap, chainId])\n}\n"]},"metadata":{},"sourceType":"module"}