{"ast":null,"code":"import React,{useEffect}from'react';import{Grid}from'@pancakeswap/uikit';import{getAddress}from'@ethersproject/address';import orderBy from'lodash/orderBy';import{useAppDispatch}from'state';import{useNftsFromCollection}from'state/nftMarket/hooks';import{fetchNftsFromCollections}from'state/nftMarket/reducer';import GridPlaceholder from'../../components/GridPlaceholder';import{CollectibleLinkCard}from'../../components/CollectibleCard';import{pancakeBunniesAddress}from'../../constants';import useAllPancakeBunnyNfts from'../../hooks/useAllPancakeBunnyNfts';import{jsx as _jsx}from\"react/jsx-runtime\";var CollectionNfts=function CollectionNfts(_ref){var collection=_ref.collection,_ref$sortBy=_ref.sortBy,sortBy=_ref$sortBy===void 0?'updatedAt':_ref$sortBy;var address=collection.address;var checksummedAddress=getAddress(address);var dispatch=useAppDispatch();var isPBCollection=address===pancakeBunniesAddress;useEffect(function(){dispatch(fetchNftsFromCollections(checksummedAddress));},[checksummedAddress,dispatch]);var nfts=useNftsFromCollection(checksummedAddress);var allPancakeBunnyNfts=useAllPancakeBunnyNfts(address);var currentNfts=isPBCollection?allPancakeBunnyNfts:nfts===null||nfts===void 0?void 0:nfts.filter(function(nft){return nft.marketData.isTradable;});if(!currentNfts){return/*#__PURE__*/_jsx(GridPlaceholder,{});}var nftsToShow=orderBy(currentNfts,function(nft){return isPBCollection?nft.meta[sortBy]:Number(nft.marketData[sortBy]);},[sortBy==='currentAskPrice'?'asc':'desc']);return/*#__PURE__*/_jsx(Grid,{gridGap:\"16px\",gridTemplateColumns:['1fr',null,'repeat(3, 1fr)',null,'repeat(4, 1fr)'],alignItems:\"start\",children:nftsToShow.map(function(nft){return/*#__PURE__*/_jsx(CollectibleLinkCard,{nft:nft},\"\".concat(nft.tokenId,\"-\").concat(nft.collectionName));})});};export default CollectionNfts;","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/Nft/market/Collection/Items/CollectionNfts.tsx"],"names":["React","useEffect","Grid","getAddress","orderBy","useAppDispatch","useNftsFromCollection","fetchNftsFromCollections","GridPlaceholder","CollectibleLinkCard","pancakeBunniesAddress","useAllPancakeBunnyNfts","CollectionNfts","collection","sortBy","address","checksummedAddress","dispatch","isPBCollection","nfts","allPancakeBunnyNfts","currentNfts","filter","nft","marketData","isTradable","nftsToShow","meta","Number","map","tokenId","collectionName"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,IAAT,KAAqB,oBAArB,CACA,OAASC,UAAT,KAA2B,wBAA3B,CACA,MAAOC,CAAAA,OAAP,KAAoB,gBAApB,CACA,OAASC,cAAT,KAA+B,OAA/B,CACA,OAASC,qBAAT,KAAsC,uBAAtC,CAEA,OAASC,wBAAT,KAAyC,yBAAzC,CACA,MAAOC,CAAAA,eAAP,KAA4B,kCAA5B,CACA,OAASC,mBAAT,KAAoC,kCAApC,CACA,OAASC,qBAAT,KAAsC,iBAAtC,CACA,MAAOC,CAAAA,sBAAP,KAAmC,oCAAnC,C,2CAOA,GAAMC,CAAAA,cAA6C,CAAG,QAAhDA,CAAAA,cAAgD,MAA0C,IAAvCC,CAAAA,UAAuC,MAAvCA,UAAuC,kBAA3BC,MAA2B,CAA3BA,MAA2B,sBAAlB,WAAkB,aAC9F,GAAQC,CAAAA,OAAR,CAAoBF,UAApB,CAAQE,OAAR,CACA,GAAMC,CAAAA,kBAAkB,CAAGb,UAAU,CAACY,OAAD,CAArC,CACA,GAAME,CAAAA,QAAQ,CAAGZ,cAAc,EAA/B,CAEA,GAAMa,CAAAA,cAAc,CAAGH,OAAO,GAAKL,qBAAnC,CAEAT,SAAS,CAAC,UAAM,CACdgB,QAAQ,CAACV,wBAAwB,CAACS,kBAAD,CAAzB,CAAR,CACD,CAFQ,CAEN,CAACA,kBAAD,CAAqBC,QAArB,CAFM,CAAT,CAIA,GAAME,CAAAA,IAAI,CAAGb,qBAAqB,CAACU,kBAAD,CAAlC,CACA,GAAMI,CAAAA,mBAAmB,CAAGT,sBAAsB,CAACI,OAAD,CAAlD,CAEA,GAAMM,CAAAA,WAAW,CAAGH,cAAc,CAAGE,mBAAH,CAAyBD,IAAzB,SAAyBA,IAAzB,iBAAyBA,IAAI,CAAEG,MAAN,CAAa,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACC,UAAJ,CAAeC,UAAxB,EAAb,CAA3D,CAEA,GAAI,CAACJ,WAAL,CAAkB,CAChB,mBAAO,KAAC,eAAD,IAAP,CACD,CAED,GAAMK,CAAAA,UAAU,CAAGtB,OAAO,CACxBiB,WADwB,CAExB,SAACE,GAAD,QAAUL,CAAAA,cAAc,CAAGK,GAAG,CAACI,IAAJ,CAASb,MAAT,CAAH,CAAsBc,MAAM,CAACL,GAAG,CAACC,UAAJ,CAAeV,MAAf,CAAD,CAApD,EAFwB,CAGxB,CAACA,MAAM,GAAK,iBAAX,CAA+B,KAA/B,CAAuC,MAAxC,CAHwB,CAA1B,CAMA,mBACE,KAAC,IAAD,EACE,OAAO,CAAC,MADV,CAEE,mBAAmB,CAAE,CAAC,KAAD,CAAQ,IAAR,CAAc,gBAAd,CAAgC,IAAhC,CAAsC,gBAAtC,CAFvB,CAGE,UAAU,CAAC,OAHb,UAKGY,UAAU,CAACG,GAAX,CAAe,SAACN,GAAD,CAAS,CACvB,mBAAO,KAAC,mBAAD,EAAkE,GAAG,CAAEA,GAAvE,YAA6BA,GAAG,CAACO,OAAjC,aAA4CP,GAAG,CAACQ,cAAhD,EAAP,CACD,CAFA,CALH,EADF,CAWD,CArCD,CAuCA,cAAenB,CAAAA,cAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { Grid } from '@pancakeswap/uikit'\nimport { getAddress } from '@ethersproject/address'\nimport orderBy from 'lodash/orderBy'\nimport { useAppDispatch } from 'state'\nimport { useNftsFromCollection } from 'state/nftMarket/hooks'\nimport { Collection } from 'state/nftMarket/types'\nimport { fetchNftsFromCollections } from 'state/nftMarket/reducer'\nimport GridPlaceholder from '../../components/GridPlaceholder'\nimport { CollectibleLinkCard } from '../../components/CollectibleCard'\nimport { pancakeBunniesAddress } from '../../constants'\nimport useAllPancakeBunnyNfts from '../../hooks/useAllPancakeBunnyNfts'\n\ninterface CollectionNftsProps {\n  collection: Collection\n  sortBy?: string\n}\n\nconst CollectionNfts: React.FC<CollectionNftsProps> = ({ collection, sortBy = 'updatedAt' }) => {\n  const { address } = collection\n  const checksummedAddress = getAddress(address)\n  const dispatch = useAppDispatch()\n\n  const isPBCollection = address === pancakeBunniesAddress\n\n  useEffect(() => {\n    dispatch(fetchNftsFromCollections(checksummedAddress))\n  }, [checksummedAddress, dispatch])\n\n  const nfts = useNftsFromCollection(checksummedAddress)\n  const allPancakeBunnyNfts = useAllPancakeBunnyNfts(address)\n\n  const currentNfts = isPBCollection ? allPancakeBunnyNfts : nfts?.filter((nft) => nft.marketData.isTradable)\n\n  if (!currentNfts) {\n    return <GridPlaceholder />\n  }\n\n  const nftsToShow = orderBy(\n    currentNfts,\n    (nft) => (isPBCollection ? nft.meta[sortBy] : Number(nft.marketData[sortBy])),\n    [sortBy === 'currentAskPrice' ? 'asc' : 'desc'],\n  )\n\n  return (\n    <Grid\n      gridGap=\"16px\"\n      gridTemplateColumns={['1fr', null, 'repeat(3, 1fr)', null, 'repeat(4, 1fr)']}\n      alignItems=\"start\"\n    >\n      {nftsToShow.map((nft) => {\n        return <CollectibleLinkCard key={`${nft.tokenId}-${nft.collectionName}`} nft={nft} />\n      })}\n    </Grid>\n  )\n}\n\nexport default CollectionNfts\n"]},"metadata":{},"sourceType":"module"}