{"ast":null,"code":"import _slicedToArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"/Volumes/evo970/lou/madDex-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{toDate,add,differenceInHours}from'date-fns';import{BSC_BLOCK_TIME,DEFAULT_TOKEN_DECIMAL}from'config';import{getBidderInfo}from'config/constants/farmAuctions';import{simpleRpcProvider}from'utils/providers';import{FarmAuctionContractStatus}from'utils/types';import{AuctionStatus}from'config/constants/types';import{ethersToBigNumber}from'utils/bigNumber';export var FORM_ADDRESS='https://docs.google.com/forms/d/e/1FAIpQLScUkwbsMWwg7L5jjGjEcmv6RsoCNhFDkV3xEpRu2KcJrr47Sw/viewform';// Sorts bidders received from smart contract by bid amount in descending order (biggest -> smallest)\n// Also amends bidder information with getBidderInfo\n// auction is required if data will be used for table display, hence in reclaim and congratulations card its omitted\nexport var sortAuctionBidders=function sortAuctionBidders(bidders,auction){var sortedBidders=_toConsumableArray(bidders).sort(function(a,b){if(a.amount.lt(b.amount)){return 1;}if(a.amount.gt(b.amount)){return-1;}return 0;}).map(function(bidder,index){var bidderInfo=getBidderInfo(bidder.account);return _objectSpread(_objectSpread({},bidderInfo),{},{position:index+1,account:bidder.account,amount:bidder.amount});});// Positions need to be adjusted in case 2 bidders has the same bid amount\n// adjustedPosition will always increase by 1 in the following block for the first bidder\nvar adjustedPosition=0;return sortedBidders.map(function(bidder,index,unadjustedBidders){var amount=ethersToBigNumber(bidder.amount);var samePositionAsAbove=index===0?false:bidder.amount.eq(unadjustedBidders[index-1].amount);adjustedPosition=samePositionAsAbove?adjustedPosition:adjustedPosition+1;// Reclaim and congratulations card don't need auction data or isTopPosition\n// in this case it is set to false just to avoid TS errors\nvar isTopPosition=auction?index+1<=auction.topLeaderboard:false;// This is here in case we closed auction with less/more winners for some reason\nif(auction&&auction.leaderboardThreshold.gt(0)){isTopPosition=auction.leaderboardThreshold.lte(amount);}return _objectSpread(_objectSpread({},bidder),{},{position:adjustedPosition,isTopPosition:isTopPosition,samePositionAsAbove:samePositionAsAbove,amount:amount});});};// Determine if the auction is:\n// - Live and biddable\n// - Has been scheduled for specific future date\n// - Not announced yet\n// - Recently Finished/Closed\nvar getAuctionStatus=function getAuctionStatus(currentBlock,startBlock,endBlock,contractStatus){if(contractStatus===FarmAuctionContractStatus.Pending&&!startBlock&&!endBlock){return AuctionStatus.ToBeAnnounced;}if(contractStatus===FarmAuctionContractStatus.Close){return AuctionStatus.Closed;}if(currentBlock>=endBlock){return AuctionStatus.Finished;}if(contractStatus===FarmAuctionContractStatus.Open&&currentBlock<startBlock){return AuctionStatus.Pending;}if(contractStatus===FarmAuctionContractStatus.Open&&currentBlock>startBlock){return AuctionStatus.Open;}return AuctionStatus.ToBeAnnounced;};var getDateForBlock=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(currentBlock,block){var blocksUntilBlock,secondsUntilStart,_yield$simpleRpcProvi,timestamp;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:blocksUntilBlock=block-currentBlock;secondsUntilStart=blocksUntilBlock*BSC_BLOCK_TIME;// if block already happened we can get timestamp via .getBlock(block)\nif(!(currentBlock>block)){_context.next=14;break;}_context.prev=3;_context.next=6;return simpleRpcProvider.getBlock(block);case 6:_yield$simpleRpcProvi=_context.sent;timestamp=_yield$simpleRpcProvi.timestamp;return _context.abrupt(\"return\",toDate(timestamp*1000));case 11:_context.prev=11;_context.t0=_context[\"catch\"](3);add(new Date(),{seconds:secondsUntilStart});case 14:return _context.abrupt(\"return\",add(new Date(),{seconds:secondsUntilStart}));case 15:case\"end\":return _context.stop();}}},_callee,null,[[3,11]]);}));return function getDateForBlock(_x,_x2){return _ref.apply(this,arguments);};}();// Get additional auction information based on the date received from smart contract\nexport var processAuctionData=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(auctionId,auctionResponse){var processedAuctionData,currentBlock,startDate,endDate,auctionStatus;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:processedAuctionData=_objectSpread(_objectSpread({},auctionResponse),{},{topLeaderboard:auctionResponse.leaderboard.toNumber(),initialBidAmount:ethersToBigNumber(auctionResponse.initialBidAmount).div(DEFAULT_TOKEN_DECIMAL).toNumber(),leaderboardThreshold:ethersToBigNumber(auctionResponse.leaderboardThreshold),startBlock:auctionResponse.startBlock.toNumber(),endBlock:auctionResponse.endBlock.toNumber()});// Get all required data and blocks\n_context2.next=3;return simpleRpcProvider.getBlockNumber();case 3:currentBlock=_context2.sent;_context2.next=6;return getDateForBlock(currentBlock,processedAuctionData.startBlock);case 6:startDate=_context2.sent;_context2.next=9;return getDateForBlock(currentBlock,processedAuctionData.endBlock);case 9:endDate=_context2.sent;auctionStatus=getAuctionStatus(currentBlock,processedAuctionData.startBlock,processedAuctionData.endBlock,processedAuctionData.status);return _context2.abrupt(\"return\",_objectSpread(_objectSpread({id:auctionId,startDate:startDate,endDate:endDate,auctionDuration:differenceInHours(endDate,startDate)},processedAuctionData),{},{status:auctionStatus}));case 12:case\"end\":return _context2.stop();}}},_callee2);}));return function processAuctionData(_x3,_x4){return _ref2.apply(this,arguments);};}();export var processBidderAuctions=function processBidderAuctions(bidderAuctions){var _bidderAuctions=_slicedToArray(bidderAuctions,4),auctionIds=_bidderAuctions[0],bids=_bidderAuctions[1],claimed=_bidderAuctions[2],nextCursor=_bidderAuctions[3];var auctions=auctionIds.map(function(auctionId,index){return{id:auctionId.toNumber(),amount:ethersToBigNumber(bids[index]),claimed:claimed[index]};});return{auctions:auctions,nextCursor:nextCursor.toNumber()};};","map":{"version":3,"sources":["/Volumes/evo970/lou/madDex-master/src/views/FarmAuction/helpers.tsx"],"names":["toDate","add","differenceInHours","BSC_BLOCK_TIME","DEFAULT_TOKEN_DECIMAL","getBidderInfo","simpleRpcProvider","FarmAuctionContractStatus","AuctionStatus","ethersToBigNumber","FORM_ADDRESS","sortAuctionBidders","bidders","auction","sortedBidders","sort","a","b","amount","lt","gt","map","bidder","index","bidderInfo","account","position","adjustedPosition","unadjustedBidders","samePositionAsAbove","eq","isTopPosition","topLeaderboard","leaderboardThreshold","lte","getAuctionStatus","currentBlock","startBlock","endBlock","contractStatus","Pending","ToBeAnnounced","Close","Closed","Finished","Open","getDateForBlock","block","blocksUntilBlock","secondsUntilStart","getBlock","timestamp","Date","seconds","processAuctionData","auctionId","auctionResponse","processedAuctionData","leaderboard","toNumber","initialBidAmount","div","getBlockNumber","startDate","endDate","auctionStatus","status","id","auctionDuration","processBidderAuctions","bidderAuctions","auctionIds","bids","claimed","nextCursor","auctions"],"mappings":"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","sourcesContent":["import { toDate, add, differenceInHours } from 'date-fns'\nimport { BSC_BLOCK_TIME, DEFAULT_TOKEN_DECIMAL } from 'config'\nimport { getBidderInfo } from 'config/constants/farmAuctions'\nimport { simpleRpcProvider } from 'utils/providers'\nimport { AuctionsResponse, FarmAuctionContractStatus, BidsPerAuction, ViewBidderAuctionsResponse } from 'utils/types'\nimport { Auction, AuctionStatus, Bidder, BidderAuction } from 'config/constants/types'\nimport { ethersToBigNumber } from 'utils/bigNumber'\n\nexport const FORM_ADDRESS =\n  'https://docs.google.com/forms/d/e/1FAIpQLScUkwbsMWwg7L5jjGjEcmv6RsoCNhFDkV3xEpRu2KcJrr47Sw/viewform'\n\n// Sorts bidders received from smart contract by bid amount in descending order (biggest -> smallest)\n// Also amends bidder information with getBidderInfo\n// auction is required if data will be used for table display, hence in reclaim and congratulations card its omitted\nexport const sortAuctionBidders = (bidders: BidsPerAuction[], auction?: Auction): Bidder[] => {\n  const sortedBidders = [...bidders]\n    .sort((a, b) => {\n      if (a.amount.lt(b.amount)) {\n        return 1\n      }\n      if (a.amount.gt(b.amount)) {\n        return -1\n      }\n      return 0\n    })\n    .map((bidder, index) => {\n      const bidderInfo = getBidderInfo(bidder.account)\n      return {\n        ...bidderInfo,\n        position: index + 1,\n        account: bidder.account,\n        amount: bidder.amount,\n      }\n    })\n\n  // Positions need to be adjusted in case 2 bidders has the same bid amount\n  // adjustedPosition will always increase by 1 in the following block for the first bidder\n  let adjustedPosition = 0\n\n  return sortedBidders.map((bidder, index, unadjustedBidders) => {\n    const amount = ethersToBigNumber(bidder.amount)\n    const samePositionAsAbove = index === 0 ? false : bidder.amount.eq(unadjustedBidders[index - 1].amount)\n    adjustedPosition = samePositionAsAbove ? adjustedPosition : adjustedPosition + 1\n    // Reclaim and congratulations card don't need auction data or isTopPosition\n    // in this case it is set to false just to avoid TS errors\n    let isTopPosition = auction ? index + 1 <= auction.topLeaderboard : false\n    // This is here in case we closed auction with less/more winners for some reason\n    if (auction && auction.leaderboardThreshold.gt(0)) {\n      isTopPosition = auction.leaderboardThreshold.lte(amount)\n    }\n    return {\n      ...bidder,\n      position: adjustedPosition,\n      isTopPosition,\n      samePositionAsAbove,\n      amount,\n    }\n  })\n}\n\n// Determine if the auction is:\n// - Live and biddable\n// - Has been scheduled for specific future date\n// - Not announced yet\n// - Recently Finished/Closed\nconst getAuctionStatus = (\n  currentBlock: number,\n  startBlock: number,\n  endBlock: number,\n  contractStatus: FarmAuctionContractStatus,\n) => {\n  if (contractStatus === FarmAuctionContractStatus.Pending && !startBlock && !endBlock) {\n    return AuctionStatus.ToBeAnnounced\n  }\n  if (contractStatus === FarmAuctionContractStatus.Close) {\n    return AuctionStatus.Closed\n  }\n  if (currentBlock >= endBlock) {\n    return AuctionStatus.Finished\n  }\n  if (contractStatus === FarmAuctionContractStatus.Open && currentBlock < startBlock) {\n    return AuctionStatus.Pending\n  }\n  if (contractStatus === FarmAuctionContractStatus.Open && currentBlock > startBlock) {\n    return AuctionStatus.Open\n  }\n  return AuctionStatus.ToBeAnnounced\n}\n\nconst getDateForBlock = async (currentBlock: number, block: number) => {\n  const blocksUntilBlock = block - currentBlock\n  const secondsUntilStart = blocksUntilBlock * BSC_BLOCK_TIME\n  // if block already happened we can get timestamp via .getBlock(block)\n  if (currentBlock > block) {\n    try {\n      const { timestamp } = await simpleRpcProvider.getBlock(block)\n      return toDate(timestamp * 1000)\n    } catch {\n      add(new Date(), { seconds: secondsUntilStart })\n    }\n  }\n  return add(new Date(), { seconds: secondsUntilStart })\n}\n\n// Get additional auction information based on the date received from smart contract\nexport const processAuctionData = async (auctionId: number, auctionResponse: AuctionsResponse): Promise<Auction> => {\n  const processedAuctionData = {\n    ...auctionResponse,\n    topLeaderboard: auctionResponse.leaderboard.toNumber(),\n    initialBidAmount: ethersToBigNumber(auctionResponse.initialBidAmount).div(DEFAULT_TOKEN_DECIMAL).toNumber(),\n    leaderboardThreshold: ethersToBigNumber(auctionResponse.leaderboardThreshold),\n    startBlock: auctionResponse.startBlock.toNumber(),\n    endBlock: auctionResponse.endBlock.toNumber(),\n  }\n\n  // Get all required data and blocks\n  const currentBlock = await simpleRpcProvider.getBlockNumber()\n  const startDate = await getDateForBlock(currentBlock, processedAuctionData.startBlock)\n  const endDate = await getDateForBlock(currentBlock, processedAuctionData.endBlock)\n\n  const auctionStatus = getAuctionStatus(\n    currentBlock,\n    processedAuctionData.startBlock,\n    processedAuctionData.endBlock,\n    processedAuctionData.status,\n  )\n\n  return {\n    id: auctionId,\n    startDate,\n    endDate,\n    auctionDuration: differenceInHours(endDate, startDate),\n    ...processedAuctionData,\n    status: auctionStatus,\n  }\n}\n\nexport const processBidderAuctions = (\n  bidderAuctions: ViewBidderAuctionsResponse,\n): { auctions: BidderAuction[]; nextCursor: number } => {\n  const [auctionIds, bids, claimed, nextCursor] = bidderAuctions\n  const auctions = auctionIds.map((auctionId, index) => ({\n    id: auctionId.toNumber(),\n    amount: ethersToBigNumber(bids[index]),\n    claimed: claimed[index],\n  }))\n  return { auctions, nextCursor: nextCursor.toNumber() }\n}\n"]},"metadata":{},"sourceType":"module"}